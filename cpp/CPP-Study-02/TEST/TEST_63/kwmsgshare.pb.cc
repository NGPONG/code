// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kwmsgshare.proto

#include "kwmsgshare.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace KWMsg {
constexpr ProductPrice::ProductPrice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(int64_t{0}){}
struct ProductPriceDefaultTypeInternal {
  constexpr ProductPriceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProductPriceDefaultTypeInternal() {}
  union {
    ProductPrice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProductPriceDefaultTypeInternal _ProductPrice_default_instance_;
constexpr ProductContent::ProductContent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(int64_t{0}){}
struct ProductContentDefaultTypeInternal {
  constexpr ProductContentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProductContentDefaultTypeInternal() {}
  union {
    ProductContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProductContentDefaultTypeInternal _ProductContent_default_instance_;
constexpr ProductInfo::ProductInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : product_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shop_goods_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , refresh_cron_expr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(nullptr)
  , price_(nullptr)
  , maximum_sells_(int64_t{0})
  , listing_type_(0)

  , refresh_interval_(0)
  , remain_sells_(int64_t{0})
  , maximun_once_buys_(int64_t{0})
  , is_purchase_limit_(false){}
struct ProductInfoDefaultTypeInternal {
  constexpr ProductInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProductInfoDefaultTypeInternal() {}
  union {
    ProductInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProductInfoDefaultTypeInternal _ProductInfo_default_instance_;
constexpr RewardInfo::RewardInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reward_count_(int64_t{0})
  , reward_flag_(0){}
struct RewardInfoDefaultTypeInternal {
  constexpr RewardInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RewardInfoDefaultTypeInternal() {}
  union {
    RewardInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RewardInfoDefaultTypeInternal _RewardInfo_default_instance_;
constexpr WitchInfo::WitchInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , witch_role_res_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , witch_generalskillid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , witch_advancedskillid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , witch_uniqueskillid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , witch_versedskillid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , witch_awakeningskillid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , witch_extraskillid1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , witch_extraskillid2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , witch_level_(0)
  , witch_star_level_(0)
  , witch_total_fc_(0)
  , witch_hp_(0)
  , witch_defence_(0)
  , witch_speed_(0)
  , witch_attackmin_(0)
  , witch_attackmax_(0)
  , witch_crit_(0)
  , witch_critdmg_(0)
  , witch_hit_(0)
  , witch_resist_(0){}
struct WitchInfoDefaultTypeInternal {
  constexpr WitchInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WitchInfoDefaultTypeInternal() {}
  union {
    WitchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WitchInfoDefaultTypeInternal _WitchInfo_default_instance_;
constexpr GuildInfo::GuildInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guild_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , guild_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GuildInfoDefaultTypeInternal {
  constexpr GuildInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GuildInfoDefaultTypeInternal() {}
  union {
    GuildInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GuildInfoDefaultTypeInternal _GuildInfo_default_instance_;
constexpr PlayerInfo::PlayerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : botarena_defensive_team_()
  , botarena_attack_team_()
  , botaren_grade_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nick_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_frame_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , guild_info_(nullptr)
  , level_(0)
  , botarena_pre_season_rank_(0)
  , honor_point_(int64_t{0})
  , strategy_point_(int64_t{0})
  , shabow_token_(int64_t{0})
  , shabow_badge_(int64_t{0}){}
struct PlayerInfoDefaultTypeInternal {
  constexpr PlayerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
constexpr DrawCardInfo::DrawCardInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_debris_(0){}
struct DrawCardInfoDefaultTypeInternal {
  constexpr DrawCardInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrawCardInfoDefaultTypeInternal() {}
  union {
    DrawCardInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrawCardInfoDefaultTypeInternal _DrawCardInfo_default_instance_;
constexpr RewardList::RewardList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : list_(){}
struct RewardListDefaultTypeInternal {
  constexpr RewardListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RewardListDefaultTypeInternal() {}
  union {
    RewardList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RewardListDefaultTypeInternal _RewardList_default_instance_;
constexpr ReqAckLagTest::ReqAckLagTest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ReqAckLagTestDefaultTypeInternal {
  constexpr ReqAckLagTestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAckLagTestDefaultTypeInternal() {}
  union {
    ReqAckLagTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAckLagTestDefaultTypeInternal _ReqAckLagTest_default_instance_;
constexpr ReqAckHeartBeat::ReqAckHeartBeat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ReqAckHeartBeatDefaultTypeInternal {
  constexpr ReqAckHeartBeatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAckHeartBeatDefaultTypeInternal() {}
  union {
    ReqAckHeartBeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAckHeartBeatDefaultTypeInternal _ReqAckHeartBeat_default_instance_;
constexpr ReqLeaveGameServer::ReqLeaveGameServer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqLeaveGameServerDefaultTypeInternal {
  constexpr ReqLeaveGameServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqLeaveGameServerDefaultTypeInternal() {}
  union {
    ReqLeaveGameServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqLeaveGameServerDefaultTypeInternal _ReqLeaveGameServer_default_instance_;
constexpr PlayerEntryInfo::PlayerEntryInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , class_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_guid_(nullptr)
  , pos_(nullptr)
  , scene_id_(0){}
struct PlayerEntryInfoDefaultTypeInternal {
  constexpr PlayerEntryInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerEntryInfoDefaultTypeInternal() {}
  union {
    PlayerEntryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerEntryInfoDefaultTypeInternal _PlayerEntryInfo_default_instance_;
constexpr AckPlayerEntryList::AckPlayerEntryList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_list_(){}
struct AckPlayerEntryListDefaultTypeInternal {
  constexpr AckPlayerEntryListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckPlayerEntryListDefaultTypeInternal() {}
  union {
    AckPlayerEntryList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckPlayerEntryListDefaultTypeInternal _AckPlayerEntryList_default_instance_;
constexpr AckPlayerLeaveList::AckPlayerLeaveList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_list_(){}
struct AckPlayerLeaveListDefaultTypeInternal {
  constexpr AckPlayerLeaveListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckPlayerLeaveListDefaultTypeInternal() {}
  union {
    AckPlayerLeaveList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckPlayerLeaveListDefaultTypeInternal _AckPlayerLeaveList_default_instance_;
constexpr AckPlayerDataFinished::AckPlayerDataFinished(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_list_(){}
struct AckPlayerDataFinishedDefaultTypeInternal {
  constexpr AckPlayerDataFinishedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckPlayerDataFinishedDefaultTypeInternal() {}
  union {
    AckPlayerDataFinished _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckPlayerDataFinishedDefaultTypeInternal _AckPlayerDataFinished_default_instance_;
constexpr PosSyncUnit::PosSyncUnit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , pos_(nullptr)
  , orientation_(nullptr)
  , status_(0)
  , type_(0)
{}
struct PosSyncUnitDefaultTypeInternal {
  constexpr PosSyncUnitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PosSyncUnitDefaultTypeInternal() {}
  union {
    PosSyncUnit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PosSyncUnitDefaultTypeInternal _PosSyncUnit_default_instance_;
constexpr ReqAckPlayerPosSync::ReqAckPlayerPosSync(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sync_unit_(nullptr)
  , sequence_(0){}
struct ReqAckPlayerPosSyncDefaultTypeInternal {
  constexpr ReqAckPlayerPosSyncDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAckPlayerPosSyncDefaultTypeInternal() {}
  union {
    ReqAckPlayerPosSync _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAckPlayerPosSyncDefaultTypeInternal _ReqAckPlayerPosSync_default_instance_;
constexpr ReqSwapScene::ReqSwapScene(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , scene_id_(0){}
struct ReqSwapSceneDefaultTypeInternal {
  constexpr ReqSwapSceneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqSwapSceneDefaultTypeInternal() {}
  union {
    ReqSwapScene _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqSwapSceneDefaultTypeInternal _ReqSwapScene_default_instance_;
constexpr AckSwapScene::AckSwapScene(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , scene_id_(0){}
struct AckSwapSceneDefaultTypeInternal {
  constexpr AckSwapSceneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckSwapSceneDefaultTypeInternal() {}
  union {
    AckSwapScene _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckSwapSceneDefaultTypeInternal _AckSwapScene_default_instance_;
constexpr AckSwapSceneNotify::AckSwapSceneNotify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)

  , scene_id_(0){}
struct AckSwapSceneNotifyDefaultTypeInternal {
  constexpr AckSwapSceneNotifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckSwapSceneNotifyDefaultTypeInternal() {}
  union {
    AckSwapSceneNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckSwapSceneNotifyDefaultTypeInternal _AckSwapSceneNotify_default_instance_;
constexpr ReqAckPlayerChat::ReqAckPlayerChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_frame_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , chat_channel_(0)

  , chat_type_(0)
{}
struct ReqAckPlayerChatDefaultTypeInternal {
  constexpr ReqAckPlayerChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAckPlayerChatDefaultTypeInternal() {}
  union {
    ReqAckPlayerChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAckPlayerChatDefaultTypeInternal _ReqAckPlayerChat_default_instance_;
constexpr ReqCreateKcpObject::ReqCreateKcpObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqCreateKcpObjectDefaultTypeInternal {
  constexpr ReqCreateKcpObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCreateKcpObjectDefaultTypeInternal() {}
  union {
    ReqCreateKcpObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCreateKcpObjectDefaultTypeInternal _ReqCreateKcpObject_default_instance_;
constexpr AckCreateKcpObject::AckCreateKcpObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , server_port_(0)
  , conv_(0u){}
struct AckCreateKcpObjectDefaultTypeInternal {
  constexpr AckCreateKcpObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCreateKcpObjectDefaultTypeInternal() {}
  union {
    AckCreateKcpObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCreateKcpObjectDefaultTypeInternal _AckCreateKcpObject_default_instance_;
constexpr ReqEstablishKcpConnection::ReqEstablishKcpConnection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqEstablishKcpConnectionDefaultTypeInternal {
  constexpr ReqEstablishKcpConnectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqEstablishKcpConnectionDefaultTypeInternal() {}
  union {
    ReqEstablishKcpConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqEstablishKcpConnectionDefaultTypeInternal _ReqEstablishKcpConnection_default_instance_;
constexpr AckEstablishKcpConnection::AckEstablishKcpConnection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckEstablishKcpConnectionDefaultTypeInternal {
  constexpr AckEstablishKcpConnectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckEstablishKcpConnectionDefaultTypeInternal() {}
  union {
    AckEstablishKcpConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckEstablishKcpConnectionDefaultTypeInternal _AckEstablishKcpConnection_default_instance_;
constexpr ReqTryPushClientIntoQueueUp::ReqTryPushClientIntoQueueUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_(nullptr)
  , world_id_(0)
  , login_id_(0){}
struct ReqTryPushClientIntoQueueUpDefaultTypeInternal {
  constexpr ReqTryPushClientIntoQueueUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqTryPushClientIntoQueueUpDefaultTypeInternal() {}
  union {
    ReqTryPushClientIntoQueueUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqTryPushClientIntoQueueUpDefaultTypeInternal _ReqTryPushClientIntoQueueUp_default_instance_;
constexpr AckPushClientIntoQueueUp::AckPushClientIntoQueueUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , queue_up_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_(nullptr)
  , event_code_(0)

  , world_id_(0)
  , login_id_(0)
  , queue_up_port_(0){}
struct AckPushClientIntoQueueUpDefaultTypeInternal {
  constexpr AckPushClientIntoQueueUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckPushClientIntoQueueUpDefaultTypeInternal() {}
  union {
    AckPushClientIntoQueueUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckPushClientIntoQueueUpDefaultTypeInternal _AckPushClientIntoQueueUp_default_instance_;
constexpr ReqQueueUpGetCurWorldSuitProxy::ReqQueueUpGetCurWorldSuitProxy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transpond_id_(nullptr){}
struct ReqQueueUpGetCurWorldSuitProxyDefaultTypeInternal {
  constexpr ReqQueueUpGetCurWorldSuitProxyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqQueueUpGetCurWorldSuitProxyDefaultTypeInternal() {}
  union {
    ReqQueueUpGetCurWorldSuitProxy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqQueueUpGetCurWorldSuitProxyDefaultTypeInternal _ReqQueueUpGetCurWorldSuitProxy_default_instance_;
constexpr AckQueueUpGetCurWorldSuitProxy::AckQueueUpGetCurWorldSuitProxy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , world_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transpond_id_(nullptr)
  , world_port_(0){}
struct AckQueueUpGetCurWorldSuitProxyDefaultTypeInternal {
  constexpr AckQueueUpGetCurWorldSuitProxyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckQueueUpGetCurWorldSuitProxyDefaultTypeInternal() {}
  union {
    AckQueueUpGetCurWorldSuitProxy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckQueueUpGetCurWorldSuitProxyDefaultTypeInternal _AckQueueUpGetCurWorldSuitProxy_default_instance_;
constexpr ReqUpdatePlayerLastHeartbeatTS::ReqUpdatePlayerLastHeartbeatTS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ts_(int64_t{0}){}
struct ReqUpdatePlayerLastHeartbeatTSDefaultTypeInternal {
  constexpr ReqUpdatePlayerLastHeartbeatTSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqUpdatePlayerLastHeartbeatTSDefaultTypeInternal() {}
  union {
    ReqUpdatePlayerLastHeartbeatTS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqUpdatePlayerLastHeartbeatTSDefaultTypeInternal _ReqUpdatePlayerLastHeartbeatTS_default_instance_;
constexpr SyncQueueUpUserCancelOperation::SyncQueueUpUserCancelOperation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_id_(0){}
struct SyncQueueUpUserCancelOperationDefaultTypeInternal {
  constexpr SyncQueueUpUserCancelOperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncQueueUpUserCancelOperationDefaultTypeInternal() {}
  union {
    SyncQueueUpUserCancelOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncQueueUpUserCancelOperationDefaultTypeInternal _SyncQueueUpUserCancelOperation_default_instance_;
constexpr SyncPlayerPropertiesCache::SyncPlayerPropertiesCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , property_(nullptr){}
struct SyncPlayerPropertiesCacheDefaultTypeInternal {
  constexpr SyncPlayerPropertiesCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncPlayerPropertiesCacheDefaultTypeInternal() {}
  union {
    SyncPlayerPropertiesCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncPlayerPropertiesCacheDefaultTypeInternal _SyncPlayerPropertiesCache_default_instance_;
constexpr LoadPlayerPropertiesCache::LoadPlayerPropertiesCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , property_list_(nullptr){}
struct LoadPlayerPropertiesCacheDefaultTypeInternal {
  constexpr LoadPlayerPropertiesCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadPlayerPropertiesCacheDefaultTypeInternal() {}
  union {
    LoadPlayerPropertiesCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadPlayerPropertiesCacheDefaultTypeInternal _LoadPlayerPropertiesCache_default_instance_;
constexpr LoadPlayerRecordsCache::LoadPlayerRecordsCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , record_list_(nullptr){}
struct LoadPlayerRecordsCacheDefaultTypeInternal {
  constexpr LoadPlayerRecordsCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadPlayerRecordsCacheDefaultTypeInternal() {}
  union {
    LoadPlayerRecordsCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadPlayerRecordsCacheDefaultTypeInternal _LoadPlayerRecordsCache_default_instance_;
constexpr SyncPlayerRecordsCacheAdd::SyncPlayerRecordsCacheAdd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_int_list_()
  , record_float_list_()
  , record_string_list_()
  , record_object_list_()
  , record_vector2_list_()
  , record_vector3_list_()
  , record_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , row_(0){}
struct SyncPlayerRecordsCacheAddDefaultTypeInternal {
  constexpr SyncPlayerRecordsCacheAddDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncPlayerRecordsCacheAddDefaultTypeInternal() {}
  union {
    SyncPlayerRecordsCacheAdd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncPlayerRecordsCacheAddDefaultTypeInternal _SyncPlayerRecordsCacheAdd_default_instance_;
constexpr SyncPlayerRecordsCacheUpdate::SyncPlayerRecordsCacheUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , record_int_(nullptr)
  , record_float_(nullptr)
  , record_string_(nullptr)
  , record_object_(nullptr)
  , record_vector2_(nullptr)
  , record_vector3_(nullptr)
  , row_(0){}
struct SyncPlayerRecordsCacheUpdateDefaultTypeInternal {
  constexpr SyncPlayerRecordsCacheUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncPlayerRecordsCacheUpdateDefaultTypeInternal() {}
  union {
    SyncPlayerRecordsCacheUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncPlayerRecordsCacheUpdateDefaultTypeInternal _SyncPlayerRecordsCacheUpdate_default_instance_;
constexpr SyncPlayerRecordsCacheDel::SyncPlayerRecordsCacheDel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , remove_row_(0){}
struct SyncPlayerRecordsCacheDelDefaultTypeInternal {
  constexpr SyncPlayerRecordsCacheDelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncPlayerRecordsCacheDelDefaultTypeInternal() {}
  union {
    SyncPlayerRecordsCacheDel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncPlayerRecordsCacheDelDefaultTypeInternal _SyncPlayerRecordsCacheDel_default_instance_;
constexpr SyncPlayerRecordsCacheSwap::SyncPlayerRecordsCacheSwap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , row_origin_(0)
  , row_target_(0){}
struct SyncPlayerRecordsCacheSwapDefaultTypeInternal {
  constexpr SyncPlayerRecordsCacheSwapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncPlayerRecordsCacheSwapDefaultTypeInternal() {}
  union {
    SyncPlayerRecordsCacheSwap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncPlayerRecordsCacheSwapDefaultTypeInternal _SyncPlayerRecordsCacheSwap_default_instance_;
constexpr ReqTestBattle::ReqTestBattle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : battle_list_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqTestBattleDefaultTypeInternal {
  constexpr ReqTestBattleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqTestBattleDefaultTypeInternal() {}
  union {
    ReqTestBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqTestBattleDefaultTypeInternal _ReqTestBattle_default_instance_;
constexpr AckTestBattle::AckTestBattle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : battle_list_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , scene_id_(0){}
struct AckTestBattleDefaultTypeInternal {
  constexpr AckTestBattleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckTestBattleDefaultTypeInternal() {}
  union {
    AckTestBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckTestBattleDefaultTypeInternal _AckTestBattle_default_instance_;
constexpr ReqCollectWitch::ReqCollectWitch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqCollectWitchDefaultTypeInternal {
  constexpr ReqCollectWitchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCollectWitchDefaultTypeInternal() {}
  union {
    ReqCollectWitch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCollectWitchDefaultTypeInternal _ReqCollectWitch_default_instance_;
constexpr AckCollectWitch::AckCollectWitch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , is_collect_(0){}
struct AckCollectWitchDefaultTypeInternal {
  constexpr AckCollectWitchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCollectWitchDefaultTypeInternal() {}
  union {
    AckCollectWitch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCollectWitchDefaultTypeInternal _AckCollectWitch_default_instance_;
constexpr ReqInitPlayerName::ReqInitPlayerName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , is_random_name_(0){}
struct ReqInitPlayerNameDefaultTypeInternal {
  constexpr ReqInitPlayerNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqInitPlayerNameDefaultTypeInternal() {}
  union {
    ReqInitPlayerName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqInitPlayerNameDefaultTypeInternal _ReqInitPlayerName_default_instance_;
constexpr AckInitPlayerName::AckInitPlayerName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , event_code_(0)
{}
struct AckInitPlayerNameDefaultTypeInternal {
  constexpr AckInitPlayerNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckInitPlayerNameDefaultTypeInternal() {}
  union {
    AckInitPlayerName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckInitPlayerNameDefaultTypeInternal _AckInitPlayerName_default_instance_;
constexpr ReqUpdateModule::ReqUpdateModule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqUpdateModuleDefaultTypeInternal {
  constexpr ReqUpdateModuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqUpdateModuleDefaultTypeInternal() {}
  union {
    ReqUpdateModule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqUpdateModuleDefaultTypeInternal _ReqUpdateModule_default_instance_;
constexpr AckUpdateModule::AckUpdateModule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : module_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , chapter_status_(0){}
struct AckUpdateModuleDefaultTypeInternal {
  constexpr AckUpdateModuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckUpdateModuleDefaultTypeInternal() {}
  union {
    AckUpdateModule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckUpdateModuleDefaultTypeInternal _AckUpdateModule_default_instance_;
constexpr ReqChapterRewardTipOk::ReqChapterRewardTipOk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqChapterRewardTipOkDefaultTypeInternal {
  constexpr ReqChapterRewardTipOkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqChapterRewardTipOkDefaultTypeInternal() {}
  union {
    ReqChapterRewardTipOk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqChapterRewardTipOkDefaultTypeInternal _ReqChapterRewardTipOk_default_instance_;
constexpr AckChapterRewardTipOk::AckChapterRewardTipOk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : module_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , chapter_status_(0){}
struct AckChapterRewardTipOkDefaultTypeInternal {
  constexpr AckChapterRewardTipOkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckChapterRewardTipOkDefaultTypeInternal() {}
  union {
    AckChapterRewardTipOk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckChapterRewardTipOkDefaultTypeInternal _AckChapterRewardTipOk_default_instance_;
constexpr ReqCollegeDrama::ReqCollegeDrama(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : module_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , drama_type_(0)
{}
struct ReqCollegeDramaDefaultTypeInternal {
  constexpr ReqCollegeDramaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCollegeDramaDefaultTypeInternal() {}
  union {
    ReqCollegeDrama _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCollegeDramaDefaultTypeInternal _ReqCollegeDrama_default_instance_;
constexpr AckCollegeDrama::AckCollegeDrama(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckCollegeDramaDefaultTypeInternal {
  constexpr AckCollegeDramaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCollegeDramaDefaultTypeInternal() {}
  union {
    AckCollegeDrama _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCollegeDramaDefaultTypeInternal _AckCollegeDrama_default_instance_;
constexpr ReqCollegeTaskAction::ReqCollegeTaskAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqCollegeTaskActionDefaultTypeInternal {
  constexpr ReqCollegeTaskActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCollegeTaskActionDefaultTypeInternal() {}
  union {
    ReqCollegeTaskAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCollegeTaskActionDefaultTypeInternal _ReqCollegeTaskAction_default_instance_;
constexpr AckCollegeTaskAction::AckCollegeTaskAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckCollegeTaskActionDefaultTypeInternal {
  constexpr AckCollegeTaskActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCollegeTaskActionDefaultTypeInternal() {}
  union {
    AckCollegeTaskAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCollegeTaskActionDefaultTypeInternal _AckCollegeTaskAction_default_instance_;
constexpr ReqCollegeTaskCountdown::ReqCollegeTaskCountdown(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqCollegeTaskCountdownDefaultTypeInternal {
  constexpr ReqCollegeTaskCountdownDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCollegeTaskCountdownDefaultTypeInternal() {}
  union {
    ReqCollegeTaskCountdown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCollegeTaskCountdownDefaultTypeInternal _ReqCollegeTaskCountdown_default_instance_;
constexpr AckCollegeTaskCountdown::AckCollegeTaskCountdown(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckCollegeTaskCountdownDefaultTypeInternal {
  constexpr AckCollegeTaskCountdownDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCollegeTaskCountdownDefaultTypeInternal() {}
  union {
    AckCollegeTaskCountdown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCollegeTaskCountdownDefaultTypeInternal _AckCollegeTaskCountdown_default_instance_;
constexpr ExamQuestion::ExamQuestion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : question_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExamQuestionDefaultTypeInternal {
  constexpr ExamQuestionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExamQuestionDefaultTypeInternal() {}
  union {
    ExamQuestion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExamQuestionDefaultTypeInternal _ExamQuestion_default_instance_;
constexpr ReqCollegeStartExam::ReqCollegeStartExam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqCollegeStartExamDefaultTypeInternal {
  constexpr ReqCollegeStartExamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCollegeStartExamDefaultTypeInternal() {}
  union {
    ReqCollegeStartExam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCollegeStartExamDefaultTypeInternal _ReqCollegeStartExam_default_instance_;
constexpr AckCollegeStartExam::AckCollegeStartExam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : question_id_list_()
  , event_code_(0)

  , exam_type_(0){}
struct AckCollegeStartExamDefaultTypeInternal {
  constexpr AckCollegeStartExamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCollegeStartExamDefaultTypeInternal() {}
  union {
    AckCollegeStartExam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCollegeStartExamDefaultTypeInternal _AckCollegeStartExam_default_instance_;
constexpr ReqCollegeAnswer::ReqCollegeAnswer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : question_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , options_(0){}
struct ReqCollegeAnswerDefaultTypeInternal {
  constexpr ReqCollegeAnswerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCollegeAnswerDefaultTypeInternal() {}
  union {
    ReqCollegeAnswer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCollegeAnswerDefaultTypeInternal _ReqCollegeAnswer_default_instance_;
constexpr AckCollegeAnswer::AckCollegeAnswer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : question_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , result_(0){}
struct AckCollegeAnswerDefaultTypeInternal {
  constexpr AckCollegeAnswerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCollegeAnswerDefaultTypeInternal() {}
  union {
    AckCollegeAnswer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCollegeAnswerDefaultTypeInternal _AckCollegeAnswer_default_instance_;
constexpr CommonReward::CommonReward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reward_count_(0)
  , reward_type_(0){}
struct CommonRewardDefaultTypeInternal {
  constexpr CommonRewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonRewardDefaultTypeInternal() {}
  union {
    CommonReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonRewardDefaultTypeInternal _CommonReward_default_instance_;
constexpr ReqCollegeReward::ReqCollegeReward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , reward_type_(0){}
struct ReqCollegeRewardDefaultTypeInternal {
  constexpr ReqCollegeRewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCollegeRewardDefaultTypeInternal() {}
  union {
    ReqCollegeReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCollegeRewardDefaultTypeInternal _ReqCollegeReward_default_instance_;
constexpr AckCollegeReward::AckCollegeReward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_info_()
  , event_code_(0)
{}
struct AckCollegeRewardDefaultTypeInternal {
  constexpr AckCollegeRewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCollegeRewardDefaultTypeInternal() {}
  union {
    AckCollegeReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCollegeRewardDefaultTypeInternal _AckCollegeReward_default_instance_;
constexpr ReqTestSetCollegeExamStatus::ReqTestSetCollegeExamStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , exam_type_(0){}
struct ReqTestSetCollegeExamStatusDefaultTypeInternal {
  constexpr ReqTestSetCollegeExamStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqTestSetCollegeExamStatusDefaultTypeInternal() {}
  union {
    ReqTestSetCollegeExamStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqTestSetCollegeExamStatusDefaultTypeInternal _ReqTestSetCollegeExamStatus_default_instance_;
constexpr ReqCollegeExamExit::ReqCollegeExamExit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqCollegeExamExitDefaultTypeInternal {
  constexpr ReqCollegeExamExitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCollegeExamExitDefaultTypeInternal() {}
  union {
    ReqCollegeExamExit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCollegeExamExitDefaultTypeInternal _ReqCollegeExamExit_default_instance_;
constexpr AckCollegeExamExit::AckCollegeExamExit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckCollegeExamExitDefaultTypeInternal {
  constexpr AckCollegeExamExitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCollegeExamExitDefaultTypeInternal() {}
  union {
    AckCollegeExamExit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCollegeExamExitDefaultTypeInternal _AckCollegeExamExit_default_instance_;
constexpr ReqSetItem::ReqSetItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , count_(0){}
struct ReqSetItemDefaultTypeInternal {
  constexpr ReqSetItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqSetItemDefaultTypeInternal() {}
  union {
    ReqSetItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqSetItemDefaultTypeInternal _ReqSetItem_default_instance_;
constexpr ReqBattlePreparedInfo::ReqBattlePreparedInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : battle_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_play_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , challenge_id_(nullptr)
  , replay_id_(nullptr){}
struct ReqBattlePreparedInfoDefaultTypeInternal {
  constexpr ReqBattlePreparedInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBattlePreparedInfoDefaultTypeInternal() {}
  union {
    ReqBattlePreparedInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBattlePreparedInfoDefaultTypeInternal _ReqBattlePreparedInfo_default_instance_;
constexpr BattleEntityInfo::BattleEntityInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attrs_()
  , _attrs_cached_byte_size_()
  , config_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , level_(0){}
struct BattleEntityInfoDefaultTypeInternal {
  constexpr BattleEntityInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BattleEntityInfoDefaultTypeInternal() {}
  union {
    BattleEntityInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BattleEntityInfoDefaultTypeInternal _BattleEntityInfo_default_instance_;
constexpr BattleWitchInfo::BattleWitchInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attrs_()
  , _attrs_cached_byte_size_()
  , skills_()
  , config_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_res_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , level_(0)
  , star_level_(0){}
struct BattleWitchInfoDefaultTypeInternal {
  constexpr BattleWitchInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BattleWitchInfoDefaultTypeInternal() {}
  union {
    BattleWitchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BattleWitchInfoDefaultTypeInternal _BattleWitchInfo_default_instance_;
constexpr AckBattlePreparedInfo::AckBattlePreparedInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : monsters_()
  , npcs_()
  , witches_()
  , battle_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_play_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , battle_type_(0)
{}
struct AckBattlePreparedInfoDefaultTypeInternal {
  constexpr AckBattlePreparedInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBattlePreparedInfoDefaultTypeInternal() {}
  union {
    AckBattlePreparedInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBattlePreparedInfoDefaultTypeInternal _AckBattlePreparedInfo_default_instance_;
constexpr ReqBuyPower::ReqBuyPower(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , count_(0){}
struct ReqBuyPowerDefaultTypeInternal {
  constexpr ReqBuyPowerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBuyPowerDefaultTypeInternal() {}
  union {
    ReqBuyPower _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBuyPowerDefaultTypeInternal _ReqBuyPower_default_instance_;
constexpr AckBuyPower::AckBuyPower(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)

  , count_(0){}
struct AckBuyPowerDefaultTypeInternal {
  constexpr AckBuyPowerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBuyPowerDefaultTypeInternal() {}
  union {
    AckBuyPower _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBuyPowerDefaultTypeInternal _AckBuyPower_default_instance_;
constexpr ReqTestSetResource::ReqTestSetResource(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , res_value_(int64_t{0}){}
struct ReqTestSetResourceDefaultTypeInternal {
  constexpr ReqTestSetResourceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqTestSetResourceDefaultTypeInternal() {}
  union {
    ReqTestSetResource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqTestSetResourceDefaultTypeInternal _ReqTestSetResource_default_instance_;
constexpr ReqBattleAdjWitchTeam::ReqBattleAdjWitchTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , idx_(0){}
struct ReqBattleAdjWitchTeamDefaultTypeInternal {
  constexpr ReqBattleAdjWitchTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBattleAdjWitchTeamDefaultTypeInternal() {}
  union {
    ReqBattleAdjWitchTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBattleAdjWitchTeamDefaultTypeInternal _ReqBattleAdjWitchTeam_default_instance_;
constexpr AckBattleAdjWitchTeam::AckBattleAdjWitchTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckBattleAdjWitchTeamDefaultTypeInternal {
  constexpr AckBattleAdjWitchTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBattleAdjWitchTeamDefaultTypeInternal() {}
  union {
    AckBattleAdjWitchTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBattleAdjWitchTeamDefaultTypeInternal _AckBattleAdjWitchTeam_default_instance_;
constexpr ReqBattleChangeWitchTeamName::ReqBattleChangeWitchTeamName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqBattleChangeWitchTeamNameDefaultTypeInternal {
  constexpr ReqBattleChangeWitchTeamNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBattleChangeWitchTeamNameDefaultTypeInternal() {}
  union {
    ReqBattleChangeWitchTeamName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBattleChangeWitchTeamNameDefaultTypeInternal _ReqBattleChangeWitchTeamName_default_instance_;
constexpr AckBattleChangeWitchTeamName::AckBattleChangeWitchTeamName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckBattleChangeWitchTeamNameDefaultTypeInternal {
  constexpr AckBattleChangeWitchTeamNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBattleChangeWitchTeamNameDefaultTypeInternal() {}
  union {
    AckBattleChangeWitchTeamName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBattleChangeWitchTeamNameDefaultTypeInternal _AckBattleChangeWitchTeamName_default_instance_;
constexpr ReqBattleResetWitchTeam::ReqBattleResetWitchTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqBattleResetWitchTeamDefaultTypeInternal {
  constexpr ReqBattleResetWitchTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBattleResetWitchTeamDefaultTypeInternal() {}
  union {
    ReqBattleResetWitchTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBattleResetWitchTeamDefaultTypeInternal _ReqBattleResetWitchTeam_default_instance_;
constexpr AckBattleResetWitchTeam::AckBattleResetWitchTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckBattleResetWitchTeamDefaultTypeInternal {
  constexpr AckBattleResetWitchTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBattleResetWitchTeamDefaultTypeInternal() {}
  union {
    AckBattleResetWitchTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBattleResetWitchTeamDefaultTypeInternal _AckBattleResetWitchTeam_default_instance_;
constexpr ReqBattleQuickConfigWitchTeam::ReqBattleQuickConfigWitchTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_list_()
  , witch_team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqBattleQuickConfigWitchTeamDefaultTypeInternal {
  constexpr ReqBattleQuickConfigWitchTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBattleQuickConfigWitchTeamDefaultTypeInternal() {}
  union {
    ReqBattleQuickConfigWitchTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBattleQuickConfigWitchTeamDefaultTypeInternal _ReqBattleQuickConfigWitchTeam_default_instance_;
constexpr AckBattleQuickConfigWitchTeam::AckBattleQuickConfigWitchTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_list_()
  , witch_team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckBattleQuickConfigWitchTeamDefaultTypeInternal {
  constexpr AckBattleQuickConfigWitchTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBattleQuickConfigWitchTeamDefaultTypeInternal() {}
  union {
    AckBattleQuickConfigWitchTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBattleQuickConfigWitchTeamDefaultTypeInternal _AckBattleQuickConfigWitchTeam_default_instance_;
constexpr ReqBattleBuyWitchTeam::ReqBattleBuyWitchTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqBattleBuyWitchTeamDefaultTypeInternal {
  constexpr ReqBattleBuyWitchTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBattleBuyWitchTeamDefaultTypeInternal() {}
  union {
    ReqBattleBuyWitchTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBattleBuyWitchTeamDefaultTypeInternal _ReqBattleBuyWitchTeam_default_instance_;
constexpr AckBattleBuyWitchTeam::AckBattleBuyWitchTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckBattleBuyWitchTeamDefaultTypeInternal {
  constexpr AckBattleBuyWitchTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBattleBuyWitchTeamDefaultTypeInternal() {}
  union {
    AckBattleBuyWitchTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBattleBuyWitchTeamDefaultTypeInternal _AckBattleBuyWitchTeam_default_instance_;
constexpr ReqTestRecruitWitch::ReqTestRecruitWitch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqTestRecruitWitchDefaultTypeInternal {
  constexpr ReqTestRecruitWitchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqTestRecruitWitchDefaultTypeInternal() {}
  union {
    ReqTestRecruitWitch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqTestRecruitWitchDefaultTypeInternal _ReqTestRecruitWitch_default_instance_;
constexpr CommonGetRewardInfo::CommonGetRewardInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_list_()
  , show_type_(0)
{}
struct CommonGetRewardInfoDefaultTypeInternal {
  constexpr CommonGetRewardInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonGetRewardInfoDefaultTypeInternal() {}
  union {
    CommonGetRewardInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonGetRewardInfoDefaultTypeInternal _CommonGetRewardInfo_default_instance_;
constexpr ReqSetSystemFunctionFlag::ReqSetSystemFunctionFlag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : function_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , flag_(0){}
struct ReqSetSystemFunctionFlagDefaultTypeInternal {
  constexpr ReqSetSystemFunctionFlagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqSetSystemFunctionFlagDefaultTypeInternal() {}
  union {
    ReqSetSystemFunctionFlag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqSetSystemFunctionFlagDefaultTypeInternal _ReqSetSystemFunctionFlag_default_instance_;
constexpr AckSetSystemFunctionFlag::AckSetSystemFunctionFlag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckSetSystemFunctionFlagDefaultTypeInternal {
  constexpr AckSetSystemFunctionFlagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckSetSystemFunctionFlagDefaultTypeInternal() {}
  union {
    AckSetSystemFunctionFlag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckSetSystemFunctionFlagDefaultTypeInternal _AckSetSystemFunctionFlag_default_instance_;
constexpr SyncSystemFunctionUnlock::SyncSystemFunctionUnlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : function_list_(){}
struct SyncSystemFunctionUnlockDefaultTypeInternal {
  constexpr SyncSystemFunctionUnlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncSystemFunctionUnlockDefaultTypeInternal() {}
  union {
    SyncSystemFunctionUnlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncSystemFunctionUnlockDefaultTypeInternal _SyncSystemFunctionUnlock_default_instance_;
constexpr SyncPlayerLevelRanking::SyncPlayerLevelRanking(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , level_or_score_(int64_t{0}){}
struct SyncPlayerLevelRankingDefaultTypeInternal {
  constexpr SyncPlayerLevelRankingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncPlayerLevelRankingDefaultTypeInternal() {}
  union {
    SyncPlayerLevelRanking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncPlayerLevelRankingDefaultTypeInternal _SyncPlayerLevelRanking_default_instance_;
constexpr ReqSendGiftForWitch::ReqSendGiftForWitch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gift_item_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , box_item_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqSendGiftForWitchDefaultTypeInternal {
  constexpr ReqSendGiftForWitchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqSendGiftForWitchDefaultTypeInternal() {}
  union {
    ReqSendGiftForWitch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqSendGiftForWitchDefaultTypeInternal _ReqSendGiftForWitch_default_instance_;
constexpr AckSendGiftForWitch::AckSendGiftForWitch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckSendGiftForWitchDefaultTypeInternal {
  constexpr AckSendGiftForWitchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckSendGiftForWitchDefaultTypeInternal() {}
  union {
    AckSendGiftForWitch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckSendGiftForWitchDefaultTypeInternal _AckSendGiftForWitch_default_instance_;
constexpr ReqUseMagicalMedicine::ReqUseMagicalMedicine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , use_count_(0){}
struct ReqUseMagicalMedicineDefaultTypeInternal {
  constexpr ReqUseMagicalMedicineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqUseMagicalMedicineDefaultTypeInternal() {}
  union {
    ReqUseMagicalMedicine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqUseMagicalMedicineDefaultTypeInternal _ReqUseMagicalMedicine_default_instance_;
constexpr AckUseMagicalMedicine::AckUseMagicalMedicine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckUseMagicalMedicineDefaultTypeInternal {
  constexpr AckUseMagicalMedicineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckUseMagicalMedicineDefaultTypeInternal() {}
  union {
    AckUseMagicalMedicine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckUseMagicalMedicineDefaultTypeInternal _AckUseMagicalMedicine_default_instance_;
constexpr ReqUnlockWitchSkin::ReqUnlockWitchSkin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , witch_skin_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqUnlockWitchSkinDefaultTypeInternal {
  constexpr ReqUnlockWitchSkinDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqUnlockWitchSkinDefaultTypeInternal() {}
  union {
    ReqUnlockWitchSkin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqUnlockWitchSkinDefaultTypeInternal _ReqUnlockWitchSkin_default_instance_;
constexpr AckUnlockWitchSkin::AckUnlockWitchSkin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckUnlockWitchSkinDefaultTypeInternal {
  constexpr AckUnlockWitchSkinDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckUnlockWitchSkinDefaultTypeInternal() {}
  union {
    AckUnlockWitchSkin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckUnlockWitchSkinDefaultTypeInternal _AckUnlockWitchSkin_default_instance_;
constexpr ReqWitchStarLevelUp::ReqWitchStarLevelUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , consume_item_list_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqWitchStarLevelUpDefaultTypeInternal {
  constexpr ReqWitchStarLevelUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqWitchStarLevelUpDefaultTypeInternal() {}
  union {
    ReqWitchStarLevelUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqWitchStarLevelUpDefaultTypeInternal _ReqWitchStarLevelUp_default_instance_;
constexpr AckWitchStarLevelUp::AckWitchStarLevelUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckWitchStarLevelUpDefaultTypeInternal {
  constexpr AckWitchStarLevelUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckWitchStarLevelUpDefaultTypeInternal() {}
  union {
    AckWitchStarLevelUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckWitchStarLevelUpDefaultTypeInternal _AckWitchStarLevelUp_default_instance_;
constexpr ReqWitchKnowledgeLevelUp::ReqWitchKnowledgeLevelUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , opt_type_(0)
{}
struct ReqWitchKnowledgeLevelUpDefaultTypeInternal {
  constexpr ReqWitchKnowledgeLevelUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqWitchKnowledgeLevelUpDefaultTypeInternal() {}
  union {
    ReqWitchKnowledgeLevelUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqWitchKnowledgeLevelUpDefaultTypeInternal _ReqWitchKnowledgeLevelUp_default_instance_;
constexpr AckWitchKnowledgeLevelUp::AckWitchKnowledgeLevelUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckWitchKnowledgeLevelUpDefaultTypeInternal {
  constexpr AckWitchKnowledgeLevelUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckWitchKnowledgeLevelUpDefaultTypeInternal() {}
  union {
    AckWitchKnowledgeLevelUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckWitchKnowledgeLevelUpDefaultTypeInternal _AckWitchKnowledgeLevelUp_default_instance_;
constexpr ReqExpandWitchPneumaBagSize::ReqExpandWitchPneumaBagSize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , expand_count_(0){}
struct ReqExpandWitchPneumaBagSizeDefaultTypeInternal {
  constexpr ReqExpandWitchPneumaBagSizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqExpandWitchPneumaBagSizeDefaultTypeInternal() {}
  union {
    ReqExpandWitchPneumaBagSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqExpandWitchPneumaBagSizeDefaultTypeInternal _ReqExpandWitchPneumaBagSize_default_instance_;
constexpr AckExpandWitchPneumaBagSize::AckExpandWitchPneumaBagSize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckExpandWitchPneumaBagSizeDefaultTypeInternal {
  constexpr AckExpandWitchPneumaBagSizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckExpandWitchPneumaBagSizeDefaultTypeInternal() {}
  union {
    AckExpandWitchPneumaBagSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckExpandWitchPneumaBagSizeDefaultTypeInternal _AckExpandWitchPneumaBagSize_default_instance_;
constexpr ReqWitchPneumaOpt::ReqWitchPneumaOpt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , pneuma_guid_(nullptr)
  , opt_type_(0)
{}
struct ReqWitchPneumaOptDefaultTypeInternal {
  constexpr ReqWitchPneumaOptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqWitchPneumaOptDefaultTypeInternal() {}
  union {
    ReqWitchPneumaOpt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqWitchPneumaOptDefaultTypeInternal _ReqWitchPneumaOpt_default_instance_;
constexpr AckWitchPneumaOpt::AckWitchPneumaOpt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pneuma_guid_(nullptr)
  , event_code_(0)

  , opt_type_(0)
{}
struct AckWitchPneumaOptDefaultTypeInternal {
  constexpr AckWitchPneumaOptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckWitchPneumaOptDefaultTypeInternal() {}
  union {
    AckWitchPneumaOpt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckWitchPneumaOptDefaultTypeInternal _AckWitchPneumaOpt_default_instance_;
constexpr ReqWitchPneumaEnhance::ReqWitchPneumaEnhance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , pneuma_guid_(nullptr){}
struct ReqWitchPneumaEnhanceDefaultTypeInternal {
  constexpr ReqWitchPneumaEnhanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqWitchPneumaEnhanceDefaultTypeInternal() {}
  union {
    ReqWitchPneumaEnhance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqWitchPneumaEnhanceDefaultTypeInternal _ReqWitchPneumaEnhance_default_instance_;
constexpr AckWitchPneumaEnhance::AckWitchPneumaEnhance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckWitchPneumaEnhanceDefaultTypeInternal {
  constexpr AckWitchPneumaEnhanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckWitchPneumaEnhanceDefaultTypeInternal() {}
  union {
    AckWitchPneumaEnhance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckWitchPneumaEnhanceDefaultTypeInternal _AckWitchPneumaEnhance_default_instance_;
constexpr ReqWitchPneumaDecompose::ReqWitchPneumaDecompose(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pneuma_guid_list_()
  , player_id_(nullptr){}
struct ReqWitchPneumaDecomposeDefaultTypeInternal {
  constexpr ReqWitchPneumaDecomposeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqWitchPneumaDecomposeDefaultTypeInternal() {}
  union {
    ReqWitchPneumaDecompose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqWitchPneumaDecomposeDefaultTypeInternal _ReqWitchPneumaDecompose_default_instance_;
constexpr AckWitchPneumaDecompose::AckWitchPneumaDecompose(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_list_()
  , event_code_(0)
{}
struct AckWitchPneumaDecomposeDefaultTypeInternal {
  constexpr AckWitchPneumaDecomposeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckWitchPneumaDecomposeDefaultTypeInternal() {}
  union {
    AckWitchPneumaDecompose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckWitchPneumaDecomposeDefaultTypeInternal _AckWitchPneumaDecompose_default_instance_;
constexpr ReqWitchSkillLevelUp::ReqWitchSkillLevelUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , opt_type_(0)
{}
struct ReqWitchSkillLevelUpDefaultTypeInternal {
  constexpr ReqWitchSkillLevelUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqWitchSkillLevelUpDefaultTypeInternal() {}
  union {
    ReqWitchSkillLevelUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqWitchSkillLevelUpDefaultTypeInternal _ReqWitchSkillLevelUp_default_instance_;
constexpr AckWitchSkillLevelUp::AckWitchSkillLevelUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckWitchSkillLevelUpDefaultTypeInternal {
  constexpr AckWitchSkillLevelUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckWitchSkillLevelUpDefaultTypeInternal() {}
  union {
    AckWitchSkillLevelUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckWitchSkillLevelUpDefaultTypeInternal _AckWitchSkillLevelUp_default_instance_;
constexpr ReqSweepEndlessTower::ReqSweepEndlessTower(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , sweep_count_(0){}
struct ReqSweepEndlessTowerDefaultTypeInternal {
  constexpr ReqSweepEndlessTowerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqSweepEndlessTowerDefaultTypeInternal() {}
  union {
    ReqSweepEndlessTower _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqSweepEndlessTowerDefaultTypeInternal _ReqSweepEndlessTower_default_instance_;
constexpr AckSweepEndlessTower::AckSweepEndlessTower(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_list_()
  , event_code_(0)
{}
struct AckSweepEndlessTowerDefaultTypeInternal {
  constexpr AckSweepEndlessTowerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckSweepEndlessTowerDefaultTypeInternal() {}
  union {
    AckSweepEndlessTower _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckSweepEndlessTowerDefaultTypeInternal _AckSweepEndlessTower_default_instance_;
constexpr ReqBlackmartCommodityList::ReqBlackmartCommodityList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqBlackmartCommodityListDefaultTypeInternal {
  constexpr ReqBlackmartCommodityListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBlackmartCommodityListDefaultTypeInternal() {}
  union {
    ReqBlackmartCommodityList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBlackmartCommodityListDefaultTypeInternal _ReqBlackmartCommodityList_default_instance_;
constexpr AckBlackmartCommodityList::AckBlackmartCommodityList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckBlackmartCommodityListDefaultTypeInternal {
  constexpr AckBlackmartCommodityListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBlackmartCommodityListDefaultTypeInternal() {}
  union {
    AckBlackmartCommodityList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBlackmartCommodityListDefaultTypeInternal _AckBlackmartCommodityList_default_instance_;
constexpr ReqRefreshBlackmartCommodityList::ReqRefreshBlackmartCommodityList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqRefreshBlackmartCommodityListDefaultTypeInternal {
  constexpr ReqRefreshBlackmartCommodityListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqRefreshBlackmartCommodityListDefaultTypeInternal() {}
  union {
    ReqRefreshBlackmartCommodityList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqRefreshBlackmartCommodityListDefaultTypeInternal _ReqRefreshBlackmartCommodityList_default_instance_;
constexpr AckRefreshBlackmartCommodityList::AckRefreshBlackmartCommodityList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckRefreshBlackmartCommodityListDefaultTypeInternal {
  constexpr AckRefreshBlackmartCommodityListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckRefreshBlackmartCommodityListDefaultTypeInternal() {}
  union {
    AckRefreshBlackmartCommodityList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckRefreshBlackmartCommodityListDefaultTypeInternal _AckRefreshBlackmartCommodityList_default_instance_;
constexpr ReqBuyBlackmartCommodity::ReqBuyBlackmartCommodity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commodity_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , count_(0){}
struct ReqBuyBlackmartCommodityDefaultTypeInternal {
  constexpr ReqBuyBlackmartCommodityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBuyBlackmartCommodityDefaultTypeInternal() {}
  union {
    ReqBuyBlackmartCommodity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBuyBlackmartCommodityDefaultTypeInternal _ReqBuyBlackmartCommodity_default_instance_;
constexpr AckBuyBlackmartCommodity::AckBuyBlackmartCommodity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commodity_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckBuyBlackmartCommodityDefaultTypeInternal {
  constexpr AckBuyBlackmartCommodityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBuyBlackmartCommodityDefaultTypeInternal() {}
  union {
    AckBuyBlackmartCommodity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBuyBlackmartCommodityDefaultTypeInternal _AckBuyBlackmartCommodity_default_instance_;
constexpr SyncBlackmartCommodityUpdated::SyncBlackmartCommodityUpdated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : update_type_(0){}
struct SyncBlackmartCommodityUpdatedDefaultTypeInternal {
  constexpr SyncBlackmartCommodityUpdatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncBlackmartCommodityUpdatedDefaultTypeInternal() {}
  union {
    SyncBlackmartCommodityUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncBlackmartCommodityUpdatedDefaultTypeInternal _SyncBlackmartCommodityUpdated_default_instance_;
constexpr ReqActiveMissionOperation::ReqActiveMissionOperation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , mission_flag_(0)
{}
struct ReqActiveMissionOperationDefaultTypeInternal {
  constexpr ReqActiveMissionOperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqActiveMissionOperationDefaultTypeInternal() {}
  union {
    ReqActiveMissionOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqActiveMissionOperationDefaultTypeInternal _ReqActiveMissionOperation_default_instance_;
constexpr AckActiveMissionOperation::AckActiveMissionOperation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckActiveMissionOperationDefaultTypeInternal {
  constexpr AckActiveMissionOperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckActiveMissionOperationDefaultTypeInternal() {}
  union {
    AckActiveMissionOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckActiveMissionOperationDefaultTypeInternal _AckActiveMissionOperation_default_instance_;
constexpr ReqGetActiveMissionReward::ReqGetActiveMissionReward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mission_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqGetActiveMissionRewardDefaultTypeInternal {
  constexpr ReqGetActiveMissionRewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetActiveMissionRewardDefaultTypeInternal() {}
  union {
    ReqGetActiveMissionReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetActiveMissionRewardDefaultTypeInternal _ReqGetActiveMissionReward_default_instance_;
constexpr AckGetActiveMissionReward::AckGetActiveMissionReward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckGetActiveMissionRewardDefaultTypeInternal {
  constexpr AckGetActiveMissionRewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckGetActiveMissionRewardDefaultTypeInternal() {}
  union {
    AckGetActiveMissionReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckGetActiveMissionRewardDefaultTypeInternal _AckGetActiveMissionReward_default_instance_;
constexpr ReqDrawCard::ReqDrawCard(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : card_pool_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , dc_count_(0){}
struct ReqDrawCardDefaultTypeInternal {
  constexpr ReqDrawCardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqDrawCardDefaultTypeInternal() {}
  union {
    ReqDrawCard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqDrawCardDefaultTypeInternal _ReqDrawCard_default_instance_;
constexpr AckDrawCard::AckDrawCard(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_()
  , event_code_(0)
{}
struct AckDrawCardDefaultTypeInternal {
  constexpr AckDrawCardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckDrawCardDefaultTypeInternal() {}
  union {
    AckDrawCard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckDrawCardDefaultTypeInternal _AckDrawCard_default_instance_;
constexpr CommunityMemberInfo::CommunityMemberInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_frame_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , level_(0)
  , fighting_capacity_(0)
  , weekly_active_val_(0)
  , total_active_val_(0)
  , join_ts_(int64_t{0})
  , offline_ts_(int64_t{0})
  , position_(0)
{}
struct CommunityMemberInfoDefaultTypeInternal {
  constexpr CommunityMemberInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommunityMemberInfoDefaultTypeInternal() {}
  union {
    CommunityMemberInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommunityMemberInfoDefaultTypeInternal _CommunityMemberInfo_default_instance_;
constexpr CommunityInfo::CommunityInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : community_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_flag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_declaration_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_chat_channel_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_chief_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_chief_player_id_(nullptr)
  , community_id_(0)
  , community_level_(0)
  , community_exp_(0)
  , community_fighting_capacity_(0)
  , community_weekly_active_val_(0)
  , community_total_active_val_(0)
  , community_approve_type_(0)
  , level_restriction_(0)
  , member_num_(0){}
struct CommunityInfoDefaultTypeInternal {
  constexpr CommunityInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommunityInfoDefaultTypeInternal() {}
  union {
    CommunityInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommunityInfoDefaultTypeInternal _CommunityInfo_default_instance_;
constexpr AppliedCommunityInfo::AppliedCommunityInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : community_info_(nullptr)
  , apply_join_ts_(int64_t{0}){}
struct AppliedCommunityInfoDefaultTypeInternal {
  constexpr AppliedCommunityInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppliedCommunityInfoDefaultTypeInternal() {}
  union {
    AppliedCommunityInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppliedCommunityInfoDefaultTypeInternal _AppliedCommunityInfo_default_instance_;
constexpr AppliedPlayerInfo::AppliedPlayerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_info_(nullptr)
  , apply_join_ts_(int64_t{0}){}
struct AppliedPlayerInfoDefaultTypeInternal {
  constexpr AppliedPlayerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppliedPlayerInfoDefaultTypeInternal() {}
  union {
    AppliedPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppliedPlayerInfoDefaultTypeInternal _AppliedPlayerInfo_default_instance_;
constexpr SyncPlayerCommunityInfo::SyncPlayerCommunityInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , community_id_(0)
  , position_(0)

  , quit_ts_(int64_t{0}){}
struct SyncPlayerCommunityInfoDefaultTypeInternal {
  constexpr SyncPlayerCommunityInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncPlayerCommunityInfoDefaultTypeInternal() {}
  union {
    SyncPlayerCommunityInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncPlayerCommunityInfoDefaultTypeInternal _SyncPlayerCommunityInfo_default_instance_;
constexpr AddCommunityActiveValAndExp::AddCommunityActiveValAndExp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , community_id_(0)
  , active_val_(0)
  , level_exp_(0){}
struct AddCommunityActiveValAndExpDefaultTypeInternal {
  constexpr AddCommunityActiveValAndExpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddCommunityActiveValAndExpDefaultTypeInternal() {}
  union {
    AddCommunityActiveValAndExp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddCommunityActiveValAndExpDefaultTypeInternal _AddCommunityActiveValAndExp_default_instance_;
constexpr NotifyApplyJoinCommunityResult::NotifyApplyJoinCommunityResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : community_chat_channel_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_id_(0)
  , position_(0)

  , join_result_(0){}
struct NotifyApplyJoinCommunityResultDefaultTypeInternal {
  constexpr NotifyApplyJoinCommunityResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NotifyApplyJoinCommunityResultDefaultTypeInternal() {}
  union {
    NotifyApplyJoinCommunityResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotifyApplyJoinCommunityResultDefaultTypeInternal _NotifyApplyJoinCommunityResult_default_instance_;
constexpr NotifyPlayerGetFiredFromCommunity::NotifyPlayerGetFiredFromCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : community_chat_channel_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_id_(0)
  , position_(0)
{}
struct NotifyPlayerGetFiredFromCommunityDefaultTypeInternal {
  constexpr NotifyPlayerGetFiredFromCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NotifyPlayerGetFiredFromCommunityDefaultTypeInternal() {}
  union {
    NotifyPlayerGetFiredFromCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotifyPlayerGetFiredFromCommunityDefaultTypeInternal _NotifyPlayerGetFiredFromCommunity_default_instance_;
constexpr ReqCreateCommunity::ReqCreateCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : community_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_flag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_declaration_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , community_approve_type_(0)
  , level_restriction_(0){}
struct ReqCreateCommunityDefaultTypeInternal {
  constexpr ReqCreateCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCreateCommunityDefaultTypeInternal() {}
  union {
    ReqCreateCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCreateCommunityDefaultTypeInternal _ReqCreateCommunity_default_instance_;
constexpr AckCreateCommunity::AckCreateCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : member_info_list_()
  , community_info_(nullptr)
  , event_code_(0)
{}
struct AckCreateCommunityDefaultTypeInternal {
  constexpr AckCreateCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCreateCommunityDefaultTypeInternal() {}
  union {
    AckCreateCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCreateCommunityDefaultTypeInternal _AckCreateCommunity_default_instance_;
constexpr ReqSearchCommunity::ReqSearchCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : community_name_or_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqSearchCommunityDefaultTypeInternal {
  constexpr ReqSearchCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqSearchCommunityDefaultTypeInternal() {}
  union {
    ReqSearchCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqSearchCommunityDefaultTypeInternal _ReqSearchCommunity_default_instance_;
constexpr AckSearchCommunity::AckSearchCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : community_info_(nullptr)
  , event_code_(0)
{}
struct AckSearchCommunityDefaultTypeInternal {
  constexpr AckSearchCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckSearchCommunityDefaultTypeInternal() {}
  union {
    AckSearchCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckSearchCommunityDefaultTypeInternal _AckSearchCommunity_default_instance_;
constexpr ReqQueryCommunity::ReqQueryCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , community_id_(0){}
struct ReqQueryCommunityDefaultTypeInternal {
  constexpr ReqQueryCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqQueryCommunityDefaultTypeInternal() {}
  union {
    ReqQueryCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqQueryCommunityDefaultTypeInternal _ReqQueryCommunity_default_instance_;
constexpr AckQueryCommunity::AckQueryCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : member_info_list_()
  , community_info_(nullptr)
  , event_code_(0)
{}
struct AckQueryCommunityDefaultTypeInternal {
  constexpr AckQueryCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckQueryCommunityDefaultTypeInternal() {}
  union {
    AckQueryCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckQueryCommunityDefaultTypeInternal _AckQueryCommunity_default_instance_;
constexpr ReqSpecifiedCommunityPage::ReqSpecifiedCommunityPage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , sort_type_(0)
  , show_only_satisfy_rules_(0)
  , hide_member_is_full_(0)
  , page_no_(0){}
struct ReqSpecifiedCommunityPageDefaultTypeInternal {
  constexpr ReqSpecifiedCommunityPageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqSpecifiedCommunityPageDefaultTypeInternal() {}
  union {
    ReqSpecifiedCommunityPage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqSpecifiedCommunityPageDefaultTypeInternal _ReqSpecifiedCommunityPage_default_instance_;
constexpr AckSpecifiedCommunityPage::AckSpecifiedCommunityPage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : community_info_list_()
  , event_code_(0)

  , cur_page_no_(0)
  , total_page_no_(0){}
struct AckSpecifiedCommunityPageDefaultTypeInternal {
  constexpr AckSpecifiedCommunityPageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckSpecifiedCommunityPageDefaultTypeInternal() {}
  union {
    AckSpecifiedCommunityPage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckSpecifiedCommunityPageDefaultTypeInternal _AckSpecifiedCommunityPage_default_instance_;
constexpr ReqQuickJoinCommunity::ReqQuickJoinCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqQuickJoinCommunityDefaultTypeInternal {
  constexpr ReqQuickJoinCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqQuickJoinCommunityDefaultTypeInternal() {}
  union {
    ReqQuickJoinCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqQuickJoinCommunityDefaultTypeInternal _ReqQuickJoinCommunity_default_instance_;
constexpr AckQuickJoinCommunity::AckQuickJoinCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : community_chat_channel_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , community_id_(0)
  , position_(0)
{}
struct AckQuickJoinCommunityDefaultTypeInternal {
  constexpr AckQuickJoinCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckQuickJoinCommunityDefaultTypeInternal() {}
  union {
    AckQuickJoinCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckQuickJoinCommunityDefaultTypeInternal _AckQuickJoinCommunity_default_instance_;
constexpr ReqApplyJoinCommunity::ReqApplyJoinCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , community_id_(0){}
struct ReqApplyJoinCommunityDefaultTypeInternal {
  constexpr ReqApplyJoinCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqApplyJoinCommunityDefaultTypeInternal() {}
  union {
    ReqApplyJoinCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqApplyJoinCommunityDefaultTypeInternal _ReqApplyJoinCommunity_default_instance_;
constexpr AckApplyJoinCommunity::AckApplyJoinCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : community_chat_channel_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , community_id_(0)
  , position_(0)
{}
struct AckApplyJoinCommunityDefaultTypeInternal {
  constexpr AckApplyJoinCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckApplyJoinCommunityDefaultTypeInternal() {}
  union {
    AckApplyJoinCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckApplyJoinCommunityDefaultTypeInternal _AckApplyJoinCommunity_default_instance_;
constexpr ReqCancelJoinCommunity::ReqCancelJoinCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , community_id_(0){}
struct ReqCancelJoinCommunityDefaultTypeInternal {
  constexpr ReqCancelJoinCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCancelJoinCommunityDefaultTypeInternal() {}
  union {
    ReqCancelJoinCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCancelJoinCommunityDefaultTypeInternal _ReqCancelJoinCommunity_default_instance_;
constexpr AckCancelJoinCommunity::AckCancelJoinCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckCancelJoinCommunityDefaultTypeInternal {
  constexpr AckCancelJoinCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCancelJoinCommunityDefaultTypeInternal() {}
  union {
    AckCancelJoinCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCancelJoinCommunityDefaultTypeInternal _AckCancelJoinCommunity_default_instance_;
constexpr ReqAppliedCommunityList::ReqAppliedCommunityList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqAppliedCommunityListDefaultTypeInternal {
  constexpr ReqAppliedCommunityListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAppliedCommunityListDefaultTypeInternal() {}
  union {
    ReqAppliedCommunityList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAppliedCommunityListDefaultTypeInternal _ReqAppliedCommunityList_default_instance_;
constexpr AckAppliedCommunityList::AckAppliedCommunityList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : applied_community_info_list_()
  , event_code_(0)
{}
struct AckAppliedCommunityListDefaultTypeInternal {
  constexpr AckAppliedCommunityListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckAppliedCommunityListDefaultTypeInternal() {}
  union {
    AckAppliedCommunityList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckAppliedCommunityListDefaultTypeInternal _AckAppliedCommunityList_default_instance_;
constexpr ReqModifyNameAndDeclaration::ReqModifyNameAndDeclaration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : community_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_declaration_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , community_id_(0){}
struct ReqModifyNameAndDeclarationDefaultTypeInternal {
  constexpr ReqModifyNameAndDeclarationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqModifyNameAndDeclarationDefaultTypeInternal() {}
  union {
    ReqModifyNameAndDeclaration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqModifyNameAndDeclarationDefaultTypeInternal _ReqModifyNameAndDeclaration_default_instance_;
constexpr AckModifyNameAndDeclaration::AckModifyNameAndDeclaration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : community_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_declaration_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckModifyNameAndDeclarationDefaultTypeInternal {
  constexpr AckModifyNameAndDeclarationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckModifyNameAndDeclarationDefaultTypeInternal() {}
  union {
    AckModifyNameAndDeclaration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckModifyNameAndDeclarationDefaultTypeInternal _AckModifyNameAndDeclaration_default_instance_;
constexpr ReqModifyFlagAndIcon::ReqModifyFlagAndIcon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : community_flag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , community_id_(0){}
struct ReqModifyFlagAndIconDefaultTypeInternal {
  constexpr ReqModifyFlagAndIconDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqModifyFlagAndIconDefaultTypeInternal() {}
  union {
    ReqModifyFlagAndIcon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqModifyFlagAndIconDefaultTypeInternal _ReqModifyFlagAndIcon_default_instance_;
constexpr AckModifyFlagAndIcon::AckModifyFlagAndIcon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : community_flag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckModifyFlagAndIconDefaultTypeInternal {
  constexpr AckModifyFlagAndIconDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckModifyFlagAndIconDefaultTypeInternal() {}
  union {
    AckModifyFlagAndIcon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckModifyFlagAndIconDefaultTypeInternal _AckModifyFlagAndIcon_default_instance_;
constexpr ReqModifyApprovedRules::ReqModifyApprovedRules(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , community_id_(0)
  , community_approve_type_(0)
  , level_restriction_(0){}
struct ReqModifyApprovedRulesDefaultTypeInternal {
  constexpr ReqModifyApprovedRulesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqModifyApprovedRulesDefaultTypeInternal() {}
  union {
    ReqModifyApprovedRules _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqModifyApprovedRulesDefaultTypeInternal _ReqModifyApprovedRules_default_instance_;
constexpr AckModifyApprovedRules::AckModifyApprovedRules(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)

  , community_approve_type_(0)
  , level_restriction_(0){}
struct AckModifyApprovedRulesDefaultTypeInternal {
  constexpr AckModifyApprovedRulesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckModifyApprovedRulesDefaultTypeInternal() {}
  union {
    AckModifyApprovedRules _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckModifyApprovedRulesDefaultTypeInternal _AckModifyApprovedRules_default_instance_;
constexpr ReqPromotionOrDemotionManager::ReqPromotionOrDemotionManager(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , target_id_(nullptr)
  , community_id_(0)
  , opt_type_(0){}
struct ReqPromotionOrDemotionManagerDefaultTypeInternal {
  constexpr ReqPromotionOrDemotionManagerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqPromotionOrDemotionManagerDefaultTypeInternal() {}
  union {
    ReqPromotionOrDemotionManager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqPromotionOrDemotionManagerDefaultTypeInternal _ReqPromotionOrDemotionManager_default_instance_;
constexpr AckPromotionOrDemotionManager::AckPromotionOrDemotionManager(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckPromotionOrDemotionManagerDefaultTypeInternal {
  constexpr AckPromotionOrDemotionManagerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckPromotionOrDemotionManagerDefaultTypeInternal() {}
  union {
    AckPromotionOrDemotionManager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckPromotionOrDemotionManagerDefaultTypeInternal _AckPromotionOrDemotionManager_default_instance_;
constexpr ReqAppliedPlayerList::ReqAppliedPlayerList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , community_id_(0){}
struct ReqAppliedPlayerListDefaultTypeInternal {
  constexpr ReqAppliedPlayerListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAppliedPlayerListDefaultTypeInternal() {}
  union {
    ReqAppliedPlayerList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAppliedPlayerListDefaultTypeInternal _ReqAppliedPlayerList_default_instance_;
constexpr AckAppliedPlayerList::AckAppliedPlayerList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : applied_player_info_list_()
  , event_code_(0)
{}
struct AckAppliedPlayerListDefaultTypeInternal {
  constexpr AckAppliedPlayerListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckAppliedPlayerListDefaultTypeInternal() {}
  union {
    AckAppliedPlayerList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckAppliedPlayerListDefaultTypeInternal _AckAppliedPlayerList_default_instance_;
constexpr ReqDealWithJoinCommunity::ReqDealWithJoinCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , target_id_(nullptr)
  , community_id_(0)
  , opt_type_(0){}
struct ReqDealWithJoinCommunityDefaultTypeInternal {
  constexpr ReqDealWithJoinCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqDealWithJoinCommunityDefaultTypeInternal() {}
  union {
    ReqDealWithJoinCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqDealWithJoinCommunityDefaultTypeInternal _ReqDealWithJoinCommunity_default_instance_;
constexpr AckDealWithJoinCommunity::AckDealWithJoinCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckDealWithJoinCommunityDefaultTypeInternal {
  constexpr AckDealWithJoinCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckDealWithJoinCommunityDefaultTypeInternal() {}
  union {
    AckDealWithJoinCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckDealWithJoinCommunityDefaultTypeInternal _AckDealWithJoinCommunity_default_instance_;
constexpr ReqQuitCommunity::ReqQuitCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , community_id_(0){}
struct ReqQuitCommunityDefaultTypeInternal {
  constexpr ReqQuitCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqQuitCommunityDefaultTypeInternal() {}
  union {
    ReqQuitCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqQuitCommunityDefaultTypeInternal _ReqQuitCommunity_default_instance_;
constexpr AckQuitCommunity::AckQuitCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : community_chat_channel_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , community_id_(0)
  , position_(0)
{}
struct AckQuitCommunityDefaultTypeInternal {
  constexpr AckQuitCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckQuitCommunityDefaultTypeInternal() {}
  union {
    AckQuitCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckQuitCommunityDefaultTypeInternal _AckQuitCommunity_default_instance_;
constexpr ReqGetOutOfMyCommunity::ReqGetOutOfMyCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , target_id_(nullptr)
  , community_id_(0){}
struct ReqGetOutOfMyCommunityDefaultTypeInternal {
  constexpr ReqGetOutOfMyCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetOutOfMyCommunityDefaultTypeInternal() {}
  union {
    ReqGetOutOfMyCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetOutOfMyCommunityDefaultTypeInternal _ReqGetOutOfMyCommunity_default_instance_;
constexpr AckGetOutOfMyCommunity::AckGetOutOfMyCommunity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckGetOutOfMyCommunityDefaultTypeInternal {
  constexpr AckGetOutOfMyCommunityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckGetOutOfMyCommunityDefaultTypeInternal() {}
  union {
    AckGetOutOfMyCommunity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckGetOutOfMyCommunityDefaultTypeInternal _AckGetOutOfMyCommunity_default_instance_;
constexpr ReqCommunitySignIn::ReqCommunitySignIn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , community_id_(0){}
struct ReqCommunitySignInDefaultTypeInternal {
  constexpr ReqCommunitySignInDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCommunitySignInDefaultTypeInternal() {}
  union {
    ReqCommunitySignIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCommunitySignInDefaultTypeInternal _ReqCommunitySignIn_default_instance_;
constexpr AckCommunitySignIn::AckCommunitySignIn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_list_()
  , event_code_(0)
{}
struct AckCommunitySignInDefaultTypeInternal {
  constexpr AckCommunitySignInDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCommunitySignInDefaultTypeInternal() {}
  union {
    AckCommunitySignIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCommunitySignInDefaultTypeInternal _AckCommunitySignIn_default_instance_;
constexpr PlayerBaseInfo::PlayerBaseInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_frame_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , offline_ts_(int64_t{0})
  , level_(0)
  , community_id_(0){}
struct PlayerBaseInfoDefaultTypeInternal {
  constexpr PlayerBaseInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerBaseInfoDefaultTypeInternal() {}
  union {
    PlayerBaseInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerBaseInfoDefaultTypeInternal _PlayerBaseInfo_default_instance_;
constexpr FriendInfo::FriendInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_info_(nullptr)
  , add_ts_(int64_t{0})
  , is_collect_(0){}
struct FriendInfoDefaultTypeInternal {
  constexpr FriendInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FriendInfoDefaultTypeInternal() {}
  union {
    FriendInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
constexpr AppliedFriendInfo::AppliedFriendInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_info_(nullptr)
  , apply_ts_(int64_t{0}){}
struct AppliedFriendInfoDefaultTypeInternal {
  constexpr AppliedFriendInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppliedFriendInfoDefaultTypeInternal() {}
  union {
    AppliedFriendInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppliedFriendInfoDefaultTypeInternal _AppliedFriendInfo_default_instance_;
constexpr RecommendedFriendInfo::RecommendedFriendInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_info_(nullptr)
  , recommended_type_(0)
{}
struct RecommendedFriendInfoDefaultTypeInternal {
  constexpr RecommendedFriendInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecommendedFriendInfoDefaultTypeInternal() {}
  union {
    RecommendedFriendInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecommendedFriendInfoDefaultTypeInternal _RecommendedFriendInfo_default_instance_;
constexpr ReqFriendList::ReqFriendList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqFriendListDefaultTypeInternal {
  constexpr ReqFriendListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqFriendListDefaultTypeInternal() {}
  union {
    ReqFriendList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqFriendListDefaultTypeInternal _ReqFriendList_default_instance_;
constexpr AckFriendList::AckFriendList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_list_()
  , event_code_(0)
{}
struct AckFriendListDefaultTypeInternal {
  constexpr AckFriendListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckFriendListDefaultTypeInternal() {}
  union {
    AckFriendList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckFriendListDefaultTypeInternal _AckFriendList_default_instance_;
constexpr ReqAppliedFriendList::ReqAppliedFriendList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqAppliedFriendListDefaultTypeInternal {
  constexpr ReqAppliedFriendListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAppliedFriendListDefaultTypeInternal() {}
  union {
    ReqAppliedFriendList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAppliedFriendListDefaultTypeInternal _ReqAppliedFriendList_default_instance_;
constexpr AckAppliedFriendList::AckAppliedFriendList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_list_()
  , event_code_(0)
{}
struct AckAppliedFriendListDefaultTypeInternal {
  constexpr AckAppliedFriendListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckAppliedFriendListDefaultTypeInternal() {}
  union {
    AckAppliedFriendList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckAppliedFriendListDefaultTypeInternal _AckAppliedFriendList_default_instance_;
constexpr ReqAddFriend::ReqAddFriend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , target_id_(nullptr){}
struct ReqAddFriendDefaultTypeInternal {
  constexpr ReqAddFriendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAddFriendDefaultTypeInternal() {}
  union {
    ReqAddFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAddFriendDefaultTypeInternal _ReqAddFriend_default_instance_;
constexpr AckAddFriend::AckAddFriend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckAddFriendDefaultTypeInternal {
  constexpr AckAddFriendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckAddFriendDefaultTypeInternal() {}
  union {
    AckAddFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckAddFriendDefaultTypeInternal _AckAddFriend_default_instance_;
constexpr ReqDealWithAddFriend::ReqDealWithAddFriend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , target_id_(nullptr)
  , opt_type_(0){}
struct ReqDealWithAddFriendDefaultTypeInternal {
  constexpr ReqDealWithAddFriendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqDealWithAddFriendDefaultTypeInternal() {}
  union {
    ReqDealWithAddFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqDealWithAddFriendDefaultTypeInternal _ReqDealWithAddFriend_default_instance_;
constexpr AckDealWithAddFriend::AckDealWithAddFriend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckDealWithAddFriendDefaultTypeInternal {
  constexpr AckDealWithAddFriendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckDealWithAddFriendDefaultTypeInternal() {}
  union {
    AckDealWithAddFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckDealWithAddFriendDefaultTypeInternal _AckDealWithAddFriend_default_instance_;
constexpr ReqDelFriend::ReqDelFriend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , target_id_(nullptr){}
struct ReqDelFriendDefaultTypeInternal {
  constexpr ReqDelFriendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqDelFriendDefaultTypeInternal() {}
  union {
    ReqDelFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqDelFriendDefaultTypeInternal _ReqDelFriend_default_instance_;
constexpr AckDelFriend::AckDelFriend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_id_(nullptr)
  , event_code_(0)
{}
struct AckDelFriendDefaultTypeInternal {
  constexpr AckDelFriendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckDelFriendDefaultTypeInternal() {}
  union {
    AckDelFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckDelFriendDefaultTypeInternal _AckDelFriend_default_instance_;
constexpr ReqBlacklist::ReqBlacklist(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqBlacklistDefaultTypeInternal {
  constexpr ReqBlacklistDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBlacklistDefaultTypeInternal() {}
  union {
    ReqBlacklist _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBlacklistDefaultTypeInternal _ReqBlacklist_default_instance_;
constexpr AckBlacklist::AckBlacklist(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_list_()
  , event_code_(0)
{}
struct AckBlacklistDefaultTypeInternal {
  constexpr AckBlacklistDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBlacklistDefaultTypeInternal() {}
  union {
    AckBlacklist _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBlacklistDefaultTypeInternal _AckBlacklist_default_instance_;
constexpr ReqBlacklistOpt::ReqBlacklistOpt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , target_id_(nullptr)
  , opt_type_(0){}
struct ReqBlacklistOptDefaultTypeInternal {
  constexpr ReqBlacklistOptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBlacklistOptDefaultTypeInternal() {}
  union {
    ReqBlacklistOpt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBlacklistOptDefaultTypeInternal _ReqBlacklistOpt_default_instance_;
constexpr AckBlacklistOpt::AckBlacklistOpt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_id_(nullptr)
  , event_code_(0)
{}
struct AckBlacklistOptDefaultTypeInternal {
  constexpr AckBlacklistOptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBlacklistOptDefaultTypeInternal() {}
  union {
    AckBlacklistOpt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBlacklistOptDefaultTypeInternal _AckBlacklistOpt_default_instance_;
constexpr ReqRecommendedFriendList::ReqRecommendedFriendList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , refresh_flag_(0){}
struct ReqRecommendedFriendListDefaultTypeInternal {
  constexpr ReqRecommendedFriendListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqRecommendedFriendListDefaultTypeInternal() {}
  union {
    ReqRecommendedFriendList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqRecommendedFriendListDefaultTypeInternal _ReqRecommendedFriendList_default_instance_;
constexpr AckRecommendedFriendList::AckRecommendedFriendList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : info_list_()
  , event_code_(0)
{}
struct AckRecommendedFriendListDefaultTypeInternal {
  constexpr AckRecommendedFriendListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckRecommendedFriendListDefaultTypeInternal() {}
  union {
    AckRecommendedFriendList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckRecommendedFriendListDefaultTypeInternal _AckRecommendedFriendList_default_instance_;
constexpr ReqFriendCollectOpt::ReqFriendCollectOpt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , target_id_(nullptr)
  , opt_type_(0){}
struct ReqFriendCollectOptDefaultTypeInternal {
  constexpr ReqFriendCollectOptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqFriendCollectOptDefaultTypeInternal() {}
  union {
    ReqFriendCollectOpt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqFriendCollectOptDefaultTypeInternal _ReqFriendCollectOpt_default_instance_;
constexpr AckFriendCollectOpt::AckFriendCollectOpt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_id_(nullptr)
  , event_code_(0)
{}
struct AckFriendCollectOptDefaultTypeInternal {
  constexpr AckFriendCollectOptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckFriendCollectOptDefaultTypeInternal() {}
  union {
    AckFriendCollectOpt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckFriendCollectOptDefaultTypeInternal _AckFriendCollectOpt_default_instance_;
constexpr ReqFindPlayer::ReqFindPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_name_or_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , find_type_(0){}
struct ReqFindPlayerDefaultTypeInternal {
  constexpr ReqFindPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqFindPlayerDefaultTypeInternal() {}
  union {
    ReqFindPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqFindPlayerDefaultTypeInternal _ReqFindPlayer_default_instance_;
constexpr AckFindPlayer::AckFindPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_info_(nullptr)
  , event_code_(0)
{}
struct AckFindPlayerDefaultTypeInternal {
  constexpr AckFindPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckFindPlayerDefaultTypeInternal() {}
  union {
    AckFindPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckFindPlayerDefaultTypeInternal _AckFindPlayer_default_instance_;
constexpr ReqExploreUpdateNodePostion::ReqExploreUpdateNodePostion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : explore_node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqExploreUpdateNodePostionDefaultTypeInternal {
  constexpr ReqExploreUpdateNodePostionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqExploreUpdateNodePostionDefaultTypeInternal() {}
  union {
    ReqExploreUpdateNodePostion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqExploreUpdateNodePostionDefaultTypeInternal _ReqExploreUpdateNodePostion_default_instance_;
constexpr AckExploreUpdateNodePostion::AckExploreUpdateNodePostion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : explore_node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckExploreUpdateNodePostionDefaultTypeInternal {
  constexpr AckExploreUpdateNodePostionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckExploreUpdateNodePostionDefaultTypeInternal() {}
  union {
    AckExploreUpdateNodePostion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckExploreUpdateNodePostionDefaultTypeInternal _AckExploreUpdateNodePostion_default_instance_;
constexpr ReqGetExploreAreaProgressRewards::ReqGetExploreAreaProgressRewards(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : explore_area_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqGetExploreAreaProgressRewardsDefaultTypeInternal {
  constexpr ReqGetExploreAreaProgressRewardsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetExploreAreaProgressRewardsDefaultTypeInternal() {}
  union {
    ReqGetExploreAreaProgressRewards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetExploreAreaProgressRewardsDefaultTypeInternal _ReqGetExploreAreaProgressRewards_default_instance_;
constexpr AckGetExploreAreaProgressRewards::AckGetExploreAreaProgressRewards(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_list_()
  , event_code_(0)
{}
struct AckGetExploreAreaProgressRewardsDefaultTypeInternal {
  constexpr AckGetExploreAreaProgressRewardsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckGetExploreAreaProgressRewardsDefaultTypeInternal() {}
  union {
    AckGetExploreAreaProgressRewards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckGetExploreAreaProgressRewardsDefaultTypeInternal _AckGetExploreAreaProgressRewards_default_instance_;
constexpr ReqSweepExploreThreeStarNode::ReqSweepExploreThreeStarNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : explore_node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , sweep_count_(0){}
struct ReqSweepExploreThreeStarNodeDefaultTypeInternal {
  constexpr ReqSweepExploreThreeStarNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqSweepExploreThreeStarNodeDefaultTypeInternal() {}
  union {
    ReqSweepExploreThreeStarNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqSweepExploreThreeStarNodeDefaultTypeInternal _ReqSweepExploreThreeStarNode_default_instance_;
constexpr AckSweepExploreThreeStarNode::AckSweepExploreThreeStarNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_list_()
  , extra_reward_list_()
  , event_code_(0)
{}
struct AckSweepExploreThreeStarNodeDefaultTypeInternal {
  constexpr AckSweepExploreThreeStarNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckSweepExploreThreeStarNodeDefaultTypeInternal() {}
  union {
    AckSweepExploreThreeStarNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckSweepExploreThreeStarNodeDefaultTypeInternal _AckSweepExploreThreeStarNode_default_instance_;
constexpr ReqGetExploreMapStarRewards::ReqGetExploreMapStarRewards(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : explore_map_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , target_(0){}
struct ReqGetExploreMapStarRewardsDefaultTypeInternal {
  constexpr ReqGetExploreMapStarRewardsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetExploreMapStarRewardsDefaultTypeInternal() {}
  union {
    ReqGetExploreMapStarRewards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetExploreMapStarRewardsDefaultTypeInternal _ReqGetExploreMapStarRewards_default_instance_;
constexpr AckGetExploreMapStarRewards::AckGetExploreMapStarRewards(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_list_()
  , event_code_(0)
{}
struct AckGetExploreMapStarRewardsDefaultTypeInternal {
  constexpr AckGetExploreMapStarRewardsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckGetExploreMapStarRewardsDefaultTypeInternal() {}
  union {
    AckGetExploreMapStarRewards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckGetExploreMapStarRewardsDefaultTypeInternal _AckGetExploreMapStarRewards_default_instance_;
constexpr ReqGetExploreMapBranchlineRewards::ReqGetExploreMapBranchlineRewards(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : explore_map_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , target_(0){}
struct ReqGetExploreMapBranchlineRewardsDefaultTypeInternal {
  constexpr ReqGetExploreMapBranchlineRewardsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetExploreMapBranchlineRewardsDefaultTypeInternal() {}
  union {
    ReqGetExploreMapBranchlineRewards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetExploreMapBranchlineRewardsDefaultTypeInternal _ReqGetExploreMapBranchlineRewards_default_instance_;
constexpr AckGetExploreMapBranchlineRewards::AckGetExploreMapBranchlineRewards(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_list_()
  , event_code_(0)
{}
struct AckGetExploreMapBranchlineRewardsDefaultTypeInternal {
  constexpr AckGetExploreMapBranchlineRewardsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckGetExploreMapBranchlineRewardsDefaultTypeInternal() {}
  union {
    AckGetExploreMapBranchlineRewards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckGetExploreMapBranchlineRewardsDefaultTypeInternal _AckGetExploreMapBranchlineRewards_default_instance_;
constexpr ReqUpgradeExploreGuiderFriendship::ReqUpgradeExploreGuiderFriendship(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : explore_guider_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqUpgradeExploreGuiderFriendshipDefaultTypeInternal {
  constexpr ReqUpgradeExploreGuiderFriendshipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqUpgradeExploreGuiderFriendshipDefaultTypeInternal() {}
  union {
    ReqUpgradeExploreGuiderFriendship _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqUpgradeExploreGuiderFriendshipDefaultTypeInternal _ReqUpgradeExploreGuiderFriendship_default_instance_;
constexpr AckUpgradeExploreGuiderFriendship::AckUpgradeExploreGuiderFriendship(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckUpgradeExploreGuiderFriendshipDefaultTypeInternal {
  constexpr AckUpgradeExploreGuiderFriendshipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckUpgradeExploreGuiderFriendshipDefaultTypeInternal() {}
  union {
    AckUpgradeExploreGuiderFriendship _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckUpgradeExploreGuiderFriendshipDefaultTypeInternal _AckUpgradeExploreGuiderFriendship_default_instance_;
constexpr ReqGetAppointReward::ReqGetAppointReward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqGetAppointRewardDefaultTypeInternal {
  constexpr ReqGetAppointRewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetAppointRewardDefaultTypeInternal() {}
  union {
    ReqGetAppointReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetAppointRewardDefaultTypeInternal _ReqGetAppointReward_default_instance_;
constexpr AckGetAppointReward::AckGetAppointReward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rewards_()
  , event_code_(0)
{}
struct AckGetAppointRewardDefaultTypeInternal {
  constexpr AckGetAppointRewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckGetAppointRewardDefaultTypeInternal() {}
  union {
    AckGetAppointReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckGetAppointRewardDefaultTypeInternal _AckGetAppointReward_default_instance_;
constexpr ReqSwitchAppointArea::ReqSwitchAppointArea(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appoint_area_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqSwitchAppointAreaDefaultTypeInternal {
  constexpr ReqSwitchAppointAreaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqSwitchAppointAreaDefaultTypeInternal() {}
  union {
    ReqSwitchAppointArea _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqSwitchAppointAreaDefaultTypeInternal _ReqSwitchAppointArea_default_instance_;
constexpr AckSwitchAppointArea::AckSwitchAppointArea(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rewards_()
  , appoint_area_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckSwitchAppointAreaDefaultTypeInternal {
  constexpr AckSwitchAppointAreaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckSwitchAppointAreaDefaultTypeInternal() {}
  union {
    AckSwitchAppointArea _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckSwitchAppointAreaDefaultTypeInternal _AckSwitchAppointArea_default_instance_;
constexpr ReqStartAffair::ReqStartAffair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : affair_position_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , affair_guid_(nullptr){}
struct ReqStartAffairDefaultTypeInternal {
  constexpr ReqStartAffairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqStartAffairDefaultTypeInternal() {}
  union {
    ReqStartAffair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqStartAffairDefaultTypeInternal _ReqStartAffair_default_instance_;
constexpr AckStartAffair::AckStartAffair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : affair_position_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , affair_guid_(nullptr)
  , event_code_(0)
{}
struct AckStartAffairDefaultTypeInternal {
  constexpr AckStartAffairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckStartAffairDefaultTypeInternal() {}
  union {
    AckStartAffair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckStartAffairDefaultTypeInternal _AckStartAffair_default_instance_;
constexpr ReqTerminateAffair::ReqTerminateAffair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : affair_position_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqTerminateAffairDefaultTypeInternal {
  constexpr ReqTerminateAffairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqTerminateAffairDefaultTypeInternal() {}
  union {
    ReqTerminateAffair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqTerminateAffairDefaultTypeInternal _ReqTerminateAffair_default_instance_;
constexpr AckTerminateAffair::AckTerminateAffair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : affair_position_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckTerminateAffairDefaultTypeInternal {
  constexpr AckTerminateAffairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckTerminateAffairDefaultTypeInternal() {}
  union {
    AckTerminateAffair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckTerminateAffairDefaultTypeInternal _AckTerminateAffair_default_instance_;
constexpr ReqGetAffairReward::ReqGetAffairReward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : affair_position_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqGetAffairRewardDefaultTypeInternal {
  constexpr ReqGetAffairRewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetAffairRewardDefaultTypeInternal() {}
  union {
    ReqGetAffairReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetAffairRewardDefaultTypeInternal _ReqGetAffairReward_default_instance_;
constexpr AckGetAffairReward::AckGetAffairReward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rewards_()
  , affair_position_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckGetAffairRewardDefaultTypeInternal {
  constexpr AckGetAffairRewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckGetAffairRewardDefaultTypeInternal() {}
  union {
    AckGetAffairReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckGetAffairRewardDefaultTypeInternal _AckGetAffairReward_default_instance_;
constexpr ReqDeleteAffair::ReqDeleteAffair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , affair_guid_(nullptr){}
struct ReqDeleteAffairDefaultTypeInternal {
  constexpr ReqDeleteAffairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqDeleteAffairDefaultTypeInternal() {}
  union {
    ReqDeleteAffair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqDeleteAffairDefaultTypeInternal _ReqDeleteAffair_default_instance_;
constexpr AckDeleteAffair::AckDeleteAffair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : affair_guid_(nullptr)
  , event_code_(0)
{}
struct AckDeleteAffairDefaultTypeInternal {
  constexpr AckDeleteAffairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckDeleteAffairDefaultTypeInternal() {}
  union {
    AckDeleteAffair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckDeleteAffairDefaultTypeInternal _AckDeleteAffair_default_instance_;
constexpr ReqStartAppoint::ReqStartAppoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqStartAppointDefaultTypeInternal {
  constexpr ReqStartAppointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqStartAppointDefaultTypeInternal() {}
  union {
    ReqStartAppoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqStartAppointDefaultTypeInternal _ReqStartAppoint_default_instance_;
constexpr AckStartAppoint::AckStartAppoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckStartAppointDefaultTypeInternal {
  constexpr AckStartAppointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckStartAppointDefaultTypeInternal() {}
  union {
    AckStartAppoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckStartAppointDefaultTypeInternal _AckStartAppoint_default_instance_;
constexpr ReqSetHouseKeeper::ReqSetHouseKeeper(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqSetHouseKeeperDefaultTypeInternal {
  constexpr ReqSetHouseKeeperDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqSetHouseKeeperDefaultTypeInternal() {}
  union {
    ReqSetHouseKeeper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqSetHouseKeeperDefaultTypeInternal _ReqSetHouseKeeper_default_instance_;
constexpr AckSetHouseKeeper::AckSetHouseKeeper(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckSetHouseKeeperDefaultTypeInternal {
  constexpr AckSetHouseKeeperDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckSetHouseKeeperDefaultTypeInternal() {}
  union {
    AckSetHouseKeeper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckSetHouseKeeperDefaultTypeInternal _AckSetHouseKeeper_default_instance_;
constexpr ReqSetHouseKeeperSkinId::ReqSetHouseKeeperSkinId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , witch_skin_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqSetHouseKeeperSkinIdDefaultTypeInternal {
  constexpr ReqSetHouseKeeperSkinIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqSetHouseKeeperSkinIdDefaultTypeInternal() {}
  union {
    ReqSetHouseKeeperSkinId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqSetHouseKeeperSkinIdDefaultTypeInternal _ReqSetHouseKeeperSkinId_default_instance_;
constexpr AckSetHouseKeeperSkinId::AckSetHouseKeeperSkinId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckSetHouseKeeperSkinIdDefaultTypeInternal {
  constexpr AckSetHouseKeeperSkinIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckSetHouseKeeperSkinIdDefaultTypeInternal() {}
  union {
    AckSetHouseKeeperSkinId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckSetHouseKeeperSkinIdDefaultTypeInternal _AckSetHouseKeeperSkinId_default_instance_;
constexpr ReqHousekeeperInitSignin::ReqHousekeeperInitSignin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqHousekeeperInitSigninDefaultTypeInternal {
  constexpr ReqHousekeeperInitSigninDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqHousekeeperInitSigninDefaultTypeInternal() {}
  union {
    ReqHousekeeperInitSignin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqHousekeeperInitSigninDefaultTypeInternal _ReqHousekeeperInitSignin_default_instance_;
constexpr AckHousekeeperInitSignin::AckHousekeeperInitSignin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckHousekeeperInitSigninDefaultTypeInternal {
  constexpr AckHousekeeperInitSigninDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckHousekeeperInitSigninDefaultTypeInternal() {}
  union {
    AckHousekeeperInitSignin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckHousekeeperInitSigninDefaultTypeInternal _AckHousekeeperInitSignin_default_instance_;
constexpr ReqHousekeeperFinishedSignin::ReqHousekeeperFinishedSignin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqHousekeeperFinishedSigninDefaultTypeInternal {
  constexpr ReqHousekeeperFinishedSigninDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqHousekeeperFinishedSigninDefaultTypeInternal() {}
  union {
    ReqHousekeeperFinishedSignin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqHousekeeperFinishedSigninDefaultTypeInternal _ReqHousekeeperFinishedSignin_default_instance_;
constexpr AckHousekeeperFinishedSignin::AckHousekeeperFinishedSignin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckHousekeeperFinishedSigninDefaultTypeInternal {
  constexpr AckHousekeeperFinishedSigninDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckHousekeeperFinishedSigninDefaultTypeInternal() {}
  union {
    AckHousekeeperFinishedSignin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckHousekeeperFinishedSigninDefaultTypeInternal _AckHousekeeperFinishedSignin_default_instance_;
constexpr ReqGetPneumaIslandStarReward::ReqGetPneumaIslandStarReward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : boss_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , reward_idx_(0){}
struct ReqGetPneumaIslandStarRewardDefaultTypeInternal {
  constexpr ReqGetPneumaIslandStarRewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetPneumaIslandStarRewardDefaultTypeInternal() {}
  union {
    ReqGetPneumaIslandStarReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetPneumaIslandStarRewardDefaultTypeInternal _ReqGetPneumaIslandStarReward_default_instance_;
constexpr AckGetPneumaIslandStarReward::AckGetPneumaIslandStarReward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rewards_()
  , boss_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , reward_idx_(0){}
struct AckGetPneumaIslandStarRewardDefaultTypeInternal {
  constexpr AckGetPneumaIslandStarRewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckGetPneumaIslandStarRewardDefaultTypeInternal() {}
  union {
    AckGetPneumaIslandStarReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckGetPneumaIslandStarRewardDefaultTypeInternal _AckGetPneumaIslandStarReward_default_instance_;
constexpr ReqUpdatePneumaIslandShowState::ReqUpdatePneumaIslandShowState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : boss_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqUpdatePneumaIslandShowStateDefaultTypeInternal {
  constexpr ReqUpdatePneumaIslandShowStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqUpdatePneumaIslandShowStateDefaultTypeInternal() {}
  union {
    ReqUpdatePneumaIslandShowState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqUpdatePneumaIslandShowStateDefaultTypeInternal _ReqUpdatePneumaIslandShowState_default_instance_;
constexpr AckUpdatePneumaIslandShowState::AckUpdatePneumaIslandShowState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : boss_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckUpdatePneumaIslandShowStateDefaultTypeInternal {
  constexpr AckUpdatePneumaIslandShowStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckUpdatePneumaIslandShowStateDefaultTypeInternal() {}
  union {
    AckUpdatePneumaIslandShowState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckUpdatePneumaIslandShowStateDefaultTypeInternal _AckUpdatePneumaIslandShowState_default_instance_;
constexpr ReqUpdatePneumaAutoDecomposeState::ReqUpdatePneumaAutoDecomposeState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , enable_(0){}
struct ReqUpdatePneumaAutoDecomposeStateDefaultTypeInternal {
  constexpr ReqUpdatePneumaAutoDecomposeStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqUpdatePneumaAutoDecomposeStateDefaultTypeInternal() {}
  union {
    ReqUpdatePneumaAutoDecomposeState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqUpdatePneumaAutoDecomposeStateDefaultTypeInternal _ReqUpdatePneumaAutoDecomposeState_default_instance_;
constexpr AckUpdatePneumaAutoDecomposeState::AckUpdatePneumaAutoDecomposeState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)

  , enable_(0){}
struct AckUpdatePneumaAutoDecomposeStateDefaultTypeInternal {
  constexpr AckUpdatePneumaAutoDecomposeStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckUpdatePneumaAutoDecomposeStateDefaultTypeInternal() {}
  union {
    AckUpdatePneumaAutoDecomposeState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckUpdatePneumaAutoDecomposeStateDefaultTypeInternal _AckUpdatePneumaAutoDecomposeState_default_instance_;
constexpr PneumaDecomposeScheme::PneumaDecomposeScheme(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pneuma_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , decompose_scheme_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PneumaDecomposeSchemeDefaultTypeInternal {
  constexpr PneumaDecomposeSchemeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PneumaDecomposeSchemeDefaultTypeInternal() {}
  union {
    PneumaDecomposeScheme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PneumaDecomposeSchemeDefaultTypeInternal _PneumaDecomposeScheme_default_instance_;
constexpr ReqUpdatePneumaDecomposeScheme::ReqUpdatePneumaDecomposeScheme(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scheme_list_()
  , boss_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqUpdatePneumaDecomposeSchemeDefaultTypeInternal {
  constexpr ReqUpdatePneumaDecomposeSchemeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqUpdatePneumaDecomposeSchemeDefaultTypeInternal() {}
  union {
    ReqUpdatePneumaDecomposeScheme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqUpdatePneumaDecomposeSchemeDefaultTypeInternal _ReqUpdatePneumaDecomposeScheme_default_instance_;
constexpr AckUpdatePneumaDecomposeScheme::AckUpdatePneumaDecomposeScheme(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scheme_list_()
  , boss_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckUpdatePneumaDecomposeSchemeDefaultTypeInternal {
  constexpr AckUpdatePneumaDecomposeSchemeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckUpdatePneumaDecomposeSchemeDefaultTypeInternal() {}
  union {
    AckUpdatePneumaDecomposeScheme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckUpdatePneumaDecomposeSchemeDefaultTypeInternal _AckUpdatePneumaDecomposeScheme_default_instance_;
constexpr ReqCreateOrder::ReqCreateOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : product_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqCreateOrderDefaultTypeInternal {
  constexpr ReqCreateOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCreateOrderDefaultTypeInternal() {}
  union {
    ReqCreateOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCreateOrderDefaultTypeInternal _ReqCreateOrder_default_instance_;
constexpr AckCreateOrder::AckCreateOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : product_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , order_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , server_id_(0)
  , order_ts_(int64_t{0}){}
struct AckCreateOrderDefaultTypeInternal {
  constexpr AckCreateOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCreateOrderDefaultTypeInternal() {}
  union {
    AckCreateOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCreateOrderDefaultTypeInternal _AckCreateOrder_default_instance_;
constexpr ReqCallbackRecharge::ReqCallbackRecharge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sdk_uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdk_order_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_order_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , product_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , money_currency_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , order_currency_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(int64_t{0})
  , money_amount_(int64_t{0})
  , order_amount_(int64_t{0})
  , pay_type_(0)
  , platform_id_(0)
  , sandbox_(0)
  , source_type_(0){}
struct ReqCallbackRechargeDefaultTypeInternal {
  constexpr ReqCallbackRechargeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCallbackRechargeDefaultTypeInternal() {}
  union {
    ReqCallbackRecharge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCallbackRechargeDefaultTypeInternal _ReqCallbackRecharge_default_instance_;
constexpr AckCallbackRecharge::AckCallbackRecharge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_order_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdk_order_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , product_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , money_currency_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , order_currency_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extra_param_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , money_amount_(int64_t{0})
  , event_code_(0)

  , basic_add_number_(0)
  , order_amount_(int64_t{0})
  , extra_add_number_(0)
  , extra_param_type_(0){}
struct AckCallbackRechargeDefaultTypeInternal {
  constexpr AckCallbackRechargeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCallbackRechargeDefaultTypeInternal() {}
  union {
    AckCallbackRecharge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCallbackRechargeDefaultTypeInternal _AckCallbackRecharge_default_instance_;
constexpr MailInfo::MailInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_list_()
  , prompt_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , context_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parms_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mail_id_(nullptr)
  , create_ts_(int64_t{0})
  , deadline_ts_(int64_t{0}){}
struct MailInfoDefaultTypeInternal {
  constexpr MailInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MailInfoDefaultTypeInternal() {}
  union {
    MailInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MailInfoDefaultTypeInternal _MailInfo_default_instance_;
constexpr MailInfos::MailInfos(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : list_(){}
struct MailInfosDefaultTypeInternal {
  constexpr MailInfosDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MailInfosDefaultTypeInternal() {}
  union {
    MailInfos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MailInfosDefaultTypeInternal _MailInfos_default_instance_;
constexpr ReqDeleteReadedMails::ReqDeleteReadedMails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mail_ids_()
  , player_id_(nullptr){}
struct ReqDeleteReadedMailsDefaultTypeInternal {
  constexpr ReqDeleteReadedMailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqDeleteReadedMailsDefaultTypeInternal() {}
  union {
    ReqDeleteReadedMails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqDeleteReadedMailsDefaultTypeInternal _ReqDeleteReadedMails_default_instance_;
constexpr AckDeleteReadedMails::AckDeleteReadedMails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckDeleteReadedMailsDefaultTypeInternal {
  constexpr AckDeleteReadedMailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckDeleteReadedMailsDefaultTypeInternal() {}
  union {
    AckDeleteReadedMails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckDeleteReadedMailsDefaultTypeInternal _AckDeleteReadedMails_default_instance_;
constexpr ReqReadMails::ReqReadMails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mail_ids_()
  , player_id_(nullptr){}
struct ReqReadMailsDefaultTypeInternal {
  constexpr ReqReadMailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqReadMailsDefaultTypeInternal() {}
  union {
    ReqReadMails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqReadMailsDefaultTypeInternal _ReqReadMails_default_instance_;
constexpr AckReadMails::AckReadMails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_list_()
  , event_code_(0)
{}
struct AckReadMailsDefaultTypeInternal {
  constexpr AckReadMailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckReadMailsDefaultTypeInternal() {}
  union {
    AckReadMails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckReadMailsDefaultTypeInternal _AckReadMails_default_instance_;
constexpr ReqWorldSendMailToPlayer::ReqWorldSendMailToPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , mail_info_(nullptr){}
struct ReqWorldSendMailToPlayerDefaultTypeInternal {
  constexpr ReqWorldSendMailToPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqWorldSendMailToPlayerDefaultTypeInternal() {}
  union {
    ReqWorldSendMailToPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqWorldSendMailToPlayerDefaultTypeInternal _ReqWorldSendMailToPlayer_default_instance_;
constexpr AckWorldSendMailToPlayer::AckWorldSendMailToPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , mail_info_(nullptr)
  , event_code_(0)
{}
struct AckWorldSendMailToPlayerDefaultTypeInternal {
  constexpr AckWorldSendMailToPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckWorldSendMailToPlayerDefaultTypeInternal() {}
  union {
    AckWorldSendMailToPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckWorldSendMailToPlayerDefaultTypeInternal _AckWorldSendMailToPlayer_default_instance_;
constexpr SyncAddPreSendAllPlayersMails::SyncAddPreSendAllPlayersMails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mail_info_(nullptr){}
struct SyncAddPreSendAllPlayersMailsDefaultTypeInternal {
  constexpr SyncAddPreSendAllPlayersMailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncAddPreSendAllPlayersMailsDefaultTypeInternal() {}
  union {
    SyncAddPreSendAllPlayersMails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncAddPreSendAllPlayersMailsDefaultTypeInternal _SyncAddPreSendAllPlayersMails_default_instance_;
constexpr SyncDelPreSendAllPlayersMails::SyncDelPreSendAllPlayersMails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mail_info_(nullptr){}
struct SyncDelPreSendAllPlayersMailsDefaultTypeInternal {
  constexpr SyncDelPreSendAllPlayersMailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncDelPreSendAllPlayersMailsDefaultTypeInternal() {}
  union {
    SyncDelPreSendAllPlayersMails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncDelPreSendAllPlayersMailsDefaultTypeInternal _SyncDelPreSendAllPlayersMails_default_instance_;
constexpr SyncAddPreSendPlayerMails::SyncAddPreSendPlayerMails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , mail_info_(nullptr){}
struct SyncAddPreSendPlayerMailsDefaultTypeInternal {
  constexpr SyncAddPreSendPlayerMailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncAddPreSendPlayerMailsDefaultTypeInternal() {}
  union {
    SyncAddPreSendPlayerMails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncAddPreSendPlayerMailsDefaultTypeInternal _SyncAddPreSendPlayerMails_default_instance_;
constexpr SyncDelPreSendPlayerMails::SyncDelPreSendPlayerMails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , mail_info_(nullptr){}
struct SyncDelPreSendPlayerMailsDefaultTypeInternal {
  constexpr SyncDelPreSendPlayerMailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncDelPreSendPlayerMailsDefaultTypeInternal() {}
  union {
    SyncDelPreSendPlayerMails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncDelPreSendPlayerMailsDefaultTypeInternal _SyncDelPreSendPlayerMails_default_instance_;
constexpr SyncPlayerMailSessions::SyncPlayerMailSessions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , ts_(int64_t{0}){}
struct SyncPlayerMailSessionsDefaultTypeInternal {
  constexpr SyncPlayerMailSessionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncPlayerMailSessionsDefaultTypeInternal() {}
  union {
    SyncPlayerMailSessions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncPlayerMailSessionsDefaultTypeInternal _SyncPlayerMailSessions_default_instance_;
constexpr ReqRegisterChatSdkAccount::ReqRegisterChatSdkAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_sdk_passwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , world_id_(0){}
struct ReqRegisterChatSdkAccountDefaultTypeInternal {
  constexpr ReqRegisterChatSdkAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqRegisterChatSdkAccountDefaultTypeInternal() {}
  union {
    ReqRegisterChatSdkAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqRegisterChatSdkAccountDefaultTypeInternal _ReqRegisterChatSdkAccount_default_instance_;
constexpr AckRegisterChatSdkAccount::AckRegisterChatSdkAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_sdk_passwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , event_code_(0)

  , world_id_(0){}
struct AckRegisterChatSdkAccountDefaultTypeInternal {
  constexpr AckRegisterChatSdkAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckRegisterChatSdkAccountDefaultTypeInternal() {}
  union {
    AckRegisterChatSdkAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckRegisterChatSdkAccountDefaultTypeInternal _AckRegisterChatSdkAccount_default_instance_;
constexpr ReqCreateChatroom::ReqCreateChatroom(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chatroom_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extra_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chatroom_type_(0)
  , world_id_(0){}
struct ReqCreateChatroomDefaultTypeInternal {
  constexpr ReqCreateChatroomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCreateChatroomDefaultTypeInternal() {}
  union {
    ReqCreateChatroom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCreateChatroomDefaultTypeInternal _ReqCreateChatroom_default_instance_;
constexpr AckCreateChatroom::AckCreateChatroom(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chatroom_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extra_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chatroom_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , chatroom_type_(0)
  , world_id_(0){}
struct AckCreateChatroomDefaultTypeInternal {
  constexpr AckCreateChatroomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCreateChatroomDefaultTypeInternal() {}
  union {
    AckCreateChatroom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCreateChatroomDefaultTypeInternal _AckCreateChatroom_default_instance_;
constexpr ReqSdkLoginInfoAndChatroom::ReqSdkLoginInfoAndChatroom(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : community_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqSdkLoginInfoAndChatroomDefaultTypeInternal {
  constexpr ReqSdkLoginInfoAndChatroomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqSdkLoginInfoAndChatroomDefaultTypeInternal() {}
  union {
    ReqSdkLoginInfoAndChatroom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqSdkLoginInfoAndChatroomDefaultTypeInternal _ReqSdkLoginInfoAndChatroom_default_instance_;
constexpr AckSdkLoginInfoAndChatroom::AckSdkLoginInfoAndChatroom(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_sdk_passwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_chatroom_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , system_chatroom_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , community_chatroom_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckSdkLoginInfoAndChatroomDefaultTypeInternal {
  constexpr AckSdkLoginInfoAndChatroomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckSdkLoginInfoAndChatroomDefaultTypeInternal() {}
  union {
    AckSdkLoginInfoAndChatroom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckSdkLoginInfoAndChatroomDefaultTypeInternal _AckSdkLoginInfoAndChatroom_default_instance_;
constexpr ReqReportChatPlayer::ReqReportChatPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : report_content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , chat_player_id_(nullptr)
  , report_type_(0){}
struct ReqReportChatPlayerDefaultTypeInternal {
  constexpr ReqReportChatPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqReportChatPlayerDefaultTypeInternal() {}
  union {
    ReqReportChatPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqReportChatPlayerDefaultTypeInternal _ReqReportChatPlayer_default_instance_;
constexpr AckReportChatPlayer::AckReportChatPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : report_content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_player_id_(nullptr)
  , event_code_(0)

  , report_type_(0){}
struct AckReportChatPlayerDefaultTypeInternal {
  constexpr AckReportChatPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckReportChatPlayerDefaultTypeInternal() {}
  union {
    AckReportChatPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckReportChatPlayerDefaultTypeInternal _AckReportChatPlayer_default_instance_;
constexpr ReqSendChatroomMsg::ReqSendChatroomMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chatroom_ids_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReqSendChatroomMsgDefaultTypeInternal {
  constexpr ReqSendChatroomMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqSendChatroomMsgDefaultTypeInternal() {}
  union {
    ReqSendChatroomMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqSendChatroomMsgDefaultTypeInternal _ReqSendChatroomMsg_default_instance_;
constexpr AckSendChatroomMsg::AckSendChatroomMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chatroom_ids_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AckSendChatroomMsgDefaultTypeInternal {
  constexpr AckSendChatroomMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckSendChatroomMsgDefaultTypeInternal() {}
  union {
    AckSendChatroomMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckSendChatroomMsgDefaultTypeInternal _AckSendChatroomMsg_default_instance_;
constexpr ReqUpdateChatroomAnnouncement::ReqUpdateChatroomAnnouncement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chatroom_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , announcement_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReqUpdateChatroomAnnouncementDefaultTypeInternal {
  constexpr ReqUpdateChatroomAnnouncementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqUpdateChatroomAnnouncementDefaultTypeInternal() {}
  union {
    ReqUpdateChatroomAnnouncement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqUpdateChatroomAnnouncementDefaultTypeInternal _ReqUpdateChatroomAnnouncement_default_instance_;
constexpr AckUpdateChatroomAnnouncement::AckUpdateChatroomAnnouncement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chatroom_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , announcement_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AckUpdateChatroomAnnouncementDefaultTypeInternal {
  constexpr AckUpdateChatroomAnnouncementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckUpdateChatroomAnnouncementDefaultTypeInternal() {}
  union {
    AckUpdateChatroomAnnouncement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckUpdateChatroomAnnouncementDefaultTypeInternal _AckUpdateChatroomAnnouncement_default_instance_;
constexpr ReqCheckChatText::ReqCheckChatText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , other_player_id_(nullptr)
  , world_id_(0)
  , chat_type_(0)
{}
struct ReqCheckChatTextDefaultTypeInternal {
  constexpr ReqCheckChatTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCheckChatTextDefaultTypeInternal() {}
  union {
    ReqCheckChatText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCheckChatTextDefaultTypeInternal _ReqCheckChatText_default_instance_;
constexpr AckCheckChatText::AckCheckChatText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , other_player_id_(nullptr)
  , event_code_(0)

  , suggestion_(0)
  , world_id_(0)
  , chat_type_(0)
{}
struct AckCheckChatTextDefaultTypeInternal {
  constexpr AckCheckChatTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCheckChatTextDefaultTypeInternal() {}
  union {
    AckCheckChatText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCheckChatTextDefaultTypeInternal _AckCheckChatText_default_instance_;
constexpr ReqCreateChatGroup::ReqCreateChatGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extra_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_type_(0)
  , world_id_(0){}
struct ReqCreateChatGroupDefaultTypeInternal {
  constexpr ReqCreateChatGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCreateChatGroupDefaultTypeInternal() {}
  union {
    ReqCreateChatGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCreateChatGroupDefaultTypeInternal _ReqCreateChatGroup_default_instance_;
constexpr AckCreateChatGroup::AckCreateChatGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extra_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , chat_group_type_(0)
  , world_id_(0){}
struct AckCreateChatGroupDefaultTypeInternal {
  constexpr AckCreateChatGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCreateChatGroupDefaultTypeInternal() {}
  union {
    AckCreateChatGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCreateChatGroupDefaultTypeInternal _AckCreateChatGroup_default_instance_;
constexpr ReqDeleteChatGroup::ReqDeleteChatGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extra_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_type_(0)
  , world_id_(0){}
struct ReqDeleteChatGroupDefaultTypeInternal {
  constexpr ReqDeleteChatGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqDeleteChatGroupDefaultTypeInternal() {}
  union {
    ReqDeleteChatGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqDeleteChatGroupDefaultTypeInternal _ReqDeleteChatGroup_default_instance_;
constexpr AckDeleteChatGroup::AckDeleteChatGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extra_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , chat_group_type_(0)
  , world_id_(0){}
struct AckDeleteChatGroupDefaultTypeInternal {
  constexpr AckDeleteChatGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckDeleteChatGroupDefaultTypeInternal() {}
  union {
    AckDeleteChatGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckDeleteChatGroupDefaultTypeInternal _AckDeleteChatGroup_default_instance_;
constexpr ReqTransferChatGroup::ReqTransferChatGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extra_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_type_(0)
  , world_id_(0){}
struct ReqTransferChatGroupDefaultTypeInternal {
  constexpr ReqTransferChatGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqTransferChatGroupDefaultTypeInternal() {}
  union {
    ReqTransferChatGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqTransferChatGroupDefaultTypeInternal _ReqTransferChatGroup_default_instance_;
constexpr AckTransferChatGroup::AckTransferChatGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extra_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , chat_group_type_(0)
  , world_id_(0){}
struct AckTransferChatGroupDefaultTypeInternal {
  constexpr AckTransferChatGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckTransferChatGroupDefaultTypeInternal() {}
  union {
    AckTransferChatGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckTransferChatGroupDefaultTypeInternal _AckTransferChatGroup_default_instance_;
constexpr ReqAddChatGroupUser::ReqAddChatGroupUser(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extra_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_type_(0)
  , world_id_(0){}
struct ReqAddChatGroupUserDefaultTypeInternal {
  constexpr ReqAddChatGroupUserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAddChatGroupUserDefaultTypeInternal() {}
  union {
    ReqAddChatGroupUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAddChatGroupUserDefaultTypeInternal _ReqAddChatGroupUser_default_instance_;
constexpr AckAddChatGroupUser::AckAddChatGroupUser(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extra_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , chat_group_type_(0)
  , world_id_(0){}
struct AckAddChatGroupUserDefaultTypeInternal {
  constexpr AckAddChatGroupUserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckAddChatGroupUserDefaultTypeInternal() {}
  union {
    AckAddChatGroupUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckAddChatGroupUserDefaultTypeInternal _AckAddChatGroupUser_default_instance_;
constexpr ReqDeleteChatGroupUser::ReqDeleteChatGroupUser(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extra_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_type_(0)
  , world_id_(0){}
struct ReqDeleteChatGroupUserDefaultTypeInternal {
  constexpr ReqDeleteChatGroupUserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqDeleteChatGroupUserDefaultTypeInternal() {}
  union {
    ReqDeleteChatGroupUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqDeleteChatGroupUserDefaultTypeInternal _ReqDeleteChatGroupUser_default_instance_;
constexpr AckDeleteChatGroupUser::AckDeleteChatGroupUser(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chat_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extra_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , chat_group_type_(0)
  , world_id_(0){}
struct AckDeleteChatGroupUserDefaultTypeInternal {
  constexpr AckDeleteChatGroupUserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckDeleteChatGroupUserDefaultTypeInternal() {}
  union {
    AckDeleteChatGroupUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckDeleteChatGroupUserDefaultTypeInternal _AckDeleteChatGroupUser_default_instance_;
constexpr ReqSwitchChatBubble::ReqSwitchChatBubble(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bubble_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqSwitchChatBubbleDefaultTypeInternal {
  constexpr ReqSwitchChatBubbleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqSwitchChatBubbleDefaultTypeInternal() {}
  union {
    ReqSwitchChatBubble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqSwitchChatBubbleDefaultTypeInternal _ReqSwitchChatBubble_default_instance_;
constexpr AckSwitchChatBubble::AckSwitchChatBubble(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bubble_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckSwitchChatBubbleDefaultTypeInternal {
  constexpr AckSwitchChatBubbleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckSwitchChatBubbleDefaultTypeInternal() {}
  union {
    AckSwitchChatBubble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckSwitchChatBubbleDefaultTypeInternal _AckSwitchChatBubble_default_instance_;
constexpr ReqUnlockChatBubble::ReqUnlockChatBubble(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bubble_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqUnlockChatBubbleDefaultTypeInternal {
  constexpr ReqUnlockChatBubbleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqUnlockChatBubbleDefaultTypeInternal() {}
  union {
    ReqUnlockChatBubble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqUnlockChatBubbleDefaultTypeInternal _ReqUnlockChatBubble_default_instance_;
constexpr AckUnlockChatBubble::AckUnlockChatBubble(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bubble_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckUnlockChatBubbleDefaultTypeInternal {
  constexpr AckUnlockChatBubbleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckUnlockChatBubbleDefaultTypeInternal() {}
  union {
    AckUnlockChatBubble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckUnlockChatBubbleDefaultTypeInternal _AckUnlockChatBubble_default_instance_;
constexpr ReqUnlockChatMemeGroup::ReqUnlockChatMemeGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : meme_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqUnlockChatMemeGroupDefaultTypeInternal {
  constexpr ReqUnlockChatMemeGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqUnlockChatMemeGroupDefaultTypeInternal() {}
  union {
    ReqUnlockChatMemeGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqUnlockChatMemeGroupDefaultTypeInternal _ReqUnlockChatMemeGroup_default_instance_;
constexpr AckUnlockChatMemeGroup::AckUnlockChatMemeGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : meme_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckUnlockChatMemeGroupDefaultTypeInternal {
  constexpr AckUnlockChatMemeGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckUnlockChatMemeGroupDefaultTypeInternal() {}
  union {
    AckUnlockChatMemeGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckUnlockChatMemeGroupDefaultTypeInternal _AckUnlockChatMemeGroup_default_instance_;
constexpr ReqUnlockChatMeme::ReqUnlockChatMeme(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : meme_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqUnlockChatMemeDefaultTypeInternal {
  constexpr ReqUnlockChatMemeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqUnlockChatMemeDefaultTypeInternal() {}
  union {
    ReqUnlockChatMeme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqUnlockChatMemeDefaultTypeInternal _ReqUnlockChatMeme_default_instance_;
constexpr AckUnlockChatMeme::AckUnlockChatMeme(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : meme_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckUnlockChatMemeDefaultTypeInternal {
  constexpr AckUnlockChatMemeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckUnlockChatMemeDefaultTypeInternal() {}
  union {
    AckUnlockChatMeme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckUnlockChatMemeDefaultTypeInternal _AckUnlockChatMeme_default_instance_;
constexpr SyncPlayerHonorPointChanged::SyncPlayerHonorPointChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , honor_point_(0){}
struct SyncPlayerHonorPointChangedDefaultTypeInternal {
  constexpr SyncPlayerHonorPointChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncPlayerHonorPointChangedDefaultTypeInternal() {}
  union {
    SyncPlayerHonorPointChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncPlayerHonorPointChangedDefaultTypeInternal _SyncPlayerHonorPointChanged_default_instance_;
constexpr SavePlayerHonorPointRanking::SavePlayerHonorPointRanking(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , score_(int64_t{0}){}
struct SavePlayerHonorPointRankingDefaultTypeInternal {
  constexpr SavePlayerHonorPointRankingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SavePlayerHonorPointRankingDefaultTypeInternal() {}
  union {
    SavePlayerHonorPointRanking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SavePlayerHonorPointRankingDefaultTypeInternal _SavePlayerHonorPointRanking_default_instance_;
constexpr SyncPlayerStrategyPointChanged::SyncPlayerStrategyPointChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , strategy_point_(0){}
struct SyncPlayerStrategyPointChangedDefaultTypeInternal {
  constexpr SyncPlayerStrategyPointChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncPlayerStrategyPointChangedDefaultTypeInternal() {}
  union {
    SyncPlayerStrategyPointChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncPlayerStrategyPointChangedDefaultTypeInternal _SyncPlayerStrategyPointChanged_default_instance_;
constexpr SavePlayerStrategyPointRanking::SavePlayerStrategyPointRanking(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , score_(int64_t{0}){}
struct SavePlayerStrategyPointRankingDefaultTypeInternal {
  constexpr SavePlayerStrategyPointRankingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SavePlayerStrategyPointRankingDefaultTypeInternal() {}
  union {
    SavePlayerStrategyPointRanking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SavePlayerStrategyPointRankingDefaultTypeInternal _SavePlayerStrategyPointRanking_default_instance_;
constexpr SyncBotArenaState::SyncBotArenaState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(0){}
struct SyncBotArenaStateDefaultTypeInternal {
  constexpr SyncBotArenaStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncBotArenaStateDefaultTypeInternal() {}
  union {
    SyncBotArenaState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncBotArenaStateDefaultTypeInternal _SyncBotArenaState_default_instance_;
constexpr SyncBotArenaStageSession::SyncBotArenaStageSession(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stage_(0)
  , session_(0){}
struct SyncBotArenaStageSessionDefaultTypeInternal {
  constexpr SyncBotArenaStageSessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncBotArenaStageSessionDefaultTypeInternal() {}
  union {
    SyncBotArenaStageSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncBotArenaStageSessionDefaultTypeInternal _SyncBotArenaStageSession_default_instance_;
constexpr SavePlayerChallengeList::SavePlayerChallengeList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , list_(nullptr){}
struct SavePlayerChallengeListDefaultTypeInternal {
  constexpr SavePlayerChallengeListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SavePlayerChallengeListDefaultTypeInternal() {}
  union {
    SavePlayerChallengeList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SavePlayerChallengeListDefaultTypeInternal _SavePlayerChallengeList_default_instance_;
constexpr UpdatePlayerChallengeItem::UpdatePlayerChallengeItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , item_(nullptr){}
struct UpdatePlayerChallengeItemDefaultTypeInternal {
  constexpr UpdatePlayerChallengeItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdatePlayerChallengeItemDefaultTypeInternal() {}
  union {
    UpdatePlayerChallengeItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdatePlayerChallengeItemDefaultTypeInternal _UpdatePlayerChallengeItem_default_instance_;
constexpr UpdatePlayerReplayItem::UpdatePlayerReplayItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , item_(nullptr){}
struct UpdatePlayerReplayItemDefaultTypeInternal {
  constexpr UpdatePlayerReplayItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdatePlayerReplayItemDefaultTypeInternal() {}
  union {
    UpdatePlayerReplayItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdatePlayerReplayItemDefaultTypeInternal _UpdatePlayerReplayItem_default_instance_;
constexpr AddPlayerReplayItem::AddPlayerReplayItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , item_(nullptr){}
struct AddPlayerReplayItemDefaultTypeInternal {
  constexpr AddPlayerReplayItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddPlayerReplayItemDefaultTypeInternal() {}
  union {
    AddPlayerReplayItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddPlayerReplayItemDefaultTypeInternal _AddPlayerReplayItem_default_instance_;
constexpr DelPlayerReplayItem::DelPlayerReplayItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , item_(nullptr){}
struct DelPlayerReplayItemDefaultTypeInternal {
  constexpr DelPlayerReplayItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelPlayerReplayItemDefaultTypeInternal() {}
  union {
    DelPlayerReplayItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelPlayerReplayItemDefaultTypeInternal _DelPlayerReplayItem_default_instance_;
constexpr SyncBotArenaBattleIsReady::SyncBotArenaBattleIsReady(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_play_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , continuous_count_(0)
  , auto_buy_(0)
  , challenge_result_(0)
  , _oneof_case_{}{}
struct SyncBotArenaBattleIsReadyDefaultTypeInternal {
  constexpr SyncBotArenaBattleIsReadyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncBotArenaBattleIsReadyDefaultTypeInternal() {}
  union {
    SyncBotArenaBattleIsReady _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncBotArenaBattleIsReadyDefaultTypeInternal _SyncBotArenaBattleIsReady_default_instance_;
constexpr SyncBotArenaBattleReplayDatas::SyncBotArenaBattleReplayDatas(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , replay_item_(nullptr){}
struct SyncBotArenaBattleReplayDatasDefaultTypeInternal {
  constexpr SyncBotArenaBattleReplayDatasDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncBotArenaBattleReplayDatasDefaultTypeInternal() {}
  union {
    SyncBotArenaBattleReplayDatas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncBotArenaBattleReplayDatasDefaultTypeInternal _SyncBotArenaBattleReplayDatas_default_instance_;
constexpr SaveBotArenaBattleReplayDatas::SaveBotArenaBattleReplayDatas(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , replay_id_(nullptr){}
struct SaveBotArenaBattleReplayDatasDefaultTypeInternal {
  constexpr SaveBotArenaBattleReplayDatasDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveBotArenaBattleReplayDatasDefaultTypeInternal() {}
  union {
    SaveBotArenaBattleReplayDatas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveBotArenaBattleReplayDatasDefaultTypeInternal _SaveBotArenaBattleReplayDatas_default_instance_;
constexpr DelBotArenaBattleReplayDatas::DelBotArenaBattleReplayDatas(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , replay_id_(nullptr){}
struct DelBotArenaBattleReplayDatasDefaultTypeInternal {
  constexpr DelBotArenaBattleReplayDatasDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelBotArenaBattleReplayDatasDefaultTypeInternal() {}
  union {
    DelBotArenaBattleReplayDatas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelBotArenaBattleReplayDatasDefaultTypeInternal _DelBotArenaBattleReplayDatas_default_instance_;
constexpr SyncDefensivePlayerBattleReward::SyncDefensivePlayerBattleReward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_list_()
  , player_id_(nullptr){}
struct SyncDefensivePlayerBattleRewardDefaultTypeInternal {
  constexpr SyncDefensivePlayerBattleRewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncDefensivePlayerBattleRewardDefaultTypeInternal() {}
  union {
    SyncDefensivePlayerBattleReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncDefensivePlayerBattleRewardDefaultTypeInternal _SyncDefensivePlayerBattleReward_default_instance_;
constexpr SyncBotArenaBattleSettleData::SyncBotArenaBattleSettleData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , challenge_id_(nullptr)
  , replay_id_(nullptr)
  , is_win_(false){}
struct SyncBotArenaBattleSettleDataDefaultTypeInternal {
  constexpr SyncBotArenaBattleSettleDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncBotArenaBattleSettleDataDefaultTypeInternal() {}
  union {
    SyncBotArenaBattleSettleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncBotArenaBattleSettleDataDefaultTypeInternal _SyncBotArenaBattleSettleData_default_instance_;
constexpr ReqClickBotarenaPromptForm::ReqClickBotarenaPromptForm(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , type_(0)
{}
struct ReqClickBotarenaPromptFormDefaultTypeInternal {
  constexpr ReqClickBotarenaPromptFormDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqClickBotarenaPromptFormDefaultTypeInternal() {}
  union {
    ReqClickBotarenaPromptForm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqClickBotarenaPromptFormDefaultTypeInternal _ReqClickBotarenaPromptForm_default_instance_;
constexpr AckClickBotarenaPromptForm::AckClickBotarenaPromptForm(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckClickBotarenaPromptFormDefaultTypeInternal {
  constexpr AckClickBotarenaPromptFormDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckClickBotarenaPromptFormDefaultTypeInternal() {}
  union {
    AckClickBotarenaPromptForm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckClickBotarenaPromptFormDefaultTypeInternal _AckClickBotarenaPromptForm_default_instance_;
constexpr HonorPointRankingItem::HonorPointRankingItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_info_(nullptr)
  , rank_(0){}
struct HonorPointRankingItemDefaultTypeInternal {
  constexpr HonorPointRankingItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HonorPointRankingItemDefaultTypeInternal() {}
  union {
    HonorPointRankingItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HonorPointRankingItemDefaultTypeInternal _HonorPointRankingItem_default_instance_;
constexpr ReqGetPlayerHonorPointRanking::ReqGetPlayerHonorPointRanking(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqGetPlayerHonorPointRankingDefaultTypeInternal {
  constexpr ReqGetPlayerHonorPointRankingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetPlayerHonorPointRankingDefaultTypeInternal() {}
  union {
    ReqGetPlayerHonorPointRanking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetPlayerHonorPointRankingDefaultTypeInternal _ReqGetPlayerHonorPointRanking_default_instance_;
constexpr AckGetPlayerHonorPointRanking::AckGetPlayerHonorPointRanking(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ranking_()
  , player_id_(nullptr)
  , cur_rank_(nullptr)
  , event_code_(0)
{}
struct AckGetPlayerHonorPointRankingDefaultTypeInternal {
  constexpr AckGetPlayerHonorPointRankingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckGetPlayerHonorPointRankingDefaultTypeInternal() {}
  union {
    AckGetPlayerHonorPointRanking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckGetPlayerHonorPointRankingDefaultTypeInternal _AckGetPlayerHonorPointRanking_default_instance_;
constexpr ReqGetBotArenaMainPageData::ReqGetBotArenaMainPageData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqGetBotArenaMainPageDataDefaultTypeInternal {
  constexpr ReqGetBotArenaMainPageDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetBotArenaMainPageDataDefaultTypeInternal() {}
  union {
    ReqGetBotArenaMainPageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetBotArenaMainPageDataDefaultTypeInternal _ReqGetBotArenaMainPageData_default_instance_;
constexpr AckGetBotArenaMainPageData::AckGetBotArenaMainPageData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pre_botarena_grade_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , event_code_(0)

  , rank_(0)
  , stage_(0)
  , session_(0)
  , prompt_type_(0)

  , stage_begin_ts_(0)
  , pre_strategy_point_(int64_t{0})
  , stage_end_ts_(0)
  , stage_settle_ts_(0)
  , session_begin_ts_(0)
  , session_end_ts_(0)
  , session_settle_ts_(0){}
struct AckGetBotArenaMainPageDataDefaultTypeInternal {
  constexpr AckGetBotArenaMainPageDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckGetBotArenaMainPageDataDefaultTypeInternal() {}
  union {
    AckGetBotArenaMainPageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckGetBotArenaMainPageDataDefaultTypeInternal _AckGetBotArenaMainPageData_default_instance_;
constexpr StrategyPointRankingItem::StrategyPointRankingItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_info_(nullptr)
  , rank_(0){}
struct StrategyPointRankingItemDefaultTypeInternal {
  constexpr StrategyPointRankingItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StrategyPointRankingItemDefaultTypeInternal() {}
  union {
    StrategyPointRankingItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StrategyPointRankingItemDefaultTypeInternal _StrategyPointRankingItem_default_instance_;
constexpr ReqGetPlayerStrategyPointRanking::ReqGetPlayerStrategyPointRanking(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqGetPlayerStrategyPointRankingDefaultTypeInternal {
  constexpr ReqGetPlayerStrategyPointRankingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetPlayerStrategyPointRankingDefaultTypeInternal() {}
  union {
    ReqGetPlayerStrategyPointRanking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetPlayerStrategyPointRankingDefaultTypeInternal _ReqGetPlayerStrategyPointRanking_default_instance_;
constexpr AckGetPlayerStrategyPointRanking::AckGetPlayerStrategyPointRanking(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ranking_()
  , player_id_(nullptr)
  , cur_rank_(nullptr)
  , event_code_(0)
{}
struct AckGetPlayerStrategyPointRankingDefaultTypeInternal {
  constexpr AckGetPlayerStrategyPointRankingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckGetPlayerStrategyPointRankingDefaultTypeInternal() {}
  union {
    AckGetPlayerStrategyPointRanking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckGetPlayerStrategyPointRankingDefaultTypeInternal _AckGetPlayerStrategyPointRanking_default_instance_;
constexpr BotArenaChallengeItem::BotArenaChallengeItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , result_(0)
  , _oneof_case_{}{}
struct BotArenaChallengeItemDefaultTypeInternal {
  constexpr BotArenaChallengeItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BotArenaChallengeItemDefaultTypeInternal() {}
  union {
    BotArenaChallengeItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BotArenaChallengeItemDefaultTypeInternal _BotArenaChallengeItem_default_instance_;
constexpr BotArenaChallengeList::BotArenaChallengeList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : list_(){}
struct BotArenaChallengeListDefaultTypeInternal {
  constexpr BotArenaChallengeListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BotArenaChallengeListDefaultTypeInternal() {}
  union {
    BotArenaChallengeList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BotArenaChallengeListDefaultTypeInternal _BotArenaChallengeList_default_instance_;
constexpr ReqGetPlayerBotArenaChallengeList::ReqGetPlayerBotArenaChallengeList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqGetPlayerBotArenaChallengeListDefaultTypeInternal {
  constexpr ReqGetPlayerBotArenaChallengeListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetPlayerBotArenaChallengeListDefaultTypeInternal() {}
  union {
    ReqGetPlayerBotArenaChallengeList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetPlayerBotArenaChallengeListDefaultTypeInternal _ReqGetPlayerBotArenaChallengeList_default_instance_;
constexpr AckGetPlayerBotArenaChallengeList::AckGetPlayerBotArenaChallengeList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , result_(nullptr)
  , event_code_(0)
{}
struct AckGetPlayerBotArenaChallengeListDefaultTypeInternal {
  constexpr AckGetPlayerBotArenaChallengeListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckGetPlayerBotArenaChallengeListDefaultTypeInternal() {}
  union {
    AckGetPlayerBotArenaChallengeList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckGetPlayerBotArenaChallengeListDefaultTypeInternal _AckGetPlayerBotArenaChallengeList_default_instance_;
constexpr ReqRefreshPlayerBotArenaChallengeList::ReqRefreshPlayerBotArenaChallengeList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqRefreshPlayerBotArenaChallengeListDefaultTypeInternal {
  constexpr ReqRefreshPlayerBotArenaChallengeListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqRefreshPlayerBotArenaChallengeListDefaultTypeInternal() {}
  union {
    ReqRefreshPlayerBotArenaChallengeList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqRefreshPlayerBotArenaChallengeListDefaultTypeInternal _ReqRefreshPlayerBotArenaChallengeList_default_instance_;
constexpr AckRefreshPlayerBotArenaChallengeList::AckRefreshPlayerBotArenaChallengeList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , result_(nullptr)
  , event_code_(0)
{}
struct AckRefreshPlayerBotArenaChallengeListDefaultTypeInternal {
  constexpr AckRefreshPlayerBotArenaChallengeListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckRefreshPlayerBotArenaChallengeListDefaultTypeInternal() {}
  union {
    AckRefreshPlayerBotArenaChallengeList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckRefreshPlayerBotArenaChallengeListDefaultTypeInternal _AckRefreshPlayerBotArenaChallengeList_default_instance_;
constexpr ReqAdjBotarenaDefensiveTeam::ReqAdjBotarenaDefensiveTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , idx_(0){}
struct ReqAdjBotarenaDefensiveTeamDefaultTypeInternal {
  constexpr ReqAdjBotarenaDefensiveTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAdjBotarenaDefensiveTeamDefaultTypeInternal() {}
  union {
    ReqAdjBotarenaDefensiveTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAdjBotarenaDefensiveTeamDefaultTypeInternal _ReqAdjBotarenaDefensiveTeam_default_instance_;
constexpr AckAdjBotarenaDefensiveTeam::AckAdjBotarenaDefensiveTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckAdjBotarenaDefensiveTeamDefaultTypeInternal {
  constexpr AckAdjBotarenaDefensiveTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckAdjBotarenaDefensiveTeamDefaultTypeInternal() {}
  union {
    AckAdjBotarenaDefensiveTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckAdjBotarenaDefensiveTeamDefaultTypeInternal _AckAdjBotarenaDefensiveTeam_default_instance_;
constexpr ReqResetBotarenaDefensiveTeam::ReqResetBotarenaDefensiveTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqResetBotarenaDefensiveTeamDefaultTypeInternal {
  constexpr ReqResetBotarenaDefensiveTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqResetBotarenaDefensiveTeamDefaultTypeInternal() {}
  union {
    ReqResetBotarenaDefensiveTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqResetBotarenaDefensiveTeamDefaultTypeInternal _ReqResetBotarenaDefensiveTeam_default_instance_;
constexpr AckResetBotarenaDefensiveTeam::AckResetBotarenaDefensiveTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckResetBotarenaDefensiveTeamDefaultTypeInternal {
  constexpr AckResetBotarenaDefensiveTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckResetBotarenaDefensiveTeamDefaultTypeInternal() {}
  union {
    AckResetBotarenaDefensiveTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckResetBotarenaDefensiveTeamDefaultTypeInternal _AckResetBotarenaDefensiveTeam_default_instance_;
constexpr ReqQuickConfigBotarenaDefensiveTeam::ReqQuickConfigBotarenaDefensiveTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_list_()
  , player_id_(nullptr){}
struct ReqQuickConfigBotarenaDefensiveTeamDefaultTypeInternal {
  constexpr ReqQuickConfigBotarenaDefensiveTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqQuickConfigBotarenaDefensiveTeamDefaultTypeInternal() {}
  union {
    ReqQuickConfigBotarenaDefensiveTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqQuickConfigBotarenaDefensiveTeamDefaultTypeInternal _ReqQuickConfigBotarenaDefensiveTeam_default_instance_;
constexpr AckQuickConfigBotarenaDefensiveTeam::AckQuickConfigBotarenaDefensiveTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_list_()
  , event_code_(0)
{}
struct AckQuickConfigBotarenaDefensiveTeamDefaultTypeInternal {
  constexpr AckQuickConfigBotarenaDefensiveTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckQuickConfigBotarenaDefensiveTeamDefaultTypeInternal() {}
  union {
    AckQuickConfigBotarenaDefensiveTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckQuickConfigBotarenaDefensiveTeamDefaultTypeInternal _AckQuickConfigBotarenaDefensiveTeam_default_instance_;
constexpr ReqBuyShabowToken::ReqBuyShabowToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , count_(int64_t{0}){}
struct ReqBuyShabowTokenDefaultTypeInternal {
  constexpr ReqBuyShabowTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBuyShabowTokenDefaultTypeInternal() {}
  union {
    ReqBuyShabowToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBuyShabowTokenDefaultTypeInternal _ReqBuyShabowToken_default_instance_;
constexpr AckBuyShabowToken::AckBuyShabowToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckBuyShabowTokenDefaultTypeInternal {
  constexpr AckBuyShabowTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBuyShabowTokenDefaultTypeInternal() {}
  union {
    AckBuyShabowToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBuyShabowTokenDefaultTypeInternal _AckBuyShabowToken_default_instance_;
constexpr BotArenaReplayItem::BotArenaReplayItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , reward_(nullptr)
  , create_ts_(0)
  , result_(0)

  , is_counter_attack_(false)
  , _oneof_case_{}{}
struct BotArenaReplayItemDefaultTypeInternal {
  constexpr BotArenaReplayItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BotArenaReplayItemDefaultTypeInternal() {}
  union {
    BotArenaReplayItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BotArenaReplayItemDefaultTypeInternal _BotArenaReplayItem_default_instance_;
constexpr BotArenaReplayList::BotArenaReplayList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : list_(){}
struct BotArenaReplayListDefaultTypeInternal {
  constexpr BotArenaReplayListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BotArenaReplayListDefaultTypeInternal() {}
  union {
    BotArenaReplayList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BotArenaReplayListDefaultTypeInternal _BotArenaReplayList_default_instance_;
constexpr ReqGetBotArenaReplayList::ReqGetBotArenaReplayList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqGetBotArenaReplayListDefaultTypeInternal {
  constexpr ReqGetBotArenaReplayListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetBotArenaReplayListDefaultTypeInternal() {}
  union {
    ReqGetBotArenaReplayList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetBotArenaReplayListDefaultTypeInternal _ReqGetBotArenaReplayList_default_instance_;
constexpr AckGetBotArenaReplayList::AckGetBotArenaReplayList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : replay_list_()
  , player_id_(nullptr)
  , event_code_(0)
{}
struct AckGetBotArenaReplayListDefaultTypeInternal {
  constexpr AckGetBotArenaReplayListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckGetBotArenaReplayListDefaultTypeInternal() {}
  union {
    AckGetBotArenaReplayList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckGetBotArenaReplayListDefaultTypeInternal _AckGetBotArenaReplayList_default_instance_;
constexpr ReqReplayBotArenaBattle::ReqReplayBotArenaBattle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , replay_id_(nullptr){}
struct ReqReplayBotArenaBattleDefaultTypeInternal {
  constexpr ReqReplayBotArenaBattleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqReplayBotArenaBattleDefaultTypeInternal() {}
  union {
    ReqReplayBotArenaBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqReplayBotArenaBattleDefaultTypeInternal _ReqReplayBotArenaBattle_default_instance_;
constexpr AckReplayBotArenaBattle::AckReplayBotArenaBattle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , replay_id_(nullptr)
  , event_code_(0)
{}
struct AckReplayBotArenaBattleDefaultTypeInternal {
  constexpr AckReplayBotArenaBattleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckReplayBotArenaBattleDefaultTypeInternal() {}
  union {
    AckReplayBotArenaBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckReplayBotArenaBattleDefaultTypeInternal _AckReplayBotArenaBattle_default_instance_;
constexpr ShopReceipt::ShopReceipt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : product_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shop_goods_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(int64_t{0}){}
struct ShopReceiptDefaultTypeInternal {
  constexpr ShopReceiptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShopReceiptDefaultTypeInternal() {}
  union {
    ShopReceipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShopReceiptDefaultTypeInternal _ShopReceipt_default_instance_;
constexpr DelPlayerShopReceipts::DelPlayerShopReceipts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shop_goods_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct DelPlayerShopReceiptsDefaultTypeInternal {
  constexpr DelPlayerShopReceiptsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelPlayerShopReceiptsDefaultTypeInternal() {}
  union {
    DelPlayerShopReceipts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelPlayerShopReceiptsDefaultTypeInternal _DelPlayerShopReceipts_default_instance_;
constexpr UpdPlayerShopReceipt::UpdPlayerShopReceipt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shop_goods_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , receipt_(nullptr){}
struct UpdPlayerShopReceiptDefaultTypeInternal {
  constexpr UpdPlayerShopReceiptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdPlayerShopReceiptDefaultTypeInternal() {}
  union {
    UpdPlayerShopReceipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdPlayerShopReceiptDefaultTypeInternal _UpdPlayerShopReceipt_default_instance_;
constexpr AddPlayerShopReceipt::AddPlayerShopReceipt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shop_goods_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , receipt_(nullptr){}
struct AddPlayerShopReceiptDefaultTypeInternal {
  constexpr AddPlayerShopReceiptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddPlayerShopReceiptDefaultTypeInternal() {}
  union {
    AddPlayerShopReceipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddPlayerShopReceiptDefaultTypeInternal _AddPlayerShopReceipt_default_instance_;
constexpr ReqGetShopProducts::ReqGetShopProducts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqGetShopProductsDefaultTypeInternal {
  constexpr ReqGetShopProductsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetShopProductsDefaultTypeInternal() {}
  union {
    ReqGetShopProducts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetShopProductsDefaultTypeInternal _ReqGetShopProducts_default_instance_;
constexpr AckGetShopProducts::AckGetShopProducts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : products_()
  , player_id_(nullptr)
  , event_code_(0)
{}
struct AckGetShopProductsDefaultTypeInternal {
  constexpr AckGetShopProductsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckGetShopProductsDefaultTypeInternal() {}
  union {
    AckGetShopProducts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckGetShopProductsDefaultTypeInternal _AckGetShopProducts_default_instance_;
constexpr ReqBuyProduct::ReqBuyProduct(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shop_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , product_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , count_(int64_t{0}){}
struct ReqBuyProductDefaultTypeInternal {
  constexpr ReqBuyProductDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBuyProductDefaultTypeInternal() {}
  union {
    ReqBuyProduct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBuyProductDefaultTypeInternal _ReqBuyProduct_default_instance_;
constexpr AckBuyProduct::AckBuyProduct(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , product_(nullptr)
  , count_(int64_t{0})
  , event_code_(0)
{}
struct AckBuyProductDefaultTypeInternal {
  constexpr AckBuyProductDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBuyProductDefaultTypeInternal() {}
  union {
    AckBuyProduct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBuyProductDefaultTypeInternal _AckBuyProduct_default_instance_;
}  // namespace KWMsg
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kwmsgshare_2eproto[338];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kwmsgshare_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kwmsgshare_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kwmsgshare_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductPrice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductPrice, res_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductPrice, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductContent, reward_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductContent, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductInfo, product_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductInfo, shop_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductInfo, shop_goods_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductInfo, listing_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductInfo, content_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductInfo, price_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductInfo, maximum_sells_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductInfo, remain_sells_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductInfo, maximun_once_buys_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductInfo, refresh_cron_expr_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductInfo, refresh_interval_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ProductInfo, is_purchase_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RewardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RewardInfo, reward_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RewardInfo, reward_count_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RewardInfo, reward_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_level_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_star_level_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_total_fc_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_role_res_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_hp_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_defence_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_speed_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_attackmin_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_attackmax_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_crit_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_critdmg_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_hit_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_resist_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_generalskillid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_advancedskillid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_uniqueskillid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_versedskillid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_awakeningskillid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_extraskillid1_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::WitchInfo, witch_extraskillid2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::GuildInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::GuildInfo, guild_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::GuildInfo, guild_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerInfo, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerInfo, level_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerInfo, botarena_pre_season_rank_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerInfo, honor_point_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerInfo, strategy_point_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerInfo, shabow_token_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerInfo, shabow_badge_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerInfo, botaren_grade_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerInfo, nick_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerInfo, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerInfo, avatar_frame_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerInfo, guild_info_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerInfo, botarena_defensive_team_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerInfo, botarena_attack_team_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::DrawCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::DrawCardInfo, witch_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::DrawCardInfo, is_debris_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RewardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RewardList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckLagTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLeaveGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLeaveGameServer, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerEntryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerEntryInfo, object_guid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerEntryInfo, pos_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerEntryInfo, config_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerEntryInfo, scene_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerEntryInfo, class_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPlayerEntryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPlayerEntryList, object_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPlayerLeaveList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPlayerLeaveList, object_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPlayerDataFinished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPlayerDataFinished, object_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PosSyncUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PosSyncUnit, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PosSyncUnit, pos_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PosSyncUnit, orientation_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PosSyncUnit, status_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PosSyncUnit, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerPosSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerPosSync, sequence_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerPosSync, sync_unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSwapScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSwapScene, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSwapScene, scene_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSwapScene, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwapScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwapScene, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwapScene, scene_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwapScene, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwapSceneNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwapSceneNotify, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwapSceneNotify, scene_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerChat, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerChat, nickname_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerChat, avatar_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerChat, avatar_frame_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerChat, chat_channel_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerChat, chat_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerChat, chat_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateKcpObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateKcpObject, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateKcpObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateKcpObject, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateKcpObject, server_ip_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateKcpObject, server_port_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateKcpObject, conv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEstablishKcpConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEstablishKcpConnection, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckEstablishKcpConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckEstablishKcpConnection, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTryPushClientIntoQueueUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTryPushClientIntoQueueUp, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTryPushClientIntoQueueUp, world_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTryPushClientIntoQueueUp, login_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTryPushClientIntoQueueUp, sender_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPushClientIntoQueueUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPushClientIntoQueueUp, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPushClientIntoQueueUp, ticket_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPushClientIntoQueueUp, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPushClientIntoQueueUp, world_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPushClientIntoQueueUp, login_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPushClientIntoQueueUp, sender_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPushClientIntoQueueUp, queue_up_ip_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPushClientIntoQueueUp, queue_up_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQueueUpGetCurWorldSuitProxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQueueUpGetCurWorldSuitProxy, ticket_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQueueUpGetCurWorldSuitProxy, transpond_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQueueUpGetCurWorldSuitProxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQueueUpGetCurWorldSuitProxy, ticket_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQueueUpGetCurWorldSuitProxy, transpond_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQueueUpGetCurWorldSuitProxy, world_ip_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQueueUpGetCurWorldSuitProxy, world_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdatePlayerLastHeartbeatTS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdatePlayerLastHeartbeatTS, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdatePlayerLastHeartbeatTS, ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncQueueUpUserCancelOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncQueueUpUserCancelOperation, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncQueueUpUserCancelOperation, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerPropertiesCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerPropertiesCache, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerPropertiesCache, property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::LoadPlayerPropertiesCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::LoadPlayerPropertiesCache, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::LoadPlayerPropertiesCache, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::LoadPlayerRecordsCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::LoadPlayerRecordsCache, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::LoadPlayerRecordsCache, record_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheAdd, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheAdd, record_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheAdd, row_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheAdd, record_int_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheAdd, record_float_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheAdd, record_string_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheAdd, record_object_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheAdd, record_vector2_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheAdd, record_vector3_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheUpdate, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheUpdate, record_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheUpdate, row_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheUpdate, record_int_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheUpdate, record_float_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheUpdate, record_string_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheUpdate, record_object_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheUpdate, record_vector2_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheUpdate, record_vector3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheDel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheDel, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheDel, record_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheDel, remove_row_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheSwap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheSwap, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheSwap, record_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheSwap, row_origin_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerRecordsCacheSwap, row_target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestBattle, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestBattle, battle_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestBattle, team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTestBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTestBattle, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTestBattle, battle_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTestBattle, team_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTestBattle, scene_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollectWitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollectWitch, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollectWitch, witch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollectWitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollectWitch, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollectWitch, witch_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollectWitch, is_collect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqInitPlayerName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqInitPlayerName, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqInitPlayerName, name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqInitPlayerName, is_random_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckInitPlayerName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckInitPlayerName, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckInitPlayerName, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckInitPlayerName, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdateModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdateModule, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdateModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdateModule, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdateModule, module_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdateModule, chapter_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqChapterRewardTipOk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqChapterRewardTipOk, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckChapterRewardTipOk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckChapterRewardTipOk, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckChapterRewardTipOk, module_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckChapterRewardTipOk, chapter_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeDrama, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeDrama, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeDrama, drama_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeDrama, module_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeDrama, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeDrama, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeTaskAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeTaskAction, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeTaskAction, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeTaskAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeTaskAction, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeTaskCountdown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeTaskCountdown, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeTaskCountdown, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeTaskCountdown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeTaskCountdown, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ExamQuestion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ExamQuestion, question_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeStartExam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeStartExam, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeStartExam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeStartExam, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeStartExam, exam_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeStartExam, question_id_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeAnswer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeAnswer, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeAnswer, question_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeAnswer, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeAnswer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeAnswer, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeAnswer, question_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeAnswer, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommonReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommonReward, reward_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommonReward, reward_count_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommonReward, reward_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeReward, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeReward, reward_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeReward, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeReward, reward_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestSetCollegeExamStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestSetCollegeExamStatus, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestSetCollegeExamStatus, exam_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeExamExit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollegeExamExit, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeExamExit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollegeExamExit, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSetItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSetItem, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSetItem, item_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSetItem, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattlePreparedInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattlePreparedInfo, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattlePreparedInfo, battle_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattlePreparedInfo, game_play_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattlePreparedInfo, challenge_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattlePreparedInfo, replay_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BattleEntityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BattleEntityInfo, config_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BattleEntityInfo, level_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BattleEntityInfo, attrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BattleWitchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BattleWitchInfo, config_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BattleWitchInfo, level_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BattleWitchInfo, attrs_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BattleWitchInfo, star_level_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BattleWitchInfo, role_res_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BattleWitchInfo, skills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattlePreparedInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattlePreparedInfo, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattlePreparedInfo, battle_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattlePreparedInfo, monsters_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattlePreparedInfo, npcs_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattlePreparedInfo, game_play_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattlePreparedInfo, battle_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattlePreparedInfo, witches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBuyPower, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBuyPower, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBuyPower, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBuyPower, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBuyPower, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBuyPower, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestSetResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestSetResource, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestSetResource, res_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestSetResource, res_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleAdjWitchTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleAdjWitchTeam, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleAdjWitchTeam, witch_team_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleAdjWitchTeam, idx_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleAdjWitchTeam, witch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattleAdjWitchTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattleAdjWitchTeam, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattleAdjWitchTeam, witch_team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleChangeWitchTeamName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleChangeWitchTeamName, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleChangeWitchTeamName, witch_team_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleChangeWitchTeamName, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattleChangeWitchTeamName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattleChangeWitchTeamName, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattleChangeWitchTeamName, witch_team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleResetWitchTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleResetWitchTeam, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleResetWitchTeam, witch_team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattleResetWitchTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattleResetWitchTeam, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattleResetWitchTeam, witch_team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleQuickConfigWitchTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleQuickConfigWitchTeam, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleQuickConfigWitchTeam, witch_team_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleQuickConfigWitchTeam, witch_id_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattleQuickConfigWitchTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattleQuickConfigWitchTeam, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattleQuickConfigWitchTeam, witch_team_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattleQuickConfigWitchTeam, witch_id_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleBuyWitchTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleBuyWitchTeam, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBattleBuyWitchTeam, witch_team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattleBuyWitchTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattleBuyWitchTeam, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBattleBuyWitchTeam, witch_team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestRecruitWitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestRecruitWitch, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestRecruitWitch, witch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommonGetRewardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommonGetRewardInfo, show_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommonGetRewardInfo, reward_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSetSystemFunctionFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSetSystemFunctionFlag, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSetSystemFunctionFlag, function_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSetSystemFunctionFlag, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSetSystemFunctionFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSetSystemFunctionFlag, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncSystemFunctionUnlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncSystemFunctionUnlock, function_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerLevelRanking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerLevelRanking, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerLevelRanking, level_or_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSendGiftForWitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSendGiftForWitch, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSendGiftForWitch, witch_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSendGiftForWitch, gift_item_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSendGiftForWitch, box_item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSendGiftForWitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSendGiftForWitch, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUseMagicalMedicine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUseMagicalMedicine, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUseMagicalMedicine, witch_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUseMagicalMedicine, item_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUseMagicalMedicine, use_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUseMagicalMedicine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUseMagicalMedicine, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUnlockWitchSkin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUnlockWitchSkin, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUnlockWitchSkin, witch_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUnlockWitchSkin, witch_skin_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUnlockWitchSkin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUnlockWitchSkin, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchStarLevelUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchStarLevelUp, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchStarLevelUp, witch_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchStarLevelUp, consume_item_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWitchStarLevelUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWitchStarLevelUp, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchKnowledgeLevelUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchKnowledgeLevelUp, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchKnowledgeLevelUp, witch_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchKnowledgeLevelUp, opt_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWitchKnowledgeLevelUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWitchKnowledgeLevelUp, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqExpandWitchPneumaBagSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqExpandWitchPneumaBagSize, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqExpandWitchPneumaBagSize, expand_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckExpandWitchPneumaBagSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckExpandWitchPneumaBagSize, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchPneumaOpt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchPneumaOpt, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchPneumaOpt, pneuma_guid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchPneumaOpt, witch_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchPneumaOpt, opt_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWitchPneumaOpt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWitchPneumaOpt, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWitchPneumaOpt, pneuma_guid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWitchPneumaOpt, witch_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWitchPneumaOpt, opt_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchPneumaEnhance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchPneumaEnhance, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchPneumaEnhance, pneuma_guid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWitchPneumaEnhance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWitchPneumaEnhance, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchPneumaDecompose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchPneumaDecompose, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchPneumaDecompose, pneuma_guid_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWitchPneumaDecompose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWitchPneumaDecompose, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWitchPneumaDecompose, reward_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchSkillLevelUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchSkillLevelUp, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchSkillLevelUp, witch_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWitchSkillLevelUp, opt_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWitchSkillLevelUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWitchSkillLevelUp, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSweepEndlessTower, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSweepEndlessTower, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSweepEndlessTower, sweep_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSweepEndlessTower, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSweepEndlessTower, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSweepEndlessTower, reward_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBlackmartCommodityList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBlackmartCommodityList, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBlackmartCommodityList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBlackmartCommodityList, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRefreshBlackmartCommodityList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRefreshBlackmartCommodityList, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRefreshBlackmartCommodityList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRefreshBlackmartCommodityList, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBuyBlackmartCommodity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBuyBlackmartCommodity, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBuyBlackmartCommodity, commodity_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBuyBlackmartCommodity, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBuyBlackmartCommodity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBuyBlackmartCommodity, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBuyBlackmartCommodity, commodity_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBlackmartCommodityUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBlackmartCommodityUpdated, update_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqActiveMissionOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqActiveMissionOperation, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqActiveMissionOperation, mission_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckActiveMissionOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckActiveMissionOperation, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetActiveMissionReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetActiveMissionReward, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetActiveMissionReward, mission_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetActiveMissionReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetActiveMissionReward, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDrawCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDrawCard, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDrawCard, card_pool_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDrawCard, dc_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDrawCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDrawCard, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDrawCard, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityMemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityMemberInfo, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityMemberInfo, name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityMemberInfo, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityMemberInfo, avatar_frame_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityMemberInfo, level_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityMemberInfo, fighting_capacity_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityMemberInfo, weekly_active_val_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityMemberInfo, total_active_val_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityMemberInfo, position_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityMemberInfo, join_ts_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityMemberInfo, offline_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, community_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, community_flag_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, community_icon_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, community_declaration_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, community_chat_channel_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, community_chief_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, community_chief_player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, community_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, community_level_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, community_exp_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, community_fighting_capacity_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, community_weekly_active_val_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, community_total_active_val_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, community_approve_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, level_restriction_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::CommunityInfo, member_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AppliedCommunityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AppliedCommunityInfo, apply_join_ts_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AppliedCommunityInfo, community_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AppliedPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AppliedPlayerInfo, apply_join_ts_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AppliedPlayerInfo, player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerCommunityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerCommunityInfo, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerCommunityInfo, community_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerCommunityInfo, position_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerCommunityInfo, quit_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AddCommunityActiveValAndExp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AddCommunityActiveValAndExp, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AddCommunityActiveValAndExp, community_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AddCommunityActiveValAndExp, active_val_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AddCommunityActiveValAndExp, level_exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::NotifyApplyJoinCommunityResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::NotifyApplyJoinCommunityResult, community_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::NotifyApplyJoinCommunityResult, position_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::NotifyApplyJoinCommunityResult, community_chat_channel_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::NotifyApplyJoinCommunityResult, join_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::NotifyPlayerGetFiredFromCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::NotifyPlayerGetFiredFromCommunity, community_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::NotifyPlayerGetFiredFromCommunity, position_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::NotifyPlayerGetFiredFromCommunity, community_chat_channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateCommunity, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateCommunity, community_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateCommunity, community_flag_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateCommunity, community_icon_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateCommunity, community_declaration_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateCommunity, community_approve_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateCommunity, level_restriction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateCommunity, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateCommunity, community_info_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateCommunity, member_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSearchCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSearchCommunity, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSearchCommunity, community_name_or_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSearchCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSearchCommunity, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSearchCommunity, community_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQueryCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQueryCommunity, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQueryCommunity, community_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQueryCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQueryCommunity, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQueryCommunity, community_info_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQueryCommunity, member_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSpecifiedCommunityPage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSpecifiedCommunityPage, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSpecifiedCommunityPage, sort_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSpecifiedCommunityPage, show_only_satisfy_rules_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSpecifiedCommunityPage, hide_member_is_full_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSpecifiedCommunityPage, page_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSpecifiedCommunityPage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSpecifiedCommunityPage, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSpecifiedCommunityPage, cur_page_no_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSpecifiedCommunityPage, total_page_no_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSpecifiedCommunityPage, community_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQuickJoinCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQuickJoinCommunity, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQuickJoinCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQuickJoinCommunity, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQuickJoinCommunity, community_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQuickJoinCommunity, position_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQuickJoinCommunity, community_chat_channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqApplyJoinCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqApplyJoinCommunity, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqApplyJoinCommunity, community_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckApplyJoinCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckApplyJoinCommunity, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckApplyJoinCommunity, community_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckApplyJoinCommunity, position_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckApplyJoinCommunity, community_chat_channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCancelJoinCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCancelJoinCommunity, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCancelJoinCommunity, community_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCancelJoinCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCancelJoinCommunity, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAppliedCommunityList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAppliedCommunityList, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAppliedCommunityList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAppliedCommunityList, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAppliedCommunityList, applied_community_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqModifyNameAndDeclaration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqModifyNameAndDeclaration, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqModifyNameAndDeclaration, community_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqModifyNameAndDeclaration, community_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqModifyNameAndDeclaration, community_declaration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckModifyNameAndDeclaration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckModifyNameAndDeclaration, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckModifyNameAndDeclaration, community_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckModifyNameAndDeclaration, community_declaration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqModifyFlagAndIcon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqModifyFlagAndIcon, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqModifyFlagAndIcon, community_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqModifyFlagAndIcon, community_flag_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqModifyFlagAndIcon, community_icon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckModifyFlagAndIcon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckModifyFlagAndIcon, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckModifyFlagAndIcon, community_flag_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckModifyFlagAndIcon, community_icon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqModifyApprovedRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqModifyApprovedRules, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqModifyApprovedRules, community_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqModifyApprovedRules, community_approve_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqModifyApprovedRules, level_restriction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckModifyApprovedRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckModifyApprovedRules, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckModifyApprovedRules, community_approve_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckModifyApprovedRules, level_restriction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqPromotionOrDemotionManager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqPromotionOrDemotionManager, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqPromotionOrDemotionManager, target_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqPromotionOrDemotionManager, community_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqPromotionOrDemotionManager, opt_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPromotionOrDemotionManager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPromotionOrDemotionManager, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAppliedPlayerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAppliedPlayerList, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAppliedPlayerList, community_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAppliedPlayerList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAppliedPlayerList, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAppliedPlayerList, applied_player_info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDealWithJoinCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDealWithJoinCommunity, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDealWithJoinCommunity, target_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDealWithJoinCommunity, community_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDealWithJoinCommunity, opt_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDealWithJoinCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDealWithJoinCommunity, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQuitCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQuitCommunity, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQuitCommunity, community_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQuitCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQuitCommunity, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQuitCommunity, community_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQuitCommunity, position_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQuitCommunity, community_chat_channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetOutOfMyCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetOutOfMyCommunity, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetOutOfMyCommunity, target_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetOutOfMyCommunity, community_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetOutOfMyCommunity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetOutOfMyCommunity, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCommunitySignIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCommunitySignIn, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCommunitySignIn, community_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCommunitySignIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCommunitySignIn, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCommunitySignIn, reward_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerBaseInfo, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerBaseInfo, name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerBaseInfo, avatar_url_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerBaseInfo, avatar_frame_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerBaseInfo, title_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerBaseInfo, offline_ts_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerBaseInfo, level_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerBaseInfo, community_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerBaseInfo, community_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::FriendInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::FriendInfo, base_info_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::FriendInfo, is_collect_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::FriendInfo, add_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AppliedFriendInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AppliedFriendInfo, base_info_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AppliedFriendInfo, apply_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecommendedFriendInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecommendedFriendInfo, base_info_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecommendedFriendInfo, recommended_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqFriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqFriendList, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckFriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckFriendList, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckFriendList, info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAppliedFriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAppliedFriendList, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAppliedFriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAppliedFriendList, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAppliedFriendList, info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAddFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAddFriend, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAddFriend, target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAddFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAddFriend, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDealWithAddFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDealWithAddFriend, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDealWithAddFriend, target_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDealWithAddFriend, opt_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDealWithAddFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDealWithAddFriend, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDelFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDelFriend, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDelFriend, target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDelFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDelFriend, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDelFriend, target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBlacklist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBlacklist, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBlacklist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBlacklist, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBlacklist, info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBlacklistOpt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBlacklistOpt, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBlacklistOpt, target_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBlacklistOpt, opt_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBlacklistOpt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBlacklistOpt, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBlacklistOpt, target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRecommendedFriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRecommendedFriendList, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRecommendedFriendList, refresh_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRecommendedFriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRecommendedFriendList, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRecommendedFriendList, info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqFriendCollectOpt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqFriendCollectOpt, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqFriendCollectOpt, target_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqFriendCollectOpt, opt_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckFriendCollectOpt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckFriendCollectOpt, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckFriendCollectOpt, target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqFindPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqFindPlayer, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqFindPlayer, target_name_or_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqFindPlayer, find_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckFindPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckFindPlayer, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckFindPlayer, base_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqExploreUpdateNodePostion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqExploreUpdateNodePostion, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqExploreUpdateNodePostion, explore_node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckExploreUpdateNodePostion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckExploreUpdateNodePostion, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckExploreUpdateNodePostion, explore_node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetExploreAreaProgressRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetExploreAreaProgressRewards, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetExploreAreaProgressRewards, explore_area_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetExploreAreaProgressRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetExploreAreaProgressRewards, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetExploreAreaProgressRewards, reward_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSweepExploreThreeStarNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSweepExploreThreeStarNode, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSweepExploreThreeStarNode, explore_node_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSweepExploreThreeStarNode, sweep_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSweepExploreThreeStarNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSweepExploreThreeStarNode, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSweepExploreThreeStarNode, reward_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSweepExploreThreeStarNode, extra_reward_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetExploreMapStarRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetExploreMapStarRewards, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetExploreMapStarRewards, target_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetExploreMapStarRewards, explore_map_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetExploreMapStarRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetExploreMapStarRewards, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetExploreMapStarRewards, reward_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetExploreMapBranchlineRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetExploreMapBranchlineRewards, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetExploreMapBranchlineRewards, target_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetExploreMapBranchlineRewards, explore_map_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetExploreMapBranchlineRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetExploreMapBranchlineRewards, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetExploreMapBranchlineRewards, reward_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpgradeExploreGuiderFriendship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpgradeExploreGuiderFriendship, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpgradeExploreGuiderFriendship, explore_guider_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpgradeExploreGuiderFriendship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpgradeExploreGuiderFriendship, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetAppointReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetAppointReward, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetAppointReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetAppointReward, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetAppointReward, rewards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSwitchAppointArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSwitchAppointArea, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSwitchAppointArea, appoint_area_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwitchAppointArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwitchAppointArea, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwitchAppointArea, appoint_area_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwitchAppointArea, rewards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqStartAffair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqStartAffair, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqStartAffair, affair_position_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqStartAffair, witch_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqStartAffair, affair_guid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckStartAffair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckStartAffair, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckStartAffair, affair_position_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckStartAffair, witch_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckStartAffair, affair_guid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTerminateAffair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTerminateAffair, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTerminateAffair, affair_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTerminateAffair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTerminateAffair, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTerminateAffair, affair_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetAffairReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetAffairReward, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetAffairReward, affair_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetAffairReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetAffairReward, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetAffairReward, affair_position_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetAffairReward, rewards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteAffair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteAffair, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteAffair, affair_guid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteAffair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteAffair, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteAffair, affair_guid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqStartAppoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqStartAppoint, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckStartAppoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckStartAppoint, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSetHouseKeeper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSetHouseKeeper, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSetHouseKeeper, witch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSetHouseKeeper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSetHouseKeeper, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSetHouseKeeperSkinId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSetHouseKeeperSkinId, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSetHouseKeeperSkinId, witch_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSetHouseKeeperSkinId, witch_skin_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSetHouseKeeperSkinId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSetHouseKeeperSkinId, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqHousekeeperInitSignin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqHousekeeperInitSignin, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckHousekeeperInitSignin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckHousekeeperInitSignin, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqHousekeeperFinishedSignin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqHousekeeperFinishedSignin, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckHousekeeperFinishedSignin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckHousekeeperFinishedSignin, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetPneumaIslandStarReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetPneumaIslandStarReward, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetPneumaIslandStarReward, boss_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetPneumaIslandStarReward, reward_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPneumaIslandStarReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPneumaIslandStarReward, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPneumaIslandStarReward, boss_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPneumaIslandStarReward, reward_idx_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPneumaIslandStarReward, rewards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdatePneumaIslandShowState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdatePneumaIslandShowState, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdatePneumaIslandShowState, boss_group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdatePneumaIslandShowState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdatePneumaIslandShowState, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdatePneumaIslandShowState, boss_group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdatePneumaAutoDecomposeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdatePneumaAutoDecomposeState, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdatePneumaAutoDecomposeState, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdatePneumaAutoDecomposeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdatePneumaAutoDecomposeState, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdatePneumaAutoDecomposeState, enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PneumaDecomposeScheme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PneumaDecomposeScheme, pneuma_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PneumaDecomposeScheme, decompose_scheme_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdatePneumaDecomposeScheme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdatePneumaDecomposeScheme, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdatePneumaDecomposeScheme, boss_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdatePneumaDecomposeScheme, scheme_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdatePneumaDecomposeScheme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdatePneumaDecomposeScheme, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdatePneumaDecomposeScheme, boss_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdatePneumaDecomposeScheme, scheme_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateOrder, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateOrder, product_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateOrder, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateOrder, product_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateOrder, order_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateOrder, order_ts_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateOrder, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCallbackRecharge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCallbackRecharge, sdk_uid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCallbackRecharge, sdk_order_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCallbackRecharge, app_order_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCallbackRecharge, product_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCallbackRecharge, timestamp_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCallbackRecharge, money_amount_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCallbackRecharge, money_currency_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCallbackRecharge, order_amount_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCallbackRecharge, order_currency_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCallbackRecharge, pay_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCallbackRecharge, platform_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCallbackRecharge, sandbox_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCallbackRecharge, source_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCallbackRecharge, role_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCallbackRecharge, ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCallbackRecharge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCallbackRecharge, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCallbackRecharge, app_order_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCallbackRecharge, sdk_order_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCallbackRecharge, product_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCallbackRecharge, money_amount_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCallbackRecharge, money_currency_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCallbackRecharge, order_amount_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCallbackRecharge, order_currency_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCallbackRecharge, basic_add_number_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCallbackRecharge, extra_add_number_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCallbackRecharge, extra_param_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCallbackRecharge, extra_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::MailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::MailInfo, mail_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::MailInfo, prompt_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::MailInfo, title_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::MailInfo, context_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::MailInfo, sender_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::MailInfo, parms_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::MailInfo, reward_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::MailInfo, create_ts_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::MailInfo, deadline_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::MailInfos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::MailInfos, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteReadedMails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteReadedMails, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteReadedMails, mail_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteReadedMails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteReadedMails, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReadMails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReadMails, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReadMails, mail_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReadMails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReadMails, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReadMails, reward_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWorldSendMailToPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWorldSendMailToPlayer, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqWorldSendMailToPlayer, mail_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWorldSendMailToPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWorldSendMailToPlayer, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWorldSendMailToPlayer, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckWorldSendMailToPlayer, mail_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncAddPreSendAllPlayersMails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncAddPreSendAllPlayersMails, mail_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncDelPreSendAllPlayersMails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncDelPreSendAllPlayersMails, mail_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncAddPreSendPlayerMails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncAddPreSendPlayerMails, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncAddPreSendPlayerMails, mail_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncDelPreSendPlayerMails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncDelPreSendPlayerMails, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncDelPreSendPlayerMails, mail_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerMailSessions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerMailSessions, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerMailSessions, ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRegisterChatSdkAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRegisterChatSdkAccount, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRegisterChatSdkAccount, chat_sdk_passwd_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRegisterChatSdkAccount, world_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRegisterChatSdkAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRegisterChatSdkAccount, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRegisterChatSdkAccount, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRegisterChatSdkAccount, chat_sdk_passwd_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRegisterChatSdkAccount, world_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateChatroom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateChatroom, chatroom_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateChatroom, chatroom_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateChatroom, world_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateChatroom, extra_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateChatroom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateChatroom, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateChatroom, chatroom_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateChatroom, chatroom_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateChatroom, world_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateChatroom, extra_data_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateChatroom, chatroom_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSdkLoginInfoAndChatroom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSdkLoginInfoAndChatroom, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSdkLoginInfoAndChatroom, community_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSdkLoginInfoAndChatroom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSdkLoginInfoAndChatroom, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSdkLoginInfoAndChatroom, chat_sdk_passwd_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSdkLoginInfoAndChatroom, public_chatroom_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSdkLoginInfoAndChatroom, system_chatroom_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSdkLoginInfoAndChatroom, community_chatroom_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReportChatPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReportChatPlayer, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReportChatPlayer, chat_player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReportChatPlayer, report_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReportChatPlayer, report_content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReportChatPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReportChatPlayer, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReportChatPlayer, chat_player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReportChatPlayer, report_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReportChatPlayer, report_content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSendChatroomMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSendChatroomMsg, chatroom_ids_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSendChatroomMsg, chat_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSendChatroomMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSendChatroomMsg, chatroom_ids_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSendChatroomMsg, chat_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdateChatroomAnnouncement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdateChatroomAnnouncement, chatroom_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdateChatroomAnnouncement, announcement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdateChatroomAnnouncement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdateChatroomAnnouncement, chatroom_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUpdateChatroomAnnouncement, announcement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCheckChatText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCheckChatText, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCheckChatText, chat_text_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCheckChatText, world_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCheckChatText, chat_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCheckChatText, other_player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCheckChatText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCheckChatText, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCheckChatText, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCheckChatText, chat_text_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCheckChatText, suggestion_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCheckChatText, world_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCheckChatText, chat_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCheckChatText, other_player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateChatGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateChatGroup, chat_group_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateChatGroup, chat_group_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateChatGroup, owner_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateChatGroup, extra_data_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateChatGroup, world_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateChatGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateChatGroup, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateChatGroup, chat_group_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateChatGroup, chat_group_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateChatGroup, owner_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateChatGroup, extra_data_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateChatGroup, world_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateChatGroup, chat_group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteChatGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteChatGroup, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteChatGroup, chat_group_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteChatGroup, extra_data_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteChatGroup, world_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteChatGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteChatGroup, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteChatGroup, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteChatGroup, chat_group_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteChatGroup, extra_data_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteChatGroup, world_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTransferChatGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTransferChatGroup, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTransferChatGroup, chat_group_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTransferChatGroup, extra_data_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTransferChatGroup, user_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTransferChatGroup, world_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTransferChatGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTransferChatGroup, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTransferChatGroup, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTransferChatGroup, chat_group_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTransferChatGroup, extra_data_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTransferChatGroup, user_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTransferChatGroup, world_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAddChatGroupUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAddChatGroupUser, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAddChatGroupUser, chat_group_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAddChatGroupUser, extra_data_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAddChatGroupUser, user_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAddChatGroupUser, world_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAddChatGroupUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAddChatGroupUser, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAddChatGroupUser, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAddChatGroupUser, chat_group_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAddChatGroupUser, extra_data_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAddChatGroupUser, user_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAddChatGroupUser, world_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteChatGroupUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteChatGroupUser, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteChatGroupUser, chat_group_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteChatGroupUser, extra_data_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteChatGroupUser, user_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqDeleteChatGroupUser, world_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteChatGroupUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteChatGroupUser, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteChatGroupUser, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteChatGroupUser, chat_group_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteChatGroupUser, extra_data_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteChatGroupUser, user_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckDeleteChatGroupUser, world_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSwitchChatBubble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSwitchChatBubble, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSwitchChatBubble, bubble_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwitchChatBubble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwitchChatBubble, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwitchChatBubble, bubble_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUnlockChatBubble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUnlockChatBubble, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUnlockChatBubble, bubble_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUnlockChatBubble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUnlockChatBubble, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUnlockChatBubble, bubble_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUnlockChatMemeGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUnlockChatMemeGroup, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUnlockChatMemeGroup, meme_group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUnlockChatMemeGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUnlockChatMemeGroup, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUnlockChatMemeGroup, meme_group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUnlockChatMeme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUnlockChatMeme, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUnlockChatMeme, meme_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUnlockChatMeme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUnlockChatMeme, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckUnlockChatMeme, meme_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerHonorPointChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerHonorPointChanged, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerHonorPointChanged, honor_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SavePlayerHonorPointRanking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SavePlayerHonorPointRanking, key_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SavePlayerHonorPointRanking, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerStrategyPointChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerStrategyPointChanged, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncPlayerStrategyPointChanged, strategy_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SavePlayerStrategyPointRanking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SavePlayerStrategyPointRanking, key_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SavePlayerStrategyPointRanking, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaStageSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaStageSession, stage_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaStageSession, session_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SavePlayerChallengeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SavePlayerChallengeList, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SavePlayerChallengeList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::UpdatePlayerChallengeItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::UpdatePlayerChallengeItem, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::UpdatePlayerChallengeItem, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::UpdatePlayerReplayItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::UpdatePlayerReplayItem, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::UpdatePlayerReplayItem, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AddPlayerReplayItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AddPlayerReplayItem, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AddPlayerReplayItem, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::DelPlayerReplayItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::DelPlayerReplayItem, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::DelPlayerReplayItem, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleIsReady, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleIsReady, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleIsReady, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleIsReady, game_play_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleIsReady, team_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleIsReady, continuous_count_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleIsReady, auto_buy_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleIsReady, challenge_result_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleIsReady, challenge_item_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleIsReady, entity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleReplayDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleReplayDatas, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleReplayDatas, replay_item_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleReplayDatas, msgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SaveBotArenaBattleReplayDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SaveBotArenaBattleReplayDatas, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SaveBotArenaBattleReplayDatas, replay_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SaveBotArenaBattleReplayDatas, msgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::DelBotArenaBattleReplayDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::DelBotArenaBattleReplayDatas, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::DelBotArenaBattleReplayDatas, replay_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncDefensivePlayerBattleReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncDefensivePlayerBattleReward, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncDefensivePlayerBattleReward, reward_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleSettleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleSettleData, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleSettleData, challenge_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleSettleData, replay_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncBotArenaBattleSettleData, is_win_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqClickBotarenaPromptForm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqClickBotarenaPromptForm, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqClickBotarenaPromptForm, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckClickBotarenaPromptForm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckClickBotarenaPromptForm, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::HonorPointRankingItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::HonorPointRankingItem, rank_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::HonorPointRankingItem, player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetPlayerHonorPointRanking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetPlayerHonorPointRanking, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPlayerHonorPointRanking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPlayerHonorPointRanking, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPlayerHonorPointRanking, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPlayerHonorPointRanking, ranking_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPlayerHonorPointRanking, cur_rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetBotArenaMainPageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetBotArenaMainPageData, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaMainPageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaMainPageData, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaMainPageData, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaMainPageData, rank_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaMainPageData, stage_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaMainPageData, session_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaMainPageData, prompt_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaMainPageData, pre_botarena_grade_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaMainPageData, pre_strategy_point_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaMainPageData, stage_begin_ts_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaMainPageData, stage_end_ts_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaMainPageData, stage_settle_ts_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaMainPageData, session_begin_ts_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaMainPageData, session_end_ts_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaMainPageData, session_settle_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::StrategyPointRankingItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::StrategyPointRankingItem, rank_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::StrategyPointRankingItem, player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetPlayerStrategyPointRanking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetPlayerStrategyPointRanking, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPlayerStrategyPointRanking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPlayerStrategyPointRanking, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPlayerStrategyPointRanking, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPlayerStrategyPointRanking, ranking_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPlayerStrategyPointRanking, cur_rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaChallengeItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaChallengeItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaChallengeItem, id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaChallengeItem, result_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaChallengeItem, entity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaChallengeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaChallengeList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetPlayerBotArenaChallengeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetPlayerBotArenaChallengeList, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPlayerBotArenaChallengeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPlayerBotArenaChallengeList, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPlayerBotArenaChallengeList, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetPlayerBotArenaChallengeList, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRefreshPlayerBotArenaChallengeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRefreshPlayerBotArenaChallengeList, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRefreshPlayerBotArenaChallengeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRefreshPlayerBotArenaChallengeList, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRefreshPlayerBotArenaChallengeList, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRefreshPlayerBotArenaChallengeList, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAdjBotarenaDefensiveTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAdjBotarenaDefensiveTeam, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAdjBotarenaDefensiveTeam, idx_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAdjBotarenaDefensiveTeam, witch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAdjBotarenaDefensiveTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckAdjBotarenaDefensiveTeam, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqResetBotarenaDefensiveTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqResetBotarenaDefensiveTeam, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckResetBotarenaDefensiveTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckResetBotarenaDefensiveTeam, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQuickConfigBotarenaDefensiveTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQuickConfigBotarenaDefensiveTeam, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQuickConfigBotarenaDefensiveTeam, witch_id_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQuickConfigBotarenaDefensiveTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQuickConfigBotarenaDefensiveTeam, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQuickConfigBotarenaDefensiveTeam, witch_id_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBuyShabowToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBuyShabowToken, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBuyShabowToken, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBuyShabowToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBuyShabowToken, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaReplayItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaReplayItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaReplayItem, id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaReplayItem, reward_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaReplayItem, create_ts_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaReplayItem, result_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaReplayItem, is_counter_attack_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaReplayItem, entity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaReplayList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BotArenaReplayList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetBotArenaReplayList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetBotArenaReplayList, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaReplayList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaReplayList, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaReplayList, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetBotArenaReplayList, replay_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReplayBotArenaBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReplayBotArenaBattle, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReplayBotArenaBattle, replay_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReplayBotArenaBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReplayBotArenaBattle, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReplayBotArenaBattle, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReplayBotArenaBattle, replay_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ShopReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ShopReceipt, product_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ShopReceipt, shop_goods_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ShopReceipt, shop_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ShopReceipt, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::DelPlayerShopReceipts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::DelPlayerShopReceipts, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::DelPlayerShopReceipts, shop_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::DelPlayerShopReceipts, shop_goods_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::UpdPlayerShopReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::UpdPlayerShopReceipt, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::UpdPlayerShopReceipt, shop_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::UpdPlayerShopReceipt, shop_goods_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::UpdPlayerShopReceipt, receipt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AddPlayerShopReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AddPlayerShopReceipt, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AddPlayerShopReceipt, shop_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AddPlayerShopReceipt, shop_goods_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AddPlayerShopReceipt, receipt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetShopProducts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetShopProducts, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqGetShopProducts, shop_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetShopProducts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetShopProducts, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetShopProducts, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckGetShopProducts, products_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBuyProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBuyProduct, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBuyProduct, shop_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBuyProduct, product_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBuyProduct, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBuyProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBuyProduct, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBuyProduct, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBuyProduct, product_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBuyProduct, count_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::KWMsg::ProductPrice)},
  { 7, -1, sizeof(::KWMsg::ProductContent)},
  { 14, -1, sizeof(::KWMsg::ProductInfo)},
  { 31, -1, sizeof(::KWMsg::RewardInfo)},
  { 39, -1, sizeof(::KWMsg::WitchInfo)},
  { 65, -1, sizeof(::KWMsg::GuildInfo)},
  { 72, -1, sizeof(::KWMsg::PlayerInfo)},
  { 91, -1, sizeof(::KWMsg::DrawCardInfo)},
  { 98, -1, sizeof(::KWMsg::RewardList)},
  { 104, -1, sizeof(::KWMsg::ReqAckLagTest)},
  { 109, -1, sizeof(::KWMsg::ReqAckHeartBeat)},
  { 114, -1, sizeof(::KWMsg::ReqLeaveGameServer)},
  { 120, -1, sizeof(::KWMsg::PlayerEntryInfo)},
  { 130, -1, sizeof(::KWMsg::AckPlayerEntryList)},
  { 136, -1, sizeof(::KWMsg::AckPlayerLeaveList)},
  { 142, -1, sizeof(::KWMsg::AckPlayerDataFinished)},
  { 148, -1, sizeof(::KWMsg::PosSyncUnit)},
  { 158, -1, sizeof(::KWMsg::ReqAckPlayerPosSync)},
  { 165, -1, sizeof(::KWMsg::ReqSwapScene)},
  { 173, -1, sizeof(::KWMsg::AckSwapScene)},
  { 181, -1, sizeof(::KWMsg::AckSwapSceneNotify)},
  { 188, -1, sizeof(::KWMsg::ReqAckPlayerChat)},
  { 200, -1, sizeof(::KWMsg::ReqCreateKcpObject)},
  { 206, -1, sizeof(::KWMsg::AckCreateKcpObject)},
  { 215, -1, sizeof(::KWMsg::ReqEstablishKcpConnection)},
  { 221, -1, sizeof(::KWMsg::AckEstablishKcpConnection)},
  { 227, -1, sizeof(::KWMsg::ReqTryPushClientIntoQueueUp)},
  { 236, -1, sizeof(::KWMsg::AckPushClientIntoQueueUp)},
  { 249, -1, sizeof(::KWMsg::ReqQueueUpGetCurWorldSuitProxy)},
  { 256, -1, sizeof(::KWMsg::AckQueueUpGetCurWorldSuitProxy)},
  { 265, -1, sizeof(::KWMsg::ReqUpdatePlayerLastHeartbeatTS)},
  { 272, -1, sizeof(::KWMsg::SyncQueueUpUserCancelOperation)},
  { 279, -1, sizeof(::KWMsg::SyncPlayerPropertiesCache)},
  { 286, -1, sizeof(::KWMsg::LoadPlayerPropertiesCache)},
  { 293, -1, sizeof(::KWMsg::LoadPlayerRecordsCache)},
  { 300, -1, sizeof(::KWMsg::SyncPlayerRecordsCacheAdd)},
  { 314, -1, sizeof(::KWMsg::SyncPlayerRecordsCacheUpdate)},
  { 328, -1, sizeof(::KWMsg::SyncPlayerRecordsCacheDel)},
  { 336, -1, sizeof(::KWMsg::SyncPlayerRecordsCacheSwap)},
  { 345, -1, sizeof(::KWMsg::ReqTestBattle)},
  { 353, -1, sizeof(::KWMsg::AckTestBattle)},
  { 362, -1, sizeof(::KWMsg::ReqCollectWitch)},
  { 369, -1, sizeof(::KWMsg::AckCollectWitch)},
  { 377, -1, sizeof(::KWMsg::ReqInitPlayerName)},
  { 385, -1, sizeof(::KWMsg::AckInitPlayerName)},
  { 393, -1, sizeof(::KWMsg::ReqUpdateModule)},
  { 399, -1, sizeof(::KWMsg::AckUpdateModule)},
  { 407, -1, sizeof(::KWMsg::ReqChapterRewardTipOk)},
  { 413, -1, sizeof(::KWMsg::AckChapterRewardTipOk)},
  { 421, -1, sizeof(::KWMsg::ReqCollegeDrama)},
  { 429, -1, sizeof(::KWMsg::AckCollegeDrama)},
  { 435, -1, sizeof(::KWMsg::ReqCollegeTaskAction)},
  { 442, -1, sizeof(::KWMsg::AckCollegeTaskAction)},
  { 448, -1, sizeof(::KWMsg::ReqCollegeTaskCountdown)},
  { 455, -1, sizeof(::KWMsg::AckCollegeTaskCountdown)},
  { 461, -1, sizeof(::KWMsg::ExamQuestion)},
  { 467, -1, sizeof(::KWMsg::ReqCollegeStartExam)},
  { 473, -1, sizeof(::KWMsg::AckCollegeStartExam)},
  { 481, -1, sizeof(::KWMsg::ReqCollegeAnswer)},
  { 489, -1, sizeof(::KWMsg::AckCollegeAnswer)},
  { 497, -1, sizeof(::KWMsg::CommonReward)},
  { 505, -1, sizeof(::KWMsg::ReqCollegeReward)},
  { 512, -1, sizeof(::KWMsg::AckCollegeReward)},
  { 519, -1, sizeof(::KWMsg::ReqTestSetCollegeExamStatus)},
  { 526, -1, sizeof(::KWMsg::ReqCollegeExamExit)},
  { 532, -1, sizeof(::KWMsg::AckCollegeExamExit)},
  { 538, -1, sizeof(::KWMsg::ReqSetItem)},
  { 546, -1, sizeof(::KWMsg::ReqBattlePreparedInfo)},
  { 556, -1, sizeof(::KWMsg::BattleEntityInfo)},
  { 564, -1, sizeof(::KWMsg::BattleWitchInfo)},
  { 575, -1, sizeof(::KWMsg::AckBattlePreparedInfo)},
  { 587, -1, sizeof(::KWMsg::ReqBuyPower)},
  { 594, -1, sizeof(::KWMsg::AckBuyPower)},
  { 601, -1, sizeof(::KWMsg::ReqTestSetResource)},
  { 609, -1, sizeof(::KWMsg::ReqBattleAdjWitchTeam)},
  { 618, -1, sizeof(::KWMsg::AckBattleAdjWitchTeam)},
  { 625, -1, sizeof(::KWMsg::ReqBattleChangeWitchTeamName)},
  { 633, -1, sizeof(::KWMsg::AckBattleChangeWitchTeamName)},
  { 640, -1, sizeof(::KWMsg::ReqBattleResetWitchTeam)},
  { 647, -1, sizeof(::KWMsg::AckBattleResetWitchTeam)},
  { 654, -1, sizeof(::KWMsg::ReqBattleQuickConfigWitchTeam)},
  { 662, -1, sizeof(::KWMsg::AckBattleQuickConfigWitchTeam)},
  { 670, -1, sizeof(::KWMsg::ReqBattleBuyWitchTeam)},
  { 677, -1, sizeof(::KWMsg::AckBattleBuyWitchTeam)},
  { 684, -1, sizeof(::KWMsg::ReqTestRecruitWitch)},
  { 691, -1, sizeof(::KWMsg::CommonGetRewardInfo)},
  { 698, -1, sizeof(::KWMsg::ReqSetSystemFunctionFlag)},
  { 706, -1, sizeof(::KWMsg::AckSetSystemFunctionFlag)},
  { 712, -1, sizeof(::KWMsg::SyncSystemFunctionUnlock)},
  { 718, -1, sizeof(::KWMsg::SyncPlayerLevelRanking)},
  { 725, -1, sizeof(::KWMsg::ReqSendGiftForWitch)},
  { 734, -1, sizeof(::KWMsg::AckSendGiftForWitch)},
  { 740, -1, sizeof(::KWMsg::ReqUseMagicalMedicine)},
  { 749, -1, sizeof(::KWMsg::AckUseMagicalMedicine)},
  { 755, -1, sizeof(::KWMsg::ReqUnlockWitchSkin)},
  { 763, -1, sizeof(::KWMsg::AckUnlockWitchSkin)},
  { 769, -1, sizeof(::KWMsg::ReqWitchStarLevelUp)},
  { 777, -1, sizeof(::KWMsg::AckWitchStarLevelUp)},
  { 783, -1, sizeof(::KWMsg::ReqWitchKnowledgeLevelUp)},
  { 791, -1, sizeof(::KWMsg::AckWitchKnowledgeLevelUp)},
  { 797, -1, sizeof(::KWMsg::ReqExpandWitchPneumaBagSize)},
  { 804, -1, sizeof(::KWMsg::AckExpandWitchPneumaBagSize)},
  { 810, -1, sizeof(::KWMsg::ReqWitchPneumaOpt)},
  { 819, -1, sizeof(::KWMsg::AckWitchPneumaOpt)},
  { 828, -1, sizeof(::KWMsg::ReqWitchPneumaEnhance)},
  { 835, -1, sizeof(::KWMsg::AckWitchPneumaEnhance)},
  { 841, -1, sizeof(::KWMsg::ReqWitchPneumaDecompose)},
  { 848, -1, sizeof(::KWMsg::AckWitchPneumaDecompose)},
  { 855, -1, sizeof(::KWMsg::ReqWitchSkillLevelUp)},
  { 863, -1, sizeof(::KWMsg::AckWitchSkillLevelUp)},
  { 869, -1, sizeof(::KWMsg::ReqSweepEndlessTower)},
  { 876, -1, sizeof(::KWMsg::AckSweepEndlessTower)},
  { 883, -1, sizeof(::KWMsg::ReqBlackmartCommodityList)},
  { 889, -1, sizeof(::KWMsg::AckBlackmartCommodityList)},
  { 895, -1, sizeof(::KWMsg::ReqRefreshBlackmartCommodityList)},
  { 901, -1, sizeof(::KWMsg::AckRefreshBlackmartCommodityList)},
  { 907, -1, sizeof(::KWMsg::ReqBuyBlackmartCommodity)},
  { 915, -1, sizeof(::KWMsg::AckBuyBlackmartCommodity)},
  { 922, -1, sizeof(::KWMsg::SyncBlackmartCommodityUpdated)},
  { 928, -1, sizeof(::KWMsg::ReqActiveMissionOperation)},
  { 935, -1, sizeof(::KWMsg::AckActiveMissionOperation)},
  { 941, -1, sizeof(::KWMsg::ReqGetActiveMissionReward)},
  { 948, -1, sizeof(::KWMsg::AckGetActiveMissionReward)},
  { 954, -1, sizeof(::KWMsg::ReqDrawCard)},
  { 962, -1, sizeof(::KWMsg::AckDrawCard)},
  { 969, -1, sizeof(::KWMsg::CommunityMemberInfo)},
  { 985, -1, sizeof(::KWMsg::CommunityInfo)},
  { 1006, -1, sizeof(::KWMsg::AppliedCommunityInfo)},
  { 1013, -1, sizeof(::KWMsg::AppliedPlayerInfo)},
  { 1020, -1, sizeof(::KWMsg::SyncPlayerCommunityInfo)},
  { 1029, -1, sizeof(::KWMsg::AddCommunityActiveValAndExp)},
  { 1038, -1, sizeof(::KWMsg::NotifyApplyJoinCommunityResult)},
  { 1047, -1, sizeof(::KWMsg::NotifyPlayerGetFiredFromCommunity)},
  { 1055, -1, sizeof(::KWMsg::ReqCreateCommunity)},
  { 1067, -1, sizeof(::KWMsg::AckCreateCommunity)},
  { 1075, -1, sizeof(::KWMsg::ReqSearchCommunity)},
  { 1082, -1, sizeof(::KWMsg::AckSearchCommunity)},
  { 1089, -1, sizeof(::KWMsg::ReqQueryCommunity)},
  { 1096, -1, sizeof(::KWMsg::AckQueryCommunity)},
  { 1104, -1, sizeof(::KWMsg::ReqSpecifiedCommunityPage)},
  { 1114, -1, sizeof(::KWMsg::AckSpecifiedCommunityPage)},
  { 1123, -1, sizeof(::KWMsg::ReqQuickJoinCommunity)},
  { 1129, -1, sizeof(::KWMsg::AckQuickJoinCommunity)},
  { 1138, -1, sizeof(::KWMsg::ReqApplyJoinCommunity)},
  { 1145, -1, sizeof(::KWMsg::AckApplyJoinCommunity)},
  { 1154, -1, sizeof(::KWMsg::ReqCancelJoinCommunity)},
  { 1161, -1, sizeof(::KWMsg::AckCancelJoinCommunity)},
  { 1167, -1, sizeof(::KWMsg::ReqAppliedCommunityList)},
  { 1173, -1, sizeof(::KWMsg::AckAppliedCommunityList)},
  { 1180, -1, sizeof(::KWMsg::ReqModifyNameAndDeclaration)},
  { 1189, -1, sizeof(::KWMsg::AckModifyNameAndDeclaration)},
  { 1197, -1, sizeof(::KWMsg::ReqModifyFlagAndIcon)},
  { 1206, -1, sizeof(::KWMsg::AckModifyFlagAndIcon)},
  { 1214, -1, sizeof(::KWMsg::ReqModifyApprovedRules)},
  { 1223, -1, sizeof(::KWMsg::AckModifyApprovedRules)},
  { 1231, -1, sizeof(::KWMsg::ReqPromotionOrDemotionManager)},
  { 1240, -1, sizeof(::KWMsg::AckPromotionOrDemotionManager)},
  { 1246, -1, sizeof(::KWMsg::ReqAppliedPlayerList)},
  { 1253, -1, sizeof(::KWMsg::AckAppliedPlayerList)},
  { 1260, -1, sizeof(::KWMsg::ReqDealWithJoinCommunity)},
  { 1269, -1, sizeof(::KWMsg::AckDealWithJoinCommunity)},
  { 1275, -1, sizeof(::KWMsg::ReqQuitCommunity)},
  { 1282, -1, sizeof(::KWMsg::AckQuitCommunity)},
  { 1291, -1, sizeof(::KWMsg::ReqGetOutOfMyCommunity)},
  { 1299, -1, sizeof(::KWMsg::AckGetOutOfMyCommunity)},
  { 1305, -1, sizeof(::KWMsg::ReqCommunitySignIn)},
  { 1312, -1, sizeof(::KWMsg::AckCommunitySignIn)},
  { 1319, -1, sizeof(::KWMsg::PlayerBaseInfo)},
  { 1333, -1, sizeof(::KWMsg::FriendInfo)},
  { 1341, -1, sizeof(::KWMsg::AppliedFriendInfo)},
  { 1348, -1, sizeof(::KWMsg::RecommendedFriendInfo)},
  { 1355, -1, sizeof(::KWMsg::ReqFriendList)},
  { 1361, -1, sizeof(::KWMsg::AckFriendList)},
  { 1368, -1, sizeof(::KWMsg::ReqAppliedFriendList)},
  { 1374, -1, sizeof(::KWMsg::AckAppliedFriendList)},
  { 1381, -1, sizeof(::KWMsg::ReqAddFriend)},
  { 1388, -1, sizeof(::KWMsg::AckAddFriend)},
  { 1394, -1, sizeof(::KWMsg::ReqDealWithAddFriend)},
  { 1402, -1, sizeof(::KWMsg::AckDealWithAddFriend)},
  { 1408, -1, sizeof(::KWMsg::ReqDelFriend)},
  { 1415, -1, sizeof(::KWMsg::AckDelFriend)},
  { 1422, -1, sizeof(::KWMsg::ReqBlacklist)},
  { 1428, -1, sizeof(::KWMsg::AckBlacklist)},
  { 1435, -1, sizeof(::KWMsg::ReqBlacklistOpt)},
  { 1443, -1, sizeof(::KWMsg::AckBlacklistOpt)},
  { 1450, -1, sizeof(::KWMsg::ReqRecommendedFriendList)},
  { 1457, -1, sizeof(::KWMsg::AckRecommendedFriendList)},
  { 1464, -1, sizeof(::KWMsg::ReqFriendCollectOpt)},
  { 1472, -1, sizeof(::KWMsg::AckFriendCollectOpt)},
  { 1479, -1, sizeof(::KWMsg::ReqFindPlayer)},
  { 1487, -1, sizeof(::KWMsg::AckFindPlayer)},
  { 1494, -1, sizeof(::KWMsg::ReqExploreUpdateNodePostion)},
  { 1501, -1, sizeof(::KWMsg::AckExploreUpdateNodePostion)},
  { 1508, -1, sizeof(::KWMsg::ReqGetExploreAreaProgressRewards)},
  { 1515, -1, sizeof(::KWMsg::AckGetExploreAreaProgressRewards)},
  { 1522, -1, sizeof(::KWMsg::ReqSweepExploreThreeStarNode)},
  { 1530, -1, sizeof(::KWMsg::AckSweepExploreThreeStarNode)},
  { 1538, -1, sizeof(::KWMsg::ReqGetExploreMapStarRewards)},
  { 1546, -1, sizeof(::KWMsg::AckGetExploreMapStarRewards)},
  { 1553, -1, sizeof(::KWMsg::ReqGetExploreMapBranchlineRewards)},
  { 1561, -1, sizeof(::KWMsg::AckGetExploreMapBranchlineRewards)},
  { 1568, -1, sizeof(::KWMsg::ReqUpgradeExploreGuiderFriendship)},
  { 1575, -1, sizeof(::KWMsg::AckUpgradeExploreGuiderFriendship)},
  { 1581, -1, sizeof(::KWMsg::ReqGetAppointReward)},
  { 1587, -1, sizeof(::KWMsg::AckGetAppointReward)},
  { 1594, -1, sizeof(::KWMsg::ReqSwitchAppointArea)},
  { 1601, -1, sizeof(::KWMsg::AckSwitchAppointArea)},
  { 1609, -1, sizeof(::KWMsg::ReqStartAffair)},
  { 1618, -1, sizeof(::KWMsg::AckStartAffair)},
  { 1627, -1, sizeof(::KWMsg::ReqTerminateAffair)},
  { 1634, -1, sizeof(::KWMsg::AckTerminateAffair)},
  { 1641, -1, sizeof(::KWMsg::ReqGetAffairReward)},
  { 1648, -1, sizeof(::KWMsg::AckGetAffairReward)},
  { 1656, -1, sizeof(::KWMsg::ReqDeleteAffair)},
  { 1663, -1, sizeof(::KWMsg::AckDeleteAffair)},
  { 1670, -1, sizeof(::KWMsg::ReqStartAppoint)},
  { 1676, -1, sizeof(::KWMsg::AckStartAppoint)},
  { 1682, -1, sizeof(::KWMsg::ReqSetHouseKeeper)},
  { 1689, -1, sizeof(::KWMsg::AckSetHouseKeeper)},
  { 1695, -1, sizeof(::KWMsg::ReqSetHouseKeeperSkinId)},
  { 1703, -1, sizeof(::KWMsg::AckSetHouseKeeperSkinId)},
  { 1709, -1, sizeof(::KWMsg::ReqHousekeeperInitSignin)},
  { 1715, -1, sizeof(::KWMsg::AckHousekeeperInitSignin)},
  { 1721, -1, sizeof(::KWMsg::ReqHousekeeperFinishedSignin)},
  { 1727, -1, sizeof(::KWMsg::AckHousekeeperFinishedSignin)},
  { 1733, -1, sizeof(::KWMsg::ReqGetPneumaIslandStarReward)},
  { 1741, -1, sizeof(::KWMsg::AckGetPneumaIslandStarReward)},
  { 1750, -1, sizeof(::KWMsg::ReqUpdatePneumaIslandShowState)},
  { 1757, -1, sizeof(::KWMsg::AckUpdatePneumaIslandShowState)},
  { 1764, -1, sizeof(::KWMsg::ReqUpdatePneumaAutoDecomposeState)},
  { 1771, -1, sizeof(::KWMsg::AckUpdatePneumaAutoDecomposeState)},
  { 1778, -1, sizeof(::KWMsg::PneumaDecomposeScheme)},
  { 1785, -1, sizeof(::KWMsg::ReqUpdatePneumaDecomposeScheme)},
  { 1793, -1, sizeof(::KWMsg::AckUpdatePneumaDecomposeScheme)},
  { 1801, -1, sizeof(::KWMsg::ReqCreateOrder)},
  { 1808, -1, sizeof(::KWMsg::AckCreateOrder)},
  { 1818, -1, sizeof(::KWMsg::ReqCallbackRecharge)},
  { 1838, -1, sizeof(::KWMsg::AckCallbackRecharge)},
  { 1855, -1, sizeof(::KWMsg::MailInfo)},
  { 1869, -1, sizeof(::KWMsg::MailInfos)},
  { 1875, -1, sizeof(::KWMsg::ReqDeleteReadedMails)},
  { 1882, -1, sizeof(::KWMsg::AckDeleteReadedMails)},
  { 1888, -1, sizeof(::KWMsg::ReqReadMails)},
  { 1895, -1, sizeof(::KWMsg::AckReadMails)},
  { 1902, -1, sizeof(::KWMsg::ReqWorldSendMailToPlayer)},
  { 1909, -1, sizeof(::KWMsg::AckWorldSendMailToPlayer)},
  { 1917, -1, sizeof(::KWMsg::SyncAddPreSendAllPlayersMails)},
  { 1923, -1, sizeof(::KWMsg::SyncDelPreSendAllPlayersMails)},
  { 1929, -1, sizeof(::KWMsg::SyncAddPreSendPlayerMails)},
  { 1936, -1, sizeof(::KWMsg::SyncDelPreSendPlayerMails)},
  { 1943, -1, sizeof(::KWMsg::SyncPlayerMailSessions)},
  { 1950, -1, sizeof(::KWMsg::ReqRegisterChatSdkAccount)},
  { 1958, -1, sizeof(::KWMsg::AckRegisterChatSdkAccount)},
  { 1967, -1, sizeof(::KWMsg::ReqCreateChatroom)},
  { 1976, -1, sizeof(::KWMsg::AckCreateChatroom)},
  { 1987, -1, sizeof(::KWMsg::ReqSdkLoginInfoAndChatroom)},
  { 1994, -1, sizeof(::KWMsg::AckSdkLoginInfoAndChatroom)},
  { 2004, -1, sizeof(::KWMsg::ReqReportChatPlayer)},
  { 2013, -1, sizeof(::KWMsg::AckReportChatPlayer)},
  { 2022, -1, sizeof(::KWMsg::ReqSendChatroomMsg)},
  { 2029, -1, sizeof(::KWMsg::AckSendChatroomMsg)},
  { 2036, -1, sizeof(::KWMsg::ReqUpdateChatroomAnnouncement)},
  { 2043, -1, sizeof(::KWMsg::AckUpdateChatroomAnnouncement)},
  { 2050, -1, sizeof(::KWMsg::ReqCheckChatText)},
  { 2060, -1, sizeof(::KWMsg::AckCheckChatText)},
  { 2072, -1, sizeof(::KWMsg::ReqCreateChatGroup)},
  { 2082, -1, sizeof(::KWMsg::AckCreateChatGroup)},
  { 2094, -1, sizeof(::KWMsg::ReqDeleteChatGroup)},
  { 2103, -1, sizeof(::KWMsg::AckDeleteChatGroup)},
  { 2113, -1, sizeof(::KWMsg::ReqTransferChatGroup)},
  { 2123, -1, sizeof(::KWMsg::AckTransferChatGroup)},
  { 2134, -1, sizeof(::KWMsg::ReqAddChatGroupUser)},
  { 2144, -1, sizeof(::KWMsg::AckAddChatGroupUser)},
  { 2155, -1, sizeof(::KWMsg::ReqDeleteChatGroupUser)},
  { 2165, -1, sizeof(::KWMsg::AckDeleteChatGroupUser)},
  { 2176, -1, sizeof(::KWMsg::ReqSwitchChatBubble)},
  { 2183, -1, sizeof(::KWMsg::AckSwitchChatBubble)},
  { 2190, -1, sizeof(::KWMsg::ReqUnlockChatBubble)},
  { 2197, -1, sizeof(::KWMsg::AckUnlockChatBubble)},
  { 2204, -1, sizeof(::KWMsg::ReqUnlockChatMemeGroup)},
  { 2211, -1, sizeof(::KWMsg::AckUnlockChatMemeGroup)},
  { 2218, -1, sizeof(::KWMsg::ReqUnlockChatMeme)},
  { 2225, -1, sizeof(::KWMsg::AckUnlockChatMeme)},
  { 2232, -1, sizeof(::KWMsg::SyncPlayerHonorPointChanged)},
  { 2239, -1, sizeof(::KWMsg::SavePlayerHonorPointRanking)},
  { 2246, -1, sizeof(::KWMsg::SyncPlayerStrategyPointChanged)},
  { 2253, -1, sizeof(::KWMsg::SavePlayerStrategyPointRanking)},
  { 2260, -1, sizeof(::KWMsg::SyncBotArenaState)},
  { 2266, -1, sizeof(::KWMsg::SyncBotArenaStageSession)},
  { 2273, -1, sizeof(::KWMsg::SavePlayerChallengeList)},
  { 2280, -1, sizeof(::KWMsg::UpdatePlayerChallengeItem)},
  { 2287, -1, sizeof(::KWMsg::UpdatePlayerReplayItem)},
  { 2294, -1, sizeof(::KWMsg::AddPlayerReplayItem)},
  { 2301, -1, sizeof(::KWMsg::DelPlayerReplayItem)},
  { 2308, -1, sizeof(::KWMsg::SyncBotArenaBattleIsReady)},
  { 2325, -1, sizeof(::KWMsg::SyncBotArenaBattleReplayDatas)},
  { 2333, -1, sizeof(::KWMsg::SaveBotArenaBattleReplayDatas)},
  { 2341, -1, sizeof(::KWMsg::DelBotArenaBattleReplayDatas)},
  { 2348, -1, sizeof(::KWMsg::SyncDefensivePlayerBattleReward)},
  { 2355, -1, sizeof(::KWMsg::SyncBotArenaBattleSettleData)},
  { 2364, -1, sizeof(::KWMsg::ReqClickBotarenaPromptForm)},
  { 2371, -1, sizeof(::KWMsg::AckClickBotarenaPromptForm)},
  { 2377, -1, sizeof(::KWMsg::HonorPointRankingItem)},
  { 2384, -1, sizeof(::KWMsg::ReqGetPlayerHonorPointRanking)},
  { 2390, -1, sizeof(::KWMsg::AckGetPlayerHonorPointRanking)},
  { 2399, -1, sizeof(::KWMsg::ReqGetBotArenaMainPageData)},
  { 2405, -1, sizeof(::KWMsg::AckGetBotArenaMainPageData)},
  { 2424, -1, sizeof(::KWMsg::StrategyPointRankingItem)},
  { 2431, -1, sizeof(::KWMsg::ReqGetPlayerStrategyPointRanking)},
  { 2437, -1, sizeof(::KWMsg::AckGetPlayerStrategyPointRanking)},
  { 2446, -1, sizeof(::KWMsg::BotArenaChallengeItem)},
  { 2456, -1, sizeof(::KWMsg::BotArenaChallengeList)},
  { 2462, -1, sizeof(::KWMsg::ReqGetPlayerBotArenaChallengeList)},
  { 2468, -1, sizeof(::KWMsg::AckGetPlayerBotArenaChallengeList)},
  { 2476, -1, sizeof(::KWMsg::ReqRefreshPlayerBotArenaChallengeList)},
  { 2482, -1, sizeof(::KWMsg::AckRefreshPlayerBotArenaChallengeList)},
  { 2490, -1, sizeof(::KWMsg::ReqAdjBotarenaDefensiveTeam)},
  { 2498, -1, sizeof(::KWMsg::AckAdjBotarenaDefensiveTeam)},
  { 2504, -1, sizeof(::KWMsg::ReqResetBotarenaDefensiveTeam)},
  { 2510, -1, sizeof(::KWMsg::AckResetBotarenaDefensiveTeam)},
  { 2516, -1, sizeof(::KWMsg::ReqQuickConfigBotarenaDefensiveTeam)},
  { 2523, -1, sizeof(::KWMsg::AckQuickConfigBotarenaDefensiveTeam)},
  { 2530, -1, sizeof(::KWMsg::ReqBuyShabowToken)},
  { 2537, -1, sizeof(::KWMsg::AckBuyShabowToken)},
  { 2543, -1, sizeof(::KWMsg::BotArenaReplayItem)},
  { 2556, -1, sizeof(::KWMsg::BotArenaReplayList)},
  { 2562, -1, sizeof(::KWMsg::ReqGetBotArenaReplayList)},
  { 2568, -1, sizeof(::KWMsg::AckGetBotArenaReplayList)},
  { 2576, -1, sizeof(::KWMsg::ReqReplayBotArenaBattle)},
  { 2583, -1, sizeof(::KWMsg::AckReplayBotArenaBattle)},
  { 2591, -1, sizeof(::KWMsg::ShopReceipt)},
  { 2600, -1, sizeof(::KWMsg::DelPlayerShopReceipts)},
  { 2608, -1, sizeof(::KWMsg::UpdPlayerShopReceipt)},
  { 2617, -1, sizeof(::KWMsg::AddPlayerShopReceipt)},
  { 2626, -1, sizeof(::KWMsg::ReqGetShopProducts)},
  { 2633, -1, sizeof(::KWMsg::AckGetShopProducts)},
  { 2641, -1, sizeof(::KWMsg::ReqBuyProduct)},
  { 2650, -1, sizeof(::KWMsg::AckBuyProduct)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ProductPrice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ProductContent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ProductInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_RewardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_WitchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_GuildInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_DrawCardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_RewardList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAckLagTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAckHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqLeaveGameServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PlayerEntryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckPlayerEntryList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckPlayerLeaveList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckPlayerDataFinished_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PosSyncUnit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAckPlayerPosSync_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqSwapScene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckSwapScene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckSwapSceneNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAckPlayerChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCreateKcpObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCreateKcpObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqEstablishKcpConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckEstablishKcpConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqTryPushClientIntoQueueUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckPushClientIntoQueueUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqQueueUpGetCurWorldSuitProxy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckQueueUpGetCurWorldSuitProxy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqUpdatePlayerLastHeartbeatTS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncQueueUpUserCancelOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncPlayerPropertiesCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_LoadPlayerPropertiesCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_LoadPlayerRecordsCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncPlayerRecordsCacheAdd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncPlayerRecordsCacheUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncPlayerRecordsCacheDel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncPlayerRecordsCacheSwap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqTestBattle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckTestBattle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCollectWitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCollectWitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqInitPlayerName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckInitPlayerName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqUpdateModule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckUpdateModule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqChapterRewardTipOk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckChapterRewardTipOk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCollegeDrama_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCollegeDrama_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCollegeTaskAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCollegeTaskAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCollegeTaskCountdown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCollegeTaskCountdown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ExamQuestion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCollegeStartExam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCollegeStartExam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCollegeAnswer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCollegeAnswer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_CommonReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCollegeReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCollegeReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqTestSetCollegeExamStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCollegeExamExit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCollegeExamExit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqSetItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBattlePreparedInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BattleEntityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BattleWitchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBattlePreparedInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBuyPower_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBuyPower_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqTestSetResource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBattleAdjWitchTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBattleAdjWitchTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBattleChangeWitchTeamName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBattleChangeWitchTeamName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBattleResetWitchTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBattleResetWitchTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBattleQuickConfigWitchTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBattleQuickConfigWitchTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBattleBuyWitchTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBattleBuyWitchTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqTestRecruitWitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_CommonGetRewardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqSetSystemFunctionFlag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckSetSystemFunctionFlag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncSystemFunctionUnlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncPlayerLevelRanking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqSendGiftForWitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckSendGiftForWitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqUseMagicalMedicine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckUseMagicalMedicine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqUnlockWitchSkin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckUnlockWitchSkin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqWitchStarLevelUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckWitchStarLevelUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqWitchKnowledgeLevelUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckWitchKnowledgeLevelUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqExpandWitchPneumaBagSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckExpandWitchPneumaBagSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqWitchPneumaOpt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckWitchPneumaOpt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqWitchPneumaEnhance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckWitchPneumaEnhance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqWitchPneumaDecompose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckWitchPneumaDecompose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqWitchSkillLevelUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckWitchSkillLevelUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqSweepEndlessTower_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckSweepEndlessTower_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBlackmartCommodityList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBlackmartCommodityList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqRefreshBlackmartCommodityList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckRefreshBlackmartCommodityList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBuyBlackmartCommodity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBuyBlackmartCommodity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncBlackmartCommodityUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqActiveMissionOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckActiveMissionOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqGetActiveMissionReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckGetActiveMissionReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqDrawCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckDrawCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_CommunityMemberInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_CommunityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AppliedCommunityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AppliedPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncPlayerCommunityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AddCommunityActiveValAndExp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_NotifyApplyJoinCommunityResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_NotifyPlayerGetFiredFromCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCreateCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCreateCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqSearchCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckSearchCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqQueryCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckQueryCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqSpecifiedCommunityPage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckSpecifiedCommunityPage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqQuickJoinCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckQuickJoinCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqApplyJoinCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckApplyJoinCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCancelJoinCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCancelJoinCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAppliedCommunityList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckAppliedCommunityList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqModifyNameAndDeclaration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckModifyNameAndDeclaration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqModifyFlagAndIcon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckModifyFlagAndIcon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqModifyApprovedRules_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckModifyApprovedRules_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqPromotionOrDemotionManager_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckPromotionOrDemotionManager_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAppliedPlayerList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckAppliedPlayerList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqDealWithJoinCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckDealWithJoinCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqQuitCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckQuitCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqGetOutOfMyCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckGetOutOfMyCommunity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCommunitySignIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCommunitySignIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PlayerBaseInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_FriendInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AppliedFriendInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_RecommendedFriendInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqFriendList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckFriendList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAppliedFriendList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckAppliedFriendList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAddFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckAddFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqDealWithAddFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckDealWithAddFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqDelFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckDelFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBlacklist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBlacklist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBlacklistOpt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBlacklistOpt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqRecommendedFriendList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckRecommendedFriendList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqFriendCollectOpt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckFriendCollectOpt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqFindPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckFindPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqExploreUpdateNodePostion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckExploreUpdateNodePostion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqGetExploreAreaProgressRewards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckGetExploreAreaProgressRewards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqSweepExploreThreeStarNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckSweepExploreThreeStarNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqGetExploreMapStarRewards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckGetExploreMapStarRewards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqGetExploreMapBranchlineRewards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckGetExploreMapBranchlineRewards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqUpgradeExploreGuiderFriendship_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckUpgradeExploreGuiderFriendship_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqGetAppointReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckGetAppointReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqSwitchAppointArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckSwitchAppointArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqStartAffair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckStartAffair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqTerminateAffair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckTerminateAffair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqGetAffairReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckGetAffairReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqDeleteAffair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckDeleteAffair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqStartAppoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckStartAppoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqSetHouseKeeper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckSetHouseKeeper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqSetHouseKeeperSkinId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckSetHouseKeeperSkinId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqHousekeeperInitSignin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckHousekeeperInitSignin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqHousekeeperFinishedSignin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckHousekeeperFinishedSignin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqGetPneumaIslandStarReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckGetPneumaIslandStarReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqUpdatePneumaIslandShowState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckUpdatePneumaIslandShowState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqUpdatePneumaAutoDecomposeState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckUpdatePneumaAutoDecomposeState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PneumaDecomposeScheme_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqUpdatePneumaDecomposeScheme_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckUpdatePneumaDecomposeScheme_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCreateOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCreateOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCallbackRecharge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCallbackRecharge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_MailInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_MailInfos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqDeleteReadedMails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckDeleteReadedMails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqReadMails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckReadMails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqWorldSendMailToPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckWorldSendMailToPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncAddPreSendAllPlayersMails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncDelPreSendAllPlayersMails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncAddPreSendPlayerMails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncDelPreSendPlayerMails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncPlayerMailSessions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqRegisterChatSdkAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckRegisterChatSdkAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCreateChatroom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCreateChatroom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqSdkLoginInfoAndChatroom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckSdkLoginInfoAndChatroom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqReportChatPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckReportChatPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqSendChatroomMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckSendChatroomMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqUpdateChatroomAnnouncement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckUpdateChatroomAnnouncement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCheckChatText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCheckChatText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCreateChatGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCreateChatGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqDeleteChatGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckDeleteChatGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqTransferChatGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckTransferChatGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAddChatGroupUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckAddChatGroupUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqDeleteChatGroupUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckDeleteChatGroupUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqSwitchChatBubble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckSwitchChatBubble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqUnlockChatBubble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckUnlockChatBubble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqUnlockChatMemeGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckUnlockChatMemeGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqUnlockChatMeme_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckUnlockChatMeme_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncPlayerHonorPointChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SavePlayerHonorPointRanking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncPlayerStrategyPointChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SavePlayerStrategyPointRanking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncBotArenaState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncBotArenaStageSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SavePlayerChallengeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_UpdatePlayerChallengeItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_UpdatePlayerReplayItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AddPlayerReplayItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_DelPlayerReplayItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncBotArenaBattleIsReady_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncBotArenaBattleReplayDatas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SaveBotArenaBattleReplayDatas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_DelBotArenaBattleReplayDatas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncDefensivePlayerBattleReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncBotArenaBattleSettleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqClickBotarenaPromptForm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckClickBotarenaPromptForm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_HonorPointRankingItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqGetPlayerHonorPointRanking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckGetPlayerHonorPointRanking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqGetBotArenaMainPageData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckGetBotArenaMainPageData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_StrategyPointRankingItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqGetPlayerStrategyPointRanking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckGetPlayerStrategyPointRanking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BotArenaChallengeItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BotArenaChallengeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqGetPlayerBotArenaChallengeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckGetPlayerBotArenaChallengeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqRefreshPlayerBotArenaChallengeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckRefreshPlayerBotArenaChallengeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAdjBotarenaDefensiveTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckAdjBotarenaDefensiveTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqResetBotarenaDefensiveTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckResetBotarenaDefensiveTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqQuickConfigBotarenaDefensiveTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckQuickConfigBotarenaDefensiveTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBuyShabowToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBuyShabowToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BotArenaReplayItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BotArenaReplayList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqGetBotArenaReplayList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckGetBotArenaReplayList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqReplayBotArenaBattle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckReplayBotArenaBattle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ShopReceipt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_DelPlayerShopReceipts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_UpdPlayerShopReceipt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AddPlayerShopReceipt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqGetShopProducts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckGetShopProducts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBuyProduct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBuyProduct_default_instance_),
};

const char descriptor_table_protodef_kwmsgshare_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020kwmsgshare.proto\022\005KWMsg\032\021kwmsgdefine.p"
  "roto\032\017kwmsgbase.proto\"*\n\014ProductPrice\022\013\n"
  "\003res\030\001 \001(\014\022\r\n\005count\030\002 \001(\003\"2\n\016ProductCont"
  "ent\022\021\n\treward_id\030\001 \001(\014\022\r\n\005count\030\002 \001(\003\"\333\002"
  "\n\013ProductInfo\022\022\n\nproduct_id\030\001 \001(\014\022\017\n\007sho"
  "p_id\030\002 \001(\014\022\025\n\rshop_goods_id\030\003 \001(\014\022,\n\014lis"
  "ting_type\030\004 \001(\0162\026.KWMsg.ShopListingType\022"
  "&\n\007content\030\005 \001(\0132\025.KWMsg.ProductContent\022"
  "\"\n\005price\030\006 \001(\0132\023.KWMsg.ProductPrice\022\025\n\rm"
  "aximum_sells\030\007 \001(\003\022\024\n\014remain_sells\030\010 \001(\003"
  "\022\031\n\021maximun_once_buys\030\t \001(\003\022\031\n\021refresh_c"
  "ron_expr\030\n \001(\014\022\030\n\020refresh_interval\030\013 \001(\005"
  "\022\031\n\021is_purchase_limit\030\014 \001(\010\"J\n\nRewardInf"
  "o\022\021\n\treward_id\030\001 \001(\014\022\024\n\014reward_count\030\002 \001"
  "(\003\022\023\n\013reward_flag\030\003 \001(\005\"\224\004\n\tWitchInfo\022\020\n"
  "\010witch_id\030\001 \001(\014\022\023\n\013witch_level\030\002 \001(\005\022\030\n\020"
  "witch_star_level\030\003 \001(\005\022\026\n\016witch_total_fc"
  "\030\004 \001(\005\022\031\n\021witch_role_res_id\030\005 \001(\014\022\020\n\010wit"
  "ch_hp\030\006 \001(\005\022\025\n\rwitch_defence\030\007 \001(\005\022\023\n\013wi"
  "tch_speed\030\010 \001(\005\022\027\n\017witch_attackmin\030\t \001(\005"
  "\022\027\n\017witch_attackmax\030\n \001(\005\022\022\n\nwitch_crit\030"
  "\013 \001(\005\022\025\n\rwitch_critdmg\030\014 \001(\005\022\021\n\twitch_hi"
  "t\030\r \001(\005\022\024\n\014witch_resist\030\016 \001(\005\022\034\n\024witch_g"
  "eneralskillid\030\017 \001(\014\022\035\n\025witch_advancedski"
  "llid\030\020 \001(\014\022\033\n\023witch_uniqueskillid\030\021 \001(\014\022"
  "\033\n\023witch_versedskillid\030\022 \001(\014\022\036\n\026witch_aw"
  "akeningskillid\030\023 \001(\014\022\033\n\023witch_extraskill"
  "id1\030\024 \001(\014\022\033\n\023witch_extraskillid2\030\025 \001(\014\"1"
  "\n\tGuildInfo\022\020\n\010guild_id\030\001 \001(\014\022\022\n\nguild_n"
  "ame\030\002 \001(\014\"\227\003\n\nPlayerInfo\022\037\n\tplayer_id\030\001 "
  "\001(\0132\014.KWMsg.Ident\022\r\n\005level\030\002 \001(\005\022 \n\030bota"
  "rena_pre_season_rank\030\003 \001(\005\022\023\n\013honor_poin"
  "t\030\004 \001(\003\022\026\n\016strategy_point\030\005 \001(\003\022\024\n\014shabo"
  "w_token\030\006 \001(\003\022\024\n\014shabow_badge\030\007 \001(\003\022\025\n\rb"
  "otaren_grade\030\010 \001(\014\022\021\n\tnick_name\030\t \001(\014\022\022\n"
  "\navatar_url\030\n \001(\014\022\027\n\017avatar_frame_id\030\013 \001"
  "(\014\022$\n\nguild_info\030\014 \001(\0132\020.KWMsg.GuildInfo"
  "\0221\n\027botarena_defensive_team\030\r \003(\0132\020.KWMs"
  "g.WitchInfo\022.\n\024botarena_attack_team\030\016 \003("
  "\0132\020.KWMsg.WitchInfo\"3\n\014DrawCardInfo\022\020\n\010w"
  "itch_id\030\001 \001(\014\022\021\n\tis_debris\030\002 \001(\005\"-\n\nRewa"
  "rdList\022\037\n\004list\030\001 \003(\0132\021.KWMsg.RewardInfo\""
  "\017\n\rReqAckLagTest\"\021\n\017ReqAckHeartBeat\"5\n\022R"
  "eqLeaveGameServer\022\037\n\tplayer_id\030\001 \001(\0132\014.K"
  "WMsg.Ident\"\210\001\n\017PlayerEntryInfo\022!\n\013object"
  "_guid\030\001 \001(\0132\014.KWMsg.Ident\022\033\n\003pos\030\002 \001(\0132\016"
  ".KWMsg.Vector3\022\021\n\tconfig_id\030\003 \001(\014\022\020\n\010sce"
  "ne_id\030\004 \001(\005\022\020\n\010class_id\030\005 \001(\014\"A\n\022AckPlay"
  "erEntryList\022+\n\013object_list\030\001 \003(\0132\026.KWMsg"
  ".PlayerEntryInfo\"7\n\022AckPlayerLeaveList\022!"
  "\n\013object_list\030\001 \003(\0132\014.KWMsg.Ident\":\n\025Ack"
  "PlayerDataFinished\022!\n\013object_list\030\001 \003(\0132"
  "\014.KWMsg.Ident\"\351\001\n\013PosSyncUnit\022\037\n\tplayer_"
  "id\030\001 \001(\0132\014.KWMsg.Ident\022\033\n\003pos\030\002 \001(\0132\016.KW"
  "Msg.Vector3\022#\n\013orientation\030\003 \001(\0132\016.KWMsg"
  ".Vector3\022\016\n\006status\030\004 \001(\005\022*\n\004type\030\005 \001(\0162\034"
  ".KWMsg.PosSyncUnit.EMoveType\";\n\tEMoveTyp"
  "e\022\014\n\010EMT_WALK\020\000\022\016\n\nEET_SPEEDY\020\001\022\020\n\014EET_T"
  "ELEPORT\020\002\"N\n\023ReqAckPlayerPosSync\022\020\n\010sequ"
  "ence\030\001 \001(\005\022%\n\tsync_unit\030\002 \001(\0132\022.KWMsg.Po"
  "sSyncUnit\"O\n\014ReqSwapScene\022\037\n\tplayer_id\030\001"
  " \001(\0132\014.KWMsg.Ident\022\020\n\010scene_id\030\002 \001(\005\022\014\n\004"
  "args\030\003 \001(\014\"Y\n\014AckSwapScene\022)\n\nevent_code"
  "\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\020\n\010scene_i"
  "d\030\002 \001(\005\022\014\n\004args\030\003 \001(\014\"Q\n\022AckSwapSceneNot"
  "ify\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEve"
  "ntCode\022\020\n\010scene_id\030\002 \001(\005\"\213\003\n\020ReqAckPlaye"
  "rChat\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\020"
  "\n\010nickname\030\002 \001(\014\022\016\n\006avatar\030\003 \001(\014\022\024\n\014avat"
  "ar_frame\030\004 \001(\014\022>\n\014chat_channel\030\005 \001(\0162(.K"
  "WMsg.ReqAckPlayerChat.EGameChatChannel\0228"
  "\n\tchat_type\030\006 \001(\0162%.KWMsg.ReqAckPlayerCh"
  "at.EGameChatType\022\021\n\tchat_info\030\007 \001(\014\"Q\n\020E"
  "GameChatChannel\022\017\n\013EGCC_GLOBAL\020\000\022\016\n\nEGCC"
  "_GUILD\020\001\022\r\n\tEGCC_ROOM\020\002\022\r\n\tEGCC_TEAM\020\003\">"
  "\n\rEGameChatType\022\r\n\tEGCT_TEXT\020\000\022\016\n\nEGCT_V"
  "OICE\020\001\022\016\n\nEGCT_EMOJI\020\002\"5\n\022ReqCreateKcpOb"
  "ject\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\"u\n"
  "\022AckCreateKcpObject\022)\n\nevent_code\030\001 \001(\0162"
  "\025.KWMsg.EGameEventCode\022\021\n\tserver_ip\030\002 \001("
  "\014\022\023\n\013server_port\030\003 \001(\005\022\014\n\004conv\030\004 \001(\r\"<\n\031"
  "ReqEstablishKcpConnection\022\037\n\tplayer_id\030\001"
  " \001(\0132\014.KWMsg.Ident\"F\n\031AckEstablishKcpCon"
  "nection\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGam"
  "eEventCode\"p\n\033ReqTryPushClientIntoQueueU"
  "p\022\017\n\007account\030\001 \001(\014\022\020\n\010world_id\030\002 \001(\005\022\020\n\010"
  "login_id\030\003 \001(\005\022\034\n\006sender\030\004 \001(\0132\014.KWMsg.I"
  "dent\"\324\001\n\030AckPushClientIntoQueueUp\022)\n\neve"
  "nt_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\016\n\006"
  "ticket\030\002 \001(\014\022\017\n\007account\030\003 \001(\014\022\020\n\010world_i"
  "d\030\004 \001(\005\022\020\n\010login_id\030\005 \001(\005\022\034\n\006sender\030\006 \001("
  "\0132\014.KWMsg.Ident\022\023\n\013queue_up_ip\030\007 \001(\014\022\025\n\r"
  "queue_up_port\030\010 \001(\005\"T\n\036ReqQueueUpGetCurW"
  "orldSuitProxy\022\016\n\006ticket\030\001 \001(\014\022\"\n\014transpo"
  "nd_id\030\002 \001(\0132\014.KWMsg.Ident\"z\n\036AckQueueUpG"
  "etCurWorldSuitProxy\022\016\n\006ticket\030\001 \001(\014\022\"\n\014t"
  "ranspond_id\030\002 \001(\0132\014.KWMsg.Ident\022\020\n\010world"
  "_ip\030\003 \001(\014\022\022\n\nworld_port\030\004 \001(\005\"=\n\036ReqUpda"
  "tePlayerLastHeartbeatTS\022\017\n\007account\030\001 \001(\014"
  "\022\n\n\002ts\030\002 \001(\003\"D\n\036SyncQueueUpUserCancelOpe"
  "ration\022\017\n\007account\030\001 \001(\014\022\021\n\tserver_id\030\002 \001"
  "(\005\"e\n\031SyncPlayerPropertiesCache\022\037\n\tplaye"
  "r_id\030\001 \001(\0132\014.KWMsg.Ident\022\'\n\010property\030\002 \001"
  "(\0132\025.KWMsg.ObjectProperty\"n\n\031LoadPlayerP"
  "ropertiesCache\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMs"
  "g.Ident\0220\n\rproperty_list\030\002 \001(\0132\031.KWMsg.O"
  "bjectPropertyList\"g\n\026LoadPlayerRecordsCa"
  "che\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022,\n\013"
  "record_list\030\002 \001(\0132\027.KWMsg.ObjectRecordLi"
  "st\"\200\003\n\031SyncPlayerRecordsCacheAdd\022\037\n\tplay"
  "er_id\030\001 \001(\0132\014.KWMsg.Ident\022\023\n\013record_name"
  "\030\002 \001(\014\022\013\n\003row\030\003 \001(\005\022)\n\017record_int_list\030\004"
  " \003(\0132\020.KWMsg.RecordInt\022-\n\021record_float_l"
  "ist\030\005 \003(\0132\022.KWMsg.RecordFloat\022/\n\022record_"
  "string_list\030\006 \003(\0132\023.KWMsg.RecordString\022/"
  "\n\022record_object_list\030\007 \003(\0132\023.KWMsg.Recor"
  "dObject\0221\n\023record_vector2_list\030\010 \003(\0132\024.K"
  "WMsg.RecordVector2\0221\n\023record_vector3_lis"
  "t\030\t \003(\0132\024.KWMsg.RecordVector3\"\345\002\n\034SyncPl"
  "ayerRecordsCacheUpdate\022\037\n\tplayer_id\030\001 \001("
  "\0132\014.KWMsg.Ident\022\023\n\013record_name\030\002 \001(\014\022\013\n\003"
  "row\030\003 \001(\005\022$\n\nrecord_int\030\004 \001(\0132\020.KWMsg.Re"
  "cordInt\022(\n\014record_float\030\005 \001(\0132\022.KWMsg.Re"
  "cordFloat\022*\n\rrecord_string\030\006 \001(\0132\023.KWMsg"
  ".RecordString\022*\n\rrecord_object\030\007 \001(\0132\023.K"
  "WMsg.RecordObject\022,\n\016record_vector2\030\010 \001("
  "\0132\024.KWMsg.RecordVector2\022,\n\016record_vector"
  "3\030\t \001(\0132\024.KWMsg.RecordVector3\"e\n\031SyncPla"
  "yerRecordsCacheDel\022\037\n\tplayer_id\030\001 \001(\0132\014."
  "KWMsg.Ident\022\023\n\013record_name\030\002 \001(\014\022\022\n\nremo"
  "ve_row\030\003 \001(\005\"z\n\032SyncPlayerRecordsCacheSw"
  "ap\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\023\n\013r"
  "ecord_name\030\002 \001(\014\022\022\n\nrow_origin\030\003 \001(\005\022\022\n\n"
  "row_target\030\004 \001(\005\"V\n\rReqTestBattle\022\037\n\tpla"
  "yer_id\030\001 \001(\0132\014.KWMsg.Ident\022\023\n\013battle_lis"
  "t\030\002 \001(\014\022\017\n\007team_id\030\003 \001(\014\"r\n\rAckTestBattl"
  "e\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEvent"
  "Code\022\023\n\013battle_list\030\002 \001(\014\022\017\n\007team_id\030\003 \001"
  "(\014\022\020\n\010scene_id\030\004 \001(\005\"D\n\017ReqCollectWitch\022"
  "\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\020\n\010witc"
  "h_id\030\002 \001(\014\"b\n\017AckCollectWitch\022)\n\nevent_c"
  "ode\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\020\n\010witc"
  "h_id\030\002 \001(\014\022\022\n\nis_collect\030\003 \001(\005\"Z\n\021ReqIni"
  "tPlayerName\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.I"
  "dent\022\014\n\004name\030\002 \001(\014\022\026\n\016is_random_name\030\003 \001"
  "(\005\"m\n\021AckInitPlayerName\022)\n\nevent_code\030\001 "
  "\001(\0162\025.KWMsg.EGameEventCode\022\037\n\tplayer_id\030"
  "\002 \001(\0132\014.KWMsg.Ident\022\014\n\004name\030\003 \001(\014\"2\n\017Req"
  "UpdateModule\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg."
  "Ident\"g\n\017AckUpdateModule\022)\n\nevent_code\030\001"
  " \001(\0162\025.KWMsg.EGameEventCode\022\021\n\tmodule_id"
  "\030\002 \001(\014\022\026\n\016chapter_status\030\003 \001(\005\"8\n\025ReqCha"
  "pterRewardTipOk\022\037\n\tplayer_id\030\001 \001(\0132\014.KWM"
  "sg.Ident\"m\n\025AckChapterRewardTipOk\022)\n\neve"
  "nt_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\021\n\t"
  "module_id\030\002 \001(\014\022\026\n\016chapter_status\030\003 \001(\005\""
  "\307\001\n\017ReqCollegeDrama\022\037\n\tplayer_id\030\001 \001(\0132\014"
  ".KWMsg.Ident\0224\n\ndrama_type\030\002 \001(\0162 .KWMsg"
  ".ReqCollegeDrama.DramaType\022\021\n\tmodule_id\030"
  "\003 \001(\014\"J\n\tDramaType\022\026\n\022ECD_SEMESTER_START"
  "\020\000\022\017\n\013ECD_INCLASS\020\001\022\024\n\020ECD_SEMESTER_END\020"
  "\002\"<\n\017AckCollegeDrama\022)\n\nevent_code\030\001 \001(\016"
  "2\025.KWMsg.EGameEventCode\"H\n\024ReqCollegeTas"
  "kAction\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident"
  "\022\017\n\007task_id\030\002 \001(\014\"A\n\024AckCollegeTaskActio"
  "n\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEvent"
  "Code\"K\n\027ReqCollegeTaskCountdown\022\037\n\tplaye"
  "r_id\030\001 \001(\0132\014.KWMsg.Ident\022\017\n\007task_id\030\002 \001("
  "\014\"D\n\027AckCollegeTaskCountdown\022)\n\nevent_co"
  "de\030\001 \001(\0162\025.KWMsg.EGameEventCode\"#\n\014ExamQ"
  "uestion\022\023\n\013question_id\030\001 \001(\014\"6\n\023ReqColle"
  "geStartExam\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.I"
  "dent\"\202\001\n\023AckCollegeStartExam\022)\n\nevent_co"
  "de\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\021\n\texam_"
  "type\030\002 \001(\005\022-\n\020question_id_list\030\003 \003(\0132\023.K"
  "WMsg.ExamQuestion\"Y\n\020ReqCollegeAnswer\022\037\n"
  "\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\023\n\013questi"
  "on_id\030\002 \001(\014\022\017\n\007options\030\003 \001(\005\"b\n\020AckColle"
  "geAnswer\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGa"
  "meEventCode\022\023\n\013question_id\030\002 \001(\014\022\016\n\006resu"
  "lt\030\003 \001(\005\"L\n\014CommonReward\022\021\n\treward_id\030\001 "
  "\001(\014\022\024\n\014reward_count\030\002 \001(\005\022\023\n\013reward_type"
  "\030\003 \001(\005\"H\n\020ReqCollegeReward\022\037\n\tplayer_id\030"
  "\001 \001(\0132\014.KWMsg.Ident\022\023\n\013reward_type\030\002 \001(\005"
  "\"g\n\020AckCollegeReward\022)\n\nevent_code\030\001 \001(\016"
  "2\025.KWMsg.EGameEventCode\022(\n\013reward_info\030\002"
  " \003(\0132\023.KWMsg.CommonReward\"Q\n\033ReqTestSetC"
  "ollegeExamStatus\022\037\n\tplayer_id\030\001 \001(\0132\014.KW"
  "Msg.Ident\022\021\n\texam_type\030\002 \001(\005\"5\n\022ReqColle"
  "geExamExit\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Id"
  "ent\"\?\n\022AckCollegeExamExit\022)\n\nevent_code\030"
  "\001 \001(\0162\025.KWMsg.EGameEventCode\"M\n\nReqSetIt"
  "em\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\017\n\007i"
  "tem_id\030\002 \001(\014\022\r\n\005count\030\003 \001(\005\"\246\001\n\025ReqBattl"
  "ePreparedInfo\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg"
  ".Ident\022\021\n\tbattle_id\030\002 \001(\014\022\024\n\014game_play_i"
  "d\030\003 \001(\014\022\"\n\014challenge_id\030\004 \001(\0132\014.KWMsg.Id"
  "ent\022\037\n\treplay_id\030\005 \001(\0132\014.KWMsg.Ident\"C\n\020"
  "BattleEntityInfo\022\021\n\tconfig_id\030\001 \001(\014\022\r\n\005l"
  "evel\030\002 \001(\005\022\r\n\005attrs\030\003 \003(\003\"{\n\017BattleWitch"
  "Info\022\021\n\tconfig_id\030\001 \001(\014\022\r\n\005level\030\002 \001(\005\022\r"
  "\n\005attrs\030\003 \003(\003\022\022\n\nstar_level\030\004 \001(\005\022\023\n\013rol"
  "e_res_id\030\005 \001(\014\022\016\n\006skills\030\006 \003(\014\"\217\002\n\025AckBa"
  "ttlePreparedInfo\022)\n\nevent_code\030\001 \001(\0162\025.K"
  "WMsg.EGameEventCode\022\021\n\tbattle_id\030\002 \001(\014\022)"
  "\n\010monsters\030\003 \003(\0132\027.KWMsg.BattleEntityInf"
  "o\022%\n\004npcs\030\004 \003(\0132\027.KWMsg.BattleEntityInfo"
  "\022\024\n\014game_play_id\030\005 \001(\014\022\'\n\013battle_type\030\006 "
  "\001(\0162\022.KWMsg.EBattleType\022\'\n\007witches\030\007 \003(\013"
  "2\026.KWMsg.BattleWitchInfo\"=\n\013ReqBuyPower\022"
  "\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\r\n\005coun"
  "t\030\002 \001(\005\"G\n\013AckBuyPower\022)\n\nevent_code\030\001 \001"
  "(\0162\025.KWMsg.EGameEventCode\022\r\n\005count\030\002 \001(\005"
  "\"Z\n\022ReqTestSetResource\022\037\n\tplayer_id\030\001 \001("
  "\0132\014.KWMsg.Ident\022\020\n\010res_type\030\002 \001(\014\022\021\n\tres"
  "_value\030\003 \001(\003\"n\n\025ReqBattleAdjWitchTeam\022\037\n"
  "\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\025\n\rwitch_"
  "team_id\030\002 \001(\014\022\013\n\003idx\030\003 \001(\005\022\020\n\010witch_id\030\004"
  " \001(\014\"Y\n\025AckBattleAdjWitchTeam\022)\n\nevent_c"
  "ode\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\025\n\rwitc"
  "h_team_id\030\002 \001(\014\"d\n\034ReqBattleChangeWitchT"
  "eamName\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident"
  "\022\025\n\rwitch_team_id\030\002 \001(\014\022\014\n\004name\030\003 \001(\014\"`\n"
  "\034AckBattleChangeWitchTeamName\022)\n\nevent_c"
  "ode\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\025\n\rwitc"
  "h_team_id\030\002 \001(\014\"Q\n\027ReqBattleResetWitchTe"
  "am\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\025\n\rw"
  "itch_team_id\030\002 \001(\014\"[\n\027AckBattleResetWitc"
  "hTeam\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameE"
  "ventCode\022\025\n\rwitch_team_id\030\002 \001(\014\"n\n\035ReqBa"
  "ttleQuickConfigWitchTeam\022\037\n\tplayer_id\030\001 "
  "\001(\0132\014.KWMsg.Ident\022\025\n\rwitch_team_id\030\002 \001(\014"
  "\022\025\n\rwitch_id_list\030\003 \003(\014\"x\n\035AckBattleQuic"
  "kConfigWitchTeam\022)\n\nevent_code\030\001 \001(\0162\025.K"
  "WMsg.EGameEventCode\022\025\n\rwitch_team_id\030\002 \001"
  "(\014\022\025\n\rwitch_id_list\030\003 \003(\014\"O\n\025ReqBattleBu"
  "yWitchTeam\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Id"
  "ent\022\025\n\rwitch_team_id\030\002 \001(\014\"Y\n\025AckBattleB"
  "uyWitchTeam\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg."
  "EGameEventCode\022\025\n\rwitch_team_id\030\002 \001(\014\"H\n"
  "\023ReqTestRecruitWitch\022\037\n\tplayer_id\030\001 \001(\0132"
  "\014.KWMsg.Ident\022\020\n\010witch_id\030\002 \001(\014\"\206\002\n\023Comm"
  "onGetRewardInfo\0227\n\tshow_type\030\001 \001(\0162$.KWM"
  "sg.CommonGetRewardInfo.EShowType\022&\n\013rewa"
  "rd_list\030\002 \003(\0132\021.KWMsg.RewardInfo\"\215\001\n\tESh"
  "owType\022\014\n\010EST_NONE\020\000\022(\n$EST_DAILY_ACTIVE"
  "_MISSION_GEAR_REWARD\020\001\022)\n%EST_WEEKLY_ACT"
  "IVE_MISSION_GEAR_REWARD\020\002\022\035\n\031EST_ACTIVE_"
  "MISSION_REWARD\020\003\"^\n\030ReqSetSystemFunction"
  "Flag\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\023\n"
  "\013function_id\030\002 \001(\014\022\014\n\004flag\030\003 \001(\005\"E\n\030AckS"
  "etSystemFunctionFlag\022)\n\nevent_code\030\001 \001(\016"
  "2\025.KWMsg.EGameEventCode\"1\n\030SyncSystemFun"
  "ctionUnlock\022\025\n\rfunction_list\030\001 \003(\014\"Q\n\026Sy"
  "ncPlayerLevelRanking\022\037\n\tplayer_id\030\001 \001(\0132"
  "\014.KWMsg.Ident\022\026\n\016level_or_score\030\002 \001(\003\"s\n"
  "\023ReqSendGiftForWitch\022\037\n\tplayer_id\030\001 \001(\0132"
  "\014.KWMsg.Ident\022\020\n\010witch_id\030\002 \001(\014\022\024\n\014gift_"
  "item_id\030\003 \001(\014\022\023\n\013box_item_id\030\004 \001(\014\"@\n\023Ac"
  "kSendGiftForWitch\022)\n\nevent_code\030\001 \001(\0162\025."
  "KWMsg.EGameEventCode\"n\n\025ReqUseMagicalMed"
  "icine\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\020"
  "\n\010witch_id\030\002 \001(\014\022\017\n\007item_id\030\003 \001(\014\022\021\n\tuse"
  "_count\030\004 \001(\005\"B\n\025AckUseMagicalMedicine\022)\n"
  "\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventCode"
  "\"^\n\022ReqUnlockWitchSkin\022\037\n\tplayer_id\030\001 \001("
  "\0132\014.KWMsg.Ident\022\020\n\010witch_id\030\002 \001(\014\022\025\n\rwit"
  "ch_skin_id\030\003 \001(\014\"\?\n\022AckUnlockWitchSkin\022)"
  "\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventCod"
  "e\"c\n\023ReqWitchStarLevelUp\022\037\n\tplayer_id\030\001 "
  "\001(\0132\014.KWMsg.Ident\022\020\n\010witch_id\030\002 \001(\014\022\031\n\021c"
  "onsume_item_list\030\003 \001(\014\"@\n\023AckWitchStarLe"
  "velUp\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameE"
  "ventCode\"~\n\030ReqWitchKnowledgeLevelUp\022\037\n\t"
  "player_id\030\001 \001(\0132\014.KWMsg.Ident\022\020\n\010witch_i"
  "d\030\002 \001(\014\022/\n\010opt_type\030\003 \001(\0162\035.KWMsg.EWitch"
  "KnowledgeOptType\"E\n\030AckWitchKnowledgeLev"
  "elUp\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEv"
  "entCode\"T\n\033ReqExpandWitchPneumaBagSize\022\037"
  "\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\024\n\014expan"
  "d_count\030\002 \001(\005\"H\n\033AckExpandWitchPneumaBag"
  "Size\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEv"
  "entCode\"\227\001\n\021ReqWitchPneumaOpt\022\037\n\tplayer_"
  "id\030\001 \001(\0132\014.KWMsg.Ident\022!\n\013pneuma_guid\030\002 "
  "\001(\0132\014.KWMsg.Ident\022\020\n\010witch_id\030\003 \001(\014\022,\n\010o"
  "pt_type\030\004 \001(\0162\032.KWMsg.EWitchPneumaOptTyp"
  "e\"\241\001\n\021AckWitchPneumaOpt\022)\n\nevent_code\030\001 "
  "\001(\0162\025.KWMsg.EGameEventCode\022!\n\013pneuma_gui"
  "d\030\002 \001(\0132\014.KWMsg.Ident\022\020\n\010witch_id\030\003 \001(\014\022"
  ",\n\010opt_type\030\004 \001(\0162\032.KWMsg.EWitchPneumaOp"
  "tType\"[\n\025ReqWitchPneumaEnhance\022\037\n\tplayer"
  "_id\030\001 \001(\0132\014.KWMsg.Ident\022!\n\013pneuma_guid\030\002"
  " \001(\0132\014.KWMsg.Ident\"B\n\025AckWitchPneumaEnha"
  "nce\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEve"
  "ntCode\"b\n\027ReqWitchPneumaDecompose\022\037\n\tpla"
  "yer_id\030\001 \001(\0132\014.KWMsg.Ident\022&\n\020pneuma_gui"
  "d_list\030\002 \003(\0132\014.KWMsg.Ident\"l\n\027AckWitchPn"
  "eumaDecompose\022)\n\nevent_code\030\001 \001(\0162\025.KWMs"
  "g.EGameEventCode\022&\n\013reward_list\030\002 \003(\0132\021."
  "KWMsg.RewardInfo\"v\n\024ReqWitchSkillLevelUp"
  "\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\020\n\010wit"
  "ch_id\030\002 \001(\014\022+\n\010opt_type\030\003 \001(\0162\031.KWMsg.EW"
  "itchSkillOptType\"A\n\024AckWitchSkillLevelUp"
  "\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventC"
  "ode\"L\n\024ReqSweepEndlessTower\022\037\n\tplayer_id"
  "\030\001 \001(\0132\014.KWMsg.Ident\022\023\n\013sweep_count\030\002 \001("
  "\005\"i\n\024AckSweepEndlessTower\022)\n\nevent_code\030"
  "\001 \001(\0162\025.KWMsg.EGameEventCode\022&\n\013reward_l"
  "ist\030\002 \003(\0132\021.KWMsg.RewardInfo\"<\n\031ReqBlack"
  "martCommodityList\022\037\n\tplayer_id\030\001 \001(\0132\014.K"
  "WMsg.Ident\"F\n\031AckBlackmartCommodityList\022"
  ")\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventCo"
  "de\"C\n ReqRefreshBlackmartCommodityList\022\037"
  "\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\"M\n AckRe"
  "freshBlackmartCommodityList\022)\n\nevent_cod"
  "e\030\001 \001(\0162\025.KWMsg.EGameEventCode\"`\n\030ReqBuy"
  "BlackmartCommodity\022\037\n\tplayer_id\030\001 \001(\0132\014."
  "KWMsg.Ident\022\024\n\014commodity_id\030\002 \001(\014\022\r\n\005cou"
  "nt\030\003 \001(\005\"[\n\030AckBuyBlackmartCommodity\022)\n\n"
  "event_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022"
  "\024\n\014commodity_id\030\002 \001(\014\"4\n\035SyncBlackmartCo"
  "mmodityUpdated\022\023\n\013update_type\030\001 \001(\005\"m\n\031R"
  "eqActiveMissionOperation\022\037\n\tplayer_id\030\001 "
  "\001(\0132\014.KWMsg.Ident\022/\n\014mission_flag\030\002 \001(\0162"
  "\031.KWMsg.EActiveMisisonFlag\"F\n\031AckActiveM"
  "issionOperation\022)\n\nevent_code\030\001 \001(\0162\025.KW"
  "Msg.EGameEventCode\"P\n\031ReqGetActiveMissio"
  "nReward\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident"
  "\022\022\n\nmission_id\030\002 \001(\014\"F\n\031AckGetActiveMiss"
  "ionReward\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EG"
  "ameEventCode\"V\n\013ReqDrawCard\022\037\n\tplayer_id"
  "\030\001 \001(\0132\014.KWMsg.Ident\022\024\n\014card_pool_id\030\002 \001"
  "(\014\022\020\n\010dc_count\030\003 \001(\005\"]\n\013AckDrawCard\022)\n\ne"
  "vent_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022#"
  "\n\006result\030\002 \003(\0132\023.KWMsg.DrawCardInfo\"\245\002\n\023"
  "CommunityMemberInfo\022\037\n\tplayer_id\030\001 \001(\0132\014"
  ".KWMsg.Ident\022\014\n\004name\030\002 \001(\014\022\022\n\navatar_url"
  "\030\003 \001(\014\022\024\n\014avatar_frame\030\004 \001(\014\022\r\n\005level\030\005 "
  "\001(\005\022\031\n\021fighting_capacity\030\006 \001(\005\022\031\n\021weekly"
  "_active_val\030\007 \001(\005\022\030\n\020total_active_val\030\010 "
  "\001(\005\0221\n\010position\030\t \001(\0162\037.KWMsg.ECommunity"
  "MemberPosition\022\017\n\007join_ts\030\n \001(\003\022\022\n\noffli"
  "ne_ts\030\013 \001(\003\"\353\003\n\rCommunityInfo\022\026\n\016communi"
  "ty_name\030\001 \001(\014\022\026\n\016community_flag\030\002 \001(\014\022\026\n"
  "\016community_icon\030\003 \001(\014\022\035\n\025community_decla"
  "ration\030\004 \001(\014\022!\n\031community_chat_channel_i"
  "d\030\005 \001(\014\022\034\n\024community_chief_name\030\006 \001(\014\022/\n"
  "\031community_chief_player_id\030\007 \001(\0132\014.KWMsg"
  ".Ident\022\024\n\014community_id\030\010 \001(\005\022\027\n\017communit"
  "y_level\030\t \001(\005\022\025\n\rcommunity_exp\030\n \001(\005\022#\n\033"
  "community_fighting_capacity\030\013 \001(\005\022#\n\033com"
  "munity_weekly_active_val\030\014 \001(\005\022\"\n\032commun"
  "ity_total_active_val\030\r \001(\005\022\036\n\026community_"
  "approve_type\030\016 \001(\005\022\031\n\021level_restriction\030"
  "\017 \001(\005\022\022\n\nmember_num\030\020 \001(\005\"[\n\024AppliedComm"
  "unityInfo\022\025\n\rapply_join_ts\030\001 \001(\003\022,\n\016comm"
  "unity_info\030\002 \001(\0132\024.KWMsg.CommunityInfo\"["
  "\n\021AppliedPlayerInfo\022\025\n\rapply_join_ts\030\001 \001"
  "(\003\022/\n\013player_info\030\002 \001(\0132\032.KWMsg.Communit"
  "yMemberInfo\"\224\001\n\027SyncPlayerCommunityInfo\022"
  "\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\024\n\014comm"
  "unity_id\030\002 \001(\005\0221\n\010position\030\003 \001(\0162\037.KWMsg"
  ".ECommunityMemberPosition\022\017\n\007quit_ts\030\004 \001"
  "(\003\"{\n\033AddCommunityActiveValAndExp\022\037\n\tpla"
  "yer_id\030\001 \001(\0132\014.KWMsg.Ident\022\024\n\014community_"
  "id\030\002 \001(\005\022\022\n\nactive_val\030\003 \001(\005\022\021\n\tlevel_ex"
  "p\030\004 \001(\005\"\241\001\n\036NotifyApplyJoinCommunityResu"
  "lt\022\024\n\014community_id\030\001 \001(\005\0221\n\010position\030\002 \001"
  "(\0162\037.KWMsg.ECommunityMemberPosition\022!\n\031c"
  "ommunity_chat_channel_id\030\003 \001(\014\022\023\n\013join_r"
  "esult\030\004 \001(\005\"\217\001\n!NotifyPlayerGetFiredFrom"
  "Community\022\024\n\014community_id\030\001 \001(\005\0221\n\010posit"
  "ion\030\002 \001(\0162\037.KWMsg.ECommunityMemberPositi"
  "on\022!\n\031community_chat_channel_id\030\003 \001(\014\"\327\001"
  "\n\022ReqCreateCommunity\022\037\n\tplayer_id\030\001 \001(\0132"
  "\014.KWMsg.Ident\022\026\n\016community_name\030\002 \001(\014\022\026\n"
  "\016community_flag\030\003 \001(\014\022\026\n\016community_icon\030"
  "\004 \001(\014\022\035\n\025community_declaration\030\005 \001(\014\022\036\n\026"
  "community_approve_type\030\006 \001(\005\022\031\n\021level_re"
  "striction\030\007 \001(\005\"\243\001\n\022AckCreateCommunity\022)"
  "\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventCod"
  "e\022,\n\016community_info\030\002 \001(\0132\024.KWMsg.Commun"
  "ityInfo\0224\n\020member_info_list\030\003 \003(\0132\032.KWMs"
  "g.CommunityMemberInfo\"S\n\022ReqSearchCommun"
  "ity\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\034\n\024"
  "community_name_or_id\030\002 \001(\014\"m\n\022AckSearchC"
  "ommunity\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGa"
  "meEventCode\022,\n\016community_info\030\002 \001(\0132\024.KW"
  "Msg.CommunityInfo\"J\n\021ReqQueryCommunity\022\037"
  "\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\024\n\014commu"
  "nity_id\030\002 \001(\005\"\242\001\n\021AckQueryCommunity\022)\n\ne"
  "vent_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022,"
  "\n\016community_info\030\002 \001(\0132\024.KWMsg.Community"
  "Info\0224\n\020member_info_list\030\003 \003(\0132\032.KWMsg.C"
  "ommunityMemberInfo\"\236\001\n\031ReqSpecifiedCommu"
  "nityPage\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Iden"
  "t\022\021\n\tsort_type\030\002 \001(\005\022\037\n\027show_only_satisf"
  "y_rules\030\003 \001(\005\022\033\n\023hide_member_is_full\030\004 \001"
  "(\005\022\017\n\007page_no\030\005 \001(\005\"\245\001\n\031AckSpecifiedComm"
  "unityPage\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EG"
  "ameEventCode\022\023\n\013cur_page_no\030\002 \001(\005\022\025\n\rtot"
  "al_page_no\030\003 \001(\005\0221\n\023community_info_list\030"
  "\004 \003(\0132\024.KWMsg.CommunityInfo\"8\n\025ReqQuickJ"
  "oinCommunity\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg."
  "Ident\"\256\001\n\025AckQuickJoinCommunity\022)\n\nevent"
  "_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\024\n\014co"
  "mmunity_id\030\002 \001(\005\0221\n\010position\030\003 \001(\0162\037.KWM"
  "sg.ECommunityMemberPosition\022!\n\031community"
  "_chat_channel_id\030\004 \001(\014\"N\n\025ReqApplyJoinCo"
  "mmunity\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident"
  "\022\024\n\014community_id\030\002 \001(\005\"\256\001\n\025AckApplyJoinC"
  "ommunity\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGa"
  "meEventCode\022\024\n\014community_id\030\002 \001(\005\0221\n\010pos"
  "ition\030\003 \001(\0162\037.KWMsg.ECommunityMemberPosi"
  "tion\022!\n\031community_chat_channel_id\030\004 \001(\014\""
  "O\n\026ReqCancelJoinCommunity\022\037\n\tplayer_id\030\001"
  " \001(\0132\014.KWMsg.Ident\022\024\n\014community_id\030\002 \001(\005"
  "\"C\n\026AckCancelJoinCommunity\022)\n\nevent_code"
  "\030\001 \001(\0162\025.KWMsg.EGameEventCode\":\n\027ReqAppl"
  "iedCommunityList\022\037\n\tplayer_id\030\001 \001(\0132\014.KW"
  "Msg.Ident\"\206\001\n\027AckAppliedCommunityList\022)\n"
  "\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventCode"
  "\022@\n\033applied_community_info_list\030\002 \003(\0132\033."
  "KWMsg.AppliedCommunityInfo\"\213\001\n\033ReqModify"
  "NameAndDeclaration\022\037\n\tplayer_id\030\001 \001(\0132\014."
  "KWMsg.Ident\022\024\n\014community_id\030\002 \001(\005\022\026\n\016com"
  "munity_name\030\003 \001(\014\022\035\n\025community_declarati"
  "on\030\004 \001(\014\"\177\n\033AckModifyNameAndDeclaration\022"
  ")\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventCo"
  "de\022\026\n\016community_name\030\002 \001(\014\022\035\n\025community_"
  "declaration\030\003 \001(\014\"}\n\024ReqModifyFlagAndIco"
  "n\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\024\n\014co"
  "mmunity_id\030\002 \001(\005\022\026\n\016community_flag\030\003 \001(\014"
  "\022\026\n\016community_icon\030\004 \001(\014\"q\n\024AckModifyFla"
  "gAndIcon\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGa"
  "meEventCode\022\026\n\016community_flag\030\002 \001(\014\022\026\n\016c"
  "ommunity_icon\030\003 \001(\014\"\212\001\n\026ReqModifyApprove"
  "dRules\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022"
  "\024\n\014community_id\030\002 \001(\005\022\036\n\026community_appro"
  "ve_type\030\003 \001(\005\022\031\n\021level_restriction\030\004 \001(\005"
  "\"~\n\026AckModifyApprovedRules\022)\n\nevent_code"
  "\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\036\n\026communi"
  "ty_approve_type\030\002 \001(\005\022\031\n\021level_restricti"
  "on\030\003 \001(\005\"\211\001\n\035ReqPromotionOrDemotionManag"
  "er\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\037\n\tt"
  "arget_id\030\002 \001(\0132\014.KWMsg.Ident\022\024\n\014communit"
  "y_id\030\003 \001(\005\022\020\n\010opt_type\030\004 \001(\005\"J\n\035AckPromo"
  "tionOrDemotionManager\022)\n\nevent_code\030\001 \001("
  "\0162\025.KWMsg.EGameEventCode\"M\n\024ReqAppliedPl"
  "ayerList\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Iden"
  "t\022\024\n\014community_id\030\002 \001(\005\"}\n\024AckAppliedPla"
  "yerList\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGam"
  "eEventCode\022:\n\030applied_player_info_list\030\002"
  " \003(\0132\030.KWMsg.AppliedPlayerInfo\"\204\001\n\030ReqDe"
  "alWithJoinCommunity\022\037\n\tplayer_id\030\001 \001(\0132\014"
  ".KWMsg.Ident\022\037\n\ttarget_id\030\002 \001(\0132\014.KWMsg."
  "Ident\022\024\n\014community_id\030\003 \001(\005\022\020\n\010opt_type\030"
  "\004 \001(\005\"E\n\030AckDealWithJoinCommunity\022)\n\neve"
  "nt_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\"I\n\020"
  "ReqQuitCommunity\022\037\n\tplayer_id\030\001 \001(\0132\014.KW"
  "Msg.Ident\022\024\n\014community_id\030\002 \001(\005\"\251\001\n\020AckQ"
  "uitCommunity\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg"
  ".EGameEventCode\022\024\n\014community_id\030\002 \001(\005\0221\n"
  "\010position\030\003 \001(\0162\037.KWMsg.ECommunityMember"
  "Position\022!\n\031community_chat_channel_id\030\004 "
  "\001(\014\"p\n\026ReqGetOutOfMyCommunity\022\037\n\tplayer_"
  "id\030\001 \001(\0132\014.KWMsg.Ident\022\037\n\ttarget_id\030\002 \001("
  "\0132\014.KWMsg.Ident\022\024\n\014community_id\030\003 \001(\005\"C\n"
  "\026AckGetOutOfMyCommunity\022)\n\nevent_code\030\001 "
  "\001(\0162\025.KWMsg.EGameEventCode\"K\n\022ReqCommuni"
  "tySignIn\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Iden"
  "t\022\024\n\014community_id\030\002 \001(\005\"g\n\022AckCommunityS"
  "ignIn\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameE"
  "ventCode\022&\n\013reward_list\030\002 \003(\0132\021.KWMsg.Re"
  "wardInfo\"\311\001\n\016PlayerBaseInfo\022\037\n\tplayer_id"
  "\030\001 \001(\0132\014.KWMsg.Ident\022\014\n\004name\030\002 \001(\014\022\022\n\nav"
  "atar_url\030\003 \001(\014\022\024\n\014avatar_frame\030\004 \001(\014\022\r\n\005"
  "title\030\005 \001(\014\022\022\n\noffline_ts\030\006 \001(\003\022\r\n\005level"
  "\030\007 \001(\005\022\024\n\014community_id\030\010 \001(\005\022\026\n\016communit"
  "y_name\030\t \001(\014\"Z\n\nFriendInfo\022(\n\tbase_info\030"
  "\001 \001(\0132\025.KWMsg.PlayerBaseInfo\022\022\n\nis_colle"
  "ct\030\002 \001(\005\022\016\n\006add_ts\030\003 \001(\003\"O\n\021AppliedFrien"
  "dInfo\022(\n\tbase_info\030\001 \001(\0132\025.KWMsg.PlayerB"
  "aseInfo\022\020\n\010apply_ts\030\002 \001(\003\"z\n\025Recommended"
  "FriendInfo\022(\n\tbase_info\030\001 \001(\0132\025.KWMsg.Pl"
  "ayerBaseInfo\0227\n\020recommended_type\030\002 \001(\0162\035"
  ".KWMsg.ERecommendedFriendType\"0\n\rReqFrie"
  "ndList\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\""
  "`\n\rAckFriendList\022)\n\nevent_code\030\001 \001(\0162\025.K"
  "WMsg.EGameEventCode\022$\n\tinfo_list\030\002 \003(\0132\021"
  ".KWMsg.FriendInfo\"7\n\024ReqAppliedFriendLis"
  "t\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\"n\n\024Ac"
  "kAppliedFriendList\022)\n\nevent_code\030\001 \001(\0162\025"
  ".KWMsg.EGameEventCode\022+\n\tinfo_list\030\002 \003(\013"
  "2\030.KWMsg.AppliedFriendInfo\"P\n\014ReqAddFrie"
  "nd\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\037\n\tt"
  "arget_id\030\002 \001(\0132\014.KWMsg.Ident\"9\n\014AckAddFr"
  "iend\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEv"
  "entCode\"j\n\024ReqDealWithAddFriend\022\037\n\tplaye"
  "r_id\030\001 \001(\0132\014.KWMsg.Ident\022\037\n\ttarget_id\030\002 "
  "\001(\0132\014.KWMsg.Ident\022\020\n\010opt_type\030\003 \001(\005\"A\n\024A"
  "ckDealWithAddFriend\022)\n\nevent_code\030\001 \001(\0162"
  "\025.KWMsg.EGameEventCode\"P\n\014ReqDelFriend\022\037"
  "\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\037\n\ttarge"
  "t_id\030\002 \001(\0132\014.KWMsg.Ident\"Z\n\014AckDelFriend"
  "\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventC"
  "ode\022\037\n\ttarget_id\030\002 \001(\0132\014.KWMsg.Ident\"/\n\014"
  "ReqBlacklist\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg."
  "Ident\"c\n\014AckBlacklist\022)\n\nevent_code\030\001 \001("
  "\0162\025.KWMsg.EGameEventCode\022(\n\tinfo_list\030\002 "
  "\003(\0132\025.KWMsg.PlayerBaseInfo\"e\n\017ReqBlackli"
  "stOpt\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\037"
  "\n\ttarget_id\030\002 \001(\0132\014.KWMsg.Ident\022\020\n\010opt_t"
  "ype\030\003 \001(\005\"]\n\017AckBlacklistOpt\022)\n\nevent_co"
  "de\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\037\n\ttarge"
  "t_id\030\002 \001(\0132\014.KWMsg.Ident\"Q\n\030ReqRecommend"
  "edFriendList\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg."
  "Ident\022\024\n\014refresh_flag\030\002 \001(\005\"v\n\030AckRecomm"
  "endedFriendList\022)\n\nevent_code\030\001 \001(\0162\025.KW"
  "Msg.EGameEventCode\022/\n\tinfo_list\030\002 \003(\0132\034."
  "KWMsg.RecommendedFriendInfo\"i\n\023ReqFriend"
  "CollectOpt\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Id"
  "ent\022\037\n\ttarget_id\030\002 \001(\0132\014.KWMsg.Ident\022\020\n\010"
  "opt_type\030\003 \001(\005\"a\n\023AckFriendCollectOpt\022)\n"
  "\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventCode"
  "\022\037\n\ttarget_id\030\002 \001(\0132\014.KWMsg.Ident\"^\n\rReq"
  "FindPlayer\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Id"
  "ent\022\031\n\021target_name_or_id\030\002 \001(\014\022\021\n\tfind_t"
  "ype\030\003 \001(\005\"d\n\rAckFindPlayer\022)\n\nevent_code"
  "\030\001 \001(\0162\025.KWMsg.EGameEventCode\022(\n\tbase_in"
  "fo\030\002 \001(\0132\025.KWMsg.PlayerBaseInfo\"W\n\033ReqEx"
  "ploreUpdateNodePostion\022\037\n\tplayer_id\030\001 \001("
  "\0132\014.KWMsg.Ident\022\027\n\017explore_node_id\030\002 \001(\014"
  "\"a\n\033AckExploreUpdateNodePostion\022)\n\nevent"
  "_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\027\n\017ex"
  "plore_node_id\030\002 \001(\014\"\\\n ReqGetExploreArea"
  "ProgressRewards\022\037\n\tplayer_id\030\001 \001(\0132\014.KWM"
  "sg.Ident\022\027\n\017explore_area_id\030\002 \001(\014\"u\n Ack"
  "GetExploreAreaProgressRewards\022)\n\nevent_c"
  "ode\030\001 \001(\0162\025.KWMsg.EGameEventCode\022&\n\013rewa"
  "rd_list\030\002 \003(\0132\021.KWMsg.RewardInfo\"m\n\034ReqS"
  "weepExploreThreeStarNode\022\037\n\tplayer_id\030\001 "
  "\001(\0132\014.KWMsg.Ident\022\027\n\017explore_node_id\030\002 \001"
  "(\014\022\023\n\013sweep_count\030\003 \001(\005\"\237\001\n\034AckSweepExpl"
  "oreThreeStarNode\022)\n\nevent_code\030\001 \001(\0162\025.K"
  "WMsg.EGameEventCode\022&\n\013reward_list\030\002 \003(\013"
  "2\021.KWMsg.RewardInfo\022,\n\021extra_reward_list"
  "\030\003 \003(\0132\021.KWMsg.RewardInfo\"f\n\033ReqGetExplo"
  "reMapStarRewards\022\037\n\tplayer_id\030\001 \001(\0132\014.KW"
  "Msg.Ident\022\016\n\006target\030\002 \001(\005\022\026\n\016explore_map"
  "_id\030\003 \001(\014\"p\n\033AckGetExploreMapStarRewards"
  "\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventC"
  "ode\022&\n\013reward_list\030\002 \003(\0132\021.KWMsg.RewardI"
  "nfo\"l\n!ReqGetExploreMapBranchlineRewards"
  "\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\016\n\006tar"
  "get\030\002 \001(\005\022\026\n\016explore_map_id\030\003 \001(\014\"v\n!Ack"
  "GetExploreMapBranchlineRewards\022)\n\nevent_"
  "code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022&\n\013rew"
  "ard_list\030\002 \003(\0132\021.KWMsg.RewardInfo\"_\n!Req"
  "UpgradeExploreGuiderFriendship\022\037\n\tplayer"
  "_id\030\001 \001(\0132\014.KWMsg.Ident\022\031\n\021explore_guide"
  "r_id\030\002 \001(\014\"N\n!AckUpgradeExploreGuiderFri"
  "endship\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGam"
  "eEventCode\"6\n\023ReqGetAppointReward\022\037\n\tpla"
  "yer_id\030\001 \001(\0132\014.KWMsg.Ident\"d\n\023AckGetAppo"
  "intReward\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EG"
  "ameEventCode\022\"\n\007rewards\030\002 \003(\0132\021.KWMsg.Re"
  "wardInfo\"P\n\024ReqSwitchAppointArea\022\037\n\tplay"
  "er_id\030\001 \001(\0132\014.KWMsg.Ident\022\027\n\017appoint_are"
  "a_id\030\002 \001(\014\"~\n\024AckSwitchAppointArea\022)\n\nev"
  "ent_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\027\n"
  "\017appoint_area_id\030\002 \001(\014\022\"\n\007rewards\030\003 \003(\0132"
  "\021.KWMsg.RewardInfo\"\177\n\016ReqStartAffair\022\037\n\t"
  "player_id\030\001 \001(\0132\014.KWMsg.Ident\022\027\n\017affair_"
  "position\030\002 \001(\014\022\020\n\010witch_id\030\003 \001(\014\022!\n\013affa"
  "ir_guid\030\004 \001(\0132\014.KWMsg.Ident\"\211\001\n\016AckStart"
  "Affair\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGame"
  "EventCode\022\027\n\017affair_position\030\002 \001(\014\022\020\n\010wi"
  "tch_id\030\003 \001(\014\022!\n\013affair_guid\030\004 \001(\0132\014.KWMs"
  "g.Ident\"N\n\022ReqTerminateAffair\022\037\n\tplayer_"
  "id\030\001 \001(\0132\014.KWMsg.Ident\022\027\n\017affair_positio"
  "n\030\002 \001(\014\"X\n\022AckTerminateAffair\022)\n\nevent_c"
  "ode\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\027\n\017affa"
  "ir_position\030\002 \001(\014\"N\n\022ReqGetAffairReward\022"
  "\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\027\n\017affa"
  "ir_position\030\002 \001(\014\"|\n\022AckGetAffairReward\022"
  ")\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventCo"
  "de\022\027\n\017affair_position\030\002 \001(\014\022\"\n\007rewards\030\003"
  " \003(\0132\021.KWMsg.RewardInfo\"U\n\017ReqDeleteAffa"
  "ir\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022!\n\013a"
  "ffair_guid\030\002 \001(\0132\014.KWMsg.Ident\"_\n\017AckDel"
  "eteAffair\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EG"
  "ameEventCode\022!\n\013affair_guid\030\002 \001(\0132\014.KWMs"
  "g.Ident\"2\n\017ReqStartAppoint\022\037\n\tplayer_id\030"
  "\001 \001(\0132\014.KWMsg.Ident\"<\n\017AckStartAppoint\022)"
  "\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventCod"
  "e\"F\n\021ReqSetHouseKeeper\022\037\n\tplayer_id\030\001 \001("
  "\0132\014.KWMsg.Ident\022\020\n\010witch_id\030\002 \001(\014\">\n\021Ack"
  "SetHouseKeeper\022)\n\nevent_code\030\001 \001(\0162\025.KWM"
  "sg.EGameEventCode\"c\n\027ReqSetHouseKeeperSk"
  "inId\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\020\n"
  "\010witch_id\030\002 \001(\014\022\025\n\rwitch_skin_id\030\003 \001(\014\"D"
  "\n\027AckSetHouseKeeperSkinId\022)\n\nevent_code\030"
  "\001 \001(\0162\025.KWMsg.EGameEventCode\";\n\030ReqHouse"
  "keeperInitSignin\022\037\n\tplayer_id\030\001 \001(\0132\014.KW"
  "Msg.Ident\"E\n\030AckHousekeeperInitSignin\022)\n"
  "\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventCode"
  "\"\?\n\034ReqHousekeeperFinishedSignin\022\037\n\tplay"
  "er_id\030\001 \001(\0132\014.KWMsg.Ident\"I\n\034AckHousekee"
  "perFinishedSignin\022)\n\nevent_code\030\001 \001(\0162\025."
  "KWMsg.EGameEventCode\"d\n\034ReqGetPneumaIsla"
  "ndStarReward\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg."
  "Ident\022\017\n\007boss_id\030\002 \001(\014\022\022\n\nreward_idx\030\003 \001"
  "(\005\"\222\001\n\034AckGetPneumaIslandStarReward\022)\n\ne"
  "vent_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\017"
  "\n\007boss_id\030\002 \001(\014\022\022\n\nreward_idx\030\003 \001(\005\022\"\n\007r"
  "ewards\030\004 \003(\0132\021.KWMsg.RewardInfo\"X\n\036ReqUp"
  "datePneumaIslandShowState\022\037\n\tplayer_id\030\001"
  " \001(\0132\014.KWMsg.Ident\022\025\n\rboss_group_id\030\002 \001("
  "\014\"b\n\036AckUpdatePneumaIslandShowState\022)\n\ne"
  "vent_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\025"
  "\n\rboss_group_id\030\002 \001(\014\"T\n!ReqUpdatePneuma"
  "AutoDecomposeState\022\037\n\tplayer_id\030\001 \001(\0132\014."
  "KWMsg.Ident\022\016\n\006enable\030\002 \001(\005\"^\n!AckUpdate"
  "PneumaAutoDecomposeState\022)\n\nevent_code\030\001"
  " \001(\0162\025.KWMsg.EGameEventCode\022\016\n\006enable\030\002 "
  "\001(\005\"F\n\025PneumaDecomposeScheme\022\023\n\013pneuma_t"
  "ype\030\001 \001(\014\022\030\n\020decompose_scheme\030\002 \001(\014\"\205\001\n\036"
  "ReqUpdatePneumaDecomposeScheme\022\037\n\tplayer"
  "_id\030\001 \001(\0132\014.KWMsg.Ident\022\017\n\007boss_id\030\002 \001(\014"
  "\0221\n\013scheme_list\030\003 \003(\0132\034.KWMsg.PneumaDeco"
  "mposeScheme\"\217\001\n\036AckUpdatePneumaDecompose"
  "Scheme\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGame"
  "EventCode\022\017\n\007boss_id\030\002 \001(\014\0221\n\013scheme_lis"
  "t\030\003 \003(\0132\034.KWMsg.PneumaDecomposeScheme\"E\n"
  "\016ReqCreateOrder\022\037\n\tplayer_id\030\001 \001(\0132\014.KWM"
  "sg.Ident\022\022\n\nproduct_id\030\002 \001(\014\"\206\001\n\016AckCrea"
  "teOrder\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGam"
  "eEventCode\022\022\n\nproduct_id\030\002 \001(\014\022\020\n\010order_"
  "id\030\003 \001(\014\022\020\n\010order_ts\030\004 \001(\003\022\021\n\tserver_id\030"
  "\005 \001(\005\"\300\002\n\023ReqCallbackRecharge\022\017\n\007sdk_uid"
  "\030\001 \001(\014\022\024\n\014sdk_order_id\030\002 \001(\014\022\024\n\014app_orde"
  "r_id\030\003 \001(\014\022\022\n\nproduct_id\030\004 \001(\014\022\021\n\ttimest"
  "amp\030\005 \001(\003\022\024\n\014money_amount\030\006 \001(\003\022\026\n\016money"
  "_currency\030\007 \001(\014\022\024\n\014order_amount\030\010 \001(\003\022\026\n"
  "\016order_currency\030\t \001(\014\022\020\n\010pay_type\030\n \001(\005\022"
  "\023\n\013platform_id\030\013 \001(\005\022\017\n\007sandbox\030\014 \001(\005\022\023\n"
  "\013source_type\030\r \001(\005\022\017\n\007role_id\030\016 \001(\014\022\013\n\003e"
  "xt\030\017 \001(\014\"\277\002\n\023AckCallbackRecharge\022)\n\neven"
  "t_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\024\n\014a"
  "pp_order_id\030\002 \001(\014\022\024\n\014sdk_order_id\030\003 \001(\014\022"
  "\022\n\nproduct_id\030\004 \001(\014\022\024\n\014money_amount\030\005 \001("
  "\003\022\026\n\016money_currency\030\006 \001(\014\022\024\n\014order_amoun"
  "t\030\007 \001(\003\022\026\n\016order_currency\030\010 \001(\014\022\030\n\020basic"
  "_add_number\030\t \001(\005\022\030\n\020extra_add_number\030\n "
  "\001(\005\022\030\n\020extra_param_type\030\013 \001(\005\022\023\n\013extra_p"
  "aram\030\014 \001(\014\"\313\001\n\010MailInfo\022\035\n\007mail_id\030\001 \001(\013"
  "2\014.KWMsg.Ident\022\021\n\tprompt_id\030\002 \001(\014\022\r\n\005tit"
  "le\030\003 \001(\014\022\017\n\007context\030\004 \001(\014\022\016\n\006sender\030\005 \001("
  "\014\022\r\n\005parms\030\006 \001(\014\022&\n\013reward_list\030\007 \003(\0132\021."
  "KWMsg.RewardInfo\022\021\n\tcreate_ts\030\010 \001(\003\022\023\n\013d"
  "eadline_ts\030\t \001(\003\"*\n\tMailInfos\022\035\n\004list\030\001 "
  "\003(\0132\017.KWMsg.MailInfo\"I\n\024ReqDeleteReadedM"
  "ails\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\020\n"
  "\010mail_ids\030\002 \003(\014\"A\n\024AckDeleteReadedMails\022"
  ")\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventCo"
  "de\"A\n\014ReqReadMails\022\037\n\tplayer_id\030\001 \001(\0132\014."
  "KWMsg.Ident\022\020\n\010mail_ids\030\002 \003(\014\"a\n\014AckRead"
  "Mails\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameE"
  "ventCode\022&\n\013reward_list\030\002 \003(\0132\021.KWMsg.Re"
  "wardInfo\"_\n\030ReqWorldSendMailToPlayer\022\037\n\t"
  "player_id\030\001 \001(\0132\014.KWMsg.Ident\022\"\n\tmail_in"
  "fo\030\002 \001(\0132\017.KWMsg.MailInfo\"\212\001\n\030AckWorldSe"
  "ndMailToPlayer\022)\n\nevent_code\030\001 \001(\0162\025.KWM"
  "sg.EGameEventCode\022\037\n\tplayer_id\030\002 \001(\0132\014.K"
  "WMsg.Ident\022\"\n\tmail_info\030\003 \001(\0132\017.KWMsg.Ma"
  "ilInfo\"C\n\035SyncAddPreSendAllPlayersMails\022"
  "\"\n\tmail_info\030\001 \001(\0132\017.KWMsg.MailInfo\"C\n\035S"
  "yncDelPreSendAllPlayersMails\022\"\n\tmail_inf"
  "o\030\001 \001(\0132\017.KWMsg.MailInfo\"`\n\031SyncAddPreSe"
  "ndPlayerMails\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg"
  ".Ident\022\"\n\tmail_info\030\002 \001(\0132\017.KWMsg.MailIn"
  "fo\"`\n\031SyncDelPreSendPlayerMails\022\037\n\tplaye"
  "r_id\030\001 \001(\0132\014.KWMsg.Ident\022\"\n\tmail_info\030\002 "
  "\001(\0132\017.KWMsg.MailInfo\"E\n\026SyncPlayerMailSe"
  "ssions\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022"
  "\n\n\002ts\030\002 \001(\003\"g\n\031ReqRegisterChatSdkAccount"
  "\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\027\n\017cha"
  "t_sdk_passwd\030\002 \001(\014\022\020\n\010world_id\030\003 \001(\005\"\222\001\n"
  "\031AckRegisterChatSdkAccount\022)\n\nevent_code"
  "\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\037\n\tplayer_"
  "id\030\002 \001(\0132\014.KWMsg.Ident\022\027\n\017chat_sdk_passw"
  "d\030\003 \001(\014\022\020\n\010world_id\030\004 \001(\005\"g\n\021ReqCreateCh"
  "atroom\022\025\n\rchatroom_type\030\001 \001(\005\022\025\n\rchatroo"
  "m_name\030\002 \001(\014\022\020\n\010world_id\030\003 \001(\005\022\022\n\nextra_"
  "data\030\004 \001(\014\"\247\001\n\021AckCreateChatroom\022)\n\neven"
  "t_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\025\n\rc"
  "hatroom_type\030\002 \001(\005\022\025\n\rchatroom_name\030\003 \001("
  "\014\022\020\n\010world_id\030\004 \001(\005\022\022\n\nextra_data\030\005 \001(\014\022"
  "\023\n\013chatroom_id\030\006 \001(\014\"S\n\032ReqSdkLoginInfoA"
  "ndChatroom\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Id"
  "ent\022\024\n\014community_id\030\002 \001(\014\"\267\001\n\032AckSdkLogi"
  "nInfoAndChatroom\022)\n\nevent_code\030\001 \001(\0162\025.K"
  "WMsg.EGameEventCode\022\027\n\017chat_sdk_passwd\030\002"
  " \001(\014\022\032\n\022public_chatroom_id\030\003 \001(\014\022\032\n\022syst"
  "em_chatroom_id\030\004 \001(\014\022\035\n\025community_chatro"
  "om_id\030\005 \001(\014\"\211\001\n\023ReqReportChatPlayer\022\037\n\tp"
  "layer_id\030\001 \001(\0132\014.KWMsg.Ident\022$\n\016chat_pla"
  "yer_id\030\002 \001(\0132\014.KWMsg.Ident\022\023\n\013report_typ"
  "e\030\003 \001(\005\022\026\n\016report_content\030\004 \001(\014\"\223\001\n\023AckR"
  "eportChatPlayer\022)\n\nevent_code\030\001 \001(\0162\025.KW"
  "Msg.EGameEventCode\022$\n\016chat_player_id\030\002 \001"
  "(\0132\014.KWMsg.Ident\022\023\n\013report_type\030\003 \001(\005\022\026\n"
  "\016report_content\030\004 \001(\014\"<\n\022ReqSendChatroom"
  "Msg\022\024\n\014chatroom_ids\030\001 \001(\014\022\020\n\010chat_msg\030\002 "
  "\001(\014\"<\n\022AckSendChatroomMsg\022\024\n\014chatroom_id"
  "s\030\001 \001(\014\022\020\n\010chat_msg\030\002 \001(\014\"J\n\035ReqUpdateCh"
  "atroomAnnouncement\022\023\n\013chatroom_id\030\001 \001(\014\022"
  "\024\n\014announcement\030\002 \001(\014\"J\n\035AckUpdateChatro"
  "omAnnouncement\022\023\n\013chatroom_id\030\001 \001(\014\022\024\n\014a"
  "nnouncement\030\002 \001(\014\"\244\001\n\020ReqCheckChatText\022\037"
  "\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\021\n\tchat_"
  "text\030\002 \001(\014\022\020\n\010world_id\030\003 \001(\005\022#\n\tchat_typ"
  "e\030\004 \001(\0162\020.KWMsg.EChatType\022%\n\017other_playe"
  "r_id\030\005 \001(\0132\014.KWMsg.Ident\"\343\001\n\020AckCheckCha"
  "tText\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameE"
  "ventCode\022\037\n\tplayer_id\030\002 \001(\0132\014.KWMsg.Iden"
  "t\022\021\n\tchat_text\030\003 \001(\014\022\022\n\nsuggestion\030\004 \001(\005"
  "\022\020\n\010world_id\030\005 \001(\005\022#\n\tchat_type\030\006 \001(\0162\020."
  "KWMsg.EChatType\022%\n\017other_player_id\030\007 \001(\013"
  "2\014.KWMsg.Ident\"{\n\022ReqCreateChatGroup\022\027\n\017"
  "chat_group_type\030\001 \001(\005\022\027\n\017chat_group_name"
  "\030\002 \001(\014\022\r\n\005owner\030\003 \001(\014\022\022\n\nextra_data\030\004 \001("
  "\014\022\020\n\010world_id\030\005 \001(\005\"\275\001\n\022AckCreateChatGro"
  "up\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEven"
  "tCode\022\027\n\017chat_group_type\030\002 \001(\005\022\027\n\017chat_g"
  "roup_name\030\003 \001(\014\022\r\n\005owner\030\004 \001(\014\022\022\n\nextra_"
  "data\030\005 \001(\014\022\020\n\010world_id\030\006 \001(\005\022\025\n\rchat_gro"
  "up_id\030\007 \001(\014\"j\n\022ReqDeleteChatGroup\022\025\n\rcha"
  "t_group_id\030\001 \001(\014\022\027\n\017chat_group_type\030\002 \001("
  "\005\022\022\n\nextra_data\030\003 \001(\014\022\020\n\010world_id\030\004 \001(\005\""
  "\225\001\n\022AckDeleteChatGroup\022)\n\nevent_code\030\001 \001"
  "(\0162\025.KWMsg.EGameEventCode\022\025\n\rchat_group_"
  "id\030\002 \001(\014\022\027\n\017chat_group_type\030\003 \001(\005\022\022\n\next"
  "ra_data\030\004 \001(\014\022\020\n\010world_id\030\005 \001(\005\"\177\n\024ReqTr"
  "ansferChatGroup\022\025\n\rchat_group_id\030\001 \001(\014\022\027"
  "\n\017chat_group_type\030\002 \001(\005\022\022\n\nextra_data\030\003 "
  "\001(\014\022\021\n\tuser_name\030\004 \001(\014\022\020\n\010world_id\030\005 \001(\005"
  "\"\252\001\n\024AckTransferChatGroup\022)\n\nevent_code\030"
  "\001 \001(\0162\025.KWMsg.EGameEventCode\022\025\n\rchat_gro"
  "up_id\030\002 \001(\014\022\027\n\017chat_group_type\030\003 \001(\005\022\022\n\n"
  "extra_data\030\004 \001(\014\022\021\n\tuser_name\030\005 \001(\014\022\020\n\010w"
  "orld_id\030\006 \001(\005\"~\n\023ReqAddChatGroupUser\022\025\n\r"
  "chat_group_id\030\001 \001(\014\022\027\n\017chat_group_type\030\002"
  " \001(\005\022\022\n\nextra_data\030\003 \001(\014\022\021\n\tuser_name\030\004 "
  "\001(\014\022\020\n\010world_id\030\005 \001(\005\"\251\001\n\023AckAddChatGrou"
  "pUser\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameE"
  "ventCode\022\025\n\rchat_group_id\030\002 \001(\014\022\027\n\017chat_"
  "group_type\030\003 \001(\005\022\022\n\nextra_data\030\004 \001(\014\022\021\n\t"
  "user_name\030\005 \001(\014\022\020\n\010world_id\030\006 \001(\005\"\201\001\n\026Re"
  "qDeleteChatGroupUser\022\025\n\rchat_group_id\030\001 "
  "\001(\014\022\027\n\017chat_group_type\030\002 \001(\005\022\022\n\nextra_da"
  "ta\030\003 \001(\014\022\021\n\tuser_name\030\004 \001(\014\022\020\n\010world_id\030"
  "\005 \001(\005\"\254\001\n\026AckDeleteChatGroupUser\022)\n\neven"
  "t_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\025\n\rc"
  "hat_group_id\030\002 \001(\014\022\027\n\017chat_group_type\030\003 "
  "\001(\005\022\022\n\nextra_data\030\004 \001(\014\022\021\n\tuser_name\030\005 \001"
  "(\014\022\020\n\010world_id\030\006 \001(\005\"I\n\023ReqSwitchChatBub"
  "ble\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\021\n\t"
  "bubble_id\030\002 \001(\014\"S\n\023AckSwitchChatBubble\022)"
  "\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventCod"
  "e\022\021\n\tbubble_id\030\002 \001(\014\"I\n\023ReqUnlockChatBub"
  "ble\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\021\n\t"
  "bubble_id\030\002 \001(\014\"S\n\023AckUnlockChatBubble\022)"
  "\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventCod"
  "e\022\021\n\tbubble_id\030\002 \001(\014\"P\n\026ReqUnlockChatMem"
  "eGroup\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022"
  "\025\n\rmeme_group_id\030\002 \001(\014\"Z\n\026AckUnlockChatM"
  "emeGroup\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGa"
  "meEventCode\022\025\n\rmeme_group_id\030\002 \001(\014\"E\n\021Re"
  "qUnlockChatMeme\022\037\n\tplayer_id\030\001 \001(\0132\014.KWM"
  "sg.Ident\022\017\n\007meme_id\030\002 \001(\014\"O\n\021AckUnlockCh"
  "atMeme\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGame"
  "EventCode\022\017\n\007meme_id\030\002 \001(\014\"S\n\033SyncPlayer"
  "HonorPointChanged\022\037\n\tplayer_id\030\001 \001(\0132\014.K"
  "WMsg.Ident\022\023\n\013honor_point\030\002 \001(\005\"9\n\033SaveP"
  "layerHonorPointRanking\022\013\n\003key\030\001 \001(\014\022\r\n\005s"
  "core\030\002 \001(\003\"Y\n\036SyncPlayerStrategyPointCha"
  "nged\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\026\n"
  "\016strategy_point\030\002 \001(\005\"<\n\036SavePlayerStrat"
  "egyPointRanking\022\013\n\003key\030\001 \001(\014\022\r\n\005score\030\002 "
  "\001(\003\"\"\n\021SyncBotArenaState\022\r\n\005state\030\001 \001(\005\""
  ":\n\030SyncBotArenaStageSession\022\r\n\005stage\030\001 \001"
  "(\005\022\017\n\007session\030\002 \001(\005\"f\n\027SavePlayerChallen"
  "geList\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022"
  "*\n\004list\030\002 \001(\0132\034.KWMsg.BotArenaChallengeL"
  "ist\"h\n\031UpdatePlayerChallengeItem\022\037\n\tplay"
  "er_id\030\001 \001(\0132\014.KWMsg.Ident\022*\n\004item\030\002 \001(\0132"
  "\034.KWMsg.BotArenaChallengeItem\"b\n\026UpdateP"
  "layerReplayItem\022\037\n\tplayer_id\030\001 \001(\0132\014.KWM"
  "sg.Ident\022\'\n\004item\030\002 \001(\0132\031.KWMsg.BotArenaR"
  "eplayItem\"_\n\023AddPlayerReplayItem\022\037\n\tplay"
  "er_id\030\001 \001(\0132\014.KWMsg.Ident\022\'\n\004item\030\002 \001(\0132"
  "\031.KWMsg.BotArenaReplayItem\"_\n\023DelPlayerR"
  "eplayItem\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ide"
  "nt\022\'\n\004item\030\002 \001(\0132\031.KWMsg.BotArenaReplayI"
  "tem\"\326\002\n\031SyncBotArenaBattleIsReady\022)\n\neve"
  "nt_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\024\n\014"
  "game_play_id\030\002 \001(\014\022\017\n\007team_id\030\003 \001(\014\022\030\n\020c"
  "ontinuous_count\030\004 \001(\005\022\020\n\010auto_buy\030\005 \001(\005\022"
  "$\n\014challenge_id\030\006 \001(\0132\014.KWMsg.IdentH\000\022!\n"
  "\treplay_id\030\007 \001(\0132\014.KWMsg.IdentH\000\022\030\n\020chal"
  "lenge_result\030\010 \001(\005\022(\n\013player_info\030\t \001(\0132"
  "\021.KWMsg.PlayerInfoH\001\022\022\n\010robot_id\030\n \001(\014H\001"
  "B\020\n\016challenge_itemB\010\n\006entity\"~\n\035SyncBotA"
  "renaBattleReplayDatas\022\037\n\tplayer_id\030\001 \001(\013"
  "2\014.KWMsg.Ident\022.\n\013replay_item\030\002 \001(\0132\031.KW"
  "Msg.BotArenaReplayItem\022\014\n\004msgs\030\003 \001(\014\"o\n\035"
  "SaveBotArenaBattleReplayDatas\022\037\n\tplayer_"
  "id\030\001 \001(\0132\014.KWMsg.Ident\022\037\n\treplay_id\030\002 \001("
  "\0132\014.KWMsg.Ident\022\014\n\004msgs\030\003 \001(\014\"`\n\034DelBotA"
  "renaBattleReplayDatas\022\037\n\tplayer_id\030\001 \001(\013"
  "2\014.KWMsg.Ident\022\037\n\treplay_id\030\002 \001(\0132\014.KWMs"
  "g.Ident\"j\n\037SyncDefensivePlayerBattleRewa"
  "rd\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022&\n\013r"
  "eward_list\030\002 \003(\0132\021.KWMsg.RewardInfo\"\224\001\n\034"
  "SyncBotArenaBattleSettleData\022\037\n\tplayer_i"
  "d\030\001 \001(\0132\014.KWMsg.Ident\022\"\n\014challenge_id\030\002 "
  "\001(\0132\014.KWMsg.Ident\022\037\n\treplay_id\030\003 \001(\0132\014.K"
  "WMsg.Ident\022\016\n\006is_win\030\004 \001(\010\"f\n\032ReqClickBo"
  "tarenaPromptForm\022\037\n\tplayer_id\030\001 \001(\0132\014.KW"
  "Msg.Ident\022\'\n\004type\030\002 \001(\0162\031.KWMsg.Botarena"
  "PromptType\"G\n\032AckClickBotarenaPromptForm"
  "\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventC"
  "ode\"M\n\025HonorPointRankingItem\022\014\n\004rank\030\001 \001"
  "(\005\022&\n\013player_info\030\002 \001(\0132\021.KWMsg.PlayerIn"
  "fo\"@\n\035ReqGetPlayerHonorPointRanking\022\037\n\tp"
  "layer_id\030\001 \001(\0132\014.KWMsg.Ident\"\312\001\n\035AckGetP"
  "layerHonorPointRanking\022)\n\nevent_code\030\001 \001"
  "(\0162\025.KWMsg.EGameEventCode\022\037\n\tplayer_id\030\002"
  " \001(\0132\014.KWMsg.Ident\022-\n\007ranking\030\003 \003(\0132\034.KW"
  "Msg.HonorPointRankingItem\022.\n\010cur_rank\030\004 "
  "\001(\0132\034.KWMsg.HonorPointRankingItem\"=\n\032Req"
  "GetBotArenaMainPageData\022\037\n\tplayer_id\030\001 \001"
  "(\0132\014.KWMsg.Ident\"\225\003\n\032AckGetBotArenaMainP"
  "ageData\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGam"
  "eEventCode\022\037\n\tplayer_id\030\002 \001(\0132\014.KWMsg.Id"
  "ent\022\014\n\004rank\030\003 \001(\005\022\r\n\005stage\030\004 \001(\005\022\017\n\007sess"
  "ion\030\005 \001(\005\022.\n\013prompt_type\030\006 \001(\0162\031.KWMsg.B"
  "otarenaPromptType\022\035\n\025pre_botarena_grade_"
  "id\030\007 \001(\014\022\032\n\022pre_strategy_point\030\010 \001(\003\022\026\n\016"
  "stage_begin_ts\030\t \001(\005\022\024\n\014stage_end_ts\030\n \001"
  "(\005\022\027\n\017stage_settle_ts\030\013 \001(\005\022\030\n\020session_b"
  "egin_ts\030\014 \001(\005\022\026\n\016session_end_ts\030\r \001(\005\022\031\n"
  "\021session_settle_ts\030\016 \001(\005\"P\n\030StrategyPoin"
  "tRankingItem\022\014\n\004rank\030\001 \001(\005\022&\n\013player_inf"
  "o\030\002 \001(\0132\021.KWMsg.PlayerInfo\"C\n ReqGetPlay"
  "erStrategyPointRanking\022\037\n\tplayer_id\030\001 \001("
  "\0132\014.KWMsg.Ident\"\323\001\n AckGetPlayerStrategy"
  "PointRanking\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg"
  ".EGameEventCode\022\037\n\tplayer_id\030\002 \001(\0132\014.KWM"
  "sg.Ident\0220\n\007ranking\030\003 \003(\0132\037.KWMsg.Strate"
  "gyPointRankingItem\0221\n\010cur_rank\030\004 \001(\0132\037.K"
  "WMsg.StrategyPointRankingItem\"\211\001\n\025BotAre"
  "naChallengeItem\022\030\n\002id\030\001 \001(\0132\014.KWMsg.Iden"
  "t\022(\n\013player_info\030\002 \001(\0132\021.KWMsg.PlayerInf"
  "oH\000\022\022\n\010robot_id\030\003 \001(\014H\000\022\016\n\006result\030\004 \001(\005B"
  "\010\n\006entity\"C\n\025BotArenaChallengeList\022*\n\004li"
  "st\030\001 \003(\0132\034.KWMsg.BotArenaChallengeItem\"D"
  "\n!ReqGetPlayerBotArenaChallengeList\022\037\n\tp"
  "layer_id\030\001 \001(\0132\014.KWMsg.Ident\"\235\001\n!AckGetP"
  "layerBotArenaChallengeList\022)\n\nevent_code"
  "\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\037\n\tplayer_"
  "id\030\002 \001(\0132\014.KWMsg.Ident\022,\n\006result\030\003 \001(\0132\034"
  ".KWMsg.BotArenaChallengeList\"H\n%ReqRefre"
  "shPlayerBotArenaChallengeList\022\037\n\tplayer_"
  "id\030\001 \001(\0132\014.KWMsg.Ident\"\241\001\n%AckRefreshPla"
  "yerBotArenaChallengeList\022)\n\nevent_code\030\001"
  " \001(\0162\025.KWMsg.EGameEventCode\022\037\n\tplayer_id"
  "\030\002 \001(\0132\014.KWMsg.Ident\022,\n\006result\030\003 \001(\0132\034.K"
  "WMsg.BotArenaChallengeList\"]\n\033ReqAdjBota"
  "renaDefensiveTeam\022\037\n\tplayer_id\030\001 \001(\0132\014.K"
  "WMsg.Ident\022\013\n\003idx\030\002 \001(\005\022\020\n\010witch_id\030\003 \001("
  "\014\"H\n\033AckAdjBotarenaDefensiveTeam\022)\n\neven"
  "t_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\"@\n\035R"
  "eqResetBotarenaDefensiveTeam\022\037\n\tplayer_i"
  "d\030\001 \001(\0132\014.KWMsg.Ident\"J\n\035AckResetBotaren"
  "aDefensiveTeam\022)\n\nevent_code\030\001 \001(\0162\025.KWM"
  "sg.EGameEventCode\"]\n#ReqQuickConfigBotar"
  "enaDefensiveTeam\022\037\n\tplayer_id\030\001 \001(\0132\014.KW"
  "Msg.Ident\022\025\n\rwitch_id_list\030\002 \003(\014\"g\n#AckQ"
  "uickConfigBotarenaDefensiveTeam\022)\n\nevent"
  "_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\025\n\rwi"
  "tch_id_list\030\002 \003(\014\"C\n\021ReqBuyShabowToken\022\037"
  "\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\r\n\005count"
  "\030\002 \001(\003\">\n\021AckBuyShabowToken\022)\n\nevent_cod"
  "e\030\001 \001(\0162\025.KWMsg.EGameEventCode\"\364\001\n\022BotAr"
  "enaReplayItem\022\030\n\002id\030\001 \001(\0132\014.KWMsg.Ident\022"
  "(\n\013player_info\030\002 \001(\0132\021.KWMsg.PlayerInfoH"
  "\000\022\022\n\010robot_id\030\003 \001(\014H\000\022!\n\006reward\030\004 \001(\0132\021."
  "KWMsg.RewardInfo\022\021\n\tcreate_ts\030\005 \001(\005\022+\n\006r"
  "esult\030\006 \001(\0162\033.KWMsg.BotarenaReplayResult"
  "\022\031\n\021is_counter_attack\030\007 \001(\010B\010\n\006entity\"=\n"
  "\022BotArenaReplayList\022\'\n\004list\030\001 \003(\0132\031.KWMs"
  "g.BotArenaReplayItem\";\n\030ReqGetBotArenaRe"
  "playList\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Iden"
  "t\"\226\001\n\030AckGetBotArenaReplayList\022)\n\nevent_"
  "code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\037\n\tpla"
  "yer_id\030\002 \001(\0132\014.KWMsg.Ident\022.\n\013replay_lis"
  "t\030\003 \003(\0132\031.KWMsg.BotArenaReplayItem\"[\n\027Re"
  "qReplayBotArenaBattle\022\037\n\tplayer_id\030\001 \001(\013"
  "2\014.KWMsg.Ident\022\037\n\treplay_id\030\002 \001(\0132\014.KWMs"
  "g.Ident\"\206\001\n\027AckReplayBotArenaBattle\022)\n\ne"
  "vent_code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\037"
  "\n\tplayer_id\030\002 \001(\0132\014.KWMsg.Ident\022\037\n\trepla"
  "y_id\030\003 \001(\0132\014.KWMsg.Ident\"X\n\013ShopReceipt\022"
  "\022\n\nproduct_id\030\001 \001(\014\022\025\n\rshop_goods_id\030\002 \001"
  "(\014\022\017\n\007shop_id\030\003 \001(\014\022\r\n\005count\030\004 \001(\003\"`\n\025De"
  "lPlayerShopReceipts\022\037\n\tplayer_id\030\001 \001(\0132\014"
  ".KWMsg.Ident\022\017\n\007shop_id\030\002 \001(\014\022\025\n\rshop_go"
  "ods_id\030\003 \001(\014\"\204\001\n\024UpdPlayerShopReceipt\022\037\n"
  "\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\017\n\007shop_i"
  "d\030\002 \001(\014\022\025\n\rshop_goods_id\030\003 \001(\014\022#\n\007receip"
  "t\030\004 \001(\0132\022.KWMsg.ShopReceipt\"\204\001\n\024AddPlaye"
  "rShopReceipt\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg."
  "Ident\022\017\n\007shop_id\030\002 \001(\014\022\025\n\rshop_goods_id\030"
  "\003 \001(\014\022#\n\007receipt\030\004 \001(\0132\022.KWMsg.ShopRecei"
  "pt\"F\n\022ReqGetShopProducts\022\037\n\tplayer_id\030\001 "
  "\001(\0132\014.KWMsg.Ident\022\017\n\007shop_id\030\002 \001(\014\"\206\001\n\022A"
  "ckGetShopProducts\022)\n\nevent_code\030\001 \001(\0162\025."
  "KWMsg.EGameEventCode\022\037\n\tplayer_id\030\002 \001(\0132"
  "\014.KWMsg.Ident\022$\n\010products\030\003 \003(\0132\022.KWMsg."
  "ProductInfo\"d\n\rReqBuyProduct\022\037\n\tplayer_i"
  "d\030\001 \001(\0132\014.KWMsg.Ident\022\017\n\007shop_id\030\002 \001(\014\022\022"
  "\n\nproduct_id\030\003 \001(\014\022\r\n\005count\030\004 \001(\003\"\217\001\n\rAc"
  "kBuyProduct\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg."
  "EGameEventCode\022\037\n\tplayer_id\030\002 \001(\0132\014.KWMs"
  "g.Ident\022#\n\007product\030\003 \001(\0132\022.KWMsg.Product"
  "Info\022\r\n\005count\030\004 \001(\003B\nZ\010./;KWMsgb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kwmsgshare_2eproto_deps[2] = {
  &::descriptor_table_kwmsgbase_2eproto,
  &::descriptor_table_kwmsgdefine_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kwmsgshare_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kwmsgshare_2eproto = {
  false, false, 37559, descriptor_table_protodef_kwmsgshare_2eproto, "kwmsgshare.proto", 
  &descriptor_table_kwmsgshare_2eproto_once, descriptor_table_kwmsgshare_2eproto_deps, 2, 338,
  schemas, file_default_instances, TableStruct_kwmsgshare_2eproto::offsets,
  file_level_metadata_kwmsgshare_2eproto, file_level_enum_descriptors_kwmsgshare_2eproto, file_level_service_descriptors_kwmsgshare_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_kwmsgshare_2eproto_getter() {
  return &descriptor_table_kwmsgshare_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_kwmsgshare_2eproto(&descriptor_table_kwmsgshare_2eproto);
namespace KWMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PosSyncUnit_EMoveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgshare_2eproto);
  return file_level_enum_descriptors_kwmsgshare_2eproto[0];
}
bool PosSyncUnit_EMoveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PosSyncUnit_EMoveType PosSyncUnit::EMT_WALK;
constexpr PosSyncUnit_EMoveType PosSyncUnit::EET_SPEEDY;
constexpr PosSyncUnit_EMoveType PosSyncUnit::EET_TELEPORT;
constexpr PosSyncUnit_EMoveType PosSyncUnit::EMoveType_MIN;
constexpr PosSyncUnit_EMoveType PosSyncUnit::EMoveType_MAX;
constexpr int PosSyncUnit::EMoveType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckPlayerChat_EGameChatChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgshare_2eproto);
  return file_level_enum_descriptors_kwmsgshare_2eproto[1];
}
bool ReqAckPlayerChat_EGameChatChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_GLOBAL;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_GUILD;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_ROOM;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_TEAM;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGameChatChannel_MIN;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGameChatChannel_MAX;
constexpr int ReqAckPlayerChat::EGameChatChannel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgshare_2eproto);
  return file_level_enum_descriptors_kwmsgshare_2eproto[2];
}
bool ReqAckPlayerChat_EGameChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_TEXT;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_VOICE;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_EMOJI;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MIN;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MAX;
constexpr int ReqAckPlayerChat::EGameChatType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqCollegeDrama_DramaType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgshare_2eproto);
  return file_level_enum_descriptors_kwmsgshare_2eproto[3];
}
bool ReqCollegeDrama_DramaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReqCollegeDrama_DramaType ReqCollegeDrama::ECD_SEMESTER_START;
constexpr ReqCollegeDrama_DramaType ReqCollegeDrama::ECD_INCLASS;
constexpr ReqCollegeDrama_DramaType ReqCollegeDrama::ECD_SEMESTER_END;
constexpr ReqCollegeDrama_DramaType ReqCollegeDrama::DramaType_MIN;
constexpr ReqCollegeDrama_DramaType ReqCollegeDrama::DramaType_MAX;
constexpr int ReqCollegeDrama::DramaType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommonGetRewardInfo_EShowType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgshare_2eproto);
  return file_level_enum_descriptors_kwmsgshare_2eproto[4];
}
bool CommonGetRewardInfo_EShowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CommonGetRewardInfo_EShowType CommonGetRewardInfo::EST_NONE;
constexpr CommonGetRewardInfo_EShowType CommonGetRewardInfo::EST_DAILY_ACTIVE_MISSION_GEAR_REWARD;
constexpr CommonGetRewardInfo_EShowType CommonGetRewardInfo::EST_WEEKLY_ACTIVE_MISSION_GEAR_REWARD;
constexpr CommonGetRewardInfo_EShowType CommonGetRewardInfo::EST_ACTIVE_MISSION_REWARD;
constexpr CommonGetRewardInfo_EShowType CommonGetRewardInfo::EShowType_MIN;
constexpr CommonGetRewardInfo_EShowType CommonGetRewardInfo::EShowType_MAX;
constexpr int CommonGetRewardInfo::EShowType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ProductPrice::_Internal {
 public:
};

ProductPrice::ProductPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ProductPrice)
}
ProductPrice::ProductPrice(const ProductPrice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res().empty()) {
    res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_res(), 
      GetArenaForAllocation());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ProductPrice)
}

void ProductPrice::SharedCtor() {
res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
count_ = int64_t{0};
}

ProductPrice::~ProductPrice() {
  // @@protoc_insertion_point(destructor:KWMsg.ProductPrice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProductPrice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  res_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProductPrice::ArenaDtor(void* object) {
  ProductPrice* _this = reinterpret_cast< ProductPrice* >(object);
  (void)_this;
}
void ProductPrice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProductPrice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProductPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ProductPrice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_.ClearToEmpty();
  count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductPrice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_res();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProductPrice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ProductPrice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes res = 1;
  if (!this->res().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_res(), target);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ProductPrice)
  return target;
}

size_t ProductPrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ProductPrice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes res = 1;
  if (!this->res().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_res());
  }

  // int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductPrice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ProductPrice)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductPrice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProductPrice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ProductPrice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ProductPrice)
    MergeFrom(*source);
  }
}

void ProductPrice::MergeFrom(const ProductPrice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ProductPrice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.res().empty()) {
    _internal_set_res(from._internal_res());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ProductPrice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ProductPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductPrice::CopyFrom(const ProductPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ProductPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductPrice::IsInitialized() const {
  return true;
}

void ProductPrice::InternalSwap(ProductPrice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &res_, GetArenaForAllocation(),
      &other->res_, other->GetArenaForAllocation()
  );
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductPrice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[0]);
}

// ===================================================================

class ProductContent::_Internal {
 public:
};

ProductContent::ProductContent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ProductContent)
}
ProductContent::ProductContent(const ProductContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reward_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reward_id().empty()) {
    reward_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reward_id(), 
      GetArenaForAllocation());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ProductContent)
}

void ProductContent::SharedCtor() {
reward_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
count_ = int64_t{0};
}

ProductContent::~ProductContent() {
  // @@protoc_insertion_point(destructor:KWMsg.ProductContent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProductContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reward_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProductContent::ArenaDtor(void* object) {
  ProductContent* _this = reinterpret_cast< ProductContent* >(object);
  (void)_this;
}
void ProductContent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProductContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProductContent::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ProductContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_id_.ClearToEmpty();
  count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes reward_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reward_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProductContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ProductContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes reward_id = 1;
  if (!this->reward_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_reward_id(), target);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ProductContent)
  return target;
}

size_t ProductContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ProductContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes reward_id = 1;
  if (!this->reward_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reward_id());
  }

  // int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductContent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ProductContent)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductContent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProductContent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ProductContent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ProductContent)
    MergeFrom(*source);
  }
}

void ProductContent::MergeFrom(const ProductContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ProductContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.reward_id().empty()) {
    _internal_set_reward_id(from._internal_reward_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ProductContent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ProductContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductContent::CopyFrom(const ProductContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ProductContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductContent::IsInitialized() const {
  return true;
}

void ProductContent::InternalSwap(ProductContent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reward_id_, GetArenaForAllocation(),
      &other->reward_id_, other->GetArenaForAllocation()
  );
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductContent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[1]);
}

// ===================================================================

class ProductInfo::_Internal {
 public:
  static const ::KWMsg::ProductContent& content(const ProductInfo* msg);
  static const ::KWMsg::ProductPrice& price(const ProductInfo* msg);
};

const ::KWMsg::ProductContent&
ProductInfo::_Internal::content(const ProductInfo* msg) {
  return *msg->content_;
}
const ::KWMsg::ProductPrice&
ProductInfo::_Internal::price(const ProductInfo* msg) {
  return *msg->price_;
}
ProductInfo::ProductInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ProductInfo)
}
ProductInfo::ProductInfo(const ProductInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_id().empty()) {
    product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_id(), 
      GetArenaForAllocation());
  }
  shop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shop_id().empty()) {
    shop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shop_id(), 
      GetArenaForAllocation());
  }
  shop_goods_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shop_goods_id().empty()) {
    shop_goods_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shop_goods_id(), 
      GetArenaForAllocation());
  }
  refresh_cron_expr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_refresh_cron_expr().empty()) {
    refresh_cron_expr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_refresh_cron_expr(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_content()) {
    content_ = new ::KWMsg::ProductContent(*from.content_);
  } else {
    content_ = nullptr;
  }
  if (from._internal_has_price()) {
    price_ = new ::KWMsg::ProductPrice(*from.price_);
  } else {
    price_ = nullptr;
  }
  ::memcpy(&maximum_sells_, &from.maximum_sells_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_purchase_limit_) -
    reinterpret_cast<char*>(&maximum_sells_)) + sizeof(is_purchase_limit_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ProductInfo)
}

void ProductInfo::SharedCtor() {
product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shop_goods_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
refresh_cron_expr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&content_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_purchase_limit_) -
    reinterpret_cast<char*>(&content_)) + sizeof(is_purchase_limit_));
}

ProductInfo::~ProductInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.ProductInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProductInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  product_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shop_goods_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refresh_cron_expr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete content_;
  if (this != internal_default_instance()) delete price_;
}

void ProductInfo::ArenaDtor(void* object) {
  ProductInfo* _this = reinterpret_cast< ProductInfo* >(object);
  (void)_this;
}
void ProductInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProductInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProductInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ProductInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_id_.ClearToEmpty();
  shop_id_.ClearToEmpty();
  shop_goods_id_.ClearToEmpty();
  refresh_cron_expr_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
  if (GetArenaForAllocation() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
  ::memset(&maximum_sells_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_purchase_limit_) -
      reinterpret_cast<char*>(&maximum_sells_)) + sizeof(is_purchase_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes product_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_product_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_shop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shop_goods_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_shop_goods_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ShopListingType listing_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_listing_type(static_cast<::KWMsg::ShopListingType>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.ProductContent content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ProductPrice price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 maximum_sells = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          maximum_sells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 remain_sells = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          remain_sells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 maximun_once_buys = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          maximun_once_buys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes refresh_cron_expr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_refresh_cron_expr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 refresh_interval = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          refresh_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_purchase_limit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          is_purchase_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProductInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ProductInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes product_id = 1;
  if (!this->product_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_product_id(), target);
  }

  // bytes shop_id = 2;
  if (!this->shop_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_shop_id(), target);
  }

  // bytes shop_goods_id = 3;
  if (!this->shop_goods_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_shop_goods_id(), target);
  }

  // .KWMsg.ShopListingType listing_type = 4;
  if (this->listing_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_listing_type(), target);
  }

  // .KWMsg.ProductContent content = 5;
  if (this->has_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::content(this), target, stream);
  }

  // .KWMsg.ProductPrice price = 6;
  if (this->has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::price(this), target, stream);
  }

  // int64 maximum_sells = 7;
  if (this->maximum_sells() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_maximum_sells(), target);
  }

  // int64 remain_sells = 8;
  if (this->remain_sells() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_remain_sells(), target);
  }

  // int64 maximun_once_buys = 9;
  if (this->maximun_once_buys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_maximun_once_buys(), target);
  }

  // bytes refresh_cron_expr = 10;
  if (!this->refresh_cron_expr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_refresh_cron_expr(), target);
  }

  // int32 refresh_interval = 11;
  if (this->refresh_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_refresh_interval(), target);
  }

  // bool is_purchase_limit = 12;
  if (this->is_purchase_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_purchase_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ProductInfo)
  return target;
}

size_t ProductInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ProductInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes product_id = 1;
  if (!this->product_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_product_id());
  }

  // bytes shop_id = 2;
  if (!this->shop_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shop_id());
  }

  // bytes shop_goods_id = 3;
  if (!this->shop_goods_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shop_goods_id());
  }

  // bytes refresh_cron_expr = 10;
  if (!this->refresh_cron_expr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_refresh_cron_expr());
  }

  // .KWMsg.ProductContent content = 5;
  if (this->has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *content_);
  }

  // .KWMsg.ProductPrice price = 6;
  if (this->has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_);
  }

  // int64 maximum_sells = 7;
  if (this->maximum_sells() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maximum_sells());
  }

  // .KWMsg.ShopListingType listing_type = 4;
  if (this->listing_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_listing_type());
  }

  // int32 refresh_interval = 11;
  if (this->refresh_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_refresh_interval());
  }

  // int64 remain_sells = 8;
  if (this->remain_sells() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_remain_sells());
  }

  // int64 maximun_once_buys = 9;
  if (this->maximun_once_buys() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_maximun_once_buys());
  }

  // bool is_purchase_limit = 12;
  if (this->is_purchase_limit() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ProductInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProductInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ProductInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ProductInfo)
    MergeFrom(*source);
  }
}

void ProductInfo::MergeFrom(const ProductInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ProductInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.product_id().empty()) {
    _internal_set_product_id(from._internal_product_id());
  }
  if (!from.shop_id().empty()) {
    _internal_set_shop_id(from._internal_shop_id());
  }
  if (!from.shop_goods_id().empty()) {
    _internal_set_shop_goods_id(from._internal_shop_goods_id());
  }
  if (!from.refresh_cron_expr().empty()) {
    _internal_set_refresh_cron_expr(from._internal_refresh_cron_expr());
  }
  if (from.has_content()) {
    _internal_mutable_content()->::KWMsg::ProductContent::MergeFrom(from._internal_content());
  }
  if (from.has_price()) {
    _internal_mutable_price()->::KWMsg::ProductPrice::MergeFrom(from._internal_price());
  }
  if (from.maximum_sells() != 0) {
    _internal_set_maximum_sells(from._internal_maximum_sells());
  }
  if (from.listing_type() != 0) {
    _internal_set_listing_type(from._internal_listing_type());
  }
  if (from.refresh_interval() != 0) {
    _internal_set_refresh_interval(from._internal_refresh_interval());
  }
  if (from.remain_sells() != 0) {
    _internal_set_remain_sells(from._internal_remain_sells());
  }
  if (from.maximun_once_buys() != 0) {
    _internal_set_maximun_once_buys(from._internal_maximun_once_buys());
  }
  if (from.is_purchase_limit() != 0) {
    _internal_set_is_purchase_limit(from._internal_is_purchase_limit());
  }
}

void ProductInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ProductInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductInfo::CopyFrom(const ProductInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ProductInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductInfo::IsInitialized() const {
  return true;
}

void ProductInfo::InternalSwap(ProductInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_id_, GetArenaForAllocation(),
      &other->product_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shop_id_, GetArenaForAllocation(),
      &other->shop_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shop_goods_id_, GetArenaForAllocation(),
      &other->shop_goods_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &refresh_cron_expr_, GetArenaForAllocation(),
      &other->refresh_cron_expr_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProductInfo, is_purchase_limit_)
      + sizeof(ProductInfo::is_purchase_limit_)
      - PROTOBUF_FIELD_OFFSET(ProductInfo, content_)>(
          reinterpret_cast<char*>(&content_),
          reinterpret_cast<char*>(&other->content_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[2]);
}

// ===================================================================

class RewardInfo::_Internal {
 public:
};

RewardInfo::RewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.RewardInfo)
}
RewardInfo::RewardInfo(const RewardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reward_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reward_id().empty()) {
    reward_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reward_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&reward_count_, &from.reward_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_flag_) -
    reinterpret_cast<char*>(&reward_count_)) + sizeof(reward_flag_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.RewardInfo)
}

void RewardInfo::SharedCtor() {
reward_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reward_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reward_flag_) -
    reinterpret_cast<char*>(&reward_count_)) + sizeof(reward_flag_));
}

RewardInfo::~RewardInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.RewardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RewardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reward_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RewardInfo::ArenaDtor(void* object) {
  RewardInfo* _this = reinterpret_cast< RewardInfo* >(object);
  (void)_this;
}
void RewardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RewardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.RewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_id_.ClearToEmpty();
  ::memset(&reward_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_flag_) -
      reinterpret_cast<char*>(&reward_count_)) + sizeof(reward_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes reward_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reward_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 reward_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reward_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reward_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.RewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes reward_id = 1;
  if (!this->reward_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_reward_id(), target);
  }

  // int64 reward_count = 2;
  if (this->reward_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_reward_count(), target);
  }

  // int32 reward_flag = 3;
  if (this->reward_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reward_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.RewardInfo)
  return target;
}

size_t RewardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.RewardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes reward_id = 1;
  if (!this->reward_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reward_id());
  }

  // int64 reward_count = 2;
  if (this->reward_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_reward_count());
  }

  // int32 reward_flag = 3;
  if (this->reward_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.RewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.RewardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.RewardInfo)
    MergeFrom(*source);
  }
}

void RewardInfo::MergeFrom(const RewardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.RewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.reward_id().empty()) {
    _internal_set_reward_id(from._internal_reward_id());
  }
  if (from.reward_count() != 0) {
    _internal_set_reward_count(from._internal_reward_count());
  }
  if (from.reward_flag() != 0) {
    _internal_set_reward_flag(from._internal_reward_flag());
  }
}

void RewardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.RewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardInfo::CopyFrom(const RewardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.RewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardInfo::IsInitialized() const {
  return true;
}

void RewardInfo::InternalSwap(RewardInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reward_id_, GetArenaForAllocation(),
      &other->reward_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RewardInfo, reward_flag_)
      + sizeof(RewardInfo::reward_flag_)
      - PROTOBUF_FIELD_OFFSET(RewardInfo, reward_count_)>(
          reinterpret_cast<char*>(&reward_count_),
          reinterpret_cast<char*>(&other->reward_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[3]);
}

// ===================================================================

class WitchInfo::_Internal {
 public:
};

WitchInfo::WitchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.WitchInfo)
}
WitchInfo::WitchInfo(const WitchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  witch_role_res_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_role_res_id().empty()) {
    witch_role_res_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_role_res_id(), 
      GetArenaForAllocation());
  }
  witch_generalskillid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_generalskillid().empty()) {
    witch_generalskillid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_generalskillid(), 
      GetArenaForAllocation());
  }
  witch_advancedskillid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_advancedskillid().empty()) {
    witch_advancedskillid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_advancedskillid(), 
      GetArenaForAllocation());
  }
  witch_uniqueskillid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_uniqueskillid().empty()) {
    witch_uniqueskillid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_uniqueskillid(), 
      GetArenaForAllocation());
  }
  witch_versedskillid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_versedskillid().empty()) {
    witch_versedskillid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_versedskillid(), 
      GetArenaForAllocation());
  }
  witch_awakeningskillid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_awakeningskillid().empty()) {
    witch_awakeningskillid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_awakeningskillid(), 
      GetArenaForAllocation());
  }
  witch_extraskillid1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_extraskillid1().empty()) {
    witch_extraskillid1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_extraskillid1(), 
      GetArenaForAllocation());
  }
  witch_extraskillid2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_extraskillid2().empty()) {
    witch_extraskillid2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_extraskillid2(), 
      GetArenaForAllocation());
  }
  ::memcpy(&witch_level_, &from.witch_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&witch_resist_) -
    reinterpret_cast<char*>(&witch_level_)) + sizeof(witch_resist_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.WitchInfo)
}

void WitchInfo::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
witch_role_res_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
witch_generalskillid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
witch_advancedskillid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
witch_uniqueskillid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
witch_versedskillid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
witch_awakeningskillid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
witch_extraskillid1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
witch_extraskillid2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&witch_level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&witch_resist_) -
    reinterpret_cast<char*>(&witch_level_)) + sizeof(witch_resist_));
}

WitchInfo::~WitchInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.WitchInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WitchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witch_role_res_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witch_generalskillid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witch_advancedskillid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witch_uniqueskillid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witch_versedskillid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witch_awakeningskillid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witch_extraskillid1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witch_extraskillid2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WitchInfo::ArenaDtor(void* object) {
  WitchInfo* _this = reinterpret_cast< WitchInfo* >(object);
  (void)_this;
}
void WitchInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WitchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WitchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.WitchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  witch_role_res_id_.ClearToEmpty();
  witch_generalskillid_.ClearToEmpty();
  witch_advancedskillid_.ClearToEmpty();
  witch_uniqueskillid_.ClearToEmpty();
  witch_versedskillid_.ClearToEmpty();
  witch_awakeningskillid_.ClearToEmpty();
  witch_extraskillid1_.ClearToEmpty();
  witch_extraskillid2_.ClearToEmpty();
  ::memset(&witch_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&witch_resist_) -
      reinterpret_cast<char*>(&witch_level_)) + sizeof(witch_resist_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WitchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes witch_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 witch_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          witch_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 witch_star_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          witch_star_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 witch_total_fc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          witch_total_fc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_role_res_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_witch_role_res_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 witch_hp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          witch_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 witch_defence = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          witch_defence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 witch_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          witch_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 witch_attackmin = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          witch_attackmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 witch_attackmax = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          witch_attackmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 witch_crit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          witch_crit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 witch_critdmg = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          witch_critdmg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 witch_hit = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          witch_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 witch_resist = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          witch_resist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_generalskillid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_witch_generalskillid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_advancedskillid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_witch_advancedskillid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_uniqueskillid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_witch_uniqueskillid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_versedskillid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_witch_versedskillid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_awakeningskillid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_witch_awakeningskillid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_extraskillid1 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_witch_extraskillid1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_extraskillid2 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_witch_extraskillid2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WitchInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.WitchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes witch_id = 1;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_witch_id(), target);
  }

  // int32 witch_level = 2;
  if (this->witch_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_witch_level(), target);
  }

  // int32 witch_star_level = 3;
  if (this->witch_star_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_witch_star_level(), target);
  }

  // int32 witch_total_fc = 4;
  if (this->witch_total_fc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_witch_total_fc(), target);
  }

  // bytes witch_role_res_id = 5;
  if (!this->witch_role_res_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_witch_role_res_id(), target);
  }

  // int32 witch_hp = 6;
  if (this->witch_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_witch_hp(), target);
  }

  // int32 witch_defence = 7;
  if (this->witch_defence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_witch_defence(), target);
  }

  // int32 witch_speed = 8;
  if (this->witch_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_witch_speed(), target);
  }

  // int32 witch_attackmin = 9;
  if (this->witch_attackmin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_witch_attackmin(), target);
  }

  // int32 witch_attackmax = 10;
  if (this->witch_attackmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_witch_attackmax(), target);
  }

  // int32 witch_crit = 11;
  if (this->witch_crit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_witch_crit(), target);
  }

  // int32 witch_critdmg = 12;
  if (this->witch_critdmg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_witch_critdmg(), target);
  }

  // int32 witch_hit = 13;
  if (this->witch_hit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_witch_hit(), target);
  }

  // int32 witch_resist = 14;
  if (this->witch_resist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_witch_resist(), target);
  }

  // bytes witch_generalskillid = 15;
  if (!this->witch_generalskillid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_witch_generalskillid(), target);
  }

  // bytes witch_advancedskillid = 16;
  if (!this->witch_advancedskillid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_witch_advancedskillid(), target);
  }

  // bytes witch_uniqueskillid = 17;
  if (!this->witch_uniqueskillid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_witch_uniqueskillid(), target);
  }

  // bytes witch_versedskillid = 18;
  if (!this->witch_versedskillid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_witch_versedskillid(), target);
  }

  // bytes witch_awakeningskillid = 19;
  if (!this->witch_awakeningskillid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_witch_awakeningskillid(), target);
  }

  // bytes witch_extraskillid1 = 20;
  if (!this->witch_extraskillid1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_witch_extraskillid1(), target);
  }

  // bytes witch_extraskillid2 = 21;
  if (!this->witch_extraskillid2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        21, this->_internal_witch_extraskillid2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.WitchInfo)
  return target;
}

size_t WitchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.WitchInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 1;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // bytes witch_role_res_id = 5;
  if (!this->witch_role_res_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_role_res_id());
  }

  // bytes witch_generalskillid = 15;
  if (!this->witch_generalskillid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_generalskillid());
  }

  // bytes witch_advancedskillid = 16;
  if (!this->witch_advancedskillid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_advancedskillid());
  }

  // bytes witch_uniqueskillid = 17;
  if (!this->witch_uniqueskillid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_uniqueskillid());
  }

  // bytes witch_versedskillid = 18;
  if (!this->witch_versedskillid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_versedskillid());
  }

  // bytes witch_awakeningskillid = 19;
  if (!this->witch_awakeningskillid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_awakeningskillid());
  }

  // bytes witch_extraskillid1 = 20;
  if (!this->witch_extraskillid1().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_extraskillid1());
  }

  // bytes witch_extraskillid2 = 21;
  if (!this->witch_extraskillid2().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_extraskillid2());
  }

  // int32 witch_level = 2;
  if (this->witch_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_witch_level());
  }

  // int32 witch_star_level = 3;
  if (this->witch_star_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_witch_star_level());
  }

  // int32 witch_total_fc = 4;
  if (this->witch_total_fc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_witch_total_fc());
  }

  // int32 witch_hp = 6;
  if (this->witch_hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_witch_hp());
  }

  // int32 witch_defence = 7;
  if (this->witch_defence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_witch_defence());
  }

  // int32 witch_speed = 8;
  if (this->witch_speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_witch_speed());
  }

  // int32 witch_attackmin = 9;
  if (this->witch_attackmin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_witch_attackmin());
  }

  // int32 witch_attackmax = 10;
  if (this->witch_attackmax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_witch_attackmax());
  }

  // int32 witch_crit = 11;
  if (this->witch_crit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_witch_crit());
  }

  // int32 witch_critdmg = 12;
  if (this->witch_critdmg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_witch_critdmg());
  }

  // int32 witch_hit = 13;
  if (this->witch_hit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_witch_hit());
  }

  // int32 witch_resist = 14;
  if (this->witch_resist() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_witch_resist());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WitchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.WitchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WitchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WitchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.WitchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.WitchInfo)
    MergeFrom(*source);
  }
}

void WitchInfo::MergeFrom(const WitchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.WitchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (!from.witch_role_res_id().empty()) {
    _internal_set_witch_role_res_id(from._internal_witch_role_res_id());
  }
  if (!from.witch_generalskillid().empty()) {
    _internal_set_witch_generalskillid(from._internal_witch_generalskillid());
  }
  if (!from.witch_advancedskillid().empty()) {
    _internal_set_witch_advancedskillid(from._internal_witch_advancedskillid());
  }
  if (!from.witch_uniqueskillid().empty()) {
    _internal_set_witch_uniqueskillid(from._internal_witch_uniqueskillid());
  }
  if (!from.witch_versedskillid().empty()) {
    _internal_set_witch_versedskillid(from._internal_witch_versedskillid());
  }
  if (!from.witch_awakeningskillid().empty()) {
    _internal_set_witch_awakeningskillid(from._internal_witch_awakeningskillid());
  }
  if (!from.witch_extraskillid1().empty()) {
    _internal_set_witch_extraskillid1(from._internal_witch_extraskillid1());
  }
  if (!from.witch_extraskillid2().empty()) {
    _internal_set_witch_extraskillid2(from._internal_witch_extraskillid2());
  }
  if (from.witch_level() != 0) {
    _internal_set_witch_level(from._internal_witch_level());
  }
  if (from.witch_star_level() != 0) {
    _internal_set_witch_star_level(from._internal_witch_star_level());
  }
  if (from.witch_total_fc() != 0) {
    _internal_set_witch_total_fc(from._internal_witch_total_fc());
  }
  if (from.witch_hp() != 0) {
    _internal_set_witch_hp(from._internal_witch_hp());
  }
  if (from.witch_defence() != 0) {
    _internal_set_witch_defence(from._internal_witch_defence());
  }
  if (from.witch_speed() != 0) {
    _internal_set_witch_speed(from._internal_witch_speed());
  }
  if (from.witch_attackmin() != 0) {
    _internal_set_witch_attackmin(from._internal_witch_attackmin());
  }
  if (from.witch_attackmax() != 0) {
    _internal_set_witch_attackmax(from._internal_witch_attackmax());
  }
  if (from.witch_crit() != 0) {
    _internal_set_witch_crit(from._internal_witch_crit());
  }
  if (from.witch_critdmg() != 0) {
    _internal_set_witch_critdmg(from._internal_witch_critdmg());
  }
  if (from.witch_hit() != 0) {
    _internal_set_witch_hit(from._internal_witch_hit());
  }
  if (from.witch_resist() != 0) {
    _internal_set_witch_resist(from._internal_witch_resist());
  }
}

void WitchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.WitchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitchInfo::CopyFrom(const WitchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.WitchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitchInfo::IsInitialized() const {
  return true;
}

void WitchInfo::InternalSwap(WitchInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_role_res_id_, GetArenaForAllocation(),
      &other->witch_role_res_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_generalskillid_, GetArenaForAllocation(),
      &other->witch_generalskillid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_advancedskillid_, GetArenaForAllocation(),
      &other->witch_advancedskillid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_uniqueskillid_, GetArenaForAllocation(),
      &other->witch_uniqueskillid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_versedskillid_, GetArenaForAllocation(),
      &other->witch_versedskillid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_awakeningskillid_, GetArenaForAllocation(),
      &other->witch_awakeningskillid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_extraskillid1_, GetArenaForAllocation(),
      &other->witch_extraskillid1_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_extraskillid2_, GetArenaForAllocation(),
      &other->witch_extraskillid2_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WitchInfo, witch_resist_)
      + sizeof(WitchInfo::witch_resist_)
      - PROTOBUF_FIELD_OFFSET(WitchInfo, witch_level_)>(
          reinterpret_cast<char*>(&witch_level_),
          reinterpret_cast<char*>(&other->witch_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WitchInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[4]);
}

// ===================================================================

class GuildInfo::_Internal {
 public:
};

GuildInfo::GuildInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.GuildInfo)
}
GuildInfo::GuildInfo(const GuildInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guild_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_guild_id().empty()) {
    guild_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guild_id(), 
      GetArenaForAllocation());
  }
  guild_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_guild_name().empty()) {
    guild_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guild_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.GuildInfo)
}

void GuildInfo::SharedCtor() {
guild_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
guild_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GuildInfo::~GuildInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.GuildInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GuildInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  guild_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guild_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GuildInfo::ArenaDtor(void* object) {
  GuildInfo* _this = reinterpret_cast< GuildInfo* >(object);
  (void)_this;
}
void GuildInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GuildInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GuildInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.GuildInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_id_.ClearToEmpty();
  guild_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuildInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_guild_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes guild_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_guild_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.GuildInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes guild_id = 1;
  if (!this->guild_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_guild_id(), target);
  }

  // bytes guild_name = 2;
  if (!this->guild_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_guild_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.GuildInfo)
  return target;
}

size_t GuildInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.GuildInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes guild_id = 1;
  if (!this->guild_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_guild_id());
  }

  // bytes guild_name = 2;
  if (!this->guild_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_guild_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.GuildInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.GuildInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.GuildInfo)
    MergeFrom(*source);
  }
}

void GuildInfo::MergeFrom(const GuildInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.GuildInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.guild_id().empty()) {
    _internal_set_guild_id(from._internal_guild_id());
  }
  if (!from.guild_name().empty()) {
    _internal_set_guild_name(from._internal_guild_name());
  }
}

void GuildInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.GuildInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildInfo::CopyFrom(const GuildInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.GuildInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildInfo::IsInitialized() const {
  return true;
}

void GuildInfo::InternalSwap(GuildInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &guild_id_, GetArenaForAllocation(),
      &other->guild_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &guild_name_, GetArenaForAllocation(),
      &other->guild_name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[5]);
}

// ===================================================================

class PlayerInfo::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const PlayerInfo* msg);
  static const ::KWMsg::GuildInfo& guild_info(const PlayerInfo* msg);
};

const ::KWMsg::Ident&
PlayerInfo::_Internal::player_id(const PlayerInfo* msg) {
  return *msg->player_id_;
}
const ::KWMsg::GuildInfo&
PlayerInfo::_Internal::guild_info(const PlayerInfo* msg) {
  return *msg->guild_info_;
}
void PlayerInfo::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  botarena_defensive_team_(arena),
  botarena_attack_team_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      botarena_defensive_team_(from.botarena_defensive_team_),
      botarena_attack_team_(from.botarena_attack_team_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  botaren_grade_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_botaren_grade().empty()) {
    botaren_grade_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_botaren_grade(), 
      GetArenaForAllocation());
  }
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name().empty()) {
    nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nick_name(), 
      GetArenaForAllocation());
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_url(), 
      GetArenaForAllocation());
  }
  avatar_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_frame_id().empty()) {
    avatar_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_frame_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_guild_info()) {
    guild_info_ = new ::KWMsg::GuildInfo(*from.guild_info_);
  } else {
    guild_info_ = nullptr;
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&shabow_badge_) -
    reinterpret_cast<char*>(&level_)) + sizeof(shabow_badge_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
botaren_grade_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shabow_badge_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(shabow_badge_));
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.PlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  botaren_grade_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete guild_info_;
}

void PlayerInfo::ArenaDtor(void* object) {
  PlayerInfo* _this = reinterpret_cast< PlayerInfo* >(object);
  (void)_this;
}
void PlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  botarena_defensive_team_.Clear();
  botarena_attack_team_.Clear();
  botaren_grade_.ClearToEmpty();
  nick_name_.ClearToEmpty();
  avatar_url_.ClearToEmpty();
  avatar_frame_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && guild_info_ != nullptr) {
    delete guild_info_;
  }
  guild_info_ = nullptr;
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shabow_badge_) -
      reinterpret_cast<char*>(&level_)) + sizeof(shabow_badge_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 botarena_pre_season_rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          botarena_pre_season_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 honor_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          honor_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 strategy_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          strategy_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 shabow_token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          shabow_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 shabow_badge = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          shabow_badge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes botaren_grade = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_botaren_grade();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nick_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatar_url = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatar_frame_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_avatar_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.GuildInfo guild_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_guild_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.WitchInfo botarena_defensive_team = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_botarena_defensive_team(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.WitchInfo botarena_attack_team = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_botarena_attack_team(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // int32 botarena_pre_season_rank = 3;
  if (this->botarena_pre_season_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_botarena_pre_season_rank(), target);
  }

  // int64 honor_point = 4;
  if (this->honor_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_honor_point(), target);
  }

  // int64 strategy_point = 5;
  if (this->strategy_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_strategy_point(), target);
  }

  // int64 shabow_token = 6;
  if (this->shabow_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_shabow_token(), target);
  }

  // int64 shabow_badge = 7;
  if (this->shabow_badge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_shabow_badge(), target);
  }

  // bytes botaren_grade = 8;
  if (!this->botaren_grade().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_botaren_grade(), target);
  }

  // bytes nick_name = 9;
  if (!this->nick_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_nick_name(), target);
  }

  // bytes avatar_url = 10;
  if (!this->avatar_url().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_avatar_url(), target);
  }

  // bytes avatar_frame_id = 11;
  if (!this->avatar_frame_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_avatar_frame_id(), target);
  }

  // .KWMsg.GuildInfo guild_info = 12;
  if (this->has_guild_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::guild_info(this), target, stream);
  }

  // repeated .KWMsg.WitchInfo botarena_defensive_team = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_botarena_defensive_team_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_botarena_defensive_team(i), target, stream);
  }

  // repeated .KWMsg.WitchInfo botarena_attack_team = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_botarena_attack_team_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_botarena_attack_team(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.WitchInfo botarena_defensive_team = 13;
  total_size += 1UL * this->_internal_botarena_defensive_team_size();
  for (const auto& msg : this->botarena_defensive_team_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.WitchInfo botarena_attack_team = 14;
  total_size += 1UL * this->_internal_botarena_attack_team_size();
  for (const auto& msg : this->botarena_attack_team_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes botaren_grade = 8;
  if (!this->botaren_grade().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_botaren_grade());
  }

  // bytes nick_name = 9;
  if (!this->nick_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nick_name());
  }

  // bytes avatar_url = 10;
  if (!this->avatar_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar_url());
  }

  // bytes avatar_frame_id = 11;
  if (!this->avatar_frame_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar_frame_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.GuildInfo guild_info = 12;
  if (this->has_guild_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guild_info_);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 botarena_pre_season_rank = 3;
  if (this->botarena_pre_season_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_botarena_pre_season_rank());
  }

  // int64 honor_point = 4;
  if (this->honor_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_honor_point());
  }

  // int64 strategy_point = 5;
  if (this->strategy_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_strategy_point());
  }

  // int64 shabow_token = 6;
  if (this->shabow_token() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shabow_token());
  }

  // int64 shabow_badge = 7;
  if (this->shabow_badge() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shabow_badge());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  botarena_defensive_team_.MergeFrom(from.botarena_defensive_team_);
  botarena_attack_team_.MergeFrom(from.botarena_attack_team_);
  if (!from.botaren_grade().empty()) {
    _internal_set_botaren_grade(from._internal_botaren_grade());
  }
  if (!from.nick_name().empty()) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (!from.avatar_url().empty()) {
    _internal_set_avatar_url(from._internal_avatar_url());
  }
  if (!from.avatar_frame_id().empty()) {
    _internal_set_avatar_frame_id(from._internal_avatar_frame_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_guild_info()) {
    _internal_mutable_guild_info()->::KWMsg::GuildInfo::MergeFrom(from._internal_guild_info());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.botarena_pre_season_rank() != 0) {
    _internal_set_botarena_pre_season_rank(from._internal_botarena_pre_season_rank());
  }
  if (from.honor_point() != 0) {
    _internal_set_honor_point(from._internal_honor_point());
  }
  if (from.strategy_point() != 0) {
    _internal_set_strategy_point(from._internal_strategy_point());
  }
  if (from.shabow_token() != 0) {
    _internal_set_shabow_token(from._internal_shabow_token());
  }
  if (from.shabow_badge() != 0) {
    _internal_set_shabow_badge(from._internal_shabow_badge());
  }
}

void PlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  botarena_defensive_team_.InternalSwap(&other->botarena_defensive_team_);
  botarena_attack_team_.InternalSwap(&other->botarena_attack_team_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &botaren_grade_, GetArenaForAllocation(),
      &other->botaren_grade_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nick_name_, GetArenaForAllocation(),
      &other->nick_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_url_, GetArenaForAllocation(),
      &other->avatar_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_frame_id_, GetArenaForAllocation(),
      &other->avatar_frame_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, shabow_badge_)
      + sizeof(PlayerInfo::shabow_badge_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[6]);
}

// ===================================================================

class DrawCardInfo::_Internal {
 public:
};

DrawCardInfo::DrawCardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.DrawCardInfo)
}
DrawCardInfo::DrawCardInfo(const DrawCardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  is_debris_ = from.is_debris_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.DrawCardInfo)
}

void DrawCardInfo::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
is_debris_ = 0;
}

DrawCardInfo::~DrawCardInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.DrawCardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawCardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DrawCardInfo::ArenaDtor(void* object) {
  DrawCardInfo* _this = reinterpret_cast< DrawCardInfo* >(object);
  (void)_this;
}
void DrawCardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawCardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrawCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.DrawCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  is_debris_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawCardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes witch_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_debris = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_debris_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawCardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.DrawCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes witch_id = 1;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_witch_id(), target);
  }

  // int32 is_debris = 2;
  if (this->is_debris() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_is_debris(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.DrawCardInfo)
  return target;
}

size_t DrawCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.DrawCardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 1;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // int32 is_debris = 2;
  if (this->is_debris() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_debris());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawCardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.DrawCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawCardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawCardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.DrawCardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.DrawCardInfo)
    MergeFrom(*source);
  }
}

void DrawCardInfo::MergeFrom(const DrawCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.DrawCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (from.is_debris() != 0) {
    _internal_set_is_debris(from._internal_is_debris());
  }
}

void DrawCardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.DrawCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawCardInfo::CopyFrom(const DrawCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.DrawCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawCardInfo::IsInitialized() const {
  return true;
}

void DrawCardInfo::InternalSwap(DrawCardInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  swap(is_debris_, other->is_debris_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawCardInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[7]);
}

// ===================================================================

class RewardList::_Internal {
 public:
};

RewardList::RewardList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.RewardList)
}
RewardList::RewardList(const RewardList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.RewardList)
}

void RewardList::SharedCtor() {
}

RewardList::~RewardList() {
  // @@protoc_insertion_point(destructor:KWMsg.RewardList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RewardList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RewardList::ArenaDtor(void* object) {
  RewardList* _this = reinterpret_cast< RewardList* >(object);
  (void)_this;
}
void RewardList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewardList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RewardList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.RewardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewardList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.RewardInfo list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.RewardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.RewardList)
  return target;
}

size_t RewardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.RewardList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.RewardList)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.RewardList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.RewardList)
    MergeFrom(*source);
  }
}

void RewardList::MergeFrom(const RewardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.RewardList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void RewardList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.RewardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardList::CopyFrom(const RewardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.RewardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardList::IsInitialized() const {
  return true;
}

void RewardList::InternalSwap(RewardList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[8]);
}

// ===================================================================

class ReqAckLagTest::_Internal {
 public:
};

ReqAckLagTest::ReqAckLagTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAckLagTest)
}
ReqAckLagTest::ReqAckLagTest(const ReqAckLagTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAckLagTest)
}

void ReqAckLagTest::SharedCtor() {
}

ReqAckLagTest::~ReqAckLagTest() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAckLagTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAckLagTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqAckLagTest::ArenaDtor(void* object) {
  ReqAckLagTest* _this = reinterpret_cast< ReqAckLagTest* >(object);
  (void)_this;
}
void ReqAckLagTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAckLagTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAckLagTest::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAckLagTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAckLagTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckLagTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAckLagTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAckLagTest)
  return target;
}

size_t ReqAckLagTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAckLagTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckLagTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAckLagTest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckLagTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckLagTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAckLagTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAckLagTest)
    MergeFrom(*source);
  }
}

void ReqAckLagTest::MergeFrom(const ReqAckLagTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAckLagTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqAckLagTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAckLagTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckLagTest::CopyFrom(const ReqAckLagTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAckLagTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckLagTest::IsInitialized() const {
  return true;
}

void ReqAckLagTest::InternalSwap(ReqAckLagTest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckLagTest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[9]);
}

// ===================================================================

class ReqAckHeartBeat::_Internal {
 public:
};

ReqAckHeartBeat::ReqAckHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAckHeartBeat)
}
ReqAckHeartBeat::ReqAckHeartBeat(const ReqAckHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAckHeartBeat)
}

void ReqAckHeartBeat::SharedCtor() {
}

ReqAckHeartBeat::~ReqAckHeartBeat() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAckHeartBeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAckHeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqAckHeartBeat::ArenaDtor(void* object) {
  ReqAckHeartBeat* _this = reinterpret_cast< ReqAckHeartBeat* >(object);
  (void)_this;
}
void ReqAckHeartBeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAckHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAckHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAckHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAckHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckHeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAckHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAckHeartBeat)
  return target;
}

size_t ReqAckHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAckHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAckHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAckHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAckHeartBeat)
    MergeFrom(*source);
  }
}

void ReqAckHeartBeat::MergeFrom(const ReqAckHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAckHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqAckHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAckHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckHeartBeat::CopyFrom(const ReqAckHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAckHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckHeartBeat::IsInitialized() const {
  return true;
}

void ReqAckHeartBeat::InternalSwap(ReqAckHeartBeat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckHeartBeat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[10]);
}

// ===================================================================

class ReqLeaveGameServer::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqLeaveGameServer* msg);
};

const ::KWMsg::Ident&
ReqLeaveGameServer::_Internal::player_id(const ReqLeaveGameServer* msg) {
  return *msg->player_id_;
}
void ReqLeaveGameServer::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqLeaveGameServer::ReqLeaveGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqLeaveGameServer)
}
ReqLeaveGameServer::ReqLeaveGameServer(const ReqLeaveGameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqLeaveGameServer)
}

void ReqLeaveGameServer::SharedCtor() {
player_id_ = nullptr;
}

ReqLeaveGameServer::~ReqLeaveGameServer() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqLeaveGameServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqLeaveGameServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqLeaveGameServer::ArenaDtor(void* object) {
  ReqLeaveGameServer* _this = reinterpret_cast< ReqLeaveGameServer* >(object);
  (void)_this;
}
void ReqLeaveGameServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqLeaveGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqLeaveGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqLeaveGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqLeaveGameServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqLeaveGameServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqLeaveGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqLeaveGameServer)
  return target;
}

size_t ReqLeaveGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqLeaveGameServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqLeaveGameServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLeaveGameServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqLeaveGameServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqLeaveGameServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqLeaveGameServer)
    MergeFrom(*source);
  }
}

void ReqLeaveGameServer::MergeFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqLeaveGameServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveGameServer::CopyFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveGameServer::IsInitialized() const {
  return true;
}

void ReqLeaveGameServer::InternalSwap(ReqLeaveGameServer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqLeaveGameServer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[11]);
}

// ===================================================================

class PlayerEntryInfo::_Internal {
 public:
  static const ::KWMsg::Ident& object_guid(const PlayerEntryInfo* msg);
  static const ::KWMsg::Vector3& pos(const PlayerEntryInfo* msg);
};

const ::KWMsg::Ident&
PlayerEntryInfo::_Internal::object_guid(const PlayerEntryInfo* msg) {
  return *msg->object_guid_;
}
const ::KWMsg::Vector3&
PlayerEntryInfo::_Internal::pos(const PlayerEntryInfo* msg) {
  return *msg->pos_;
}
void PlayerEntryInfo::clear_object_guid() {
  if (GetArenaForAllocation() == nullptr && object_guid_ != nullptr) {
    delete object_guid_;
  }
  object_guid_ = nullptr;
}
void PlayerEntryInfo::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
PlayerEntryInfo::PlayerEntryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PlayerEntryInfo)
}
PlayerEntryInfo::PlayerEntryInfo(const PlayerEntryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_id().empty()) {
    config_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_config_id(), 
      GetArenaForAllocation());
  }
  class_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_class_id().empty()) {
    class_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_class_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_object_guid()) {
    object_guid_ = new ::KWMsg::Ident(*from.object_guid_);
  } else {
    object_guid_ = nullptr;
  }
  if (from._internal_has_pos()) {
    pos_ = new ::KWMsg::Vector3(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  scene_id_ = from.scene_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.PlayerEntryInfo)
}

void PlayerEntryInfo::SharedCtor() {
config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
class_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_guid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&object_guid_)) + sizeof(scene_id_));
}

PlayerEntryInfo::~PlayerEntryInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.PlayerEntryInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerEntryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_guid_;
  if (this != internal_default_instance()) delete pos_;
}

void PlayerEntryInfo::ArenaDtor(void* object) {
  PlayerEntryInfo* _this = reinterpret_cast< PlayerEntryInfo* >(object);
  (void)_this;
}
void PlayerEntryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerEntryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerEntryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PlayerEntryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_id_.ClearToEmpty();
  class_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && object_guid_ != nullptr) {
    delete object_guid_;
  }
  object_guid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  scene_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerEntryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident object_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Vector3 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes config_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_config_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scene_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes class_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_class_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerEntryInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PlayerEntryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object_guid(this), target, stream);
  }

  // .KWMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // bytes config_id = 3;
  if (!this->config_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_config_id(), target);
  }

  // int32 scene_id = 4;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_scene_id(), target);
  }

  // bytes class_id = 5;
  if (!this->class_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_class_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PlayerEntryInfo)
  return target;
}

size_t PlayerEntryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PlayerEntryInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes config_id = 3;
  if (!this->config_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_config_id());
  }

  // bytes class_id = 5;
  if (!this->class_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_class_id());
  }

  // .KWMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_guid_);
  }

  // .KWMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 scene_id = 4;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerEntryInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PlayerEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEntryInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerEntryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PlayerEntryInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PlayerEntryInfo)
    MergeFrom(*source);
  }
}

void PlayerEntryInfo::MergeFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PlayerEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.config_id().empty()) {
    _internal_set_config_id(from._internal_config_id());
  }
  if (!from.class_id().empty()) {
    _internal_set_class_id(from._internal_class_id());
  }
  if (from.has_object_guid()) {
    _internal_mutable_object_guid()->::KWMsg::Ident::MergeFrom(from._internal_object_guid());
  }
  if (from.has_pos()) {
    _internal_mutable_pos()->::KWMsg::Vector3::MergeFrom(from._internal_pos());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
}

void PlayerEntryInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEntryInfo::CopyFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEntryInfo::IsInitialized() const {
  return true;
}

void PlayerEntryInfo::InternalSwap(PlayerEntryInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &config_id_, GetArenaForAllocation(),
      &other->config_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &class_id_, GetArenaForAllocation(),
      &other->class_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerEntryInfo, scene_id_)
      + sizeof(PlayerEntryInfo::scene_id_)
      - PROTOBUF_FIELD_OFFSET(PlayerEntryInfo, object_guid_)>(
          reinterpret_cast<char*>(&object_guid_),
          reinterpret_cast<char*>(&other->object_guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerEntryInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[12]);
}

// ===================================================================

class AckPlayerEntryList::_Internal {
 public:
};

AckPlayerEntryList::AckPlayerEntryList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckPlayerEntryList)
}
AckPlayerEntryList::AckPlayerEntryList(const AckPlayerEntryList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckPlayerEntryList)
}

void AckPlayerEntryList::SharedCtor() {
}

AckPlayerEntryList::~AckPlayerEntryList() {
  // @@protoc_insertion_point(destructor:KWMsg.AckPlayerEntryList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckPlayerEntryList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckPlayerEntryList::ArenaDtor(void* object) {
  AckPlayerEntryList* _this = reinterpret_cast< AckPlayerEntryList* >(object);
  (void)_this;
}
void AckPlayerEntryList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckPlayerEntryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckPlayerEntryList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckPlayerEntryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckPlayerEntryList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.PlayerEntryInfo object_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckPlayerEntryList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckPlayerEntryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.PlayerEntryInfo object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_object_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckPlayerEntryList)
  return target;
}

size_t AckPlayerEntryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckPlayerEntryList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.PlayerEntryInfo object_list = 1;
  total_size += 1UL * this->_internal_object_list_size();
  for (const auto& msg : this->object_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPlayerEntryList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckPlayerEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerEntryList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckPlayerEntryList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckPlayerEntryList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckPlayerEntryList)
    MergeFrom(*source);
  }
}

void AckPlayerEntryList::MergeFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckPlayerEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerEntryList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerEntryList::CopyFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerEntryList::IsInitialized() const {
  return true;
}

void AckPlayerEntryList::InternalSwap(AckPlayerEntryList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  object_list_.InternalSwap(&other->object_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckPlayerEntryList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[13]);
}

// ===================================================================

class AckPlayerLeaveList::_Internal {
 public:
};

void AckPlayerLeaveList::clear_object_list() {
  object_list_.Clear();
}
AckPlayerLeaveList::AckPlayerLeaveList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckPlayerLeaveList)
}
AckPlayerLeaveList::AckPlayerLeaveList(const AckPlayerLeaveList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckPlayerLeaveList)
}

void AckPlayerLeaveList::SharedCtor() {
}

AckPlayerLeaveList::~AckPlayerLeaveList() {
  // @@protoc_insertion_point(destructor:KWMsg.AckPlayerLeaveList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckPlayerLeaveList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckPlayerLeaveList::ArenaDtor(void* object) {
  AckPlayerLeaveList* _this = reinterpret_cast< AckPlayerLeaveList* >(object);
  (void)_this;
}
void AckPlayerLeaveList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckPlayerLeaveList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckPlayerLeaveList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckPlayerLeaveList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckPlayerLeaveList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.Ident object_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckPlayerLeaveList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckPlayerLeaveList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.Ident object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_object_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckPlayerLeaveList)
  return target;
}

size_t AckPlayerLeaveList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckPlayerLeaveList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.Ident object_list = 1;
  total_size += 1UL * this->_internal_object_list_size();
  for (const auto& msg : this->object_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPlayerLeaveList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckPlayerLeaveList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerLeaveList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckPlayerLeaveList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckPlayerLeaveList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckPlayerLeaveList)
    MergeFrom(*source);
  }
}

void AckPlayerLeaveList::MergeFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckPlayerLeaveList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerLeaveList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerLeaveList::CopyFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerLeaveList::IsInitialized() const {
  return true;
}

void AckPlayerLeaveList::InternalSwap(AckPlayerLeaveList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  object_list_.InternalSwap(&other->object_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckPlayerLeaveList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[14]);
}

// ===================================================================

class AckPlayerDataFinished::_Internal {
 public:
};

void AckPlayerDataFinished::clear_object_list() {
  object_list_.Clear();
}
AckPlayerDataFinished::AckPlayerDataFinished(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckPlayerDataFinished)
}
AckPlayerDataFinished::AckPlayerDataFinished(const AckPlayerDataFinished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckPlayerDataFinished)
}

void AckPlayerDataFinished::SharedCtor() {
}

AckPlayerDataFinished::~AckPlayerDataFinished() {
  // @@protoc_insertion_point(destructor:KWMsg.AckPlayerDataFinished)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckPlayerDataFinished::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckPlayerDataFinished::ArenaDtor(void* object) {
  AckPlayerDataFinished* _this = reinterpret_cast< AckPlayerDataFinished* >(object);
  (void)_this;
}
void AckPlayerDataFinished::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckPlayerDataFinished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckPlayerDataFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckPlayerDataFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckPlayerDataFinished::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.Ident object_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckPlayerDataFinished::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckPlayerDataFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.Ident object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_object_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckPlayerDataFinished)
  return target;
}

size_t AckPlayerDataFinished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckPlayerDataFinished)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.Ident object_list = 1;
  total_size += 1UL * this->_internal_object_list_size();
  for (const auto& msg : this->object_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPlayerDataFinished::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckPlayerDataFinished)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerDataFinished* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckPlayerDataFinished>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckPlayerDataFinished)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckPlayerDataFinished)
    MergeFrom(*source);
  }
}

void AckPlayerDataFinished::MergeFrom(const AckPlayerDataFinished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckPlayerDataFinished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerDataFinished::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckPlayerDataFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerDataFinished::CopyFrom(const AckPlayerDataFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckPlayerDataFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerDataFinished::IsInitialized() const {
  return true;
}

void AckPlayerDataFinished::InternalSwap(AckPlayerDataFinished* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  object_list_.InternalSwap(&other->object_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckPlayerDataFinished::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[15]);
}

// ===================================================================

class PosSyncUnit::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const PosSyncUnit* msg);
  static const ::KWMsg::Vector3& pos(const PosSyncUnit* msg);
  static const ::KWMsg::Vector3& orientation(const PosSyncUnit* msg);
};

const ::KWMsg::Ident&
PosSyncUnit::_Internal::player_id(const PosSyncUnit* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Vector3&
PosSyncUnit::_Internal::pos(const PosSyncUnit* msg) {
  return *msg->pos_;
}
const ::KWMsg::Vector3&
PosSyncUnit::_Internal::orientation(const PosSyncUnit* msg) {
  return *msg->orientation_;
}
void PosSyncUnit::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void PosSyncUnit::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
void PosSyncUnit::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
PosSyncUnit::PosSyncUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PosSyncUnit)
}
PosSyncUnit::PosSyncUnit(const PosSyncUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_pos()) {
    pos_ = new ::KWMsg::Vector3(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::KWMsg::Vector3(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&status_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.PosSyncUnit)
}

void PosSyncUnit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(type_));
}

PosSyncUnit::~PosSyncUnit() {
  // @@protoc_insertion_point(destructor:KWMsg.PosSyncUnit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PosSyncUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete orientation_;
}

void PosSyncUnit::ArenaDtor(void* object) {
  PosSyncUnit* _this = reinterpret_cast< PosSyncUnit* >(object);
  (void)_this;
}
void PosSyncUnit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PosSyncUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PosSyncUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PosSyncUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&status_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PosSyncUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Vector3 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Vector3 orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.PosSyncUnit.EMoveType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::KWMsg::PosSyncUnit_EMoveType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PosSyncUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PosSyncUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // .KWMsg.Vector3 orientation = 3;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_status(), target);
  }

  // .KWMsg.PosSyncUnit.EMoveType type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PosSyncUnit)
  return target;
}

size_t PosSyncUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PosSyncUnit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .KWMsg.Vector3 orientation = 3;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // .KWMsg.PosSyncUnit.EMoveType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PosSyncUnit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PosSyncUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const PosSyncUnit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PosSyncUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PosSyncUnit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PosSyncUnit)
    MergeFrom(*source);
  }
}

void PosSyncUnit::MergeFrom(const PosSyncUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PosSyncUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_pos()) {
    _internal_mutable_pos()->::KWMsg::Vector3::MergeFrom(from._internal_pos());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::KWMsg::Vector3::MergeFrom(from._internal_orientation());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PosSyncUnit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PosSyncUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosSyncUnit::CopyFrom(const PosSyncUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PosSyncUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosSyncUnit::IsInitialized() const {
  return true;
}

void PosSyncUnit::InternalSwap(PosSyncUnit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PosSyncUnit, type_)
      + sizeof(PosSyncUnit::type_)
      - PROTOBUF_FIELD_OFFSET(PosSyncUnit, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PosSyncUnit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[16]);
}

// ===================================================================

class ReqAckPlayerPosSync::_Internal {
 public:
  static const ::KWMsg::PosSyncUnit& sync_unit(const ReqAckPlayerPosSync* msg);
};

const ::KWMsg::PosSyncUnit&
ReqAckPlayerPosSync::_Internal::sync_unit(const ReqAckPlayerPosSync* msg) {
  return *msg->sync_unit_;
}
ReqAckPlayerPosSync::ReqAckPlayerPosSync(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAckPlayerPosSync)
}
ReqAckPlayerPosSync::ReqAckPlayerPosSync(const ReqAckPlayerPosSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sync_unit()) {
    sync_unit_ = new ::KWMsg::PosSyncUnit(*from.sync_unit_);
  } else {
    sync_unit_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAckPlayerPosSync)
}

void ReqAckPlayerPosSync::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sync_unit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&sync_unit_)) + sizeof(sequence_));
}

ReqAckPlayerPosSync::~ReqAckPlayerPosSync() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAckPlayerPosSync)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAckPlayerPosSync::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sync_unit_;
}

void ReqAckPlayerPosSync::ArenaDtor(void* object) {
  ReqAckPlayerPosSync* _this = reinterpret_cast< ReqAckPlayerPosSync* >(object);
  (void)_this;
}
void ReqAckPlayerPosSync::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAckPlayerPosSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAckPlayerPosSync::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAckPlayerPosSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && sync_unit_ != nullptr) {
    delete sync_unit_;
  }
  sync_unit_ = nullptr;
  sequence_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAckPlayerPosSync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.PosSyncUnit sync_unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckPlayerPosSync::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAckPlayerPosSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sequence(), target);
  }

  // .KWMsg.PosSyncUnit sync_unit = 2;
  if (this->has_sync_unit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sync_unit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAckPlayerPosSync)
  return target;
}

size_t ReqAckPlayerPosSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAckPlayerPosSync)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.PosSyncUnit sync_unit = 2;
  if (this->has_sync_unit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sync_unit_);
  }

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckPlayerPosSync::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAckPlayerPosSync)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerPosSync* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckPlayerPosSync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAckPlayerPosSync)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAckPlayerPosSync)
    MergeFrom(*source);
  }
}

void ReqAckPlayerPosSync::MergeFrom(const ReqAckPlayerPosSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAckPlayerPosSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sync_unit()) {
    _internal_mutable_sync_unit()->::KWMsg::PosSyncUnit::MergeFrom(from._internal_sync_unit());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void ReqAckPlayerPosSync::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAckPlayerPosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerPosSync::CopyFrom(const ReqAckPlayerPosSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAckPlayerPosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerPosSync::IsInitialized() const {
  return true;
}

void ReqAckPlayerPosSync::InternalSwap(ReqAckPlayerPosSync* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqAckPlayerPosSync, sequence_)
      + sizeof(ReqAckPlayerPosSync::sequence_)
      - PROTOBUF_FIELD_OFFSET(ReqAckPlayerPosSync, sync_unit_)>(
          reinterpret_cast<char*>(&sync_unit_),
          reinterpret_cast<char*>(&other->sync_unit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckPlayerPosSync::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[17]);
}

// ===================================================================

class ReqSwapScene::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqSwapScene* msg);
};

const ::KWMsg::Ident&
ReqSwapScene::_Internal::player_id(const ReqSwapScene* msg) {
  return *msg->player_id_;
}
void ReqSwapScene::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqSwapScene::ReqSwapScene(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqSwapScene)
}
ReqSwapScene::ReqSwapScene(const ReqSwapScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  scene_id_ = from.scene_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqSwapScene)
}

void ReqSwapScene::SharedCtor() {
args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(scene_id_));
}

ReqSwapScene::~ReqSwapScene() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqSwapScene)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqSwapScene::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqSwapScene::ArenaDtor(void* object) {
  ReqSwapScene* _this = reinterpret_cast< ReqSwapScene* >(object);
  (void)_this;
}
void ReqSwapScene::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqSwapScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSwapScene::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqSwapScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  scene_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSwapScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSwapScene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqSwapScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene_id(), target);
  }

  // bytes args = 3;
  if (!this->args().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqSwapScene)
  return target;
}

size_t ReqSwapScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqSwapScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes args = 3;
  if (!this->args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSwapScene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSwapScene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSwapScene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqSwapScene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqSwapScene)
    MergeFrom(*source);
  }
}

void ReqSwapScene::MergeFrom(const ReqSwapScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.args().empty()) {
    _internal_set_args(from._internal_args());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
}

void ReqSwapScene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSwapScene::CopyFrom(const ReqSwapScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSwapScene::IsInitialized() const {
  return true;
}

void ReqSwapScene::InternalSwap(ReqSwapScene* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &args_, GetArenaForAllocation(),
      &other->args_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqSwapScene, scene_id_)
      + sizeof(ReqSwapScene::scene_id_)
      - PROTOBUF_FIELD_OFFSET(ReqSwapScene, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSwapScene::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[18]);
}

// ===================================================================

class AckSwapScene::_Internal {
 public:
};

AckSwapScene::AckSwapScene(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckSwapScene)
}
AckSwapScene::AckSwapScene(const AckSwapScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckSwapScene)
}

void AckSwapScene::SharedCtor() {
args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(scene_id_));
}

AckSwapScene::~AckSwapScene() {
  // @@protoc_insertion_point(destructor:KWMsg.AckSwapScene)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckSwapScene::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckSwapScene::ArenaDtor(void* object) {
  AckSwapScene* _this = reinterpret_cast< AckSwapScene* >(object);
  (void)_this;
}
void AckSwapScene::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckSwapScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckSwapScene::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckSwapScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(scene_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckSwapScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSwapScene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckSwapScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene_id(), target);
  }

  // bytes args = 3;
  if (!this->args().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckSwapScene)
  return target;
}

size_t AckSwapScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckSwapScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes args = 3;
  if (!this->args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSwapScene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSwapScene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSwapScene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckSwapScene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckSwapScene)
    MergeFrom(*source);
  }
}

void AckSwapScene::MergeFrom(const AckSwapScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.args().empty()) {
    _internal_set_args(from._internal_args());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
}

void AckSwapScene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSwapScene::CopyFrom(const AckSwapScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSwapScene::IsInitialized() const {
  return true;
}

void AckSwapScene::InternalSwap(AckSwapScene* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &args_, GetArenaForAllocation(),
      &other->args_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckSwapScene, scene_id_)
      + sizeof(AckSwapScene::scene_id_)
      - PROTOBUF_FIELD_OFFSET(AckSwapScene, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSwapScene::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[19]);
}

// ===================================================================

class AckSwapSceneNotify::_Internal {
 public:
};

AckSwapSceneNotify::AckSwapSceneNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckSwapSceneNotify)
}
AckSwapSceneNotify::AckSwapSceneNotify(const AckSwapSceneNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckSwapSceneNotify)
}

void AckSwapSceneNotify::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(scene_id_));
}

AckSwapSceneNotify::~AckSwapSceneNotify() {
  // @@protoc_insertion_point(destructor:KWMsg.AckSwapSceneNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckSwapSceneNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckSwapSceneNotify::ArenaDtor(void* object) {
  AckSwapSceneNotify* _this = reinterpret_cast< AckSwapSceneNotify* >(object);
  (void)_this;
}
void AckSwapSceneNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckSwapSceneNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckSwapSceneNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckSwapSceneNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(scene_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckSwapSceneNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSwapSceneNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckSwapSceneNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckSwapSceneNotify)
  return target;
}

size_t AckSwapSceneNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckSwapSceneNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSwapSceneNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckSwapSceneNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSwapSceneNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSwapSceneNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckSwapSceneNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckSwapSceneNotify)
    MergeFrom(*source);
  }
}

void AckSwapSceneNotify::MergeFrom(const AckSwapSceneNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckSwapSceneNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
}

void AckSwapSceneNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckSwapSceneNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSwapSceneNotify::CopyFrom(const AckSwapSceneNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckSwapSceneNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSwapSceneNotify::IsInitialized() const {
  return true;
}

void AckSwapSceneNotify::InternalSwap(AckSwapSceneNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckSwapSceneNotify, scene_id_)
      + sizeof(AckSwapSceneNotify::scene_id_)
      - PROTOBUF_FIELD_OFFSET(AckSwapSceneNotify, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSwapSceneNotify::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[20]);
}

// ===================================================================

class ReqAckPlayerChat::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqAckPlayerChat* msg);
};

const ::KWMsg::Ident&
ReqAckPlayerChat::_Internal::player_id(const ReqAckPlayerChat* msg) {
  return *msg->player_id_;
}
void ReqAckPlayerChat::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqAckPlayerChat::ReqAckPlayerChat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAckPlayerChat)
}
ReqAckPlayerChat::ReqAckPlayerChat(const ReqAckPlayerChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArenaForAllocation());
  }
  avatar_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_frame().empty()) {
    avatar_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_frame(), 
      GetArenaForAllocation());
  }
  chat_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_info().empty()) {
    chat_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_info(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&chat_channel_, &from.chat_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_type_) -
    reinterpret_cast<char*>(&chat_channel_)) + sizeof(chat_type_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAckPlayerChat)
}

void ReqAckPlayerChat::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
chat_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(chat_type_));
}

ReqAckPlayerChat::~ReqAckPlayerChat() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAckPlayerChat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAckPlayerChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqAckPlayerChat::ArenaDtor(void* object) {
  ReqAckPlayerChat* _this = reinterpret_cast< ReqAckPlayerChat* >(object);
  (void)_this;
}
void ReqAckPlayerChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAckPlayerChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAckPlayerChat::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAckPlayerChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  avatar_.ClearToEmpty();
  avatar_frame_.ClearToEmpty();
  chat_info_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&chat_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_type_) -
      reinterpret_cast<char*>(&chat_channel_)) + sizeof(chat_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAckPlayerChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatar_frame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_avatar_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chat_channel(static_cast<::KWMsg::ReqAckPlayerChat_EGameChatChannel>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.ReqAckPlayerChat.EGameChatType chat_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chat_type(static_cast<::KWMsg::ReqAckPlayerChat_EGameChatType>(val));
        } else goto handle_unusual;
        continue;
      // bytes chat_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_chat_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckPlayerChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAckPlayerChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes nickname = 2;
  if (!this->nickname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // bytes avatar = 3;
  if (!this->avatar().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_avatar(), target);
  }

  // bytes avatar_frame = 4;
  if (!this->avatar_frame().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_avatar_frame(), target);
  }

  // .KWMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 5;
  if (this->chat_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_chat_channel(), target);
  }

  // .KWMsg.ReqAckPlayerChat.EGameChatType chat_type = 6;
  if (this->chat_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_chat_type(), target);
  }

  // bytes chat_info = 7;
  if (!this->chat_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_chat_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAckPlayerChat)
  return target;
}

size_t ReqAckPlayerChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAckPlayerChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nickname = 2;
  if (!this->nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nickname());
  }

  // bytes avatar = 3;
  if (!this->avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar());
  }

  // bytes avatar_frame = 4;
  if (!this->avatar_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar_frame());
  }

  // bytes chat_info = 7;
  if (!this->chat_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_info());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 5;
  if (this->chat_channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chat_channel());
  }

  // .KWMsg.ReqAckPlayerChat.EGameChatType chat_type = 6;
  if (this->chat_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chat_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckPlayerChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAckPlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckPlayerChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAckPlayerChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAckPlayerChat)
    MergeFrom(*source);
  }
}

void ReqAckPlayerChat::MergeFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAckPlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (!from.avatar().empty()) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (!from.avatar_frame().empty()) {
    _internal_set_avatar_frame(from._internal_avatar_frame());
  }
  if (!from.chat_info().empty()) {
    _internal_set_chat_info(from._internal_chat_info());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.chat_channel() != 0) {
    _internal_set_chat_channel(from._internal_chat_channel());
  }
  if (from.chat_type() != 0) {
    _internal_set_chat_type(from._internal_chat_type());
  }
}

void ReqAckPlayerChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerChat::CopyFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerChat::IsInitialized() const {
  return true;
}

void ReqAckPlayerChat::InternalSwap(ReqAckPlayerChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, GetArenaForAllocation(),
      &other->nickname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_, GetArenaForAllocation(),
      &other->avatar_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_frame_, GetArenaForAllocation(),
      &other->avatar_frame_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_info_, GetArenaForAllocation(),
      &other->chat_info_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqAckPlayerChat, chat_type_)
      + sizeof(ReqAckPlayerChat::chat_type_)
      - PROTOBUF_FIELD_OFFSET(ReqAckPlayerChat, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckPlayerChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[21]);
}

// ===================================================================

class ReqCreateKcpObject::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqCreateKcpObject* msg);
};

const ::KWMsg::Ident&
ReqCreateKcpObject::_Internal::player_id(const ReqCreateKcpObject* msg) {
  return *msg->player_id_;
}
void ReqCreateKcpObject::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqCreateKcpObject::ReqCreateKcpObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCreateKcpObject)
}
ReqCreateKcpObject::ReqCreateKcpObject(const ReqCreateKcpObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCreateKcpObject)
}

void ReqCreateKcpObject::SharedCtor() {
player_id_ = nullptr;
}

ReqCreateKcpObject::~ReqCreateKcpObject() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCreateKcpObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCreateKcpObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqCreateKcpObject::ArenaDtor(void* object) {
  ReqCreateKcpObject* _this = reinterpret_cast< ReqCreateKcpObject* >(object);
  (void)_this;
}
void ReqCreateKcpObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCreateKcpObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCreateKcpObject::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCreateKcpObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCreateKcpObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCreateKcpObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCreateKcpObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCreateKcpObject)
  return target;
}

size_t ReqCreateKcpObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCreateKcpObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCreateKcpObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCreateKcpObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCreateKcpObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCreateKcpObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCreateKcpObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCreateKcpObject)
    MergeFrom(*source);
  }
}

void ReqCreateKcpObject::MergeFrom(const ReqCreateKcpObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCreateKcpObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqCreateKcpObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCreateKcpObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreateKcpObject::CopyFrom(const ReqCreateKcpObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCreateKcpObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreateKcpObject::IsInitialized() const {
  return true;
}

void ReqCreateKcpObject::InternalSwap(ReqCreateKcpObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCreateKcpObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[22]);
}

// ===================================================================

class AckCreateKcpObject::_Internal {
 public:
};

AckCreateKcpObject::AckCreateKcpObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCreateKcpObject)
}
AckCreateKcpObject::AckCreateKcpObject(const AckCreateKcpObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_ip().empty()) {
    server_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&conv_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(conv_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCreateKcpObject)
}

void AckCreateKcpObject::SharedCtor() {
server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&conv_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(conv_));
}

AckCreateKcpObject::~AckCreateKcpObject() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCreateKcpObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCreateKcpObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  server_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckCreateKcpObject::ArenaDtor(void* object) {
  AckCreateKcpObject* _this = reinterpret_cast< AckCreateKcpObject* >(object);
  (void)_this;
}
void AckCreateKcpObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCreateKcpObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCreateKcpObject::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCreateKcpObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_ip_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conv_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(conv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCreateKcpObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes server_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_server_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 conv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          conv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCreateKcpObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCreateKcpObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes server_ip = 2;
  if (!this->server_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_server_ip(), target);
  }

  // int32 server_port = 3;
  if (this->server_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_server_port(), target);
  }

  // uint32 conv = 4;
  if (this->conv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_conv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCreateKcpObject)
  return target;
}

size_t AckCreateKcpObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCreateKcpObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes server_ip = 2;
  if (!this->server_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_server_ip());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 server_port = 3;
  if (this->server_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_port());
  }

  // uint32 conv = 4;
  if (this->conv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_conv());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCreateKcpObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCreateKcpObject)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCreateKcpObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCreateKcpObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCreateKcpObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCreateKcpObject)
    MergeFrom(*source);
  }
}

void AckCreateKcpObject::MergeFrom(const AckCreateKcpObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCreateKcpObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.server_ip().empty()) {
    _internal_set_server_ip(from._internal_server_ip());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.server_port() != 0) {
    _internal_set_server_port(from._internal_server_port());
  }
  if (from.conv() != 0) {
    _internal_set_conv(from._internal_conv());
  }
}

void AckCreateKcpObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCreateKcpObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCreateKcpObject::CopyFrom(const AckCreateKcpObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCreateKcpObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCreateKcpObject::IsInitialized() const {
  return true;
}

void AckCreateKcpObject::InternalSwap(AckCreateKcpObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_ip_, GetArenaForAllocation(),
      &other->server_ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckCreateKcpObject, conv_)
      + sizeof(AckCreateKcpObject::conv_)
      - PROTOBUF_FIELD_OFFSET(AckCreateKcpObject, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCreateKcpObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[23]);
}

// ===================================================================

class ReqEstablishKcpConnection::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqEstablishKcpConnection* msg);
};

const ::KWMsg::Ident&
ReqEstablishKcpConnection::_Internal::player_id(const ReqEstablishKcpConnection* msg) {
  return *msg->player_id_;
}
void ReqEstablishKcpConnection::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqEstablishKcpConnection::ReqEstablishKcpConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqEstablishKcpConnection)
}
ReqEstablishKcpConnection::ReqEstablishKcpConnection(const ReqEstablishKcpConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqEstablishKcpConnection)
}

void ReqEstablishKcpConnection::SharedCtor() {
player_id_ = nullptr;
}

ReqEstablishKcpConnection::~ReqEstablishKcpConnection() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqEstablishKcpConnection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqEstablishKcpConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqEstablishKcpConnection::ArenaDtor(void* object) {
  ReqEstablishKcpConnection* _this = reinterpret_cast< ReqEstablishKcpConnection* >(object);
  (void)_this;
}
void ReqEstablishKcpConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqEstablishKcpConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqEstablishKcpConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqEstablishKcpConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqEstablishKcpConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqEstablishKcpConnection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqEstablishKcpConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqEstablishKcpConnection)
  return target;
}

size_t ReqEstablishKcpConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqEstablishKcpConnection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqEstablishKcpConnection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqEstablishKcpConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEstablishKcpConnection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqEstablishKcpConnection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqEstablishKcpConnection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqEstablishKcpConnection)
    MergeFrom(*source);
  }
}

void ReqEstablishKcpConnection::MergeFrom(const ReqEstablishKcpConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqEstablishKcpConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqEstablishKcpConnection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqEstablishKcpConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEstablishKcpConnection::CopyFrom(const ReqEstablishKcpConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqEstablishKcpConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEstablishKcpConnection::IsInitialized() const {
  return true;
}

void ReqEstablishKcpConnection::InternalSwap(ReqEstablishKcpConnection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqEstablishKcpConnection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[24]);
}

// ===================================================================

class AckEstablishKcpConnection::_Internal {
 public:
};

AckEstablishKcpConnection::AckEstablishKcpConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckEstablishKcpConnection)
}
AckEstablishKcpConnection::AckEstablishKcpConnection(const AckEstablishKcpConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckEstablishKcpConnection)
}

void AckEstablishKcpConnection::SharedCtor() {
event_code_ = 0;
}

AckEstablishKcpConnection::~AckEstablishKcpConnection() {
  // @@protoc_insertion_point(destructor:KWMsg.AckEstablishKcpConnection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckEstablishKcpConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckEstablishKcpConnection::ArenaDtor(void* object) {
  AckEstablishKcpConnection* _this = reinterpret_cast< AckEstablishKcpConnection* >(object);
  (void)_this;
}
void AckEstablishKcpConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckEstablishKcpConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckEstablishKcpConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckEstablishKcpConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckEstablishKcpConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckEstablishKcpConnection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckEstablishKcpConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckEstablishKcpConnection)
  return target;
}

size_t AckEstablishKcpConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckEstablishKcpConnection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckEstablishKcpConnection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckEstablishKcpConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const AckEstablishKcpConnection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckEstablishKcpConnection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckEstablishKcpConnection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckEstablishKcpConnection)
    MergeFrom(*source);
  }
}

void AckEstablishKcpConnection::MergeFrom(const AckEstablishKcpConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckEstablishKcpConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckEstablishKcpConnection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckEstablishKcpConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEstablishKcpConnection::CopyFrom(const AckEstablishKcpConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckEstablishKcpConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEstablishKcpConnection::IsInitialized() const {
  return true;
}

void AckEstablishKcpConnection::InternalSwap(AckEstablishKcpConnection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckEstablishKcpConnection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[25]);
}

// ===================================================================

class ReqTryPushClientIntoQueueUp::_Internal {
 public:
  static const ::KWMsg::Ident& sender(const ReqTryPushClientIntoQueueUp* msg);
};

const ::KWMsg::Ident&
ReqTryPushClientIntoQueueUp::_Internal::sender(const ReqTryPushClientIntoQueueUp* msg) {
  return *msg->sender_;
}
void ReqTryPushClientIntoQueueUp::clear_sender() {
  if (GetArenaForAllocation() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
ReqTryPushClientIntoQueueUp::ReqTryPushClientIntoQueueUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqTryPushClientIntoQueueUp)
}
ReqTryPushClientIntoQueueUp::ReqTryPushClientIntoQueueUp(const ReqTryPushClientIntoQueueUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sender()) {
    sender_ = new ::KWMsg::Ident(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  ::memcpy(&world_id_, &from.world_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&login_id_) -
    reinterpret_cast<char*>(&world_id_)) + sizeof(login_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqTryPushClientIntoQueueUp)
}

void ReqTryPushClientIntoQueueUp::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sender_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&login_id_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(login_id_));
}

ReqTryPushClientIntoQueueUp::~ReqTryPushClientIntoQueueUp() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqTryPushClientIntoQueueUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqTryPushClientIntoQueueUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void ReqTryPushClientIntoQueueUp::ArenaDtor(void* object) {
  ReqTryPushClientIntoQueueUp* _this = reinterpret_cast< ReqTryPushClientIntoQueueUp* >(object);
  (void)_this;
}
void ReqTryPushClientIntoQueueUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqTryPushClientIntoQueueUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqTryPushClientIntoQueueUp::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqTryPushClientIntoQueueUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  ::memset(&world_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&login_id_) -
      reinterpret_cast<char*>(&world_id_)) + sizeof(login_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqTryPushClientIntoQueueUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 login_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident sender = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqTryPushClientIntoQueueUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqTryPushClientIntoQueueUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // int32 world_id = 2;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_world_id(), target);
  }

  // int32 login_id = 3;
  if (this->login_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_login_id(), target);
  }

  // .KWMsg.Ident sender = 4;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sender(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqTryPushClientIntoQueueUp)
  return target;
}

size_t ReqTryPushClientIntoQueueUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqTryPushClientIntoQueueUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // .KWMsg.Ident sender = 4;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // int32 world_id = 2;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  // int32 login_id = 3;
  if (this->login_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_login_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqTryPushClientIntoQueueUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqTryPushClientIntoQueueUp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqTryPushClientIntoQueueUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqTryPushClientIntoQueueUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqTryPushClientIntoQueueUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqTryPushClientIntoQueueUp)
    MergeFrom(*source);
  }
}

void ReqTryPushClientIntoQueueUp::MergeFrom(const ReqTryPushClientIntoQueueUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqTryPushClientIntoQueueUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::KWMsg::Ident::MergeFrom(from._internal_sender());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
  if (from.login_id() != 0) {
    _internal_set_login_id(from._internal_login_id());
  }
}

void ReqTryPushClientIntoQueueUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqTryPushClientIntoQueueUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTryPushClientIntoQueueUp::CopyFrom(const ReqTryPushClientIntoQueueUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqTryPushClientIntoQueueUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTryPushClientIntoQueueUp::IsInitialized() const {
  return true;
}

void ReqTryPushClientIntoQueueUp::InternalSwap(ReqTryPushClientIntoQueueUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqTryPushClientIntoQueueUp, login_id_)
      + sizeof(ReqTryPushClientIntoQueueUp::login_id_)
      - PROTOBUF_FIELD_OFFSET(ReqTryPushClientIntoQueueUp, sender_)>(
          reinterpret_cast<char*>(&sender_),
          reinterpret_cast<char*>(&other->sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqTryPushClientIntoQueueUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[26]);
}

// ===================================================================

class AckPushClientIntoQueueUp::_Internal {
 public:
  static const ::KWMsg::Ident& sender(const AckPushClientIntoQueueUp* msg);
};

const ::KWMsg::Ident&
AckPushClientIntoQueueUp::_Internal::sender(const AckPushClientIntoQueueUp* msg) {
  return *msg->sender_;
}
void AckPushClientIntoQueueUp::clear_sender() {
  if (GetArenaForAllocation() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
AckPushClientIntoQueueUp::AckPushClientIntoQueueUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckPushClientIntoQueueUp)
}
AckPushClientIntoQueueUp::AckPushClientIntoQueueUp(const AckPushClientIntoQueueUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ticket().empty()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArenaForAllocation());
  }
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  queue_up_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_queue_up_ip().empty()) {
    queue_up_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_queue_up_ip(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sender()) {
    sender_ = new ::KWMsg::Ident(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&queue_up_port_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(queue_up_port_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckPushClientIntoQueueUp)
}

void AckPushClientIntoQueueUp::SharedCtor() {
ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
queue_up_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sender_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&queue_up_port_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(queue_up_port_));
}

AckPushClientIntoQueueUp::~AckPushClientIntoQueueUp() {
  // @@protoc_insertion_point(destructor:KWMsg.AckPushClientIntoQueueUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckPushClientIntoQueueUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  queue_up_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void AckPushClientIntoQueueUp::ArenaDtor(void* object) {
  AckPushClientIntoQueueUp* _this = reinterpret_cast< AckPushClientIntoQueueUp* >(object);
  (void)_this;
}
void AckPushClientIntoQueueUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckPushClientIntoQueueUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckPushClientIntoQueueUp::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckPushClientIntoQueueUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticket_.ClearToEmpty();
  account_.ClearToEmpty();
  queue_up_ip_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_up_port_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(queue_up_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckPushClientIntoQueueUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes ticket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 login_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident sender = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes queue_up_ip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_queue_up_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 queue_up_port = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          queue_up_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckPushClientIntoQueueUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckPushClientIntoQueueUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes ticket = 2;
  if (!this->ticket().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ticket(), target);
  }

  // bytes account = 3;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_account(), target);
  }

  // int32 world_id = 4;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_world_id(), target);
  }

  // int32 login_id = 5;
  if (this->login_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_login_id(), target);
  }

  // .KWMsg.Ident sender = 6;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sender(this), target, stream);
  }

  // bytes queue_up_ip = 7;
  if (!this->queue_up_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_queue_up_ip(), target);
  }

  // int32 queue_up_port = 8;
  if (this->queue_up_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_queue_up_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckPushClientIntoQueueUp)
  return target;
}

size_t AckPushClientIntoQueueUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckPushClientIntoQueueUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ticket = 2;
  if (!this->ticket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ticket());
  }

  // bytes account = 3;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes queue_up_ip = 7;
  if (!this->queue_up_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_queue_up_ip());
  }

  // .KWMsg.Ident sender = 6;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 world_id = 4;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  // int32 login_id = 5;
  if (this->login_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_login_id());
  }

  // int32 queue_up_port = 8;
  if (this->queue_up_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_queue_up_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPushClientIntoQueueUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckPushClientIntoQueueUp)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPushClientIntoQueueUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckPushClientIntoQueueUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckPushClientIntoQueueUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckPushClientIntoQueueUp)
    MergeFrom(*source);
  }
}

void AckPushClientIntoQueueUp::MergeFrom(const AckPushClientIntoQueueUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckPushClientIntoQueueUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.ticket().empty()) {
    _internal_set_ticket(from._internal_ticket());
  }
  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from.queue_up_ip().empty()) {
    _internal_set_queue_up_ip(from._internal_queue_up_ip());
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::KWMsg::Ident::MergeFrom(from._internal_sender());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
  if (from.login_id() != 0) {
    _internal_set_login_id(from._internal_login_id());
  }
  if (from.queue_up_port() != 0) {
    _internal_set_queue_up_port(from._internal_queue_up_port());
  }
}

void AckPushClientIntoQueueUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckPushClientIntoQueueUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPushClientIntoQueueUp::CopyFrom(const AckPushClientIntoQueueUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckPushClientIntoQueueUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPushClientIntoQueueUp::IsInitialized() const {
  return true;
}

void AckPushClientIntoQueueUp::InternalSwap(AckPushClientIntoQueueUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ticket_, GetArenaForAllocation(),
      &other->ticket_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &queue_up_ip_, GetArenaForAllocation(),
      &other->queue_up_ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckPushClientIntoQueueUp, queue_up_port_)
      + sizeof(AckPushClientIntoQueueUp::queue_up_port_)
      - PROTOBUF_FIELD_OFFSET(AckPushClientIntoQueueUp, sender_)>(
          reinterpret_cast<char*>(&sender_),
          reinterpret_cast<char*>(&other->sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckPushClientIntoQueueUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[27]);
}

// ===================================================================

class ReqQueueUpGetCurWorldSuitProxy::_Internal {
 public:
  static const ::KWMsg::Ident& transpond_id(const ReqQueueUpGetCurWorldSuitProxy* msg);
};

const ::KWMsg::Ident&
ReqQueueUpGetCurWorldSuitProxy::_Internal::transpond_id(const ReqQueueUpGetCurWorldSuitProxy* msg) {
  return *msg->transpond_id_;
}
void ReqQueueUpGetCurWorldSuitProxy::clear_transpond_id() {
  if (GetArenaForAllocation() == nullptr && transpond_id_ != nullptr) {
    delete transpond_id_;
  }
  transpond_id_ = nullptr;
}
ReqQueueUpGetCurWorldSuitProxy::ReqQueueUpGetCurWorldSuitProxy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
}
ReqQueueUpGetCurWorldSuitProxy::ReqQueueUpGetCurWorldSuitProxy(const ReqQueueUpGetCurWorldSuitProxy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ticket().empty()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transpond_id()) {
    transpond_id_ = new ::KWMsg::Ident(*from.transpond_id_);
  } else {
    transpond_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
}

void ReqQueueUpGetCurWorldSuitProxy::SharedCtor() {
ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transpond_id_ = nullptr;
}

ReqQueueUpGetCurWorldSuitProxy::~ReqQueueUpGetCurWorldSuitProxy() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqQueueUpGetCurWorldSuitProxy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transpond_id_;
}

void ReqQueueUpGetCurWorldSuitProxy::ArenaDtor(void* object) {
  ReqQueueUpGetCurWorldSuitProxy* _this = reinterpret_cast< ReqQueueUpGetCurWorldSuitProxy* >(object);
  (void)_this;
}
void ReqQueueUpGetCurWorldSuitProxy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqQueueUpGetCurWorldSuitProxy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqQueueUpGetCurWorldSuitProxy::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticket_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && transpond_id_ != nullptr) {
    delete transpond_id_;
  }
  transpond_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqQueueUpGetCurWorldSuitProxy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident transpond_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transpond_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqQueueUpGetCurWorldSuitProxy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ticket = 1;
  if (!this->ticket().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ticket(), target);
  }

  // .KWMsg.Ident transpond_id = 2;
  if (this->has_transpond_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transpond_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  return target;
}

size_t ReqQueueUpGetCurWorldSuitProxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ticket = 1;
  if (!this->ticket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ticket());
  }

  // .KWMsg.Ident transpond_id = 2;
  if (this->has_transpond_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transpond_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqQueueUpGetCurWorldSuitProxy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqQueueUpGetCurWorldSuitProxy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqQueueUpGetCurWorldSuitProxy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
    MergeFrom(*source);
  }
}

void ReqQueueUpGetCurWorldSuitProxy::MergeFrom(const ReqQueueUpGetCurWorldSuitProxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.ticket().empty()) {
    _internal_set_ticket(from._internal_ticket());
  }
  if (from.has_transpond_id()) {
    _internal_mutable_transpond_id()->::KWMsg::Ident::MergeFrom(from._internal_transpond_id());
  }
}

void ReqQueueUpGetCurWorldSuitProxy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqQueueUpGetCurWorldSuitProxy::CopyFrom(const ReqQueueUpGetCurWorldSuitProxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqQueueUpGetCurWorldSuitProxy::IsInitialized() const {
  return true;
}

void ReqQueueUpGetCurWorldSuitProxy::InternalSwap(ReqQueueUpGetCurWorldSuitProxy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ticket_, GetArenaForAllocation(),
      &other->ticket_, other->GetArenaForAllocation()
  );
  swap(transpond_id_, other->transpond_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqQueueUpGetCurWorldSuitProxy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[28]);
}

// ===================================================================

class AckQueueUpGetCurWorldSuitProxy::_Internal {
 public:
  static const ::KWMsg::Ident& transpond_id(const AckQueueUpGetCurWorldSuitProxy* msg);
};

const ::KWMsg::Ident&
AckQueueUpGetCurWorldSuitProxy::_Internal::transpond_id(const AckQueueUpGetCurWorldSuitProxy* msg) {
  return *msg->transpond_id_;
}
void AckQueueUpGetCurWorldSuitProxy::clear_transpond_id() {
  if (GetArenaForAllocation() == nullptr && transpond_id_ != nullptr) {
    delete transpond_id_;
  }
  transpond_id_ = nullptr;
}
AckQueueUpGetCurWorldSuitProxy::AckQueueUpGetCurWorldSuitProxy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckQueueUpGetCurWorldSuitProxy)
}
AckQueueUpGetCurWorldSuitProxy::AckQueueUpGetCurWorldSuitProxy(const AckQueueUpGetCurWorldSuitProxy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ticket().empty()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArenaForAllocation());
  }
  world_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_world_ip().empty()) {
    world_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_world_ip(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transpond_id()) {
    transpond_id_ = new ::KWMsg::Ident(*from.transpond_id_);
  } else {
    transpond_id_ = nullptr;
  }
  world_port_ = from.world_port_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckQueueUpGetCurWorldSuitProxy)
}

void AckQueueUpGetCurWorldSuitProxy::SharedCtor() {
ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
world_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transpond_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_port_) -
    reinterpret_cast<char*>(&transpond_id_)) + sizeof(world_port_));
}

AckQueueUpGetCurWorldSuitProxy::~AckQueueUpGetCurWorldSuitProxy() {
  // @@protoc_insertion_point(destructor:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckQueueUpGetCurWorldSuitProxy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  world_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transpond_id_;
}

void AckQueueUpGetCurWorldSuitProxy::ArenaDtor(void* object) {
  AckQueueUpGetCurWorldSuitProxy* _this = reinterpret_cast< AckQueueUpGetCurWorldSuitProxy* >(object);
  (void)_this;
}
void AckQueueUpGetCurWorldSuitProxy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckQueueUpGetCurWorldSuitProxy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckQueueUpGetCurWorldSuitProxy::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticket_.ClearToEmpty();
  world_ip_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && transpond_id_ != nullptr) {
    delete transpond_id_;
  }
  transpond_id_ = nullptr;
  world_port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckQueueUpGetCurWorldSuitProxy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident transpond_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transpond_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes world_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_world_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          world_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckQueueUpGetCurWorldSuitProxy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ticket = 1;
  if (!this->ticket().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ticket(), target);
  }

  // .KWMsg.Ident transpond_id = 2;
  if (this->has_transpond_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transpond_id(this), target, stream);
  }

  // bytes world_ip = 3;
  if (!this->world_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_world_ip(), target);
  }

  // int32 world_port = 4;
  if (this->world_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_world_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  return target;
}

size_t AckQueueUpGetCurWorldSuitProxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ticket = 1;
  if (!this->ticket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ticket());
  }

  // bytes world_ip = 3;
  if (!this->world_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_world_ip());
  }

  // .KWMsg.Ident transpond_id = 2;
  if (this->has_transpond_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transpond_id_);
  }

  // int32 world_port = 4;
  if (this->world_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckQueueUpGetCurWorldSuitProxy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  GOOGLE_DCHECK_NE(&from, this);
  const AckQueueUpGetCurWorldSuitProxy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckQueueUpGetCurWorldSuitProxy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckQueueUpGetCurWorldSuitProxy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckQueueUpGetCurWorldSuitProxy)
    MergeFrom(*source);
  }
}

void AckQueueUpGetCurWorldSuitProxy::MergeFrom(const AckQueueUpGetCurWorldSuitProxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.ticket().empty()) {
    _internal_set_ticket(from._internal_ticket());
  }
  if (!from.world_ip().empty()) {
    _internal_set_world_ip(from._internal_world_ip());
  }
  if (from.has_transpond_id()) {
    _internal_mutable_transpond_id()->::KWMsg::Ident::MergeFrom(from._internal_transpond_id());
  }
  if (from.world_port() != 0) {
    _internal_set_world_port(from._internal_world_port());
  }
}

void AckQueueUpGetCurWorldSuitProxy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckQueueUpGetCurWorldSuitProxy::CopyFrom(const AckQueueUpGetCurWorldSuitProxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckQueueUpGetCurWorldSuitProxy::IsInitialized() const {
  return true;
}

void AckQueueUpGetCurWorldSuitProxy::InternalSwap(AckQueueUpGetCurWorldSuitProxy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ticket_, GetArenaForAllocation(),
      &other->ticket_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &world_ip_, GetArenaForAllocation(),
      &other->world_ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckQueueUpGetCurWorldSuitProxy, world_port_)
      + sizeof(AckQueueUpGetCurWorldSuitProxy::world_port_)
      - PROTOBUF_FIELD_OFFSET(AckQueueUpGetCurWorldSuitProxy, transpond_id_)>(
          reinterpret_cast<char*>(&transpond_id_),
          reinterpret_cast<char*>(&other->transpond_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckQueueUpGetCurWorldSuitProxy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[29]);
}

// ===================================================================

class ReqUpdatePlayerLastHeartbeatTS::_Internal {
 public:
};

ReqUpdatePlayerLastHeartbeatTS::ReqUpdatePlayerLastHeartbeatTS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
}
ReqUpdatePlayerLastHeartbeatTS::ReqUpdatePlayerLastHeartbeatTS(const ReqUpdatePlayerLastHeartbeatTS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
}

void ReqUpdatePlayerLastHeartbeatTS::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ts_ = int64_t{0};
}

ReqUpdatePlayerLastHeartbeatTS::~ReqUpdatePlayerLastHeartbeatTS() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqUpdatePlayerLastHeartbeatTS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqUpdatePlayerLastHeartbeatTS::ArenaDtor(void* object) {
  ReqUpdatePlayerLastHeartbeatTS* _this = reinterpret_cast< ReqUpdatePlayerLastHeartbeatTS* >(object);
  (void)_this;
}
void ReqUpdatePlayerLastHeartbeatTS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqUpdatePlayerLastHeartbeatTS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqUpdatePlayerLastHeartbeatTS::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  ts_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqUpdatePlayerLastHeartbeatTS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUpdatePlayerLastHeartbeatTS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // int64 ts = 2;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  return target;
}

size_t ReqUpdatePlayerLastHeartbeatTS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // int64 ts = 2;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUpdatePlayerLastHeartbeatTS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUpdatePlayerLastHeartbeatTS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUpdatePlayerLastHeartbeatTS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
    MergeFrom(*source);
  }
}

void ReqUpdatePlayerLastHeartbeatTS::MergeFrom(const ReqUpdatePlayerLastHeartbeatTS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
}

void ReqUpdatePlayerLastHeartbeatTS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpdatePlayerLastHeartbeatTS::CopyFrom(const ReqUpdatePlayerLastHeartbeatTS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdatePlayerLastHeartbeatTS::IsInitialized() const {
  return true;
}

void ReqUpdatePlayerLastHeartbeatTS::InternalSwap(ReqUpdatePlayerLastHeartbeatTS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  swap(ts_, other->ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUpdatePlayerLastHeartbeatTS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[30]);
}

// ===================================================================

class SyncQueueUpUserCancelOperation::_Internal {
 public:
};

SyncQueueUpUserCancelOperation::SyncQueueUpUserCancelOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncQueueUpUserCancelOperation)
}
SyncQueueUpUserCancelOperation::SyncQueueUpUserCancelOperation(const SyncQueueUpUserCancelOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncQueueUpUserCancelOperation)
}

void SyncQueueUpUserCancelOperation::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
server_id_ = 0;
}

SyncQueueUpUserCancelOperation::~SyncQueueUpUserCancelOperation() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncQueueUpUserCancelOperation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncQueueUpUserCancelOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SyncQueueUpUserCancelOperation::ArenaDtor(void* object) {
  SyncQueueUpUserCancelOperation* _this = reinterpret_cast< SyncQueueUpUserCancelOperation* >(object);
  (void)_this;
}
void SyncQueueUpUserCancelOperation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncQueueUpUserCancelOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncQueueUpUserCancelOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncQueueUpUserCancelOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  server_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncQueueUpUserCancelOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncQueueUpUserCancelOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncQueueUpUserCancelOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // int32 server_id = 2;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncQueueUpUserCancelOperation)
  return target;
}

size_t SyncQueueUpUserCancelOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncQueueUpUserCancelOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // int32 server_id = 2;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncQueueUpUserCancelOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncQueueUpUserCancelOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncQueueUpUserCancelOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncQueueUpUserCancelOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncQueueUpUserCancelOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncQueueUpUserCancelOperation)
    MergeFrom(*source);
  }
}

void SyncQueueUpUserCancelOperation::MergeFrom(const SyncQueueUpUserCancelOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncQueueUpUserCancelOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void SyncQueueUpUserCancelOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncQueueUpUserCancelOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncQueueUpUserCancelOperation::CopyFrom(const SyncQueueUpUserCancelOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncQueueUpUserCancelOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncQueueUpUserCancelOperation::IsInitialized() const {
  return true;
}

void SyncQueueUpUserCancelOperation::InternalSwap(SyncQueueUpUserCancelOperation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncQueueUpUserCancelOperation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[31]);
}

// ===================================================================

class SyncPlayerPropertiesCache::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SyncPlayerPropertiesCache* msg);
  static const ::KWMsg::ObjectProperty& property(const SyncPlayerPropertiesCache* msg);
};

const ::KWMsg::Ident&
SyncPlayerPropertiesCache::_Internal::player_id(const SyncPlayerPropertiesCache* msg) {
  return *msg->player_id_;
}
const ::KWMsg::ObjectProperty&
SyncPlayerPropertiesCache::_Internal::property(const SyncPlayerPropertiesCache* msg) {
  return *msg->property_;
}
void SyncPlayerPropertiesCache::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void SyncPlayerPropertiesCache::clear_property() {
  if (GetArenaForAllocation() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
}
SyncPlayerPropertiesCache::SyncPlayerPropertiesCache(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncPlayerPropertiesCache)
}
SyncPlayerPropertiesCache::SyncPlayerPropertiesCache(const SyncPlayerPropertiesCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_property()) {
    property_ = new ::KWMsg::ObjectProperty(*from.property_);
  } else {
    property_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncPlayerPropertiesCache)
}

void SyncPlayerPropertiesCache::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&property_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(property_));
}

SyncPlayerPropertiesCache::~SyncPlayerPropertiesCache() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncPlayerPropertiesCache)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncPlayerPropertiesCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete property_;
}

void SyncPlayerPropertiesCache::ArenaDtor(void* object) {
  SyncPlayerPropertiesCache* _this = reinterpret_cast< SyncPlayerPropertiesCache* >(object);
  (void)_this;
}
void SyncPlayerPropertiesCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncPlayerPropertiesCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncPlayerPropertiesCache::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncPlayerPropertiesCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncPlayerPropertiesCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ObjectProperty property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPlayerPropertiesCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncPlayerPropertiesCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.ObjectProperty property = 2;
  if (this->has_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::property(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncPlayerPropertiesCache)
  return target;
}

size_t SyncPlayerPropertiesCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncPlayerPropertiesCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.ObjectProperty property = 2;
  if (this->has_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPlayerPropertiesCache::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncPlayerPropertiesCache)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPlayerPropertiesCache* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPlayerPropertiesCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncPlayerPropertiesCache)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncPlayerPropertiesCache)
    MergeFrom(*source);
  }
}

void SyncPlayerPropertiesCache::MergeFrom(const SyncPlayerPropertiesCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncPlayerPropertiesCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_property()) {
    _internal_mutable_property()->::KWMsg::ObjectProperty::MergeFrom(from._internal_property());
  }
}

void SyncPlayerPropertiesCache::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncPlayerPropertiesCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPlayerPropertiesCache::CopyFrom(const SyncPlayerPropertiesCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncPlayerPropertiesCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayerPropertiesCache::IsInitialized() const {
  return true;
}

void SyncPlayerPropertiesCache::InternalSwap(SyncPlayerPropertiesCache* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncPlayerPropertiesCache, property_)
      + sizeof(SyncPlayerPropertiesCache::property_)
      - PROTOBUF_FIELD_OFFSET(SyncPlayerPropertiesCache, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayerPropertiesCache::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[32]);
}

// ===================================================================

class LoadPlayerPropertiesCache::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const LoadPlayerPropertiesCache* msg);
  static const ::KWMsg::ObjectPropertyList& property_list(const LoadPlayerPropertiesCache* msg);
};

const ::KWMsg::Ident&
LoadPlayerPropertiesCache::_Internal::player_id(const LoadPlayerPropertiesCache* msg) {
  return *msg->player_id_;
}
const ::KWMsg::ObjectPropertyList&
LoadPlayerPropertiesCache::_Internal::property_list(const LoadPlayerPropertiesCache* msg) {
  return *msg->property_list_;
}
void LoadPlayerPropertiesCache::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void LoadPlayerPropertiesCache::clear_property_list() {
  if (GetArenaForAllocation() == nullptr && property_list_ != nullptr) {
    delete property_list_;
  }
  property_list_ = nullptr;
}
LoadPlayerPropertiesCache::LoadPlayerPropertiesCache(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.LoadPlayerPropertiesCache)
}
LoadPlayerPropertiesCache::LoadPlayerPropertiesCache(const LoadPlayerPropertiesCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_property_list()) {
    property_list_ = new ::KWMsg::ObjectPropertyList(*from.property_list_);
  } else {
    property_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.LoadPlayerPropertiesCache)
}

void LoadPlayerPropertiesCache::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&property_list_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(property_list_));
}

LoadPlayerPropertiesCache::~LoadPlayerPropertiesCache() {
  // @@protoc_insertion_point(destructor:KWMsg.LoadPlayerPropertiesCache)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadPlayerPropertiesCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete property_list_;
}

void LoadPlayerPropertiesCache::ArenaDtor(void* object) {
  LoadPlayerPropertiesCache* _this = reinterpret_cast< LoadPlayerPropertiesCache* >(object);
  (void)_this;
}
void LoadPlayerPropertiesCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadPlayerPropertiesCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadPlayerPropertiesCache::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.LoadPlayerPropertiesCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && property_list_ != nullptr) {
    delete property_list_;
  }
  property_list_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadPlayerPropertiesCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ObjectPropertyList property_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadPlayerPropertiesCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.LoadPlayerPropertiesCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.ObjectPropertyList property_list = 2;
  if (this->has_property_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::property_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.LoadPlayerPropertiesCache)
  return target;
}

size_t LoadPlayerPropertiesCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.LoadPlayerPropertiesCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.ObjectPropertyList property_list = 2;
  if (this->has_property_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadPlayerPropertiesCache::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.LoadPlayerPropertiesCache)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadPlayerPropertiesCache* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadPlayerPropertiesCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.LoadPlayerPropertiesCache)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.LoadPlayerPropertiesCache)
    MergeFrom(*source);
  }
}

void LoadPlayerPropertiesCache::MergeFrom(const LoadPlayerPropertiesCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.LoadPlayerPropertiesCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_property_list()) {
    _internal_mutable_property_list()->::KWMsg::ObjectPropertyList::MergeFrom(from._internal_property_list());
  }
}

void LoadPlayerPropertiesCache::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.LoadPlayerPropertiesCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadPlayerPropertiesCache::CopyFrom(const LoadPlayerPropertiesCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.LoadPlayerPropertiesCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPlayerPropertiesCache::IsInitialized() const {
  return true;
}

void LoadPlayerPropertiesCache::InternalSwap(LoadPlayerPropertiesCache* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadPlayerPropertiesCache, property_list_)
      + sizeof(LoadPlayerPropertiesCache::property_list_)
      - PROTOBUF_FIELD_OFFSET(LoadPlayerPropertiesCache, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadPlayerPropertiesCache::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[33]);
}

// ===================================================================

class LoadPlayerRecordsCache::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const LoadPlayerRecordsCache* msg);
  static const ::KWMsg::ObjectRecordList& record_list(const LoadPlayerRecordsCache* msg);
};

const ::KWMsg::Ident&
LoadPlayerRecordsCache::_Internal::player_id(const LoadPlayerRecordsCache* msg) {
  return *msg->player_id_;
}
const ::KWMsg::ObjectRecordList&
LoadPlayerRecordsCache::_Internal::record_list(const LoadPlayerRecordsCache* msg) {
  return *msg->record_list_;
}
void LoadPlayerRecordsCache::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void LoadPlayerRecordsCache::clear_record_list() {
  if (GetArenaForAllocation() == nullptr && record_list_ != nullptr) {
    delete record_list_;
  }
  record_list_ = nullptr;
}
LoadPlayerRecordsCache::LoadPlayerRecordsCache(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.LoadPlayerRecordsCache)
}
LoadPlayerRecordsCache::LoadPlayerRecordsCache(const LoadPlayerRecordsCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_record_list()) {
    record_list_ = new ::KWMsg::ObjectRecordList(*from.record_list_);
  } else {
    record_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.LoadPlayerRecordsCache)
}

void LoadPlayerRecordsCache::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&record_list_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(record_list_));
}

LoadPlayerRecordsCache::~LoadPlayerRecordsCache() {
  // @@protoc_insertion_point(destructor:KWMsg.LoadPlayerRecordsCache)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadPlayerRecordsCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete record_list_;
}

void LoadPlayerRecordsCache::ArenaDtor(void* object) {
  LoadPlayerRecordsCache* _this = reinterpret_cast< LoadPlayerRecordsCache* >(object);
  (void)_this;
}
void LoadPlayerRecordsCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadPlayerRecordsCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadPlayerRecordsCache::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.LoadPlayerRecordsCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && record_list_ != nullptr) {
    delete record_list_;
  }
  record_list_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadPlayerRecordsCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ObjectRecordList record_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_record_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadPlayerRecordsCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.LoadPlayerRecordsCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.ObjectRecordList record_list = 2;
  if (this->has_record_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::record_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.LoadPlayerRecordsCache)
  return target;
}

size_t LoadPlayerRecordsCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.LoadPlayerRecordsCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.ObjectRecordList record_list = 2;
  if (this->has_record_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadPlayerRecordsCache::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.LoadPlayerRecordsCache)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadPlayerRecordsCache* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadPlayerRecordsCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.LoadPlayerRecordsCache)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.LoadPlayerRecordsCache)
    MergeFrom(*source);
  }
}

void LoadPlayerRecordsCache::MergeFrom(const LoadPlayerRecordsCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.LoadPlayerRecordsCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_record_list()) {
    _internal_mutable_record_list()->::KWMsg::ObjectRecordList::MergeFrom(from._internal_record_list());
  }
}

void LoadPlayerRecordsCache::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.LoadPlayerRecordsCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadPlayerRecordsCache::CopyFrom(const LoadPlayerRecordsCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.LoadPlayerRecordsCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPlayerRecordsCache::IsInitialized() const {
  return true;
}

void LoadPlayerRecordsCache::InternalSwap(LoadPlayerRecordsCache* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadPlayerRecordsCache, record_list_)
      + sizeof(LoadPlayerRecordsCache::record_list_)
      - PROTOBUF_FIELD_OFFSET(LoadPlayerRecordsCache, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadPlayerRecordsCache::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[34]);
}

// ===================================================================

class SyncPlayerRecordsCacheAdd::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SyncPlayerRecordsCacheAdd* msg);
};

const ::KWMsg::Ident&
SyncPlayerRecordsCacheAdd::_Internal::player_id(const SyncPlayerRecordsCacheAdd* msg) {
  return *msg->player_id_;
}
void SyncPlayerRecordsCacheAdd::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void SyncPlayerRecordsCacheAdd::clear_record_int_list() {
  record_int_list_.Clear();
}
void SyncPlayerRecordsCacheAdd::clear_record_float_list() {
  record_float_list_.Clear();
}
void SyncPlayerRecordsCacheAdd::clear_record_string_list() {
  record_string_list_.Clear();
}
void SyncPlayerRecordsCacheAdd::clear_record_object_list() {
  record_object_list_.Clear();
}
void SyncPlayerRecordsCacheAdd::clear_record_vector2_list() {
  record_vector2_list_.Clear();
}
void SyncPlayerRecordsCacheAdd::clear_record_vector3_list() {
  record_vector3_list_.Clear();
}
SyncPlayerRecordsCacheAdd::SyncPlayerRecordsCacheAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  record_int_list_(arena),
  record_float_list_(arena),
  record_string_list_(arena),
  record_object_list_(arena),
  record_vector2_list_(arena),
  record_vector3_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncPlayerRecordsCacheAdd)
}
SyncPlayerRecordsCacheAdd::SyncPlayerRecordsCacheAdd(const SyncPlayerRecordsCacheAdd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      record_int_list_(from.record_int_list_),
      record_float_list_(from.record_float_list_),
      record_string_list_(from.record_string_list_),
      record_object_list_(from.record_object_list_),
      record_vector2_list_(from.record_vector2_list_),
      record_vector3_list_(from.record_vector3_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  row_ = from.row_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncPlayerRecordsCacheAdd)
}

void SyncPlayerRecordsCacheAdd::SharedCtor() {
record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&row_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(row_));
}

SyncPlayerRecordsCacheAdd::~SyncPlayerRecordsCacheAdd() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncPlayerRecordsCacheAdd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncPlayerRecordsCacheAdd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void SyncPlayerRecordsCacheAdd::ArenaDtor(void* object) {
  SyncPlayerRecordsCacheAdd* _this = reinterpret_cast< SyncPlayerRecordsCacheAdd* >(object);
  (void)_this;
}
void SyncPlayerRecordsCacheAdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncPlayerRecordsCacheAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncPlayerRecordsCacheAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncPlayerRecordsCacheAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_int_list_.Clear();
  record_float_list_.Clear();
  record_string_list_.Clear();
  record_object_list_.Clear();
  record_vector2_list_.Clear();
  record_vector3_list_.Clear();
  record_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  row_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncPlayerRecordsCacheAdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordInt record_int_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_int_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordFloat record_float_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_float_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordString record_string_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_string_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordObject record_object_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_object_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordVector2 record_vector2_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_vector2_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordVector3 record_vector3_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_vector3_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPlayerRecordsCacheAdd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncPlayerRecordsCacheAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // int32 row = 3;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_row(), target);
  }

  // repeated .KWMsg.RecordInt record_int_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_int_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_record_int_list(i), target, stream);
  }

  // repeated .KWMsg.RecordFloat record_float_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_float_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_record_float_list(i), target, stream);
  }

  // repeated .KWMsg.RecordString record_string_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_string_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_record_string_list(i), target, stream);
  }

  // repeated .KWMsg.RecordObject record_object_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_object_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_record_object_list(i), target, stream);
  }

  // repeated .KWMsg.RecordVector2 record_vector2_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_vector2_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_record_vector2_list(i), target, stream);
  }

  // repeated .KWMsg.RecordVector3 record_vector3_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_vector3_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_record_vector3_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncPlayerRecordsCacheAdd)
  return target;
}

size_t SyncPlayerRecordsCacheAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncPlayerRecordsCacheAdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RecordInt record_int_list = 4;
  total_size += 1UL * this->_internal_record_int_list_size();
  for (const auto& msg : this->record_int_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.RecordFloat record_float_list = 5;
  total_size += 1UL * this->_internal_record_float_list_size();
  for (const auto& msg : this->record_float_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.RecordString record_string_list = 6;
  total_size += 1UL * this->_internal_record_string_list_size();
  for (const auto& msg : this->record_string_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.RecordObject record_object_list = 7;
  total_size += 1UL * this->_internal_record_object_list_size();
  for (const auto& msg : this->record_object_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.RecordVector2 record_vector2_list = 8;
  total_size += 1UL * this->_internal_record_vector2_list_size();
  for (const auto& msg : this->record_vector2_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.RecordVector3 record_vector3_list = 9;
  total_size += 1UL * this->_internal_record_vector3_list_size();
  for (const auto& msg : this->record_vector3_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 row = 3;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPlayerRecordsCacheAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncPlayerRecordsCacheAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPlayerRecordsCacheAdd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPlayerRecordsCacheAdd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncPlayerRecordsCacheAdd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncPlayerRecordsCacheAdd)
    MergeFrom(*source);
  }
}

void SyncPlayerRecordsCacheAdd::MergeFrom(const SyncPlayerRecordsCacheAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncPlayerRecordsCacheAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_int_list_.MergeFrom(from.record_int_list_);
  record_float_list_.MergeFrom(from.record_float_list_);
  record_string_list_.MergeFrom(from.record_string_list_);
  record_object_list_.MergeFrom(from.record_object_list_);
  record_vector2_list_.MergeFrom(from.record_vector2_list_);
  record_vector3_list_.MergeFrom(from.record_vector3_list_);
  if (!from.record_name().empty()) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
}

void SyncPlayerRecordsCacheAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncPlayerRecordsCacheAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPlayerRecordsCacheAdd::CopyFrom(const SyncPlayerRecordsCacheAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncPlayerRecordsCacheAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayerRecordsCacheAdd::IsInitialized() const {
  return true;
}

void SyncPlayerRecordsCacheAdd::InternalSwap(SyncPlayerRecordsCacheAdd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  record_int_list_.InternalSwap(&other->record_int_list_);
  record_float_list_.InternalSwap(&other->record_float_list_);
  record_string_list_.InternalSwap(&other->record_string_list_);
  record_object_list_.InternalSwap(&other->record_object_list_);
  record_vector2_list_.InternalSwap(&other->record_vector2_list_);
  record_vector3_list_.InternalSwap(&other->record_vector3_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &record_name_, GetArenaForAllocation(),
      &other->record_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncPlayerRecordsCacheAdd, row_)
      + sizeof(SyncPlayerRecordsCacheAdd::row_)
      - PROTOBUF_FIELD_OFFSET(SyncPlayerRecordsCacheAdd, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayerRecordsCacheAdd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[35]);
}

// ===================================================================

class SyncPlayerRecordsCacheUpdate::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SyncPlayerRecordsCacheUpdate* msg);
  static const ::KWMsg::RecordInt& record_int(const SyncPlayerRecordsCacheUpdate* msg);
  static const ::KWMsg::RecordFloat& record_float(const SyncPlayerRecordsCacheUpdate* msg);
  static const ::KWMsg::RecordString& record_string(const SyncPlayerRecordsCacheUpdate* msg);
  static const ::KWMsg::RecordObject& record_object(const SyncPlayerRecordsCacheUpdate* msg);
  static const ::KWMsg::RecordVector2& record_vector2(const SyncPlayerRecordsCacheUpdate* msg);
  static const ::KWMsg::RecordVector3& record_vector3(const SyncPlayerRecordsCacheUpdate* msg);
};

const ::KWMsg::Ident&
SyncPlayerRecordsCacheUpdate::_Internal::player_id(const SyncPlayerRecordsCacheUpdate* msg) {
  return *msg->player_id_;
}
const ::KWMsg::RecordInt&
SyncPlayerRecordsCacheUpdate::_Internal::record_int(const SyncPlayerRecordsCacheUpdate* msg) {
  return *msg->record_int_;
}
const ::KWMsg::RecordFloat&
SyncPlayerRecordsCacheUpdate::_Internal::record_float(const SyncPlayerRecordsCacheUpdate* msg) {
  return *msg->record_float_;
}
const ::KWMsg::RecordString&
SyncPlayerRecordsCacheUpdate::_Internal::record_string(const SyncPlayerRecordsCacheUpdate* msg) {
  return *msg->record_string_;
}
const ::KWMsg::RecordObject&
SyncPlayerRecordsCacheUpdate::_Internal::record_object(const SyncPlayerRecordsCacheUpdate* msg) {
  return *msg->record_object_;
}
const ::KWMsg::RecordVector2&
SyncPlayerRecordsCacheUpdate::_Internal::record_vector2(const SyncPlayerRecordsCacheUpdate* msg) {
  return *msg->record_vector2_;
}
const ::KWMsg::RecordVector3&
SyncPlayerRecordsCacheUpdate::_Internal::record_vector3(const SyncPlayerRecordsCacheUpdate* msg) {
  return *msg->record_vector3_;
}
void SyncPlayerRecordsCacheUpdate::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void SyncPlayerRecordsCacheUpdate::clear_record_int() {
  if (GetArenaForAllocation() == nullptr && record_int_ != nullptr) {
    delete record_int_;
  }
  record_int_ = nullptr;
}
void SyncPlayerRecordsCacheUpdate::clear_record_float() {
  if (GetArenaForAllocation() == nullptr && record_float_ != nullptr) {
    delete record_float_;
  }
  record_float_ = nullptr;
}
void SyncPlayerRecordsCacheUpdate::clear_record_string() {
  if (GetArenaForAllocation() == nullptr && record_string_ != nullptr) {
    delete record_string_;
  }
  record_string_ = nullptr;
}
void SyncPlayerRecordsCacheUpdate::clear_record_object() {
  if (GetArenaForAllocation() == nullptr && record_object_ != nullptr) {
    delete record_object_;
  }
  record_object_ = nullptr;
}
void SyncPlayerRecordsCacheUpdate::clear_record_vector2() {
  if (GetArenaForAllocation() == nullptr && record_vector2_ != nullptr) {
    delete record_vector2_;
  }
  record_vector2_ = nullptr;
}
void SyncPlayerRecordsCacheUpdate::clear_record_vector3() {
  if (GetArenaForAllocation() == nullptr && record_vector3_ != nullptr) {
    delete record_vector3_;
  }
  record_vector3_ = nullptr;
}
SyncPlayerRecordsCacheUpdate::SyncPlayerRecordsCacheUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncPlayerRecordsCacheUpdate)
}
SyncPlayerRecordsCacheUpdate::SyncPlayerRecordsCacheUpdate(const SyncPlayerRecordsCacheUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_record_int()) {
    record_int_ = new ::KWMsg::RecordInt(*from.record_int_);
  } else {
    record_int_ = nullptr;
  }
  if (from._internal_has_record_float()) {
    record_float_ = new ::KWMsg::RecordFloat(*from.record_float_);
  } else {
    record_float_ = nullptr;
  }
  if (from._internal_has_record_string()) {
    record_string_ = new ::KWMsg::RecordString(*from.record_string_);
  } else {
    record_string_ = nullptr;
  }
  if (from._internal_has_record_object()) {
    record_object_ = new ::KWMsg::RecordObject(*from.record_object_);
  } else {
    record_object_ = nullptr;
  }
  if (from._internal_has_record_vector2()) {
    record_vector2_ = new ::KWMsg::RecordVector2(*from.record_vector2_);
  } else {
    record_vector2_ = nullptr;
  }
  if (from._internal_has_record_vector3()) {
    record_vector3_ = new ::KWMsg::RecordVector3(*from.record_vector3_);
  } else {
    record_vector3_ = nullptr;
  }
  row_ = from.row_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncPlayerRecordsCacheUpdate)
}

void SyncPlayerRecordsCacheUpdate::SharedCtor() {
record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&row_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(row_));
}

SyncPlayerRecordsCacheUpdate::~SyncPlayerRecordsCacheUpdate() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncPlayerRecordsCacheUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncPlayerRecordsCacheUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete record_int_;
  if (this != internal_default_instance()) delete record_float_;
  if (this != internal_default_instance()) delete record_string_;
  if (this != internal_default_instance()) delete record_object_;
  if (this != internal_default_instance()) delete record_vector2_;
  if (this != internal_default_instance()) delete record_vector3_;
}

void SyncPlayerRecordsCacheUpdate::ArenaDtor(void* object) {
  SyncPlayerRecordsCacheUpdate* _this = reinterpret_cast< SyncPlayerRecordsCacheUpdate* >(object);
  (void)_this;
}
void SyncPlayerRecordsCacheUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncPlayerRecordsCacheUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncPlayerRecordsCacheUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncPlayerRecordsCacheUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && record_int_ != nullptr) {
    delete record_int_;
  }
  record_int_ = nullptr;
  if (GetArenaForAllocation() == nullptr && record_float_ != nullptr) {
    delete record_float_;
  }
  record_float_ = nullptr;
  if (GetArenaForAllocation() == nullptr && record_string_ != nullptr) {
    delete record_string_;
  }
  record_string_ = nullptr;
  if (GetArenaForAllocation() == nullptr && record_object_ != nullptr) {
    delete record_object_;
  }
  record_object_ = nullptr;
  if (GetArenaForAllocation() == nullptr && record_vector2_ != nullptr) {
    delete record_vector2_;
  }
  record_vector2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && record_vector3_ != nullptr) {
    delete record_vector3_;
  }
  record_vector3_ = nullptr;
  row_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncPlayerRecordsCacheUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.RecordInt record_int = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_record_int(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.RecordFloat record_float = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_record_float(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.RecordString record_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_record_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.RecordObject record_object = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_record_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.RecordVector2 record_vector2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_record_vector2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.RecordVector3 record_vector3 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_record_vector3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPlayerRecordsCacheUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncPlayerRecordsCacheUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // int32 row = 3;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_row(), target);
  }

  // .KWMsg.RecordInt record_int = 4;
  if (this->has_record_int()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::record_int(this), target, stream);
  }

  // .KWMsg.RecordFloat record_float = 5;
  if (this->has_record_float()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::record_float(this), target, stream);
  }

  // .KWMsg.RecordString record_string = 6;
  if (this->has_record_string()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::record_string(this), target, stream);
  }

  // .KWMsg.RecordObject record_object = 7;
  if (this->has_record_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::record_object(this), target, stream);
  }

  // .KWMsg.RecordVector2 record_vector2 = 8;
  if (this->has_record_vector2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::record_vector2(this), target, stream);
  }

  // .KWMsg.RecordVector3 record_vector3 = 9;
  if (this->has_record_vector3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::record_vector3(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncPlayerRecordsCacheUpdate)
  return target;
}

size_t SyncPlayerRecordsCacheUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncPlayerRecordsCacheUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.RecordInt record_int = 4;
  if (this->has_record_int()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_int_);
  }

  // .KWMsg.RecordFloat record_float = 5;
  if (this->has_record_float()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_float_);
  }

  // .KWMsg.RecordString record_string = 6;
  if (this->has_record_string()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_string_);
  }

  // .KWMsg.RecordObject record_object = 7;
  if (this->has_record_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_object_);
  }

  // .KWMsg.RecordVector2 record_vector2 = 8;
  if (this->has_record_vector2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_vector2_);
  }

  // .KWMsg.RecordVector3 record_vector3 = 9;
  if (this->has_record_vector3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_vector3_);
  }

  // int32 row = 3;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPlayerRecordsCacheUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncPlayerRecordsCacheUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPlayerRecordsCacheUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPlayerRecordsCacheUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncPlayerRecordsCacheUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncPlayerRecordsCacheUpdate)
    MergeFrom(*source);
  }
}

void SyncPlayerRecordsCacheUpdate::MergeFrom(const SyncPlayerRecordsCacheUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncPlayerRecordsCacheUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.record_name().empty()) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_record_int()) {
    _internal_mutable_record_int()->::KWMsg::RecordInt::MergeFrom(from._internal_record_int());
  }
  if (from.has_record_float()) {
    _internal_mutable_record_float()->::KWMsg::RecordFloat::MergeFrom(from._internal_record_float());
  }
  if (from.has_record_string()) {
    _internal_mutable_record_string()->::KWMsg::RecordString::MergeFrom(from._internal_record_string());
  }
  if (from.has_record_object()) {
    _internal_mutable_record_object()->::KWMsg::RecordObject::MergeFrom(from._internal_record_object());
  }
  if (from.has_record_vector2()) {
    _internal_mutable_record_vector2()->::KWMsg::RecordVector2::MergeFrom(from._internal_record_vector2());
  }
  if (from.has_record_vector3()) {
    _internal_mutable_record_vector3()->::KWMsg::RecordVector3::MergeFrom(from._internal_record_vector3());
  }
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
}

void SyncPlayerRecordsCacheUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncPlayerRecordsCacheUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPlayerRecordsCacheUpdate::CopyFrom(const SyncPlayerRecordsCacheUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncPlayerRecordsCacheUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayerRecordsCacheUpdate::IsInitialized() const {
  return true;
}

void SyncPlayerRecordsCacheUpdate::InternalSwap(SyncPlayerRecordsCacheUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &record_name_, GetArenaForAllocation(),
      &other->record_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncPlayerRecordsCacheUpdate, row_)
      + sizeof(SyncPlayerRecordsCacheUpdate::row_)
      - PROTOBUF_FIELD_OFFSET(SyncPlayerRecordsCacheUpdate, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayerRecordsCacheUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[36]);
}

// ===================================================================

class SyncPlayerRecordsCacheDel::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SyncPlayerRecordsCacheDel* msg);
};

const ::KWMsg::Ident&
SyncPlayerRecordsCacheDel::_Internal::player_id(const SyncPlayerRecordsCacheDel* msg) {
  return *msg->player_id_;
}
void SyncPlayerRecordsCacheDel::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
SyncPlayerRecordsCacheDel::SyncPlayerRecordsCacheDel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncPlayerRecordsCacheDel)
}
SyncPlayerRecordsCacheDel::SyncPlayerRecordsCacheDel(const SyncPlayerRecordsCacheDel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  remove_row_ = from.remove_row_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncPlayerRecordsCacheDel)
}

void SyncPlayerRecordsCacheDel::SharedCtor() {
record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remove_row_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(remove_row_));
}

SyncPlayerRecordsCacheDel::~SyncPlayerRecordsCacheDel() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncPlayerRecordsCacheDel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncPlayerRecordsCacheDel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void SyncPlayerRecordsCacheDel::ArenaDtor(void* object) {
  SyncPlayerRecordsCacheDel* _this = reinterpret_cast< SyncPlayerRecordsCacheDel* >(object);
  (void)_this;
}
void SyncPlayerRecordsCacheDel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncPlayerRecordsCacheDel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncPlayerRecordsCacheDel::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncPlayerRecordsCacheDel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  remove_row_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncPlayerRecordsCacheDel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remove_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remove_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPlayerRecordsCacheDel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncPlayerRecordsCacheDel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // int32 remove_row = 3;
  if (this->remove_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_remove_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncPlayerRecordsCacheDel)
  return target;
}

size_t SyncPlayerRecordsCacheDel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncPlayerRecordsCacheDel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 remove_row = 3;
  if (this->remove_row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remove_row());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPlayerRecordsCacheDel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncPlayerRecordsCacheDel)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPlayerRecordsCacheDel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPlayerRecordsCacheDel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncPlayerRecordsCacheDel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncPlayerRecordsCacheDel)
    MergeFrom(*source);
  }
}

void SyncPlayerRecordsCacheDel::MergeFrom(const SyncPlayerRecordsCacheDel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncPlayerRecordsCacheDel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.record_name().empty()) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.remove_row() != 0) {
    _internal_set_remove_row(from._internal_remove_row());
  }
}

void SyncPlayerRecordsCacheDel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncPlayerRecordsCacheDel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPlayerRecordsCacheDel::CopyFrom(const SyncPlayerRecordsCacheDel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncPlayerRecordsCacheDel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayerRecordsCacheDel::IsInitialized() const {
  return true;
}

void SyncPlayerRecordsCacheDel::InternalSwap(SyncPlayerRecordsCacheDel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &record_name_, GetArenaForAllocation(),
      &other->record_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncPlayerRecordsCacheDel, remove_row_)
      + sizeof(SyncPlayerRecordsCacheDel::remove_row_)
      - PROTOBUF_FIELD_OFFSET(SyncPlayerRecordsCacheDel, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayerRecordsCacheDel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[37]);
}

// ===================================================================

class SyncPlayerRecordsCacheSwap::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SyncPlayerRecordsCacheSwap* msg);
};

const ::KWMsg::Ident&
SyncPlayerRecordsCacheSwap::_Internal::player_id(const SyncPlayerRecordsCacheSwap* msg) {
  return *msg->player_id_;
}
void SyncPlayerRecordsCacheSwap::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
SyncPlayerRecordsCacheSwap::SyncPlayerRecordsCacheSwap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncPlayerRecordsCacheSwap)
}
SyncPlayerRecordsCacheSwap::SyncPlayerRecordsCacheSwap(const SyncPlayerRecordsCacheSwap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&row_origin_, &from.row_origin_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_target_) -
    reinterpret_cast<char*>(&row_origin_)) + sizeof(row_target_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncPlayerRecordsCacheSwap)
}

void SyncPlayerRecordsCacheSwap::SharedCtor() {
record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&row_target_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(row_target_));
}

SyncPlayerRecordsCacheSwap::~SyncPlayerRecordsCacheSwap() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncPlayerRecordsCacheSwap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncPlayerRecordsCacheSwap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void SyncPlayerRecordsCacheSwap::ArenaDtor(void* object) {
  SyncPlayerRecordsCacheSwap* _this = reinterpret_cast< SyncPlayerRecordsCacheSwap* >(object);
  (void)_this;
}
void SyncPlayerRecordsCacheSwap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncPlayerRecordsCacheSwap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncPlayerRecordsCacheSwap::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncPlayerRecordsCacheSwap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&row_origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_target_) -
      reinterpret_cast<char*>(&row_origin_)) + sizeof(row_target_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncPlayerRecordsCacheSwap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 row_origin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          row_origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 row_target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          row_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPlayerRecordsCacheSwap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncPlayerRecordsCacheSwap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // int32 row_origin = 3;
  if (this->row_origin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_row_origin(), target);
  }

  // int32 row_target = 4;
  if (this->row_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_row_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncPlayerRecordsCacheSwap)
  return target;
}

size_t SyncPlayerRecordsCacheSwap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncPlayerRecordsCacheSwap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 row_origin = 3;
  if (this->row_origin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row_origin());
  }

  // int32 row_target = 4;
  if (this->row_target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPlayerRecordsCacheSwap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncPlayerRecordsCacheSwap)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPlayerRecordsCacheSwap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPlayerRecordsCacheSwap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncPlayerRecordsCacheSwap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncPlayerRecordsCacheSwap)
    MergeFrom(*source);
  }
}

void SyncPlayerRecordsCacheSwap::MergeFrom(const SyncPlayerRecordsCacheSwap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncPlayerRecordsCacheSwap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.record_name().empty()) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.row_origin() != 0) {
    _internal_set_row_origin(from._internal_row_origin());
  }
  if (from.row_target() != 0) {
    _internal_set_row_target(from._internal_row_target());
  }
}

void SyncPlayerRecordsCacheSwap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncPlayerRecordsCacheSwap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPlayerRecordsCacheSwap::CopyFrom(const SyncPlayerRecordsCacheSwap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncPlayerRecordsCacheSwap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayerRecordsCacheSwap::IsInitialized() const {
  return true;
}

void SyncPlayerRecordsCacheSwap::InternalSwap(SyncPlayerRecordsCacheSwap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &record_name_, GetArenaForAllocation(),
      &other->record_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncPlayerRecordsCacheSwap, row_target_)
      + sizeof(SyncPlayerRecordsCacheSwap::row_target_)
      - PROTOBUF_FIELD_OFFSET(SyncPlayerRecordsCacheSwap, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayerRecordsCacheSwap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[38]);
}

// ===================================================================

class ReqTestBattle::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqTestBattle* msg);
};

const ::KWMsg::Ident&
ReqTestBattle::_Internal::player_id(const ReqTestBattle* msg) {
  return *msg->player_id_;
}
void ReqTestBattle::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqTestBattle::ReqTestBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqTestBattle)
}
ReqTestBattle::ReqTestBattle(const ReqTestBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  battle_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_battle_list().empty()) {
    battle_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_battle_list(), 
      GetArenaForAllocation());
  }
  team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_team_id().empty()) {
    team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqTestBattle)
}

void ReqTestBattle::SharedCtor() {
battle_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqTestBattle::~ReqTestBattle() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqTestBattle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqTestBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  battle_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqTestBattle::ArenaDtor(void* object) {
  ReqTestBattle* _this = reinterpret_cast< ReqTestBattle* >(object);
  (void)_this;
}
void ReqTestBattle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqTestBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqTestBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqTestBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battle_list_.ClearToEmpty();
  team_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqTestBattle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes battle_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_battle_list();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes team_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqTestBattle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqTestBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes battle_list = 2;
  if (!this->battle_list().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_battle_list(), target);
  }

  // bytes team_id = 3;
  if (!this->team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqTestBattle)
  return target;
}

size_t ReqTestBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqTestBattle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes battle_list = 2;
  if (!this->battle_list().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_battle_list());
  }

  // bytes team_id = 3;
  if (!this->team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_team_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqTestBattle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqTestBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqTestBattle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqTestBattle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqTestBattle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqTestBattle)
    MergeFrom(*source);
  }
}

void ReqTestBattle::MergeFrom(const ReqTestBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqTestBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.battle_list().empty()) {
    _internal_set_battle_list(from._internal_battle_list());
  }
  if (!from.team_id().empty()) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqTestBattle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqTestBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTestBattle::CopyFrom(const ReqTestBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqTestBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTestBattle::IsInitialized() const {
  return true;
}

void ReqTestBattle::InternalSwap(ReqTestBattle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &battle_list_, GetArenaForAllocation(),
      &other->battle_list_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &team_id_, GetArenaForAllocation(),
      &other->team_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqTestBattle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[39]);
}

// ===================================================================

class AckTestBattle::_Internal {
 public:
};

AckTestBattle::AckTestBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckTestBattle)
}
AckTestBattle::AckTestBattle(const AckTestBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  battle_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_battle_list().empty()) {
    battle_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_battle_list(), 
      GetArenaForAllocation());
  }
  team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_team_id().empty()) {
    team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckTestBattle)
}

void AckTestBattle::SharedCtor() {
battle_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(scene_id_));
}

AckTestBattle::~AckTestBattle() {
  // @@protoc_insertion_point(destructor:KWMsg.AckTestBattle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckTestBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  battle_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckTestBattle::ArenaDtor(void* object) {
  AckTestBattle* _this = reinterpret_cast< AckTestBattle* >(object);
  (void)_this;
}
void AckTestBattle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckTestBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckTestBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckTestBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battle_list_.ClearToEmpty();
  team_id_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(scene_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckTestBattle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes battle_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_battle_list();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes team_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scene_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckTestBattle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckTestBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes battle_list = 2;
  if (!this->battle_list().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_battle_list(), target);
  }

  // bytes team_id = 3;
  if (!this->team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_team_id(), target);
  }

  // int32 scene_id = 4;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_scene_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckTestBattle)
  return target;
}

size_t AckTestBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckTestBattle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes battle_list = 2;
  if (!this->battle_list().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_battle_list());
  }

  // bytes team_id = 3;
  if (!this->team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_team_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 scene_id = 4;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckTestBattle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckTestBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const AckTestBattle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckTestBattle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckTestBattle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckTestBattle)
    MergeFrom(*source);
  }
}

void AckTestBattle::MergeFrom(const AckTestBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckTestBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.battle_list().empty()) {
    _internal_set_battle_list(from._internal_battle_list());
  }
  if (!from.team_id().empty()) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
}

void AckTestBattle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckTestBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTestBattle::CopyFrom(const AckTestBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckTestBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTestBattle::IsInitialized() const {
  return true;
}

void AckTestBattle::InternalSwap(AckTestBattle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &battle_list_, GetArenaForAllocation(),
      &other->battle_list_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &team_id_, GetArenaForAllocation(),
      &other->team_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckTestBattle, scene_id_)
      + sizeof(AckTestBattle::scene_id_)
      - PROTOBUF_FIELD_OFFSET(AckTestBattle, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckTestBattle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[40]);
}

// ===================================================================

class ReqCollectWitch::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqCollectWitch* msg);
};

const ::KWMsg::Ident&
ReqCollectWitch::_Internal::player_id(const ReqCollectWitch* msg) {
  return *msg->player_id_;
}
void ReqCollectWitch::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqCollectWitch::ReqCollectWitch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCollectWitch)
}
ReqCollectWitch::ReqCollectWitch(const ReqCollectWitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCollectWitch)
}

void ReqCollectWitch::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqCollectWitch::~ReqCollectWitch() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCollectWitch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCollectWitch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqCollectWitch::ArenaDtor(void* object) {
  ReqCollectWitch* _this = reinterpret_cast< ReqCollectWitch* >(object);
  (void)_this;
}
void ReqCollectWitch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCollectWitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCollectWitch::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCollectWitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCollectWitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCollectWitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCollectWitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCollectWitch)
  return target;
}

size_t ReqCollectWitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCollectWitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCollectWitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCollectWitch)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCollectWitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCollectWitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCollectWitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCollectWitch)
    MergeFrom(*source);
  }
}

void ReqCollectWitch::MergeFrom(const ReqCollectWitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCollectWitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqCollectWitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCollectWitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCollectWitch::CopyFrom(const ReqCollectWitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCollectWitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCollectWitch::IsInitialized() const {
  return true;
}

void ReqCollectWitch::InternalSwap(ReqCollectWitch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCollectWitch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[41]);
}

// ===================================================================

class AckCollectWitch::_Internal {
 public:
};

AckCollectWitch::AckCollectWitch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCollectWitch)
}
AckCollectWitch::AckCollectWitch(const AckCollectWitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_collect_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(is_collect_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCollectWitch)
}

void AckCollectWitch::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_collect_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(is_collect_));
}

AckCollectWitch::~AckCollectWitch() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCollectWitch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCollectWitch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckCollectWitch::ArenaDtor(void* object) {
  AckCollectWitch* _this = reinterpret_cast< AckCollectWitch* >(object);
  (void)_this;
}
void AckCollectWitch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCollectWitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCollectWitch::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCollectWitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_collect_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(is_collect_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCollectWitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_collect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_collect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCollectWitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCollectWitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_id(), target);
  }

  // int32 is_collect = 3;
  if (this->is_collect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_is_collect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCollectWitch)
  return target;
}

size_t AckCollectWitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCollectWitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 is_collect = 3;
  if (this->is_collect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_collect());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCollectWitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCollectWitch)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCollectWitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCollectWitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCollectWitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCollectWitch)
    MergeFrom(*source);
  }
}

void AckCollectWitch::MergeFrom(const AckCollectWitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCollectWitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.is_collect() != 0) {
    _internal_set_is_collect(from._internal_is_collect());
  }
}

void AckCollectWitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCollectWitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCollectWitch::CopyFrom(const AckCollectWitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCollectWitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCollectWitch::IsInitialized() const {
  return true;
}

void AckCollectWitch::InternalSwap(AckCollectWitch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckCollectWitch, is_collect_)
      + sizeof(AckCollectWitch::is_collect_)
      - PROTOBUF_FIELD_OFFSET(AckCollectWitch, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCollectWitch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[42]);
}

// ===================================================================

class ReqInitPlayerName::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqInitPlayerName* msg);
};

const ::KWMsg::Ident&
ReqInitPlayerName::_Internal::player_id(const ReqInitPlayerName* msg) {
  return *msg->player_id_;
}
void ReqInitPlayerName::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqInitPlayerName::ReqInitPlayerName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqInitPlayerName)
}
ReqInitPlayerName::ReqInitPlayerName(const ReqInitPlayerName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  is_random_name_ = from.is_random_name_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqInitPlayerName)
}

void ReqInitPlayerName::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_random_name_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(is_random_name_));
}

ReqInitPlayerName::~ReqInitPlayerName() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqInitPlayerName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqInitPlayerName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqInitPlayerName::ArenaDtor(void* object) {
  ReqInitPlayerName* _this = reinterpret_cast< ReqInitPlayerName* >(object);
  (void)_this;
}
void ReqInitPlayerName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqInitPlayerName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqInitPlayerName::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqInitPlayerName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  is_random_name_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqInitPlayerName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_random_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_random_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqInitPlayerName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqInitPlayerName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes name = 2;
  if (!this->name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 is_random_name = 3;
  if (this->is_random_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_is_random_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqInitPlayerName)
  return target;
}

size_t ReqInitPlayerName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqInitPlayerName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 is_random_name = 3;
  if (this->is_random_name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_random_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqInitPlayerName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqInitPlayerName)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqInitPlayerName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqInitPlayerName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqInitPlayerName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqInitPlayerName)
    MergeFrom(*source);
  }
}

void ReqInitPlayerName::MergeFrom(const ReqInitPlayerName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqInitPlayerName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.is_random_name() != 0) {
    _internal_set_is_random_name(from._internal_is_random_name());
  }
}

void ReqInitPlayerName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqInitPlayerName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInitPlayerName::CopyFrom(const ReqInitPlayerName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqInitPlayerName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInitPlayerName::IsInitialized() const {
  return true;
}

void ReqInitPlayerName::InternalSwap(ReqInitPlayerName* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqInitPlayerName, is_random_name_)
      + sizeof(ReqInitPlayerName::is_random_name_)
      - PROTOBUF_FIELD_OFFSET(ReqInitPlayerName, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqInitPlayerName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[43]);
}

// ===================================================================

class AckInitPlayerName::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AckInitPlayerName* msg);
};

const ::KWMsg::Ident&
AckInitPlayerName::_Internal::player_id(const AckInitPlayerName* msg) {
  return *msg->player_id_;
}
void AckInitPlayerName::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AckInitPlayerName::AckInitPlayerName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckInitPlayerName)
}
AckInitPlayerName::AckInitPlayerName(const AckInitPlayerName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckInitPlayerName)
}

void AckInitPlayerName::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(event_code_));
}

AckInitPlayerName::~AckInitPlayerName() {
  // @@protoc_insertion_point(destructor:KWMsg.AckInitPlayerName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckInitPlayerName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void AckInitPlayerName::ArenaDtor(void* object) {
  AckInitPlayerName* _this = reinterpret_cast< AckInitPlayerName* >(object);
  (void)_this;
}
void AckInitPlayerName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckInitPlayerName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckInitPlayerName::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckInitPlayerName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckInitPlayerName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckInitPlayerName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckInitPlayerName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  // bytes name = 3;
  if (!this->name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckInitPlayerName)
  return target;
}

size_t AckInitPlayerName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckInitPlayerName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 3;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckInitPlayerName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckInitPlayerName)
  GOOGLE_DCHECK_NE(&from, this);
  const AckInitPlayerName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckInitPlayerName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckInitPlayerName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckInitPlayerName)
    MergeFrom(*source);
  }
}

void AckInitPlayerName::MergeFrom(const AckInitPlayerName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckInitPlayerName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckInitPlayerName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckInitPlayerName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckInitPlayerName::CopyFrom(const AckInitPlayerName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckInitPlayerName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckInitPlayerName::IsInitialized() const {
  return true;
}

void AckInitPlayerName::InternalSwap(AckInitPlayerName* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckInitPlayerName, event_code_)
      + sizeof(AckInitPlayerName::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckInitPlayerName, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckInitPlayerName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[44]);
}

// ===================================================================

class ReqUpdateModule::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqUpdateModule* msg);
};

const ::KWMsg::Ident&
ReqUpdateModule::_Internal::player_id(const ReqUpdateModule* msg) {
  return *msg->player_id_;
}
void ReqUpdateModule::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqUpdateModule::ReqUpdateModule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqUpdateModule)
}
ReqUpdateModule::ReqUpdateModule(const ReqUpdateModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqUpdateModule)
}

void ReqUpdateModule::SharedCtor() {
player_id_ = nullptr;
}

ReqUpdateModule::~ReqUpdateModule() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqUpdateModule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqUpdateModule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqUpdateModule::ArenaDtor(void* object) {
  ReqUpdateModule* _this = reinterpret_cast< ReqUpdateModule* >(object);
  (void)_this;
}
void ReqUpdateModule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqUpdateModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqUpdateModule::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqUpdateModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqUpdateModule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUpdateModule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqUpdateModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqUpdateModule)
  return target;
}

size_t ReqUpdateModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqUpdateModule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUpdateModule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqUpdateModule)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUpdateModule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUpdateModule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqUpdateModule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqUpdateModule)
    MergeFrom(*source);
  }
}

void ReqUpdateModule::MergeFrom(const ReqUpdateModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqUpdateModule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqUpdateModule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqUpdateModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpdateModule::CopyFrom(const ReqUpdateModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqUpdateModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdateModule::IsInitialized() const {
  return true;
}

void ReqUpdateModule::InternalSwap(ReqUpdateModule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUpdateModule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[45]);
}

// ===================================================================

class AckUpdateModule::_Internal {
 public:
};

AckUpdateModule::AckUpdateModule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckUpdateModule)
}
AckUpdateModule::AckUpdateModule(const AckUpdateModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  module_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_module_id().empty()) {
    module_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_module_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&chapter_status_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(chapter_status_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckUpdateModule)
}

void AckUpdateModule::SharedCtor() {
module_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chapter_status_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(chapter_status_));
}

AckUpdateModule::~AckUpdateModule() {
  // @@protoc_insertion_point(destructor:KWMsg.AckUpdateModule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckUpdateModule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  module_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckUpdateModule::ArenaDtor(void* object) {
  AckUpdateModule* _this = reinterpret_cast< AckUpdateModule* >(object);
  (void)_this;
}
void AckUpdateModule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckUpdateModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckUpdateModule::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckUpdateModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_id_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chapter_status_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(chapter_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckUpdateModule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes module_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_module_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chapter_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chapter_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckUpdateModule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckUpdateModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes module_id = 2;
  if (!this->module_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_module_id(), target);
  }

  // int32 chapter_status = 3;
  if (this->chapter_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chapter_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckUpdateModule)
  return target;
}

size_t AckUpdateModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckUpdateModule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes module_id = 2;
  if (!this->module_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_module_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 chapter_status = 3;
  if (this->chapter_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chapter_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckUpdateModule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckUpdateModule)
  GOOGLE_DCHECK_NE(&from, this);
  const AckUpdateModule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckUpdateModule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckUpdateModule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckUpdateModule)
    MergeFrom(*source);
  }
}

void AckUpdateModule::MergeFrom(const AckUpdateModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckUpdateModule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.module_id().empty()) {
    _internal_set_module_id(from._internal_module_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.chapter_status() != 0) {
    _internal_set_chapter_status(from._internal_chapter_status());
  }
}

void AckUpdateModule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckUpdateModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateModule::CopyFrom(const AckUpdateModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckUpdateModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateModule::IsInitialized() const {
  return true;
}

void AckUpdateModule::InternalSwap(AckUpdateModule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &module_id_, GetArenaForAllocation(),
      &other->module_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckUpdateModule, chapter_status_)
      + sizeof(AckUpdateModule::chapter_status_)
      - PROTOBUF_FIELD_OFFSET(AckUpdateModule, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckUpdateModule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[46]);
}

// ===================================================================

class ReqChapterRewardTipOk::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqChapterRewardTipOk* msg);
};

const ::KWMsg::Ident&
ReqChapterRewardTipOk::_Internal::player_id(const ReqChapterRewardTipOk* msg) {
  return *msg->player_id_;
}
void ReqChapterRewardTipOk::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqChapterRewardTipOk::ReqChapterRewardTipOk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqChapterRewardTipOk)
}
ReqChapterRewardTipOk::ReqChapterRewardTipOk(const ReqChapterRewardTipOk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqChapterRewardTipOk)
}

void ReqChapterRewardTipOk::SharedCtor() {
player_id_ = nullptr;
}

ReqChapterRewardTipOk::~ReqChapterRewardTipOk() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqChapterRewardTipOk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqChapterRewardTipOk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqChapterRewardTipOk::ArenaDtor(void* object) {
  ReqChapterRewardTipOk* _this = reinterpret_cast< ReqChapterRewardTipOk* >(object);
  (void)_this;
}
void ReqChapterRewardTipOk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqChapterRewardTipOk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqChapterRewardTipOk::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqChapterRewardTipOk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqChapterRewardTipOk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqChapterRewardTipOk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqChapterRewardTipOk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqChapterRewardTipOk)
  return target;
}

size_t ReqChapterRewardTipOk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqChapterRewardTipOk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqChapterRewardTipOk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqChapterRewardTipOk)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqChapterRewardTipOk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqChapterRewardTipOk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqChapterRewardTipOk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqChapterRewardTipOk)
    MergeFrom(*source);
  }
}

void ReqChapterRewardTipOk::MergeFrom(const ReqChapterRewardTipOk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqChapterRewardTipOk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqChapterRewardTipOk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqChapterRewardTipOk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChapterRewardTipOk::CopyFrom(const ReqChapterRewardTipOk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqChapterRewardTipOk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChapterRewardTipOk::IsInitialized() const {
  return true;
}

void ReqChapterRewardTipOk::InternalSwap(ReqChapterRewardTipOk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqChapterRewardTipOk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[47]);
}

// ===================================================================

class AckChapterRewardTipOk::_Internal {
 public:
};

AckChapterRewardTipOk::AckChapterRewardTipOk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckChapterRewardTipOk)
}
AckChapterRewardTipOk::AckChapterRewardTipOk(const AckChapterRewardTipOk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  module_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_module_id().empty()) {
    module_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_module_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&chapter_status_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(chapter_status_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckChapterRewardTipOk)
}

void AckChapterRewardTipOk::SharedCtor() {
module_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chapter_status_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(chapter_status_));
}

AckChapterRewardTipOk::~AckChapterRewardTipOk() {
  // @@protoc_insertion_point(destructor:KWMsg.AckChapterRewardTipOk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckChapterRewardTipOk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  module_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckChapterRewardTipOk::ArenaDtor(void* object) {
  AckChapterRewardTipOk* _this = reinterpret_cast< AckChapterRewardTipOk* >(object);
  (void)_this;
}
void AckChapterRewardTipOk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckChapterRewardTipOk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckChapterRewardTipOk::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckChapterRewardTipOk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_id_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chapter_status_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(chapter_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckChapterRewardTipOk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes module_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_module_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chapter_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chapter_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckChapterRewardTipOk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckChapterRewardTipOk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes module_id = 2;
  if (!this->module_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_module_id(), target);
  }

  // int32 chapter_status = 3;
  if (this->chapter_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chapter_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckChapterRewardTipOk)
  return target;
}

size_t AckChapterRewardTipOk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckChapterRewardTipOk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes module_id = 2;
  if (!this->module_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_module_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 chapter_status = 3;
  if (this->chapter_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chapter_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckChapterRewardTipOk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckChapterRewardTipOk)
  GOOGLE_DCHECK_NE(&from, this);
  const AckChapterRewardTipOk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckChapterRewardTipOk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckChapterRewardTipOk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckChapterRewardTipOk)
    MergeFrom(*source);
  }
}

void AckChapterRewardTipOk::MergeFrom(const AckChapterRewardTipOk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckChapterRewardTipOk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.module_id().empty()) {
    _internal_set_module_id(from._internal_module_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.chapter_status() != 0) {
    _internal_set_chapter_status(from._internal_chapter_status());
  }
}

void AckChapterRewardTipOk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckChapterRewardTipOk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckChapterRewardTipOk::CopyFrom(const AckChapterRewardTipOk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckChapterRewardTipOk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckChapterRewardTipOk::IsInitialized() const {
  return true;
}

void AckChapterRewardTipOk::InternalSwap(AckChapterRewardTipOk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &module_id_, GetArenaForAllocation(),
      &other->module_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckChapterRewardTipOk, chapter_status_)
      + sizeof(AckChapterRewardTipOk::chapter_status_)
      - PROTOBUF_FIELD_OFFSET(AckChapterRewardTipOk, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckChapterRewardTipOk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[48]);
}

// ===================================================================

class ReqCollegeDrama::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqCollegeDrama* msg);
};

const ::KWMsg::Ident&
ReqCollegeDrama::_Internal::player_id(const ReqCollegeDrama* msg) {
  return *msg->player_id_;
}
void ReqCollegeDrama::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqCollegeDrama::ReqCollegeDrama(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCollegeDrama)
}
ReqCollegeDrama::ReqCollegeDrama(const ReqCollegeDrama& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  module_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_module_id().empty()) {
    module_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_module_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  drama_type_ = from.drama_type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCollegeDrama)
}

void ReqCollegeDrama::SharedCtor() {
module_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&drama_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(drama_type_));
}

ReqCollegeDrama::~ReqCollegeDrama() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCollegeDrama)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCollegeDrama::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  module_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqCollegeDrama::ArenaDtor(void* object) {
  ReqCollegeDrama* _this = reinterpret_cast< ReqCollegeDrama* >(object);
  (void)_this;
}
void ReqCollegeDrama::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCollegeDrama::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCollegeDrama::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCollegeDrama)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  drama_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCollegeDrama::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ReqCollegeDrama.DramaType drama_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_drama_type(static_cast<::KWMsg::ReqCollegeDrama_DramaType>(val));
        } else goto handle_unusual;
        continue;
      // bytes module_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_module_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCollegeDrama::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCollegeDrama)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.ReqCollegeDrama.DramaType drama_type = 2;
  if (this->drama_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_drama_type(), target);
  }

  // bytes module_id = 3;
  if (!this->module_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_module_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCollegeDrama)
  return target;
}

size_t ReqCollegeDrama::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCollegeDrama)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes module_id = 3;
  if (!this->module_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_module_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.ReqCollegeDrama.DramaType drama_type = 2;
  if (this->drama_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_drama_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCollegeDrama::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCollegeDrama)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCollegeDrama* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCollegeDrama>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCollegeDrama)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCollegeDrama)
    MergeFrom(*source);
  }
}

void ReqCollegeDrama::MergeFrom(const ReqCollegeDrama& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCollegeDrama)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.module_id().empty()) {
    _internal_set_module_id(from._internal_module_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.drama_type() != 0) {
    _internal_set_drama_type(from._internal_drama_type());
  }
}

void ReqCollegeDrama::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCollegeDrama)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCollegeDrama::CopyFrom(const ReqCollegeDrama& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCollegeDrama)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCollegeDrama::IsInitialized() const {
  return true;
}

void ReqCollegeDrama::InternalSwap(ReqCollegeDrama* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &module_id_, GetArenaForAllocation(),
      &other->module_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqCollegeDrama, drama_type_)
      + sizeof(ReqCollegeDrama::drama_type_)
      - PROTOBUF_FIELD_OFFSET(ReqCollegeDrama, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCollegeDrama::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[49]);
}

// ===================================================================

class AckCollegeDrama::_Internal {
 public:
};

AckCollegeDrama::AckCollegeDrama(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCollegeDrama)
}
AckCollegeDrama::AckCollegeDrama(const AckCollegeDrama& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCollegeDrama)
}

void AckCollegeDrama::SharedCtor() {
event_code_ = 0;
}

AckCollegeDrama::~AckCollegeDrama() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCollegeDrama)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCollegeDrama::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckCollegeDrama::ArenaDtor(void* object) {
  AckCollegeDrama* _this = reinterpret_cast< AckCollegeDrama* >(object);
  (void)_this;
}
void AckCollegeDrama::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCollegeDrama::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCollegeDrama::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCollegeDrama)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCollegeDrama::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCollegeDrama::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCollegeDrama)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCollegeDrama)
  return target;
}

size_t AckCollegeDrama::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCollegeDrama)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCollegeDrama::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCollegeDrama)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCollegeDrama* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCollegeDrama>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCollegeDrama)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCollegeDrama)
    MergeFrom(*source);
  }
}

void AckCollegeDrama::MergeFrom(const AckCollegeDrama& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCollegeDrama)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckCollegeDrama::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCollegeDrama)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCollegeDrama::CopyFrom(const AckCollegeDrama& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCollegeDrama)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCollegeDrama::IsInitialized() const {
  return true;
}

void AckCollegeDrama::InternalSwap(AckCollegeDrama* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCollegeDrama::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[50]);
}

// ===================================================================

class ReqCollegeTaskAction::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqCollegeTaskAction* msg);
};

const ::KWMsg::Ident&
ReqCollegeTaskAction::_Internal::player_id(const ReqCollegeTaskAction* msg) {
  return *msg->player_id_;
}
void ReqCollegeTaskAction::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqCollegeTaskAction::ReqCollegeTaskAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCollegeTaskAction)
}
ReqCollegeTaskAction::ReqCollegeTaskAction(const ReqCollegeTaskAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCollegeTaskAction)
}

void ReqCollegeTaskAction::SharedCtor() {
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqCollegeTaskAction::~ReqCollegeTaskAction() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCollegeTaskAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCollegeTaskAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqCollegeTaskAction::ArenaDtor(void* object) {
  ReqCollegeTaskAction* _this = reinterpret_cast< ReqCollegeTaskAction* >(object);
  (void)_this;
}
void ReqCollegeTaskAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCollegeTaskAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCollegeTaskAction::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCollegeTaskAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCollegeTaskAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCollegeTaskAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCollegeTaskAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes task_id = 2;
  if (!this->task_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCollegeTaskAction)
  return target;
}

size_t ReqCollegeTaskAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCollegeTaskAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes task_id = 2;
  if (!this->task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_task_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCollegeTaskAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCollegeTaskAction)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCollegeTaskAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCollegeTaskAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCollegeTaskAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCollegeTaskAction)
    MergeFrom(*source);
  }
}

void ReqCollegeTaskAction::MergeFrom(const ReqCollegeTaskAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCollegeTaskAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqCollegeTaskAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCollegeTaskAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCollegeTaskAction::CopyFrom(const ReqCollegeTaskAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCollegeTaskAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCollegeTaskAction::IsInitialized() const {
  return true;
}

void ReqCollegeTaskAction::InternalSwap(ReqCollegeTaskAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, GetArenaForAllocation(),
      &other->task_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCollegeTaskAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[51]);
}

// ===================================================================

class AckCollegeTaskAction::_Internal {
 public:
};

AckCollegeTaskAction::AckCollegeTaskAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCollegeTaskAction)
}
AckCollegeTaskAction::AckCollegeTaskAction(const AckCollegeTaskAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCollegeTaskAction)
}

void AckCollegeTaskAction::SharedCtor() {
event_code_ = 0;
}

AckCollegeTaskAction::~AckCollegeTaskAction() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCollegeTaskAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCollegeTaskAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckCollegeTaskAction::ArenaDtor(void* object) {
  AckCollegeTaskAction* _this = reinterpret_cast< AckCollegeTaskAction* >(object);
  (void)_this;
}
void AckCollegeTaskAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCollegeTaskAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCollegeTaskAction::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCollegeTaskAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCollegeTaskAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCollegeTaskAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCollegeTaskAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCollegeTaskAction)
  return target;
}

size_t AckCollegeTaskAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCollegeTaskAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCollegeTaskAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCollegeTaskAction)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCollegeTaskAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCollegeTaskAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCollegeTaskAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCollegeTaskAction)
    MergeFrom(*source);
  }
}

void AckCollegeTaskAction::MergeFrom(const AckCollegeTaskAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCollegeTaskAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckCollegeTaskAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCollegeTaskAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCollegeTaskAction::CopyFrom(const AckCollegeTaskAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCollegeTaskAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCollegeTaskAction::IsInitialized() const {
  return true;
}

void AckCollegeTaskAction::InternalSwap(AckCollegeTaskAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCollegeTaskAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[52]);
}

// ===================================================================

class ReqCollegeTaskCountdown::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqCollegeTaskCountdown* msg);
};

const ::KWMsg::Ident&
ReqCollegeTaskCountdown::_Internal::player_id(const ReqCollegeTaskCountdown* msg) {
  return *msg->player_id_;
}
void ReqCollegeTaskCountdown::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqCollegeTaskCountdown::ReqCollegeTaskCountdown(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCollegeTaskCountdown)
}
ReqCollegeTaskCountdown::ReqCollegeTaskCountdown(const ReqCollegeTaskCountdown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCollegeTaskCountdown)
}

void ReqCollegeTaskCountdown::SharedCtor() {
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqCollegeTaskCountdown::~ReqCollegeTaskCountdown() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCollegeTaskCountdown)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCollegeTaskCountdown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqCollegeTaskCountdown::ArenaDtor(void* object) {
  ReqCollegeTaskCountdown* _this = reinterpret_cast< ReqCollegeTaskCountdown* >(object);
  (void)_this;
}
void ReqCollegeTaskCountdown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCollegeTaskCountdown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCollegeTaskCountdown::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCollegeTaskCountdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCollegeTaskCountdown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCollegeTaskCountdown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCollegeTaskCountdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes task_id = 2;
  if (!this->task_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCollegeTaskCountdown)
  return target;
}

size_t ReqCollegeTaskCountdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCollegeTaskCountdown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes task_id = 2;
  if (!this->task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_task_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCollegeTaskCountdown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCollegeTaskCountdown)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCollegeTaskCountdown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCollegeTaskCountdown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCollegeTaskCountdown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCollegeTaskCountdown)
    MergeFrom(*source);
  }
}

void ReqCollegeTaskCountdown::MergeFrom(const ReqCollegeTaskCountdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCollegeTaskCountdown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqCollegeTaskCountdown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCollegeTaskCountdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCollegeTaskCountdown::CopyFrom(const ReqCollegeTaskCountdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCollegeTaskCountdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCollegeTaskCountdown::IsInitialized() const {
  return true;
}

void ReqCollegeTaskCountdown::InternalSwap(ReqCollegeTaskCountdown* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, GetArenaForAllocation(),
      &other->task_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCollegeTaskCountdown::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[53]);
}

// ===================================================================

class AckCollegeTaskCountdown::_Internal {
 public:
};

AckCollegeTaskCountdown::AckCollegeTaskCountdown(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCollegeTaskCountdown)
}
AckCollegeTaskCountdown::AckCollegeTaskCountdown(const AckCollegeTaskCountdown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCollegeTaskCountdown)
}

void AckCollegeTaskCountdown::SharedCtor() {
event_code_ = 0;
}

AckCollegeTaskCountdown::~AckCollegeTaskCountdown() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCollegeTaskCountdown)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCollegeTaskCountdown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckCollegeTaskCountdown::ArenaDtor(void* object) {
  AckCollegeTaskCountdown* _this = reinterpret_cast< AckCollegeTaskCountdown* >(object);
  (void)_this;
}
void AckCollegeTaskCountdown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCollegeTaskCountdown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCollegeTaskCountdown::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCollegeTaskCountdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCollegeTaskCountdown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCollegeTaskCountdown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCollegeTaskCountdown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCollegeTaskCountdown)
  return target;
}

size_t AckCollegeTaskCountdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCollegeTaskCountdown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCollegeTaskCountdown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCollegeTaskCountdown)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCollegeTaskCountdown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCollegeTaskCountdown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCollegeTaskCountdown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCollegeTaskCountdown)
    MergeFrom(*source);
  }
}

void AckCollegeTaskCountdown::MergeFrom(const AckCollegeTaskCountdown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCollegeTaskCountdown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckCollegeTaskCountdown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCollegeTaskCountdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCollegeTaskCountdown::CopyFrom(const AckCollegeTaskCountdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCollegeTaskCountdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCollegeTaskCountdown::IsInitialized() const {
  return true;
}

void AckCollegeTaskCountdown::InternalSwap(AckCollegeTaskCountdown* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCollegeTaskCountdown::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[54]);
}

// ===================================================================

class ExamQuestion::_Internal {
 public:
};

ExamQuestion::ExamQuestion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ExamQuestion)
}
ExamQuestion::ExamQuestion(const ExamQuestion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  question_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_question_id().empty()) {
    question_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_question_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ExamQuestion)
}

void ExamQuestion::SharedCtor() {
question_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExamQuestion::~ExamQuestion() {
  // @@protoc_insertion_point(destructor:KWMsg.ExamQuestion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExamQuestion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  question_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExamQuestion::ArenaDtor(void* object) {
  ExamQuestion* _this = reinterpret_cast< ExamQuestion* >(object);
  (void)_this;
}
void ExamQuestion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExamQuestion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExamQuestion::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ExamQuestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  question_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExamQuestion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes question_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_question_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExamQuestion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ExamQuestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes question_id = 1;
  if (!this->question_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_question_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ExamQuestion)
  return target;
}

size_t ExamQuestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ExamQuestion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes question_id = 1;
  if (!this->question_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_question_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExamQuestion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ExamQuestion)
  GOOGLE_DCHECK_NE(&from, this);
  const ExamQuestion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExamQuestion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ExamQuestion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ExamQuestion)
    MergeFrom(*source);
  }
}

void ExamQuestion::MergeFrom(const ExamQuestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ExamQuestion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.question_id().empty()) {
    _internal_set_question_id(from._internal_question_id());
  }
}

void ExamQuestion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ExamQuestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExamQuestion::CopyFrom(const ExamQuestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ExamQuestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExamQuestion::IsInitialized() const {
  return true;
}

void ExamQuestion::InternalSwap(ExamQuestion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &question_id_, GetArenaForAllocation(),
      &other->question_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ExamQuestion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[55]);
}

// ===================================================================

class ReqCollegeStartExam::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqCollegeStartExam* msg);
};

const ::KWMsg::Ident&
ReqCollegeStartExam::_Internal::player_id(const ReqCollegeStartExam* msg) {
  return *msg->player_id_;
}
void ReqCollegeStartExam::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqCollegeStartExam::ReqCollegeStartExam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCollegeStartExam)
}
ReqCollegeStartExam::ReqCollegeStartExam(const ReqCollegeStartExam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCollegeStartExam)
}

void ReqCollegeStartExam::SharedCtor() {
player_id_ = nullptr;
}

ReqCollegeStartExam::~ReqCollegeStartExam() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCollegeStartExam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCollegeStartExam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqCollegeStartExam::ArenaDtor(void* object) {
  ReqCollegeStartExam* _this = reinterpret_cast< ReqCollegeStartExam* >(object);
  (void)_this;
}
void ReqCollegeStartExam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCollegeStartExam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCollegeStartExam::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCollegeStartExam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCollegeStartExam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCollegeStartExam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCollegeStartExam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCollegeStartExam)
  return target;
}

size_t ReqCollegeStartExam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCollegeStartExam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCollegeStartExam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCollegeStartExam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCollegeStartExam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCollegeStartExam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCollegeStartExam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCollegeStartExam)
    MergeFrom(*source);
  }
}

void ReqCollegeStartExam::MergeFrom(const ReqCollegeStartExam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCollegeStartExam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqCollegeStartExam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCollegeStartExam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCollegeStartExam::CopyFrom(const ReqCollegeStartExam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCollegeStartExam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCollegeStartExam::IsInitialized() const {
  return true;
}

void ReqCollegeStartExam::InternalSwap(ReqCollegeStartExam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCollegeStartExam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[56]);
}

// ===================================================================

class AckCollegeStartExam::_Internal {
 public:
};

AckCollegeStartExam::AckCollegeStartExam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  question_id_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCollegeStartExam)
}
AckCollegeStartExam::AckCollegeStartExam(const AckCollegeStartExam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      question_id_list_(from.question_id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&exam_type_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(exam_type_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCollegeStartExam)
}

void AckCollegeStartExam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exam_type_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(exam_type_));
}

AckCollegeStartExam::~AckCollegeStartExam() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCollegeStartExam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCollegeStartExam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckCollegeStartExam::ArenaDtor(void* object) {
  AckCollegeStartExam* _this = reinterpret_cast< AckCollegeStartExam* >(object);
  (void)_this;
}
void AckCollegeStartExam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCollegeStartExam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCollegeStartExam::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCollegeStartExam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  question_id_list_.Clear();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exam_type_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(exam_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCollegeStartExam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 exam_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          exam_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.ExamQuestion question_id_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_question_id_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCollegeStartExam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCollegeStartExam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // int32 exam_type = 2;
  if (this->exam_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_exam_type(), target);
  }

  // repeated .KWMsg.ExamQuestion question_id_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_question_id_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_question_id_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCollegeStartExam)
  return target;
}

size_t AckCollegeStartExam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCollegeStartExam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.ExamQuestion question_id_list = 3;
  total_size += 1UL * this->_internal_question_id_list_size();
  for (const auto& msg : this->question_id_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 exam_type = 2;
  if (this->exam_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exam_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCollegeStartExam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCollegeStartExam)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCollegeStartExam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCollegeStartExam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCollegeStartExam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCollegeStartExam)
    MergeFrom(*source);
  }
}

void AckCollegeStartExam::MergeFrom(const AckCollegeStartExam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCollegeStartExam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  question_id_list_.MergeFrom(from.question_id_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.exam_type() != 0) {
    _internal_set_exam_type(from._internal_exam_type());
  }
}

void AckCollegeStartExam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCollegeStartExam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCollegeStartExam::CopyFrom(const AckCollegeStartExam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCollegeStartExam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCollegeStartExam::IsInitialized() const {
  return true;
}

void AckCollegeStartExam::InternalSwap(AckCollegeStartExam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  question_id_list_.InternalSwap(&other->question_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckCollegeStartExam, exam_type_)
      + sizeof(AckCollegeStartExam::exam_type_)
      - PROTOBUF_FIELD_OFFSET(AckCollegeStartExam, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCollegeStartExam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[57]);
}

// ===================================================================

class ReqCollegeAnswer::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqCollegeAnswer* msg);
};

const ::KWMsg::Ident&
ReqCollegeAnswer::_Internal::player_id(const ReqCollegeAnswer* msg) {
  return *msg->player_id_;
}
void ReqCollegeAnswer::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqCollegeAnswer::ReqCollegeAnswer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCollegeAnswer)
}
ReqCollegeAnswer::ReqCollegeAnswer(const ReqCollegeAnswer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  question_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_question_id().empty()) {
    question_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_question_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  options_ = from.options_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCollegeAnswer)
}

void ReqCollegeAnswer::SharedCtor() {
question_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&options_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(options_));
}

ReqCollegeAnswer::~ReqCollegeAnswer() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCollegeAnswer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCollegeAnswer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  question_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqCollegeAnswer::ArenaDtor(void* object) {
  ReqCollegeAnswer* _this = reinterpret_cast< ReqCollegeAnswer* >(object);
  (void)_this;
}
void ReqCollegeAnswer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCollegeAnswer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCollegeAnswer::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCollegeAnswer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  question_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  options_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCollegeAnswer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes question_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_question_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          options_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCollegeAnswer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCollegeAnswer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes question_id = 2;
  if (!this->question_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_question_id(), target);
  }

  // int32 options = 3;
  if (this->options() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_options(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCollegeAnswer)
  return target;
}

size_t ReqCollegeAnswer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCollegeAnswer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes question_id = 2;
  if (!this->question_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_question_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 options = 3;
  if (this->options() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_options());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCollegeAnswer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCollegeAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCollegeAnswer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCollegeAnswer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCollegeAnswer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCollegeAnswer)
    MergeFrom(*source);
  }
}

void ReqCollegeAnswer::MergeFrom(const ReqCollegeAnswer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCollegeAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.question_id().empty()) {
    _internal_set_question_id(from._internal_question_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.options() != 0) {
    _internal_set_options(from._internal_options());
  }
}

void ReqCollegeAnswer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCollegeAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCollegeAnswer::CopyFrom(const ReqCollegeAnswer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCollegeAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCollegeAnswer::IsInitialized() const {
  return true;
}

void ReqCollegeAnswer::InternalSwap(ReqCollegeAnswer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &question_id_, GetArenaForAllocation(),
      &other->question_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqCollegeAnswer, options_)
      + sizeof(ReqCollegeAnswer::options_)
      - PROTOBUF_FIELD_OFFSET(ReqCollegeAnswer, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCollegeAnswer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[58]);
}

// ===================================================================

class AckCollegeAnswer::_Internal {
 public:
};

AckCollegeAnswer::AckCollegeAnswer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCollegeAnswer)
}
AckCollegeAnswer::AckCollegeAnswer(const AckCollegeAnswer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  question_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_question_id().empty()) {
    question_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_question_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCollegeAnswer)
}

void AckCollegeAnswer::SharedCtor() {
question_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(result_));
}

AckCollegeAnswer::~AckCollegeAnswer() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCollegeAnswer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCollegeAnswer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  question_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckCollegeAnswer::ArenaDtor(void* object) {
  AckCollegeAnswer* _this = reinterpret_cast< AckCollegeAnswer* >(object);
  (void)_this;
}
void AckCollegeAnswer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCollegeAnswer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCollegeAnswer::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCollegeAnswer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  question_id_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCollegeAnswer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes question_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_question_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCollegeAnswer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCollegeAnswer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes question_id = 2;
  if (!this->question_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_question_id(), target);
  }

  // int32 result = 3;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCollegeAnswer)
  return target;
}

size_t AckCollegeAnswer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCollegeAnswer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes question_id = 2;
  if (!this->question_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_question_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCollegeAnswer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCollegeAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCollegeAnswer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCollegeAnswer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCollegeAnswer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCollegeAnswer)
    MergeFrom(*source);
  }
}

void AckCollegeAnswer::MergeFrom(const AckCollegeAnswer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCollegeAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.question_id().empty()) {
    _internal_set_question_id(from._internal_question_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void AckCollegeAnswer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCollegeAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCollegeAnswer::CopyFrom(const AckCollegeAnswer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCollegeAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCollegeAnswer::IsInitialized() const {
  return true;
}

void AckCollegeAnswer::InternalSwap(AckCollegeAnswer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &question_id_, GetArenaForAllocation(),
      &other->question_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckCollegeAnswer, result_)
      + sizeof(AckCollegeAnswer::result_)
      - PROTOBUF_FIELD_OFFSET(AckCollegeAnswer, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCollegeAnswer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[59]);
}

// ===================================================================

class CommonReward::_Internal {
 public:
};

CommonReward::CommonReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.CommonReward)
}
CommonReward::CommonReward(const CommonReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reward_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reward_id().empty()) {
    reward_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reward_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&reward_count_, &from.reward_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_type_) -
    reinterpret_cast<char*>(&reward_count_)) + sizeof(reward_type_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.CommonReward)
}

void CommonReward::SharedCtor() {
reward_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reward_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reward_type_) -
    reinterpret_cast<char*>(&reward_count_)) + sizeof(reward_type_));
}

CommonReward::~CommonReward() {
  // @@protoc_insertion_point(destructor:KWMsg.CommonReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reward_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommonReward::ArenaDtor(void* object) {
  CommonReward* _this = reinterpret_cast< CommonReward* >(object);
  (void)_this;
}
void CommonReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonReward::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.CommonReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_id_.ClearToEmpty();
  ::memset(&reward_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_type_) -
      reinterpret_cast<char*>(&reward_count_)) + sizeof(reward_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes reward_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reward_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reward_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reward_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.CommonReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes reward_id = 1;
  if (!this->reward_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_reward_id(), target);
  }

  // int32 reward_count = 2;
  if (this->reward_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reward_count(), target);
  }

  // int32 reward_type = 3;
  if (this->reward_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reward_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.CommonReward)
  return target;
}

size_t CommonReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.CommonReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes reward_id = 1;
  if (!this->reward_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reward_id());
  }

  // int32 reward_count = 2;
  if (this->reward_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward_count());
  }

  // int32 reward_type = 3;
  if (this->reward_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.CommonReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.CommonReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.CommonReward)
    MergeFrom(*source);
  }
}

void CommonReward::MergeFrom(const CommonReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.CommonReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.reward_id().empty()) {
    _internal_set_reward_id(from._internal_reward_id());
  }
  if (from.reward_count() != 0) {
    _internal_set_reward_count(from._internal_reward_count());
  }
  if (from.reward_type() != 0) {
    _internal_set_reward_type(from._internal_reward_type());
  }
}

void CommonReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.CommonReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonReward::CopyFrom(const CommonReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.CommonReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonReward::IsInitialized() const {
  return true;
}

void CommonReward::InternalSwap(CommonReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reward_id_, GetArenaForAllocation(),
      &other->reward_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonReward, reward_type_)
      + sizeof(CommonReward::reward_type_)
      - PROTOBUF_FIELD_OFFSET(CommonReward, reward_count_)>(
          reinterpret_cast<char*>(&reward_count_),
          reinterpret_cast<char*>(&other->reward_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonReward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[60]);
}

// ===================================================================

class ReqCollegeReward::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqCollegeReward* msg);
};

const ::KWMsg::Ident&
ReqCollegeReward::_Internal::player_id(const ReqCollegeReward* msg) {
  return *msg->player_id_;
}
void ReqCollegeReward::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqCollegeReward::ReqCollegeReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCollegeReward)
}
ReqCollegeReward::ReqCollegeReward(const ReqCollegeReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  reward_type_ = from.reward_type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCollegeReward)
}

void ReqCollegeReward::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reward_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(reward_type_));
}

ReqCollegeReward::~ReqCollegeReward() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCollegeReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCollegeReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqCollegeReward::ArenaDtor(void* object) {
  ReqCollegeReward* _this = reinterpret_cast< ReqCollegeReward* >(object);
  (void)_this;
}
void ReqCollegeReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCollegeReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCollegeReward::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCollegeReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  reward_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCollegeReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reward_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCollegeReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCollegeReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 reward_type = 2;
  if (this->reward_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reward_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCollegeReward)
  return target;
}

size_t ReqCollegeReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCollegeReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 reward_type = 2;
  if (this->reward_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCollegeReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCollegeReward)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCollegeReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCollegeReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCollegeReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCollegeReward)
    MergeFrom(*source);
  }
}

void ReqCollegeReward::MergeFrom(const ReqCollegeReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCollegeReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.reward_type() != 0) {
    _internal_set_reward_type(from._internal_reward_type());
  }
}

void ReqCollegeReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCollegeReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCollegeReward::CopyFrom(const ReqCollegeReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCollegeReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCollegeReward::IsInitialized() const {
  return true;
}

void ReqCollegeReward::InternalSwap(ReqCollegeReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqCollegeReward, reward_type_)
      + sizeof(ReqCollegeReward::reward_type_)
      - PROTOBUF_FIELD_OFFSET(ReqCollegeReward, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCollegeReward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[61]);
}

// ===================================================================

class AckCollegeReward::_Internal {
 public:
};

AckCollegeReward::AckCollegeReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCollegeReward)
}
AckCollegeReward::AckCollegeReward(const AckCollegeReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_info_(from.reward_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCollegeReward)
}

void AckCollegeReward::SharedCtor() {
event_code_ = 0;
}

AckCollegeReward::~AckCollegeReward() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCollegeReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCollegeReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckCollegeReward::ArenaDtor(void* object) {
  AckCollegeReward* _this = reinterpret_cast< AckCollegeReward* >(object);
  (void)_this;
}
void AckCollegeReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCollegeReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCollegeReward::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCollegeReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_info_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCollegeReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.CommonReward reward_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCollegeReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCollegeReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.CommonReward reward_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reward_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCollegeReward)
  return target;
}

size_t AckCollegeReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCollegeReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.CommonReward reward_info = 2;
  total_size += 1UL * this->_internal_reward_info_size();
  for (const auto& msg : this->reward_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCollegeReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCollegeReward)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCollegeReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCollegeReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCollegeReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCollegeReward)
    MergeFrom(*source);
  }
}

void AckCollegeReward::MergeFrom(const AckCollegeReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCollegeReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_info_.MergeFrom(from.reward_info_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckCollegeReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCollegeReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCollegeReward::CopyFrom(const AckCollegeReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCollegeReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCollegeReward::IsInitialized() const {
  return true;
}

void AckCollegeReward::InternalSwap(AckCollegeReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reward_info_.InternalSwap(&other->reward_info_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCollegeReward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[62]);
}

// ===================================================================

class ReqTestSetCollegeExamStatus::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqTestSetCollegeExamStatus* msg);
};

const ::KWMsg::Ident&
ReqTestSetCollegeExamStatus::_Internal::player_id(const ReqTestSetCollegeExamStatus* msg) {
  return *msg->player_id_;
}
void ReqTestSetCollegeExamStatus::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqTestSetCollegeExamStatus::ReqTestSetCollegeExamStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqTestSetCollegeExamStatus)
}
ReqTestSetCollegeExamStatus::ReqTestSetCollegeExamStatus(const ReqTestSetCollegeExamStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  exam_type_ = from.exam_type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqTestSetCollegeExamStatus)
}

void ReqTestSetCollegeExamStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exam_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(exam_type_));
}

ReqTestSetCollegeExamStatus::~ReqTestSetCollegeExamStatus() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqTestSetCollegeExamStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqTestSetCollegeExamStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqTestSetCollegeExamStatus::ArenaDtor(void* object) {
  ReqTestSetCollegeExamStatus* _this = reinterpret_cast< ReqTestSetCollegeExamStatus* >(object);
  (void)_this;
}
void ReqTestSetCollegeExamStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqTestSetCollegeExamStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqTestSetCollegeExamStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqTestSetCollegeExamStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  exam_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqTestSetCollegeExamStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exam_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          exam_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqTestSetCollegeExamStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqTestSetCollegeExamStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 exam_type = 2;
  if (this->exam_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_exam_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqTestSetCollegeExamStatus)
  return target;
}

size_t ReqTestSetCollegeExamStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqTestSetCollegeExamStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 exam_type = 2;
  if (this->exam_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exam_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqTestSetCollegeExamStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqTestSetCollegeExamStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqTestSetCollegeExamStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqTestSetCollegeExamStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqTestSetCollegeExamStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqTestSetCollegeExamStatus)
    MergeFrom(*source);
  }
}

void ReqTestSetCollegeExamStatus::MergeFrom(const ReqTestSetCollegeExamStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqTestSetCollegeExamStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.exam_type() != 0) {
    _internal_set_exam_type(from._internal_exam_type());
  }
}

void ReqTestSetCollegeExamStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqTestSetCollegeExamStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTestSetCollegeExamStatus::CopyFrom(const ReqTestSetCollegeExamStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqTestSetCollegeExamStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTestSetCollegeExamStatus::IsInitialized() const {
  return true;
}

void ReqTestSetCollegeExamStatus::InternalSwap(ReqTestSetCollegeExamStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqTestSetCollegeExamStatus, exam_type_)
      + sizeof(ReqTestSetCollegeExamStatus::exam_type_)
      - PROTOBUF_FIELD_OFFSET(ReqTestSetCollegeExamStatus, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqTestSetCollegeExamStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[63]);
}

// ===================================================================

class ReqCollegeExamExit::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqCollegeExamExit* msg);
};

const ::KWMsg::Ident&
ReqCollegeExamExit::_Internal::player_id(const ReqCollegeExamExit* msg) {
  return *msg->player_id_;
}
void ReqCollegeExamExit::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqCollegeExamExit::ReqCollegeExamExit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCollegeExamExit)
}
ReqCollegeExamExit::ReqCollegeExamExit(const ReqCollegeExamExit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCollegeExamExit)
}

void ReqCollegeExamExit::SharedCtor() {
player_id_ = nullptr;
}

ReqCollegeExamExit::~ReqCollegeExamExit() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCollegeExamExit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCollegeExamExit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqCollegeExamExit::ArenaDtor(void* object) {
  ReqCollegeExamExit* _this = reinterpret_cast< ReqCollegeExamExit* >(object);
  (void)_this;
}
void ReqCollegeExamExit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCollegeExamExit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCollegeExamExit::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCollegeExamExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCollegeExamExit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCollegeExamExit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCollegeExamExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCollegeExamExit)
  return target;
}

size_t ReqCollegeExamExit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCollegeExamExit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCollegeExamExit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCollegeExamExit)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCollegeExamExit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCollegeExamExit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCollegeExamExit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCollegeExamExit)
    MergeFrom(*source);
  }
}

void ReqCollegeExamExit::MergeFrom(const ReqCollegeExamExit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCollegeExamExit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqCollegeExamExit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCollegeExamExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCollegeExamExit::CopyFrom(const ReqCollegeExamExit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCollegeExamExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCollegeExamExit::IsInitialized() const {
  return true;
}

void ReqCollegeExamExit::InternalSwap(ReqCollegeExamExit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCollegeExamExit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[64]);
}

// ===================================================================

class AckCollegeExamExit::_Internal {
 public:
};

AckCollegeExamExit::AckCollegeExamExit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCollegeExamExit)
}
AckCollegeExamExit::AckCollegeExamExit(const AckCollegeExamExit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCollegeExamExit)
}

void AckCollegeExamExit::SharedCtor() {
event_code_ = 0;
}

AckCollegeExamExit::~AckCollegeExamExit() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCollegeExamExit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCollegeExamExit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckCollegeExamExit::ArenaDtor(void* object) {
  AckCollegeExamExit* _this = reinterpret_cast< AckCollegeExamExit* >(object);
  (void)_this;
}
void AckCollegeExamExit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCollegeExamExit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCollegeExamExit::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCollegeExamExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCollegeExamExit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCollegeExamExit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCollegeExamExit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCollegeExamExit)
  return target;
}

size_t AckCollegeExamExit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCollegeExamExit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCollegeExamExit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCollegeExamExit)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCollegeExamExit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCollegeExamExit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCollegeExamExit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCollegeExamExit)
    MergeFrom(*source);
  }
}

void AckCollegeExamExit::MergeFrom(const AckCollegeExamExit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCollegeExamExit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckCollegeExamExit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCollegeExamExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCollegeExamExit::CopyFrom(const AckCollegeExamExit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCollegeExamExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCollegeExamExit::IsInitialized() const {
  return true;
}

void AckCollegeExamExit::InternalSwap(AckCollegeExamExit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCollegeExamExit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[65]);
}

// ===================================================================

class ReqSetItem::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqSetItem* msg);
};

const ::KWMsg::Ident&
ReqSetItem::_Internal::player_id(const ReqSetItem* msg) {
  return *msg->player_id_;
}
void ReqSetItem::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqSetItem::ReqSetItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqSetItem)
}
ReqSetItem::ReqSetItem(const ReqSetItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_item_id().empty()) {
    item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqSetItem)
}

void ReqSetItem::SharedCtor() {
item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(count_));
}

ReqSetItem::~ReqSetItem() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqSetItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqSetItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqSetItem::ArenaDtor(void* object) {
  ReqSetItem* _this = reinterpret_cast< ReqSetItem* >(object);
  (void)_this;
}
void ReqSetItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqSetItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSetItem::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqSetItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSetItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_item_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSetItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqSetItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes item_id = 2;
  if (!this->item_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_item_id(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqSetItem)
  return target;
}

size_t ReqSetItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqSetItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes item_id = 2;
  if (!this->item_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_item_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSetItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqSetItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSetItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSetItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqSetItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqSetItem)
    MergeFrom(*source);
  }
}

void ReqSetItem::MergeFrom(const ReqSetItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqSetItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.item_id().empty()) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ReqSetItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqSetItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSetItem::CopyFrom(const ReqSetItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqSetItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSetItem::IsInitialized() const {
  return true;
}

void ReqSetItem::InternalSwap(ReqSetItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &item_id_, GetArenaForAllocation(),
      &other->item_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqSetItem, count_)
      + sizeof(ReqSetItem::count_)
      - PROTOBUF_FIELD_OFFSET(ReqSetItem, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSetItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[66]);
}

// ===================================================================

class ReqBattlePreparedInfo::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBattlePreparedInfo* msg);
  static const ::KWMsg::Ident& challenge_id(const ReqBattlePreparedInfo* msg);
  static const ::KWMsg::Ident& replay_id(const ReqBattlePreparedInfo* msg);
};

const ::KWMsg::Ident&
ReqBattlePreparedInfo::_Internal::player_id(const ReqBattlePreparedInfo* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqBattlePreparedInfo::_Internal::challenge_id(const ReqBattlePreparedInfo* msg) {
  return *msg->challenge_id_;
}
const ::KWMsg::Ident&
ReqBattlePreparedInfo::_Internal::replay_id(const ReqBattlePreparedInfo* msg) {
  return *msg->replay_id_;
}
void ReqBattlePreparedInfo::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqBattlePreparedInfo::clear_challenge_id() {
  if (GetArenaForAllocation() == nullptr && challenge_id_ != nullptr) {
    delete challenge_id_;
  }
  challenge_id_ = nullptr;
}
void ReqBattlePreparedInfo::clear_replay_id() {
  if (GetArenaForAllocation() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
}
ReqBattlePreparedInfo::ReqBattlePreparedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBattlePreparedInfo)
}
ReqBattlePreparedInfo::ReqBattlePreparedInfo(const ReqBattlePreparedInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  battle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_battle_id().empty()) {
    battle_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_battle_id(), 
      GetArenaForAllocation());
  }
  game_play_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_play_id().empty()) {
    game_play_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_play_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_challenge_id()) {
    challenge_id_ = new ::KWMsg::Ident(*from.challenge_id_);
  } else {
    challenge_id_ = nullptr;
  }
  if (from._internal_has_replay_id()) {
    replay_id_ = new ::KWMsg::Ident(*from.replay_id_);
  } else {
    replay_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBattlePreparedInfo)
}

void ReqBattlePreparedInfo::SharedCtor() {
battle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_play_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replay_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(replay_id_));
}

ReqBattlePreparedInfo::~ReqBattlePreparedInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBattlePreparedInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBattlePreparedInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  battle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_play_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete challenge_id_;
  if (this != internal_default_instance()) delete replay_id_;
}

void ReqBattlePreparedInfo::ArenaDtor(void* object) {
  ReqBattlePreparedInfo* _this = reinterpret_cast< ReqBattlePreparedInfo* >(object);
  (void)_this;
}
void ReqBattlePreparedInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBattlePreparedInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBattlePreparedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBattlePreparedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battle_id_.ClearToEmpty();
  game_play_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && challenge_id_ != nullptr) {
    delete challenge_id_;
  }
  challenge_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBattlePreparedInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes battle_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_battle_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes game_play_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_game_play_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident challenge_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_challenge_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident replay_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBattlePreparedInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBattlePreparedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes battle_id = 2;
  if (!this->battle_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_battle_id(), target);
  }

  // bytes game_play_id = 3;
  if (!this->game_play_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_game_play_id(), target);
  }

  // .KWMsg.Ident challenge_id = 4;
  if (this->has_challenge_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::challenge_id(this), target, stream);
  }

  // .KWMsg.Ident replay_id = 5;
  if (this->has_replay_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::replay_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBattlePreparedInfo)
  return target;
}

size_t ReqBattlePreparedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBattlePreparedInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes battle_id = 2;
  if (!this->battle_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_battle_id());
  }

  // bytes game_play_id = 3;
  if (!this->game_play_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_game_play_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident challenge_id = 4;
  if (this->has_challenge_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *challenge_id_);
  }

  // .KWMsg.Ident replay_id = 5;
  if (this->has_replay_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replay_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBattlePreparedInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBattlePreparedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBattlePreparedInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBattlePreparedInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBattlePreparedInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBattlePreparedInfo)
    MergeFrom(*source);
  }
}

void ReqBattlePreparedInfo::MergeFrom(const ReqBattlePreparedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBattlePreparedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.battle_id().empty()) {
    _internal_set_battle_id(from._internal_battle_id());
  }
  if (!from.game_play_id().empty()) {
    _internal_set_game_play_id(from._internal_game_play_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_challenge_id()) {
    _internal_mutable_challenge_id()->::KWMsg::Ident::MergeFrom(from._internal_challenge_id());
  }
  if (from.has_replay_id()) {
    _internal_mutable_replay_id()->::KWMsg::Ident::MergeFrom(from._internal_replay_id());
  }
}

void ReqBattlePreparedInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBattlePreparedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBattlePreparedInfo::CopyFrom(const ReqBattlePreparedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBattlePreparedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBattlePreparedInfo::IsInitialized() const {
  return true;
}

void ReqBattlePreparedInfo::InternalSwap(ReqBattlePreparedInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &battle_id_, GetArenaForAllocation(),
      &other->battle_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_play_id_, GetArenaForAllocation(),
      &other->game_play_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqBattlePreparedInfo, replay_id_)
      + sizeof(ReqBattlePreparedInfo::replay_id_)
      - PROTOBUF_FIELD_OFFSET(ReqBattlePreparedInfo, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBattlePreparedInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[67]);
}

// ===================================================================

class BattleEntityInfo::_Internal {
 public:
};

BattleEntityInfo::BattleEntityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attrs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BattleEntityInfo)
}
BattleEntityInfo::BattleEntityInfo(const BattleEntityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attrs_(from.attrs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_id().empty()) {
    config_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_config_id(), 
      GetArenaForAllocation());
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.BattleEntityInfo)
}

void BattleEntityInfo::SharedCtor() {
config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
level_ = 0;
}

BattleEntityInfo::~BattleEntityInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BattleEntityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleEntityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BattleEntityInfo::ArenaDtor(void* object) {
  BattleEntityInfo* _this = reinterpret_cast< BattleEntityInfo* >(object);
  (void)_this;
}
void BattleEntityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleEntityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BattleEntityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BattleEntityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attrs_.Clear();
  config_id_.ClearToEmpty();
  level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleEntityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes config_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_config_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 attrs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_attrs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_attrs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleEntityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BattleEntityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes config_id = 1;
  if (!this->config_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_config_id(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // repeated int64 attrs = 3;
  {
    int byte_size = _attrs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_attrs(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BattleEntityInfo)
  return target;
}

size_t BattleEntityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BattleEntityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 attrs = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->attrs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _attrs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes config_id = 1;
  if (!this->config_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_config_id());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleEntityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BattleEntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleEntityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleEntityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BattleEntityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BattleEntityInfo)
    MergeFrom(*source);
  }
}

void BattleEntityInfo::MergeFrom(const BattleEntityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BattleEntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attrs_.MergeFrom(from.attrs_);
  if (!from.config_id().empty()) {
    _internal_set_config_id(from._internal_config_id());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void BattleEntityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BattleEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleEntityInfo::CopyFrom(const BattleEntityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BattleEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleEntityInfo::IsInitialized() const {
  return true;
}

void BattleEntityInfo::InternalSwap(BattleEntityInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  attrs_.InternalSwap(&other->attrs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &config_id_, GetArenaForAllocation(),
      &other->config_id_, other->GetArenaForAllocation()
  );
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleEntityInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[68]);
}

// ===================================================================

class BattleWitchInfo::_Internal {
 public:
};

BattleWitchInfo::BattleWitchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attrs_(arena),
  skills_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BattleWitchInfo)
}
BattleWitchInfo::BattleWitchInfo(const BattleWitchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attrs_(from.attrs_),
      skills_(from.skills_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_id().empty()) {
    config_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_config_id(), 
      GetArenaForAllocation());
  }
  role_res_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role_res_id().empty()) {
    role_res_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role_res_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&star_level_) -
    reinterpret_cast<char*>(&level_)) + sizeof(star_level_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.BattleWitchInfo)
}

void BattleWitchInfo::SharedCtor() {
config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
role_res_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&star_level_) -
    reinterpret_cast<char*>(&level_)) + sizeof(star_level_));
}

BattleWitchInfo::~BattleWitchInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BattleWitchInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleWitchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_res_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BattleWitchInfo::ArenaDtor(void* object) {
  BattleWitchInfo* _this = reinterpret_cast< BattleWitchInfo* >(object);
  (void)_this;
}
void BattleWitchInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleWitchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BattleWitchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BattleWitchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attrs_.Clear();
  skills_.Clear();
  config_id_.ClearToEmpty();
  role_res_id_.ClearToEmpty();
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&star_level_) -
      reinterpret_cast<char*>(&level_)) + sizeof(star_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleWitchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes config_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_config_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 attrs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_attrs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_attrs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 star_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          star_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes role_res_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_role_res_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes skills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_skills();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleWitchInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BattleWitchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes config_id = 1;
  if (!this->config_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_config_id(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // repeated int64 attrs = 3;
  {
    int byte_size = _attrs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_attrs(), byte_size, target);
    }
  }

  // int32 star_level = 4;
  if (this->star_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_star_level(), target);
  }

  // bytes role_res_id = 5;
  if (!this->role_res_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_role_res_id(), target);
  }

  // repeated bytes skills = 6;
  for (int i = 0, n = this->_internal_skills_size(); i < n; i++) {
    const auto& s = this->_internal_skills(i);
    target = stream->WriteBytes(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BattleWitchInfo)
  return target;
}

size_t BattleWitchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BattleWitchInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 attrs = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->attrs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _attrs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes skills = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(skills_.size());
  for (int i = 0, n = skills_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      skills_.Get(i));
  }

  // bytes config_id = 1;
  if (!this->config_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_config_id());
  }

  // bytes role_res_id = 5;
  if (!this->role_res_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_role_res_id());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 star_level = 4;
  if (this->star_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_star_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleWitchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BattleWitchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleWitchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleWitchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BattleWitchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BattleWitchInfo)
    MergeFrom(*source);
  }
}

void BattleWitchInfo::MergeFrom(const BattleWitchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BattleWitchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attrs_.MergeFrom(from.attrs_);
  skills_.MergeFrom(from.skills_);
  if (!from.config_id().empty()) {
    _internal_set_config_id(from._internal_config_id());
  }
  if (!from.role_res_id().empty()) {
    _internal_set_role_res_id(from._internal_role_res_id());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.star_level() != 0) {
    _internal_set_star_level(from._internal_star_level());
  }
}

void BattleWitchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BattleWitchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleWitchInfo::CopyFrom(const BattleWitchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BattleWitchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleWitchInfo::IsInitialized() const {
  return true;
}

void BattleWitchInfo::InternalSwap(BattleWitchInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  attrs_.InternalSwap(&other->attrs_);
  skills_.InternalSwap(&other->skills_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &config_id_, GetArenaForAllocation(),
      &other->config_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &role_res_id_, GetArenaForAllocation(),
      &other->role_res_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleWitchInfo, star_level_)
      + sizeof(BattleWitchInfo::star_level_)
      - PROTOBUF_FIELD_OFFSET(BattleWitchInfo, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleWitchInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[69]);
}

// ===================================================================

class AckBattlePreparedInfo::_Internal {
 public:
};

AckBattlePreparedInfo::AckBattlePreparedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  monsters_(arena),
  npcs_(arena),
  witches_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBattlePreparedInfo)
}
AckBattlePreparedInfo::AckBattlePreparedInfo(const AckBattlePreparedInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      monsters_(from.monsters_),
      npcs_(from.npcs_),
      witches_(from.witches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  battle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_battle_id().empty()) {
    battle_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_battle_id(), 
      GetArenaForAllocation());
  }
  game_play_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_play_id().empty()) {
    game_play_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_play_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&battle_type_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(battle_type_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBattlePreparedInfo)
}

void AckBattlePreparedInfo::SharedCtor() {
battle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_play_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&battle_type_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(battle_type_));
}

AckBattlePreparedInfo::~AckBattlePreparedInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBattlePreparedInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBattlePreparedInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  battle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_play_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckBattlePreparedInfo::ArenaDtor(void* object) {
  AckBattlePreparedInfo* _this = reinterpret_cast< AckBattlePreparedInfo* >(object);
  (void)_this;
}
void AckBattlePreparedInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBattlePreparedInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBattlePreparedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBattlePreparedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monsters_.Clear();
  npcs_.Clear();
  witches_.Clear();
  battle_id_.ClearToEmpty();
  game_play_id_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battle_type_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(battle_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBattlePreparedInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes battle_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_battle_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BattleEntityInfo monsters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_monsters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BattleEntityInfo npcs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_npcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes game_play_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_game_play_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.EBattleType battle_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_battle_type(static_cast<::KWMsg::EBattleType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BattleWitchInfo witches = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_witches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBattlePreparedInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBattlePreparedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes battle_id = 2;
  if (!this->battle_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_battle_id(), target);
  }

  // repeated .KWMsg.BattleEntityInfo monsters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_monsters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_monsters(i), target, stream);
  }

  // repeated .KWMsg.BattleEntityInfo npcs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_npcs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_npcs(i), target, stream);
  }

  // bytes game_play_id = 5;
  if (!this->game_play_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_game_play_id(), target);
  }

  // .KWMsg.EBattleType battle_type = 6;
  if (this->battle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_battle_type(), target);
  }

  // repeated .KWMsg.BattleWitchInfo witches = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_witches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_witches(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBattlePreparedInfo)
  return target;
}

size_t AckBattlePreparedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBattlePreparedInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BattleEntityInfo monsters = 3;
  total_size += 1UL * this->_internal_monsters_size();
  for (const auto& msg : this->monsters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.BattleEntityInfo npcs = 4;
  total_size += 1UL * this->_internal_npcs_size();
  for (const auto& msg : this->npcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.BattleWitchInfo witches = 7;
  total_size += 1UL * this->_internal_witches_size();
  for (const auto& msg : this->witches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes battle_id = 2;
  if (!this->battle_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_battle_id());
  }

  // bytes game_play_id = 5;
  if (!this->game_play_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_game_play_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // .KWMsg.EBattleType battle_type = 6;
  if (this->battle_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_battle_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBattlePreparedInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBattlePreparedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBattlePreparedInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBattlePreparedInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBattlePreparedInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBattlePreparedInfo)
    MergeFrom(*source);
  }
}

void AckBattlePreparedInfo::MergeFrom(const AckBattlePreparedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBattlePreparedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  monsters_.MergeFrom(from.monsters_);
  npcs_.MergeFrom(from.npcs_);
  witches_.MergeFrom(from.witches_);
  if (!from.battle_id().empty()) {
    _internal_set_battle_id(from._internal_battle_id());
  }
  if (!from.game_play_id().empty()) {
    _internal_set_game_play_id(from._internal_game_play_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.battle_type() != 0) {
    _internal_set_battle_type(from._internal_battle_type());
  }
}

void AckBattlePreparedInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBattlePreparedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBattlePreparedInfo::CopyFrom(const AckBattlePreparedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBattlePreparedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBattlePreparedInfo::IsInitialized() const {
  return true;
}

void AckBattlePreparedInfo::InternalSwap(AckBattlePreparedInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  monsters_.InternalSwap(&other->monsters_);
  npcs_.InternalSwap(&other->npcs_);
  witches_.InternalSwap(&other->witches_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &battle_id_, GetArenaForAllocation(),
      &other->battle_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_play_id_, GetArenaForAllocation(),
      &other->game_play_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckBattlePreparedInfo, battle_type_)
      + sizeof(AckBattlePreparedInfo::battle_type_)
      - PROTOBUF_FIELD_OFFSET(AckBattlePreparedInfo, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBattlePreparedInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[70]);
}

// ===================================================================

class ReqBuyPower::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBuyPower* msg);
};

const ::KWMsg::Ident&
ReqBuyPower::_Internal::player_id(const ReqBuyPower* msg) {
  return *msg->player_id_;
}
void ReqBuyPower::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqBuyPower::ReqBuyPower(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBuyPower)
}
ReqBuyPower::ReqBuyPower(const ReqBuyPower& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBuyPower)
}

void ReqBuyPower::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(count_));
}

ReqBuyPower::~ReqBuyPower() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBuyPower)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBuyPower::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqBuyPower::ArenaDtor(void* object) {
  ReqBuyPower* _this = reinterpret_cast< ReqBuyPower* >(object);
  (void)_this;
}
void ReqBuyPower::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBuyPower::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBuyPower::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBuyPower)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBuyPower::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBuyPower::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBuyPower)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBuyPower)
  return target;
}

size_t ReqBuyPower::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBuyPower)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBuyPower::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBuyPower)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBuyPower* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBuyPower>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBuyPower)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBuyPower)
    MergeFrom(*source);
  }
}

void ReqBuyPower::MergeFrom(const ReqBuyPower& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBuyPower)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ReqBuyPower::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBuyPower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuyPower::CopyFrom(const ReqBuyPower& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBuyPower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuyPower::IsInitialized() const {
  return true;
}

void ReqBuyPower::InternalSwap(ReqBuyPower* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqBuyPower, count_)
      + sizeof(ReqBuyPower::count_)
      - PROTOBUF_FIELD_OFFSET(ReqBuyPower, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBuyPower::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[71]);
}

// ===================================================================

class AckBuyPower::_Internal {
 public:
};

AckBuyPower::AckBuyPower(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBuyPower)
}
AckBuyPower::AckBuyPower(const AckBuyPower& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBuyPower)
}

void AckBuyPower::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(count_));
}

AckBuyPower::~AckBuyPower() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBuyPower)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBuyPower::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckBuyPower::ArenaDtor(void* object) {
  AckBuyPower* _this = reinterpret_cast< AckBuyPower* >(object);
  (void)_this;
}
void AckBuyPower::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBuyPower::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBuyPower::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBuyPower)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBuyPower::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBuyPower::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBuyPower)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBuyPower)
  return target;
}

size_t AckBuyPower::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBuyPower)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBuyPower::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBuyPower)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBuyPower* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBuyPower>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBuyPower)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBuyPower)
    MergeFrom(*source);
  }
}

void AckBuyPower::MergeFrom(const AckBuyPower& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBuyPower)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AckBuyPower::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBuyPower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBuyPower::CopyFrom(const AckBuyPower& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBuyPower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBuyPower::IsInitialized() const {
  return true;
}

void AckBuyPower::InternalSwap(AckBuyPower* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckBuyPower, count_)
      + sizeof(AckBuyPower::count_)
      - PROTOBUF_FIELD_OFFSET(AckBuyPower, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBuyPower::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[72]);
}

// ===================================================================

class ReqTestSetResource::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqTestSetResource* msg);
};

const ::KWMsg::Ident&
ReqTestSetResource::_Internal::player_id(const ReqTestSetResource* msg) {
  return *msg->player_id_;
}
void ReqTestSetResource::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqTestSetResource::ReqTestSetResource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqTestSetResource)
}
ReqTestSetResource::ReqTestSetResource(const ReqTestSetResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_type().empty()) {
    res_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_res_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  res_value_ = from.res_value_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqTestSetResource)
}

void ReqTestSetResource::SharedCtor() {
res_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&res_value_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(res_value_));
}

ReqTestSetResource::~ReqTestSetResource() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqTestSetResource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqTestSetResource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  res_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqTestSetResource::ArenaDtor(void* object) {
  ReqTestSetResource* _this = reinterpret_cast< ReqTestSetResource* >(object);
  (void)_this;
}
void ReqTestSetResource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqTestSetResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqTestSetResource::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqTestSetResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  res_value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqTestSetResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes res_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_res_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 res_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          res_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqTestSetResource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqTestSetResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes res_type = 2;
  if (!this->res_type().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_res_type(), target);
  }

  // int64 res_value = 3;
  if (this->res_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_res_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqTestSetResource)
  return target;
}

size_t ReqTestSetResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqTestSetResource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes res_type = 2;
  if (!this->res_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_res_type());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int64 res_value = 3;
  if (this->res_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_res_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqTestSetResource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqTestSetResource)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqTestSetResource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqTestSetResource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqTestSetResource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqTestSetResource)
    MergeFrom(*source);
  }
}

void ReqTestSetResource::MergeFrom(const ReqTestSetResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqTestSetResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.res_type().empty()) {
    _internal_set_res_type(from._internal_res_type());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.res_value() != 0) {
    _internal_set_res_value(from._internal_res_value());
  }
}

void ReqTestSetResource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqTestSetResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTestSetResource::CopyFrom(const ReqTestSetResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqTestSetResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTestSetResource::IsInitialized() const {
  return true;
}

void ReqTestSetResource::InternalSwap(ReqTestSetResource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &res_type_, GetArenaForAllocation(),
      &other->res_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqTestSetResource, res_value_)
      + sizeof(ReqTestSetResource::res_value_)
      - PROTOBUF_FIELD_OFFSET(ReqTestSetResource, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqTestSetResource::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[73]);
}

// ===================================================================

class ReqBattleAdjWitchTeam::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBattleAdjWitchTeam* msg);
};

const ::KWMsg::Ident&
ReqBattleAdjWitchTeam::_Internal::player_id(const ReqBattleAdjWitchTeam* msg) {
  return *msg->player_id_;
}
void ReqBattleAdjWitchTeam::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqBattleAdjWitchTeam::ReqBattleAdjWitchTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBattleAdjWitchTeam)
}
ReqBattleAdjWitchTeam::ReqBattleAdjWitchTeam(const ReqBattleAdjWitchTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_team_id().empty()) {
    witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_team_id(), 
      GetArenaForAllocation());
  }
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  idx_ = from.idx_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBattleAdjWitchTeam)
}

void ReqBattleAdjWitchTeam::SharedCtor() {
witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(idx_));
}

ReqBattleAdjWitchTeam::~ReqBattleAdjWitchTeam() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBattleAdjWitchTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBattleAdjWitchTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqBattleAdjWitchTeam::ArenaDtor(void* object) {
  ReqBattleAdjWitchTeam* _this = reinterpret_cast< ReqBattleAdjWitchTeam* >(object);
  (void)_this;
}
void ReqBattleAdjWitchTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBattleAdjWitchTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBattleAdjWitchTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBattleAdjWitchTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_team_id_.ClearToEmpty();
  witch_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBattleAdjWitchTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBattleAdjWitchTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBattleAdjWitchTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_team_id(), target);
  }

  // int32 idx = 3;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_idx(), target);
  }

  // bytes witch_id = 4;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_witch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBattleAdjWitchTeam)
  return target;
}

size_t ReqBattleAdjWitchTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBattleAdjWitchTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_team_id());
  }

  // bytes witch_id = 4;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 idx = 3;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBattleAdjWitchTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBattleAdjWitchTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBattleAdjWitchTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBattleAdjWitchTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBattleAdjWitchTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBattleAdjWitchTeam)
    MergeFrom(*source);
  }
}

void ReqBattleAdjWitchTeam::MergeFrom(const ReqBattleAdjWitchTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBattleAdjWitchTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_team_id().empty()) {
    _internal_set_witch_team_id(from._internal_witch_team_id());
  }
  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
}

void ReqBattleAdjWitchTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBattleAdjWitchTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBattleAdjWitchTeam::CopyFrom(const ReqBattleAdjWitchTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBattleAdjWitchTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBattleAdjWitchTeam::IsInitialized() const {
  return true;
}

void ReqBattleAdjWitchTeam::InternalSwap(ReqBattleAdjWitchTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_team_id_, GetArenaForAllocation(),
      &other->witch_team_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqBattleAdjWitchTeam, idx_)
      + sizeof(ReqBattleAdjWitchTeam::idx_)
      - PROTOBUF_FIELD_OFFSET(ReqBattleAdjWitchTeam, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBattleAdjWitchTeam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[74]);
}

// ===================================================================

class AckBattleAdjWitchTeam::_Internal {
 public:
};

AckBattleAdjWitchTeam::AckBattleAdjWitchTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBattleAdjWitchTeam)
}
AckBattleAdjWitchTeam::AckBattleAdjWitchTeam(const AckBattleAdjWitchTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_team_id().empty()) {
    witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_team_id(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBattleAdjWitchTeam)
}

void AckBattleAdjWitchTeam::SharedCtor() {
witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckBattleAdjWitchTeam::~AckBattleAdjWitchTeam() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBattleAdjWitchTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBattleAdjWitchTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckBattleAdjWitchTeam::ArenaDtor(void* object) {
  AckBattleAdjWitchTeam* _this = reinterpret_cast< AckBattleAdjWitchTeam* >(object);
  (void)_this;
}
void AckBattleAdjWitchTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBattleAdjWitchTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBattleAdjWitchTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBattleAdjWitchTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_team_id_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBattleAdjWitchTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes witch_team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBattleAdjWitchTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBattleAdjWitchTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBattleAdjWitchTeam)
  return target;
}

size_t AckBattleAdjWitchTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBattleAdjWitchTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_team_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBattleAdjWitchTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBattleAdjWitchTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBattleAdjWitchTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBattleAdjWitchTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBattleAdjWitchTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBattleAdjWitchTeam)
    MergeFrom(*source);
  }
}

void AckBattleAdjWitchTeam::MergeFrom(const AckBattleAdjWitchTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBattleAdjWitchTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_team_id().empty()) {
    _internal_set_witch_team_id(from._internal_witch_team_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckBattleAdjWitchTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBattleAdjWitchTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBattleAdjWitchTeam::CopyFrom(const AckBattleAdjWitchTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBattleAdjWitchTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBattleAdjWitchTeam::IsInitialized() const {
  return true;
}

void AckBattleAdjWitchTeam::InternalSwap(AckBattleAdjWitchTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_team_id_, GetArenaForAllocation(),
      &other->witch_team_id_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBattleAdjWitchTeam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[75]);
}

// ===================================================================

class ReqBattleChangeWitchTeamName::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBattleChangeWitchTeamName* msg);
};

const ::KWMsg::Ident&
ReqBattleChangeWitchTeamName::_Internal::player_id(const ReqBattleChangeWitchTeamName* msg) {
  return *msg->player_id_;
}
void ReqBattleChangeWitchTeamName::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqBattleChangeWitchTeamName::ReqBattleChangeWitchTeamName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBattleChangeWitchTeamName)
}
ReqBattleChangeWitchTeamName::ReqBattleChangeWitchTeamName(const ReqBattleChangeWitchTeamName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_team_id().empty()) {
    witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_team_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBattleChangeWitchTeamName)
}

void ReqBattleChangeWitchTeamName::SharedCtor() {
witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqBattleChangeWitchTeamName::~ReqBattleChangeWitchTeamName() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBattleChangeWitchTeamName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBattleChangeWitchTeamName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqBattleChangeWitchTeamName::ArenaDtor(void* object) {
  ReqBattleChangeWitchTeamName* _this = reinterpret_cast< ReqBattleChangeWitchTeamName* >(object);
  (void)_this;
}
void ReqBattleChangeWitchTeamName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBattleChangeWitchTeamName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBattleChangeWitchTeamName::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBattleChangeWitchTeamName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_team_id_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBattleChangeWitchTeamName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBattleChangeWitchTeamName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBattleChangeWitchTeamName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_team_id(), target);
  }

  // bytes name = 3;
  if (!this->name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBattleChangeWitchTeamName)
  return target;
}

size_t ReqBattleChangeWitchTeamName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBattleChangeWitchTeamName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_team_id());
  }

  // bytes name = 3;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBattleChangeWitchTeamName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBattleChangeWitchTeamName)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBattleChangeWitchTeamName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBattleChangeWitchTeamName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBattleChangeWitchTeamName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBattleChangeWitchTeamName)
    MergeFrom(*source);
  }
}

void ReqBattleChangeWitchTeamName::MergeFrom(const ReqBattleChangeWitchTeamName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBattleChangeWitchTeamName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_team_id().empty()) {
    _internal_set_witch_team_id(from._internal_witch_team_id());
  }
  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqBattleChangeWitchTeamName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBattleChangeWitchTeamName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBattleChangeWitchTeamName::CopyFrom(const ReqBattleChangeWitchTeamName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBattleChangeWitchTeamName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBattleChangeWitchTeamName::IsInitialized() const {
  return true;
}

void ReqBattleChangeWitchTeamName::InternalSwap(ReqBattleChangeWitchTeamName* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_team_id_, GetArenaForAllocation(),
      &other->witch_team_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBattleChangeWitchTeamName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[76]);
}

// ===================================================================

class AckBattleChangeWitchTeamName::_Internal {
 public:
};

AckBattleChangeWitchTeamName::AckBattleChangeWitchTeamName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBattleChangeWitchTeamName)
}
AckBattleChangeWitchTeamName::AckBattleChangeWitchTeamName(const AckBattleChangeWitchTeamName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_team_id().empty()) {
    witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_team_id(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBattleChangeWitchTeamName)
}

void AckBattleChangeWitchTeamName::SharedCtor() {
witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckBattleChangeWitchTeamName::~AckBattleChangeWitchTeamName() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBattleChangeWitchTeamName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBattleChangeWitchTeamName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckBattleChangeWitchTeamName::ArenaDtor(void* object) {
  AckBattleChangeWitchTeamName* _this = reinterpret_cast< AckBattleChangeWitchTeamName* >(object);
  (void)_this;
}
void AckBattleChangeWitchTeamName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBattleChangeWitchTeamName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBattleChangeWitchTeamName::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBattleChangeWitchTeamName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_team_id_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBattleChangeWitchTeamName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes witch_team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBattleChangeWitchTeamName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBattleChangeWitchTeamName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBattleChangeWitchTeamName)
  return target;
}

size_t AckBattleChangeWitchTeamName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBattleChangeWitchTeamName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_team_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBattleChangeWitchTeamName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBattleChangeWitchTeamName)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBattleChangeWitchTeamName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBattleChangeWitchTeamName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBattleChangeWitchTeamName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBattleChangeWitchTeamName)
    MergeFrom(*source);
  }
}

void AckBattleChangeWitchTeamName::MergeFrom(const AckBattleChangeWitchTeamName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBattleChangeWitchTeamName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_team_id().empty()) {
    _internal_set_witch_team_id(from._internal_witch_team_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckBattleChangeWitchTeamName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBattleChangeWitchTeamName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBattleChangeWitchTeamName::CopyFrom(const AckBattleChangeWitchTeamName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBattleChangeWitchTeamName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBattleChangeWitchTeamName::IsInitialized() const {
  return true;
}

void AckBattleChangeWitchTeamName::InternalSwap(AckBattleChangeWitchTeamName* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_team_id_, GetArenaForAllocation(),
      &other->witch_team_id_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBattleChangeWitchTeamName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[77]);
}

// ===================================================================

class ReqBattleResetWitchTeam::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBattleResetWitchTeam* msg);
};

const ::KWMsg::Ident&
ReqBattleResetWitchTeam::_Internal::player_id(const ReqBattleResetWitchTeam* msg) {
  return *msg->player_id_;
}
void ReqBattleResetWitchTeam::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqBattleResetWitchTeam::ReqBattleResetWitchTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBattleResetWitchTeam)
}
ReqBattleResetWitchTeam::ReqBattleResetWitchTeam(const ReqBattleResetWitchTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_team_id().empty()) {
    witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_team_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBattleResetWitchTeam)
}

void ReqBattleResetWitchTeam::SharedCtor() {
witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqBattleResetWitchTeam::~ReqBattleResetWitchTeam() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBattleResetWitchTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBattleResetWitchTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqBattleResetWitchTeam::ArenaDtor(void* object) {
  ReqBattleResetWitchTeam* _this = reinterpret_cast< ReqBattleResetWitchTeam* >(object);
  (void)_this;
}
void ReqBattleResetWitchTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBattleResetWitchTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBattleResetWitchTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBattleResetWitchTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_team_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBattleResetWitchTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBattleResetWitchTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBattleResetWitchTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBattleResetWitchTeam)
  return target;
}

size_t ReqBattleResetWitchTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBattleResetWitchTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_team_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBattleResetWitchTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBattleResetWitchTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBattleResetWitchTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBattleResetWitchTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBattleResetWitchTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBattleResetWitchTeam)
    MergeFrom(*source);
  }
}

void ReqBattleResetWitchTeam::MergeFrom(const ReqBattleResetWitchTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBattleResetWitchTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_team_id().empty()) {
    _internal_set_witch_team_id(from._internal_witch_team_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqBattleResetWitchTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBattleResetWitchTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBattleResetWitchTeam::CopyFrom(const ReqBattleResetWitchTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBattleResetWitchTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBattleResetWitchTeam::IsInitialized() const {
  return true;
}

void ReqBattleResetWitchTeam::InternalSwap(ReqBattleResetWitchTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_team_id_, GetArenaForAllocation(),
      &other->witch_team_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBattleResetWitchTeam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[78]);
}

// ===================================================================

class AckBattleResetWitchTeam::_Internal {
 public:
};

AckBattleResetWitchTeam::AckBattleResetWitchTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBattleResetWitchTeam)
}
AckBattleResetWitchTeam::AckBattleResetWitchTeam(const AckBattleResetWitchTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_team_id().empty()) {
    witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_team_id(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBattleResetWitchTeam)
}

void AckBattleResetWitchTeam::SharedCtor() {
witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckBattleResetWitchTeam::~AckBattleResetWitchTeam() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBattleResetWitchTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBattleResetWitchTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckBattleResetWitchTeam::ArenaDtor(void* object) {
  AckBattleResetWitchTeam* _this = reinterpret_cast< AckBattleResetWitchTeam* >(object);
  (void)_this;
}
void AckBattleResetWitchTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBattleResetWitchTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBattleResetWitchTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBattleResetWitchTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_team_id_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBattleResetWitchTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes witch_team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBattleResetWitchTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBattleResetWitchTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBattleResetWitchTeam)
  return target;
}

size_t AckBattleResetWitchTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBattleResetWitchTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_team_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBattleResetWitchTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBattleResetWitchTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBattleResetWitchTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBattleResetWitchTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBattleResetWitchTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBattleResetWitchTeam)
    MergeFrom(*source);
  }
}

void AckBattleResetWitchTeam::MergeFrom(const AckBattleResetWitchTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBattleResetWitchTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_team_id().empty()) {
    _internal_set_witch_team_id(from._internal_witch_team_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckBattleResetWitchTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBattleResetWitchTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBattleResetWitchTeam::CopyFrom(const AckBattleResetWitchTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBattleResetWitchTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBattleResetWitchTeam::IsInitialized() const {
  return true;
}

void AckBattleResetWitchTeam::InternalSwap(AckBattleResetWitchTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_team_id_, GetArenaForAllocation(),
      &other->witch_team_id_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBattleResetWitchTeam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[79]);
}

// ===================================================================

class ReqBattleQuickConfigWitchTeam::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBattleQuickConfigWitchTeam* msg);
};

const ::KWMsg::Ident&
ReqBattleQuickConfigWitchTeam::_Internal::player_id(const ReqBattleQuickConfigWitchTeam* msg) {
  return *msg->player_id_;
}
void ReqBattleQuickConfigWitchTeam::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqBattleQuickConfigWitchTeam::ReqBattleQuickConfigWitchTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  witch_id_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBattleQuickConfigWitchTeam)
}
ReqBattleQuickConfigWitchTeam::ReqBattleQuickConfigWitchTeam(const ReqBattleQuickConfigWitchTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      witch_id_list_(from.witch_id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_team_id().empty()) {
    witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_team_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBattleQuickConfigWitchTeam)
}

void ReqBattleQuickConfigWitchTeam::SharedCtor() {
witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqBattleQuickConfigWitchTeam::~ReqBattleQuickConfigWitchTeam() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBattleQuickConfigWitchTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBattleQuickConfigWitchTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqBattleQuickConfigWitchTeam::ArenaDtor(void* object) {
  ReqBattleQuickConfigWitchTeam* _this = reinterpret_cast< ReqBattleQuickConfigWitchTeam* >(object);
  (void)_this;
}
void ReqBattleQuickConfigWitchTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBattleQuickConfigWitchTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBattleQuickConfigWitchTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBattleQuickConfigWitchTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_list_.Clear();
  witch_team_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBattleQuickConfigWitchTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes witch_id_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_witch_id_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBattleQuickConfigWitchTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBattleQuickConfigWitchTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_team_id(), target);
  }

  // repeated bytes witch_id_list = 3;
  for (int i = 0, n = this->_internal_witch_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_witch_id_list(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBattleQuickConfigWitchTeam)
  return target;
}

size_t ReqBattleQuickConfigWitchTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBattleQuickConfigWitchTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes witch_id_list = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(witch_id_list_.size());
  for (int i = 0, n = witch_id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      witch_id_list_.Get(i));
  }

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_team_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBattleQuickConfigWitchTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBattleQuickConfigWitchTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBattleQuickConfigWitchTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBattleQuickConfigWitchTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBattleQuickConfigWitchTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBattleQuickConfigWitchTeam)
    MergeFrom(*source);
  }
}

void ReqBattleQuickConfigWitchTeam::MergeFrom(const ReqBattleQuickConfigWitchTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBattleQuickConfigWitchTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  witch_id_list_.MergeFrom(from.witch_id_list_);
  if (!from.witch_team_id().empty()) {
    _internal_set_witch_team_id(from._internal_witch_team_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqBattleQuickConfigWitchTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBattleQuickConfigWitchTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBattleQuickConfigWitchTeam::CopyFrom(const ReqBattleQuickConfigWitchTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBattleQuickConfigWitchTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBattleQuickConfigWitchTeam::IsInitialized() const {
  return true;
}

void ReqBattleQuickConfigWitchTeam::InternalSwap(ReqBattleQuickConfigWitchTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  witch_id_list_.InternalSwap(&other->witch_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_team_id_, GetArenaForAllocation(),
      &other->witch_team_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBattleQuickConfigWitchTeam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[80]);
}

// ===================================================================

class AckBattleQuickConfigWitchTeam::_Internal {
 public:
};

AckBattleQuickConfigWitchTeam::AckBattleQuickConfigWitchTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  witch_id_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBattleQuickConfigWitchTeam)
}
AckBattleQuickConfigWitchTeam::AckBattleQuickConfigWitchTeam(const AckBattleQuickConfigWitchTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      witch_id_list_(from.witch_id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_team_id().empty()) {
    witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_team_id(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBattleQuickConfigWitchTeam)
}

void AckBattleQuickConfigWitchTeam::SharedCtor() {
witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckBattleQuickConfigWitchTeam::~AckBattleQuickConfigWitchTeam() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBattleQuickConfigWitchTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBattleQuickConfigWitchTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckBattleQuickConfigWitchTeam::ArenaDtor(void* object) {
  AckBattleQuickConfigWitchTeam* _this = reinterpret_cast< AckBattleQuickConfigWitchTeam* >(object);
  (void)_this;
}
void AckBattleQuickConfigWitchTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBattleQuickConfigWitchTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBattleQuickConfigWitchTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBattleQuickConfigWitchTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_list_.Clear();
  witch_team_id_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBattleQuickConfigWitchTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes witch_team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes witch_id_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_witch_id_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBattleQuickConfigWitchTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBattleQuickConfigWitchTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_team_id(), target);
  }

  // repeated bytes witch_id_list = 3;
  for (int i = 0, n = this->_internal_witch_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_witch_id_list(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBattleQuickConfigWitchTeam)
  return target;
}

size_t AckBattleQuickConfigWitchTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBattleQuickConfigWitchTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes witch_id_list = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(witch_id_list_.size());
  for (int i = 0, n = witch_id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      witch_id_list_.Get(i));
  }

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_team_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBattleQuickConfigWitchTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBattleQuickConfigWitchTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBattleQuickConfigWitchTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBattleQuickConfigWitchTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBattleQuickConfigWitchTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBattleQuickConfigWitchTeam)
    MergeFrom(*source);
  }
}

void AckBattleQuickConfigWitchTeam::MergeFrom(const AckBattleQuickConfigWitchTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBattleQuickConfigWitchTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  witch_id_list_.MergeFrom(from.witch_id_list_);
  if (!from.witch_team_id().empty()) {
    _internal_set_witch_team_id(from._internal_witch_team_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckBattleQuickConfigWitchTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBattleQuickConfigWitchTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBattleQuickConfigWitchTeam::CopyFrom(const AckBattleQuickConfigWitchTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBattleQuickConfigWitchTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBattleQuickConfigWitchTeam::IsInitialized() const {
  return true;
}

void AckBattleQuickConfigWitchTeam::InternalSwap(AckBattleQuickConfigWitchTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  witch_id_list_.InternalSwap(&other->witch_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_team_id_, GetArenaForAllocation(),
      &other->witch_team_id_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBattleQuickConfigWitchTeam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[81]);
}

// ===================================================================

class ReqBattleBuyWitchTeam::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBattleBuyWitchTeam* msg);
};

const ::KWMsg::Ident&
ReqBattleBuyWitchTeam::_Internal::player_id(const ReqBattleBuyWitchTeam* msg) {
  return *msg->player_id_;
}
void ReqBattleBuyWitchTeam::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqBattleBuyWitchTeam::ReqBattleBuyWitchTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBattleBuyWitchTeam)
}
ReqBattleBuyWitchTeam::ReqBattleBuyWitchTeam(const ReqBattleBuyWitchTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_team_id().empty()) {
    witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_team_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBattleBuyWitchTeam)
}

void ReqBattleBuyWitchTeam::SharedCtor() {
witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqBattleBuyWitchTeam::~ReqBattleBuyWitchTeam() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBattleBuyWitchTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBattleBuyWitchTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqBattleBuyWitchTeam::ArenaDtor(void* object) {
  ReqBattleBuyWitchTeam* _this = reinterpret_cast< ReqBattleBuyWitchTeam* >(object);
  (void)_this;
}
void ReqBattleBuyWitchTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBattleBuyWitchTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBattleBuyWitchTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBattleBuyWitchTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_team_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBattleBuyWitchTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBattleBuyWitchTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBattleBuyWitchTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBattleBuyWitchTeam)
  return target;
}

size_t ReqBattleBuyWitchTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBattleBuyWitchTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_team_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBattleBuyWitchTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBattleBuyWitchTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBattleBuyWitchTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBattleBuyWitchTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBattleBuyWitchTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBattleBuyWitchTeam)
    MergeFrom(*source);
  }
}

void ReqBattleBuyWitchTeam::MergeFrom(const ReqBattleBuyWitchTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBattleBuyWitchTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_team_id().empty()) {
    _internal_set_witch_team_id(from._internal_witch_team_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqBattleBuyWitchTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBattleBuyWitchTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBattleBuyWitchTeam::CopyFrom(const ReqBattleBuyWitchTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBattleBuyWitchTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBattleBuyWitchTeam::IsInitialized() const {
  return true;
}

void ReqBattleBuyWitchTeam::InternalSwap(ReqBattleBuyWitchTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_team_id_, GetArenaForAllocation(),
      &other->witch_team_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBattleBuyWitchTeam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[82]);
}

// ===================================================================

class AckBattleBuyWitchTeam::_Internal {
 public:
};

AckBattleBuyWitchTeam::AckBattleBuyWitchTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBattleBuyWitchTeam)
}
AckBattleBuyWitchTeam::AckBattleBuyWitchTeam(const AckBattleBuyWitchTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_team_id().empty()) {
    witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_team_id(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBattleBuyWitchTeam)
}

void AckBattleBuyWitchTeam::SharedCtor() {
witch_team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckBattleBuyWitchTeam::~AckBattleBuyWitchTeam() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBattleBuyWitchTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBattleBuyWitchTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckBattleBuyWitchTeam::ArenaDtor(void* object) {
  AckBattleBuyWitchTeam* _this = reinterpret_cast< AckBattleBuyWitchTeam* >(object);
  (void)_this;
}
void AckBattleBuyWitchTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBattleBuyWitchTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBattleBuyWitchTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBattleBuyWitchTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_team_id_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBattleBuyWitchTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes witch_team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBattleBuyWitchTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBattleBuyWitchTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBattleBuyWitchTeam)
  return target;
}

size_t AckBattleBuyWitchTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBattleBuyWitchTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_team_id = 2;
  if (!this->witch_team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_team_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBattleBuyWitchTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBattleBuyWitchTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBattleBuyWitchTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBattleBuyWitchTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBattleBuyWitchTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBattleBuyWitchTeam)
    MergeFrom(*source);
  }
}

void AckBattleBuyWitchTeam::MergeFrom(const AckBattleBuyWitchTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBattleBuyWitchTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_team_id().empty()) {
    _internal_set_witch_team_id(from._internal_witch_team_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckBattleBuyWitchTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBattleBuyWitchTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBattleBuyWitchTeam::CopyFrom(const AckBattleBuyWitchTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBattleBuyWitchTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBattleBuyWitchTeam::IsInitialized() const {
  return true;
}

void AckBattleBuyWitchTeam::InternalSwap(AckBattleBuyWitchTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_team_id_, GetArenaForAllocation(),
      &other->witch_team_id_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBattleBuyWitchTeam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[83]);
}

// ===================================================================

class ReqTestRecruitWitch::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqTestRecruitWitch* msg);
};

const ::KWMsg::Ident&
ReqTestRecruitWitch::_Internal::player_id(const ReqTestRecruitWitch* msg) {
  return *msg->player_id_;
}
void ReqTestRecruitWitch::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqTestRecruitWitch::ReqTestRecruitWitch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqTestRecruitWitch)
}
ReqTestRecruitWitch::ReqTestRecruitWitch(const ReqTestRecruitWitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqTestRecruitWitch)
}

void ReqTestRecruitWitch::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqTestRecruitWitch::~ReqTestRecruitWitch() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqTestRecruitWitch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqTestRecruitWitch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqTestRecruitWitch::ArenaDtor(void* object) {
  ReqTestRecruitWitch* _this = reinterpret_cast< ReqTestRecruitWitch* >(object);
  (void)_this;
}
void ReqTestRecruitWitch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqTestRecruitWitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqTestRecruitWitch::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqTestRecruitWitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqTestRecruitWitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqTestRecruitWitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqTestRecruitWitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqTestRecruitWitch)
  return target;
}

size_t ReqTestRecruitWitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqTestRecruitWitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqTestRecruitWitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqTestRecruitWitch)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqTestRecruitWitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqTestRecruitWitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqTestRecruitWitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqTestRecruitWitch)
    MergeFrom(*source);
  }
}

void ReqTestRecruitWitch::MergeFrom(const ReqTestRecruitWitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqTestRecruitWitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqTestRecruitWitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqTestRecruitWitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTestRecruitWitch::CopyFrom(const ReqTestRecruitWitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqTestRecruitWitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTestRecruitWitch::IsInitialized() const {
  return true;
}

void ReqTestRecruitWitch::InternalSwap(ReqTestRecruitWitch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqTestRecruitWitch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[84]);
}

// ===================================================================

class CommonGetRewardInfo::_Internal {
 public:
};

CommonGetRewardInfo::CommonGetRewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.CommonGetRewardInfo)
}
CommonGetRewardInfo::CommonGetRewardInfo(const CommonGetRewardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  show_type_ = from.show_type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.CommonGetRewardInfo)
}

void CommonGetRewardInfo::SharedCtor() {
show_type_ = 0;
}

CommonGetRewardInfo::~CommonGetRewardInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.CommonGetRewardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonGetRewardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommonGetRewardInfo::ArenaDtor(void* object) {
  CommonGetRewardInfo* _this = reinterpret_cast< CommonGetRewardInfo* >(object);
  (void)_this;
}
void CommonGetRewardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonGetRewardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonGetRewardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.CommonGetRewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  show_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonGetRewardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.CommonGetRewardInfo.EShowType show_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_show_type(static_cast<::KWMsg::CommonGetRewardInfo_EShowType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RewardInfo reward_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonGetRewardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.CommonGetRewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.CommonGetRewardInfo.EShowType show_type = 1;
  if (this->show_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_show_type(), target);
  }

  // repeated .KWMsg.RewardInfo reward_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reward_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.CommonGetRewardInfo)
  return target;
}

size_t CommonGetRewardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.CommonGetRewardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo reward_list = 2;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.CommonGetRewardInfo.EShowType show_type = 1;
  if (this->show_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_show_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonGetRewardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.CommonGetRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonGetRewardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonGetRewardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.CommonGetRewardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.CommonGetRewardInfo)
    MergeFrom(*source);
  }
}

void CommonGetRewardInfo::MergeFrom(const CommonGetRewardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.CommonGetRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.show_type() != 0) {
    _internal_set_show_type(from._internal_show_type());
  }
}

void CommonGetRewardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.CommonGetRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonGetRewardInfo::CopyFrom(const CommonGetRewardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.CommonGetRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonGetRewardInfo::IsInitialized() const {
  return true;
}

void CommonGetRewardInfo::InternalSwap(CommonGetRewardInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  swap(show_type_, other->show_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonGetRewardInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[85]);
}

// ===================================================================

class ReqSetSystemFunctionFlag::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqSetSystemFunctionFlag* msg);
};

const ::KWMsg::Ident&
ReqSetSystemFunctionFlag::_Internal::player_id(const ReqSetSystemFunctionFlag* msg) {
  return *msg->player_id_;
}
void ReqSetSystemFunctionFlag::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqSetSystemFunctionFlag::ReqSetSystemFunctionFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqSetSystemFunctionFlag)
}
ReqSetSystemFunctionFlag::ReqSetSystemFunctionFlag(const ReqSetSystemFunctionFlag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_function_id().empty()) {
    function_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqSetSystemFunctionFlag)
}

void ReqSetSystemFunctionFlag::SharedCtor() {
function_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(flag_));
}

ReqSetSystemFunctionFlag::~ReqSetSystemFunctionFlag() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqSetSystemFunctionFlag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqSetSystemFunctionFlag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  function_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqSetSystemFunctionFlag::ArenaDtor(void* object) {
  ReqSetSystemFunctionFlag* _this = reinterpret_cast< ReqSetSystemFunctionFlag* >(object);
  (void)_this;
}
void ReqSetSystemFunctionFlag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqSetSystemFunctionFlag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSetSystemFunctionFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqSetSystemFunctionFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  function_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  flag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSetSystemFunctionFlag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes function_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_function_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSetSystemFunctionFlag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqSetSystemFunctionFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes function_id = 2;
  if (!this->function_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_function_id(), target);
  }

  // int32 flag = 3;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqSetSystemFunctionFlag)
  return target;
}

size_t ReqSetSystemFunctionFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqSetSystemFunctionFlag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes function_id = 2;
  if (!this->function_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_function_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 flag = 3;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSetSystemFunctionFlag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqSetSystemFunctionFlag)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSetSystemFunctionFlag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSetSystemFunctionFlag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqSetSystemFunctionFlag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqSetSystemFunctionFlag)
    MergeFrom(*source);
  }
}

void ReqSetSystemFunctionFlag::MergeFrom(const ReqSetSystemFunctionFlag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqSetSystemFunctionFlag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.function_id().empty()) {
    _internal_set_function_id(from._internal_function_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void ReqSetSystemFunctionFlag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqSetSystemFunctionFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSetSystemFunctionFlag::CopyFrom(const ReqSetSystemFunctionFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqSetSystemFunctionFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSetSystemFunctionFlag::IsInitialized() const {
  return true;
}

void ReqSetSystemFunctionFlag::InternalSwap(ReqSetSystemFunctionFlag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &function_id_, GetArenaForAllocation(),
      &other->function_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqSetSystemFunctionFlag, flag_)
      + sizeof(ReqSetSystemFunctionFlag::flag_)
      - PROTOBUF_FIELD_OFFSET(ReqSetSystemFunctionFlag, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSetSystemFunctionFlag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[86]);
}

// ===================================================================

class AckSetSystemFunctionFlag::_Internal {
 public:
};

AckSetSystemFunctionFlag::AckSetSystemFunctionFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckSetSystemFunctionFlag)
}
AckSetSystemFunctionFlag::AckSetSystemFunctionFlag(const AckSetSystemFunctionFlag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckSetSystemFunctionFlag)
}

void AckSetSystemFunctionFlag::SharedCtor() {
event_code_ = 0;
}

AckSetSystemFunctionFlag::~AckSetSystemFunctionFlag() {
  // @@protoc_insertion_point(destructor:KWMsg.AckSetSystemFunctionFlag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckSetSystemFunctionFlag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckSetSystemFunctionFlag::ArenaDtor(void* object) {
  AckSetSystemFunctionFlag* _this = reinterpret_cast< AckSetSystemFunctionFlag* >(object);
  (void)_this;
}
void AckSetSystemFunctionFlag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckSetSystemFunctionFlag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckSetSystemFunctionFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckSetSystemFunctionFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckSetSystemFunctionFlag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSetSystemFunctionFlag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckSetSystemFunctionFlag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckSetSystemFunctionFlag)
  return target;
}

size_t AckSetSystemFunctionFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckSetSystemFunctionFlag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSetSystemFunctionFlag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckSetSystemFunctionFlag)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSetSystemFunctionFlag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSetSystemFunctionFlag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckSetSystemFunctionFlag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckSetSystemFunctionFlag)
    MergeFrom(*source);
  }
}

void AckSetSystemFunctionFlag::MergeFrom(const AckSetSystemFunctionFlag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckSetSystemFunctionFlag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckSetSystemFunctionFlag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckSetSystemFunctionFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSetSystemFunctionFlag::CopyFrom(const AckSetSystemFunctionFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckSetSystemFunctionFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSetSystemFunctionFlag::IsInitialized() const {
  return true;
}

void AckSetSystemFunctionFlag::InternalSwap(AckSetSystemFunctionFlag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSetSystemFunctionFlag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[87]);
}

// ===================================================================

class SyncSystemFunctionUnlock::_Internal {
 public:
};

SyncSystemFunctionUnlock::SyncSystemFunctionUnlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  function_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncSystemFunctionUnlock)
}
SyncSystemFunctionUnlock::SyncSystemFunctionUnlock(const SyncSystemFunctionUnlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      function_list_(from.function_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncSystemFunctionUnlock)
}

void SyncSystemFunctionUnlock::SharedCtor() {
}

SyncSystemFunctionUnlock::~SyncSystemFunctionUnlock() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncSystemFunctionUnlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncSystemFunctionUnlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncSystemFunctionUnlock::ArenaDtor(void* object) {
  SyncSystemFunctionUnlock* _this = reinterpret_cast< SyncSystemFunctionUnlock* >(object);
  (void)_this;
}
void SyncSystemFunctionUnlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncSystemFunctionUnlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncSystemFunctionUnlock::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncSystemFunctionUnlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  function_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncSystemFunctionUnlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes function_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_function_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncSystemFunctionUnlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncSystemFunctionUnlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes function_list = 1;
  for (int i = 0, n = this->_internal_function_list_size(); i < n; i++) {
    const auto& s = this->_internal_function_list(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncSystemFunctionUnlock)
  return target;
}

size_t SyncSystemFunctionUnlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncSystemFunctionUnlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes function_list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(function_list_.size());
  for (int i = 0, n = function_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      function_list_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncSystemFunctionUnlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncSystemFunctionUnlock)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncSystemFunctionUnlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncSystemFunctionUnlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncSystemFunctionUnlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncSystemFunctionUnlock)
    MergeFrom(*source);
  }
}

void SyncSystemFunctionUnlock::MergeFrom(const SyncSystemFunctionUnlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncSystemFunctionUnlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  function_list_.MergeFrom(from.function_list_);
}

void SyncSystemFunctionUnlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncSystemFunctionUnlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncSystemFunctionUnlock::CopyFrom(const SyncSystemFunctionUnlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncSystemFunctionUnlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncSystemFunctionUnlock::IsInitialized() const {
  return true;
}

void SyncSystemFunctionUnlock::InternalSwap(SyncSystemFunctionUnlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  function_list_.InternalSwap(&other->function_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncSystemFunctionUnlock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[88]);
}

// ===================================================================

class SyncPlayerLevelRanking::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SyncPlayerLevelRanking* msg);
};

const ::KWMsg::Ident&
SyncPlayerLevelRanking::_Internal::player_id(const SyncPlayerLevelRanking* msg) {
  return *msg->player_id_;
}
void SyncPlayerLevelRanking::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
SyncPlayerLevelRanking::SyncPlayerLevelRanking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncPlayerLevelRanking)
}
SyncPlayerLevelRanking::SyncPlayerLevelRanking(const SyncPlayerLevelRanking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  level_or_score_ = from.level_or_score_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncPlayerLevelRanking)
}

void SyncPlayerLevelRanking::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_or_score_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(level_or_score_));
}

SyncPlayerLevelRanking::~SyncPlayerLevelRanking() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncPlayerLevelRanking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncPlayerLevelRanking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void SyncPlayerLevelRanking::ArenaDtor(void* object) {
  SyncPlayerLevelRanking* _this = reinterpret_cast< SyncPlayerLevelRanking* >(object);
  (void)_this;
}
void SyncPlayerLevelRanking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncPlayerLevelRanking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncPlayerLevelRanking::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncPlayerLevelRanking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  level_or_score_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncPlayerLevelRanking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 level_or_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_or_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPlayerLevelRanking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncPlayerLevelRanking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int64 level_or_score = 2;
  if (this->level_or_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_level_or_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncPlayerLevelRanking)
  return target;
}

size_t SyncPlayerLevelRanking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncPlayerLevelRanking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int64 level_or_score = 2;
  if (this->level_or_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_level_or_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPlayerLevelRanking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncPlayerLevelRanking)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPlayerLevelRanking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPlayerLevelRanking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncPlayerLevelRanking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncPlayerLevelRanking)
    MergeFrom(*source);
  }
}

void SyncPlayerLevelRanking::MergeFrom(const SyncPlayerLevelRanking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncPlayerLevelRanking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.level_or_score() != 0) {
    _internal_set_level_or_score(from._internal_level_or_score());
  }
}

void SyncPlayerLevelRanking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncPlayerLevelRanking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPlayerLevelRanking::CopyFrom(const SyncPlayerLevelRanking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncPlayerLevelRanking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayerLevelRanking::IsInitialized() const {
  return true;
}

void SyncPlayerLevelRanking::InternalSwap(SyncPlayerLevelRanking* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncPlayerLevelRanking, level_or_score_)
      + sizeof(SyncPlayerLevelRanking::level_or_score_)
      - PROTOBUF_FIELD_OFFSET(SyncPlayerLevelRanking, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayerLevelRanking::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[89]);
}

// ===================================================================

class ReqSendGiftForWitch::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqSendGiftForWitch* msg);
};

const ::KWMsg::Ident&
ReqSendGiftForWitch::_Internal::player_id(const ReqSendGiftForWitch* msg) {
  return *msg->player_id_;
}
void ReqSendGiftForWitch::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqSendGiftForWitch::ReqSendGiftForWitch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqSendGiftForWitch)
}
ReqSendGiftForWitch::ReqSendGiftForWitch(const ReqSendGiftForWitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  gift_item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gift_item_id().empty()) {
    gift_item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gift_item_id(), 
      GetArenaForAllocation());
  }
  box_item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_box_item_id().empty()) {
    box_item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_box_item_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqSendGiftForWitch)
}

void ReqSendGiftForWitch::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gift_item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
box_item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqSendGiftForWitch::~ReqSendGiftForWitch() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqSendGiftForWitch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqSendGiftForWitch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gift_item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  box_item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqSendGiftForWitch::ArenaDtor(void* object) {
  ReqSendGiftForWitch* _this = reinterpret_cast< ReqSendGiftForWitch* >(object);
  (void)_this;
}
void ReqSendGiftForWitch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqSendGiftForWitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSendGiftForWitch::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqSendGiftForWitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  gift_item_id_.ClearToEmpty();
  box_item_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSendGiftForWitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes gift_item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_gift_item_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes box_item_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_box_item_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSendGiftForWitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqSendGiftForWitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_id(), target);
  }

  // bytes gift_item_id = 3;
  if (!this->gift_item_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_gift_item_id(), target);
  }

  // bytes box_item_id = 4;
  if (!this->box_item_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_box_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqSendGiftForWitch)
  return target;
}

size_t ReqSendGiftForWitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqSendGiftForWitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // bytes gift_item_id = 3;
  if (!this->gift_item_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gift_item_id());
  }

  // bytes box_item_id = 4;
  if (!this->box_item_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_box_item_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSendGiftForWitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqSendGiftForWitch)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSendGiftForWitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSendGiftForWitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqSendGiftForWitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqSendGiftForWitch)
    MergeFrom(*source);
  }
}

void ReqSendGiftForWitch::MergeFrom(const ReqSendGiftForWitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqSendGiftForWitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (!from.gift_item_id().empty()) {
    _internal_set_gift_item_id(from._internal_gift_item_id());
  }
  if (!from.box_item_id().empty()) {
    _internal_set_box_item_id(from._internal_box_item_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqSendGiftForWitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqSendGiftForWitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSendGiftForWitch::CopyFrom(const ReqSendGiftForWitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqSendGiftForWitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSendGiftForWitch::IsInitialized() const {
  return true;
}

void ReqSendGiftForWitch::InternalSwap(ReqSendGiftForWitch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gift_item_id_, GetArenaForAllocation(),
      &other->gift_item_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &box_item_id_, GetArenaForAllocation(),
      &other->box_item_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSendGiftForWitch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[90]);
}

// ===================================================================

class AckSendGiftForWitch::_Internal {
 public:
};

AckSendGiftForWitch::AckSendGiftForWitch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckSendGiftForWitch)
}
AckSendGiftForWitch::AckSendGiftForWitch(const AckSendGiftForWitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckSendGiftForWitch)
}

void AckSendGiftForWitch::SharedCtor() {
event_code_ = 0;
}

AckSendGiftForWitch::~AckSendGiftForWitch() {
  // @@protoc_insertion_point(destructor:KWMsg.AckSendGiftForWitch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckSendGiftForWitch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckSendGiftForWitch::ArenaDtor(void* object) {
  AckSendGiftForWitch* _this = reinterpret_cast< AckSendGiftForWitch* >(object);
  (void)_this;
}
void AckSendGiftForWitch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckSendGiftForWitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckSendGiftForWitch::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckSendGiftForWitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckSendGiftForWitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSendGiftForWitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckSendGiftForWitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckSendGiftForWitch)
  return target;
}

size_t AckSendGiftForWitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckSendGiftForWitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSendGiftForWitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckSendGiftForWitch)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSendGiftForWitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSendGiftForWitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckSendGiftForWitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckSendGiftForWitch)
    MergeFrom(*source);
  }
}

void AckSendGiftForWitch::MergeFrom(const AckSendGiftForWitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckSendGiftForWitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckSendGiftForWitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckSendGiftForWitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSendGiftForWitch::CopyFrom(const AckSendGiftForWitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckSendGiftForWitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSendGiftForWitch::IsInitialized() const {
  return true;
}

void AckSendGiftForWitch::InternalSwap(AckSendGiftForWitch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSendGiftForWitch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[91]);
}

// ===================================================================

class ReqUseMagicalMedicine::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqUseMagicalMedicine* msg);
};

const ::KWMsg::Ident&
ReqUseMagicalMedicine::_Internal::player_id(const ReqUseMagicalMedicine* msg) {
  return *msg->player_id_;
}
void ReqUseMagicalMedicine::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqUseMagicalMedicine::ReqUseMagicalMedicine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqUseMagicalMedicine)
}
ReqUseMagicalMedicine::ReqUseMagicalMedicine(const ReqUseMagicalMedicine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_item_id().empty()) {
    item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  use_count_ = from.use_count_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqUseMagicalMedicine)
}

void ReqUseMagicalMedicine::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_count_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(use_count_));
}

ReqUseMagicalMedicine::~ReqUseMagicalMedicine() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqUseMagicalMedicine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqUseMagicalMedicine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqUseMagicalMedicine::ArenaDtor(void* object) {
  ReqUseMagicalMedicine* _this = reinterpret_cast< ReqUseMagicalMedicine* >(object);
  (void)_this;
}
void ReqUseMagicalMedicine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqUseMagicalMedicine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqUseMagicalMedicine::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqUseMagicalMedicine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  item_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  use_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqUseMagicalMedicine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_item_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 use_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          use_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUseMagicalMedicine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqUseMagicalMedicine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_id(), target);
  }

  // bytes item_id = 3;
  if (!this->item_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_item_id(), target);
  }

  // int32 use_count = 4;
  if (this->use_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_use_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqUseMagicalMedicine)
  return target;
}

size_t ReqUseMagicalMedicine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqUseMagicalMedicine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // bytes item_id = 3;
  if (!this->item_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_item_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 use_count = 4;
  if (this->use_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_use_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUseMagicalMedicine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqUseMagicalMedicine)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUseMagicalMedicine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUseMagicalMedicine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqUseMagicalMedicine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqUseMagicalMedicine)
    MergeFrom(*source);
  }
}

void ReqUseMagicalMedicine::MergeFrom(const ReqUseMagicalMedicine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqUseMagicalMedicine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (!from.item_id().empty()) {
    _internal_set_item_id(from._internal_item_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.use_count() != 0) {
    _internal_set_use_count(from._internal_use_count());
  }
}

void ReqUseMagicalMedicine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqUseMagicalMedicine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUseMagicalMedicine::CopyFrom(const ReqUseMagicalMedicine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqUseMagicalMedicine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUseMagicalMedicine::IsInitialized() const {
  return true;
}

void ReqUseMagicalMedicine::InternalSwap(ReqUseMagicalMedicine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &item_id_, GetArenaForAllocation(),
      &other->item_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqUseMagicalMedicine, use_count_)
      + sizeof(ReqUseMagicalMedicine::use_count_)
      - PROTOBUF_FIELD_OFFSET(ReqUseMagicalMedicine, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUseMagicalMedicine::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[92]);
}

// ===================================================================

class AckUseMagicalMedicine::_Internal {
 public:
};

AckUseMagicalMedicine::AckUseMagicalMedicine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckUseMagicalMedicine)
}
AckUseMagicalMedicine::AckUseMagicalMedicine(const AckUseMagicalMedicine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckUseMagicalMedicine)
}

void AckUseMagicalMedicine::SharedCtor() {
event_code_ = 0;
}

AckUseMagicalMedicine::~AckUseMagicalMedicine() {
  // @@protoc_insertion_point(destructor:KWMsg.AckUseMagicalMedicine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckUseMagicalMedicine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckUseMagicalMedicine::ArenaDtor(void* object) {
  AckUseMagicalMedicine* _this = reinterpret_cast< AckUseMagicalMedicine* >(object);
  (void)_this;
}
void AckUseMagicalMedicine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckUseMagicalMedicine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckUseMagicalMedicine::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckUseMagicalMedicine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckUseMagicalMedicine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckUseMagicalMedicine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckUseMagicalMedicine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckUseMagicalMedicine)
  return target;
}

size_t AckUseMagicalMedicine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckUseMagicalMedicine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckUseMagicalMedicine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckUseMagicalMedicine)
  GOOGLE_DCHECK_NE(&from, this);
  const AckUseMagicalMedicine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckUseMagicalMedicine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckUseMagicalMedicine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckUseMagicalMedicine)
    MergeFrom(*source);
  }
}

void AckUseMagicalMedicine::MergeFrom(const AckUseMagicalMedicine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckUseMagicalMedicine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckUseMagicalMedicine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckUseMagicalMedicine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUseMagicalMedicine::CopyFrom(const AckUseMagicalMedicine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckUseMagicalMedicine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUseMagicalMedicine::IsInitialized() const {
  return true;
}

void AckUseMagicalMedicine::InternalSwap(AckUseMagicalMedicine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckUseMagicalMedicine::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[93]);
}

// ===================================================================

class ReqUnlockWitchSkin::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqUnlockWitchSkin* msg);
};

const ::KWMsg::Ident&
ReqUnlockWitchSkin::_Internal::player_id(const ReqUnlockWitchSkin* msg) {
  return *msg->player_id_;
}
void ReqUnlockWitchSkin::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqUnlockWitchSkin::ReqUnlockWitchSkin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqUnlockWitchSkin)
}
ReqUnlockWitchSkin::ReqUnlockWitchSkin(const ReqUnlockWitchSkin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  witch_skin_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_skin_id().empty()) {
    witch_skin_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_skin_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqUnlockWitchSkin)
}

void ReqUnlockWitchSkin::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
witch_skin_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqUnlockWitchSkin::~ReqUnlockWitchSkin() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqUnlockWitchSkin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqUnlockWitchSkin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witch_skin_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqUnlockWitchSkin::ArenaDtor(void* object) {
  ReqUnlockWitchSkin* _this = reinterpret_cast< ReqUnlockWitchSkin* >(object);
  (void)_this;
}
void ReqUnlockWitchSkin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqUnlockWitchSkin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqUnlockWitchSkin::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqUnlockWitchSkin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  witch_skin_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqUnlockWitchSkin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_skin_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_witch_skin_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUnlockWitchSkin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqUnlockWitchSkin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_id(), target);
  }

  // bytes witch_skin_id = 3;
  if (!this->witch_skin_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_witch_skin_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqUnlockWitchSkin)
  return target;
}

size_t ReqUnlockWitchSkin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqUnlockWitchSkin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // bytes witch_skin_id = 3;
  if (!this->witch_skin_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_skin_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUnlockWitchSkin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqUnlockWitchSkin)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUnlockWitchSkin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUnlockWitchSkin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqUnlockWitchSkin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqUnlockWitchSkin)
    MergeFrom(*source);
  }
}

void ReqUnlockWitchSkin::MergeFrom(const ReqUnlockWitchSkin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqUnlockWitchSkin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (!from.witch_skin_id().empty()) {
    _internal_set_witch_skin_id(from._internal_witch_skin_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqUnlockWitchSkin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqUnlockWitchSkin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUnlockWitchSkin::CopyFrom(const ReqUnlockWitchSkin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqUnlockWitchSkin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUnlockWitchSkin::IsInitialized() const {
  return true;
}

void ReqUnlockWitchSkin::InternalSwap(ReqUnlockWitchSkin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_skin_id_, GetArenaForAllocation(),
      &other->witch_skin_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUnlockWitchSkin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[94]);
}

// ===================================================================

class AckUnlockWitchSkin::_Internal {
 public:
};

AckUnlockWitchSkin::AckUnlockWitchSkin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckUnlockWitchSkin)
}
AckUnlockWitchSkin::AckUnlockWitchSkin(const AckUnlockWitchSkin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckUnlockWitchSkin)
}

void AckUnlockWitchSkin::SharedCtor() {
event_code_ = 0;
}

AckUnlockWitchSkin::~AckUnlockWitchSkin() {
  // @@protoc_insertion_point(destructor:KWMsg.AckUnlockWitchSkin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckUnlockWitchSkin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckUnlockWitchSkin::ArenaDtor(void* object) {
  AckUnlockWitchSkin* _this = reinterpret_cast< AckUnlockWitchSkin* >(object);
  (void)_this;
}
void AckUnlockWitchSkin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckUnlockWitchSkin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckUnlockWitchSkin::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckUnlockWitchSkin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckUnlockWitchSkin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckUnlockWitchSkin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckUnlockWitchSkin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckUnlockWitchSkin)
  return target;
}

size_t AckUnlockWitchSkin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckUnlockWitchSkin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckUnlockWitchSkin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckUnlockWitchSkin)
  GOOGLE_DCHECK_NE(&from, this);
  const AckUnlockWitchSkin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckUnlockWitchSkin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckUnlockWitchSkin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckUnlockWitchSkin)
    MergeFrom(*source);
  }
}

void AckUnlockWitchSkin::MergeFrom(const AckUnlockWitchSkin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckUnlockWitchSkin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckUnlockWitchSkin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckUnlockWitchSkin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUnlockWitchSkin::CopyFrom(const AckUnlockWitchSkin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckUnlockWitchSkin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUnlockWitchSkin::IsInitialized() const {
  return true;
}

void AckUnlockWitchSkin::InternalSwap(AckUnlockWitchSkin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckUnlockWitchSkin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[95]);
}

// ===================================================================

class ReqWitchStarLevelUp::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqWitchStarLevelUp* msg);
};

const ::KWMsg::Ident&
ReqWitchStarLevelUp::_Internal::player_id(const ReqWitchStarLevelUp* msg) {
  return *msg->player_id_;
}
void ReqWitchStarLevelUp::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqWitchStarLevelUp::ReqWitchStarLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqWitchStarLevelUp)
}
ReqWitchStarLevelUp::ReqWitchStarLevelUp(const ReqWitchStarLevelUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  consume_item_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_consume_item_list().empty()) {
    consume_item_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_consume_item_list(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqWitchStarLevelUp)
}

void ReqWitchStarLevelUp::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
consume_item_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqWitchStarLevelUp::~ReqWitchStarLevelUp() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqWitchStarLevelUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqWitchStarLevelUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consume_item_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqWitchStarLevelUp::ArenaDtor(void* object) {
  ReqWitchStarLevelUp* _this = reinterpret_cast< ReqWitchStarLevelUp* >(object);
  (void)_this;
}
void ReqWitchStarLevelUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqWitchStarLevelUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqWitchStarLevelUp::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqWitchStarLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  consume_item_list_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqWitchStarLevelUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes consume_item_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_consume_item_list();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqWitchStarLevelUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqWitchStarLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_id(), target);
  }

  // bytes consume_item_list = 3;
  if (!this->consume_item_list().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_consume_item_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqWitchStarLevelUp)
  return target;
}

size_t ReqWitchStarLevelUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqWitchStarLevelUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // bytes consume_item_list = 3;
  if (!this->consume_item_list().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_consume_item_list());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqWitchStarLevelUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqWitchStarLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqWitchStarLevelUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqWitchStarLevelUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqWitchStarLevelUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqWitchStarLevelUp)
    MergeFrom(*source);
  }
}

void ReqWitchStarLevelUp::MergeFrom(const ReqWitchStarLevelUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqWitchStarLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (!from.consume_item_list().empty()) {
    _internal_set_consume_item_list(from._internal_consume_item_list());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqWitchStarLevelUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqWitchStarLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWitchStarLevelUp::CopyFrom(const ReqWitchStarLevelUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqWitchStarLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWitchStarLevelUp::IsInitialized() const {
  return true;
}

void ReqWitchStarLevelUp::InternalSwap(ReqWitchStarLevelUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &consume_item_list_, GetArenaForAllocation(),
      &other->consume_item_list_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqWitchStarLevelUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[96]);
}

// ===================================================================

class AckWitchStarLevelUp::_Internal {
 public:
};

AckWitchStarLevelUp::AckWitchStarLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckWitchStarLevelUp)
}
AckWitchStarLevelUp::AckWitchStarLevelUp(const AckWitchStarLevelUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckWitchStarLevelUp)
}

void AckWitchStarLevelUp::SharedCtor() {
event_code_ = 0;
}

AckWitchStarLevelUp::~AckWitchStarLevelUp() {
  // @@protoc_insertion_point(destructor:KWMsg.AckWitchStarLevelUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckWitchStarLevelUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckWitchStarLevelUp::ArenaDtor(void* object) {
  AckWitchStarLevelUp* _this = reinterpret_cast< AckWitchStarLevelUp* >(object);
  (void)_this;
}
void AckWitchStarLevelUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckWitchStarLevelUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckWitchStarLevelUp::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckWitchStarLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckWitchStarLevelUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckWitchStarLevelUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckWitchStarLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckWitchStarLevelUp)
  return target;
}

size_t AckWitchStarLevelUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckWitchStarLevelUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckWitchStarLevelUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckWitchStarLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  const AckWitchStarLevelUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckWitchStarLevelUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckWitchStarLevelUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckWitchStarLevelUp)
    MergeFrom(*source);
  }
}

void AckWitchStarLevelUp::MergeFrom(const AckWitchStarLevelUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckWitchStarLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckWitchStarLevelUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckWitchStarLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckWitchStarLevelUp::CopyFrom(const AckWitchStarLevelUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckWitchStarLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckWitchStarLevelUp::IsInitialized() const {
  return true;
}

void AckWitchStarLevelUp::InternalSwap(AckWitchStarLevelUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckWitchStarLevelUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[97]);
}

// ===================================================================

class ReqWitchKnowledgeLevelUp::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqWitchKnowledgeLevelUp* msg);
};

const ::KWMsg::Ident&
ReqWitchKnowledgeLevelUp::_Internal::player_id(const ReqWitchKnowledgeLevelUp* msg) {
  return *msg->player_id_;
}
void ReqWitchKnowledgeLevelUp::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqWitchKnowledgeLevelUp::ReqWitchKnowledgeLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqWitchKnowledgeLevelUp)
}
ReqWitchKnowledgeLevelUp::ReqWitchKnowledgeLevelUp(const ReqWitchKnowledgeLevelUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  opt_type_ = from.opt_type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqWitchKnowledgeLevelUp)
}

void ReqWitchKnowledgeLevelUp::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opt_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(opt_type_));
}

ReqWitchKnowledgeLevelUp::~ReqWitchKnowledgeLevelUp() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqWitchKnowledgeLevelUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqWitchKnowledgeLevelUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqWitchKnowledgeLevelUp::ArenaDtor(void* object) {
  ReqWitchKnowledgeLevelUp* _this = reinterpret_cast< ReqWitchKnowledgeLevelUp* >(object);
  (void)_this;
}
void ReqWitchKnowledgeLevelUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqWitchKnowledgeLevelUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqWitchKnowledgeLevelUp::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqWitchKnowledgeLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  opt_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqWitchKnowledgeLevelUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.EWitchKnowledgeOptType opt_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_opt_type(static_cast<::KWMsg::EWitchKnowledgeOptType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqWitchKnowledgeLevelUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqWitchKnowledgeLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_id(), target);
  }

  // .KWMsg.EWitchKnowledgeOptType opt_type = 3;
  if (this->opt_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_opt_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqWitchKnowledgeLevelUp)
  return target;
}

size_t ReqWitchKnowledgeLevelUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqWitchKnowledgeLevelUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.EWitchKnowledgeOptType opt_type = 3;
  if (this->opt_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_opt_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqWitchKnowledgeLevelUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqWitchKnowledgeLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqWitchKnowledgeLevelUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqWitchKnowledgeLevelUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqWitchKnowledgeLevelUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqWitchKnowledgeLevelUp)
    MergeFrom(*source);
  }
}

void ReqWitchKnowledgeLevelUp::MergeFrom(const ReqWitchKnowledgeLevelUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqWitchKnowledgeLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.opt_type() != 0) {
    _internal_set_opt_type(from._internal_opt_type());
  }
}

void ReqWitchKnowledgeLevelUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqWitchKnowledgeLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWitchKnowledgeLevelUp::CopyFrom(const ReqWitchKnowledgeLevelUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqWitchKnowledgeLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWitchKnowledgeLevelUp::IsInitialized() const {
  return true;
}

void ReqWitchKnowledgeLevelUp::InternalSwap(ReqWitchKnowledgeLevelUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqWitchKnowledgeLevelUp, opt_type_)
      + sizeof(ReqWitchKnowledgeLevelUp::opt_type_)
      - PROTOBUF_FIELD_OFFSET(ReqWitchKnowledgeLevelUp, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqWitchKnowledgeLevelUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[98]);
}

// ===================================================================

class AckWitchKnowledgeLevelUp::_Internal {
 public:
};

AckWitchKnowledgeLevelUp::AckWitchKnowledgeLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckWitchKnowledgeLevelUp)
}
AckWitchKnowledgeLevelUp::AckWitchKnowledgeLevelUp(const AckWitchKnowledgeLevelUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckWitchKnowledgeLevelUp)
}

void AckWitchKnowledgeLevelUp::SharedCtor() {
event_code_ = 0;
}

AckWitchKnowledgeLevelUp::~AckWitchKnowledgeLevelUp() {
  // @@protoc_insertion_point(destructor:KWMsg.AckWitchKnowledgeLevelUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckWitchKnowledgeLevelUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckWitchKnowledgeLevelUp::ArenaDtor(void* object) {
  AckWitchKnowledgeLevelUp* _this = reinterpret_cast< AckWitchKnowledgeLevelUp* >(object);
  (void)_this;
}
void AckWitchKnowledgeLevelUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckWitchKnowledgeLevelUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckWitchKnowledgeLevelUp::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckWitchKnowledgeLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckWitchKnowledgeLevelUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckWitchKnowledgeLevelUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckWitchKnowledgeLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckWitchKnowledgeLevelUp)
  return target;
}

size_t AckWitchKnowledgeLevelUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckWitchKnowledgeLevelUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckWitchKnowledgeLevelUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckWitchKnowledgeLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  const AckWitchKnowledgeLevelUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckWitchKnowledgeLevelUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckWitchKnowledgeLevelUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckWitchKnowledgeLevelUp)
    MergeFrom(*source);
  }
}

void AckWitchKnowledgeLevelUp::MergeFrom(const AckWitchKnowledgeLevelUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckWitchKnowledgeLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckWitchKnowledgeLevelUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckWitchKnowledgeLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckWitchKnowledgeLevelUp::CopyFrom(const AckWitchKnowledgeLevelUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckWitchKnowledgeLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckWitchKnowledgeLevelUp::IsInitialized() const {
  return true;
}

void AckWitchKnowledgeLevelUp::InternalSwap(AckWitchKnowledgeLevelUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckWitchKnowledgeLevelUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[99]);
}

// ===================================================================

class ReqExpandWitchPneumaBagSize::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqExpandWitchPneumaBagSize* msg);
};

const ::KWMsg::Ident&
ReqExpandWitchPneumaBagSize::_Internal::player_id(const ReqExpandWitchPneumaBagSize* msg) {
  return *msg->player_id_;
}
void ReqExpandWitchPneumaBagSize::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqExpandWitchPneumaBagSize::ReqExpandWitchPneumaBagSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqExpandWitchPneumaBagSize)
}
ReqExpandWitchPneumaBagSize::ReqExpandWitchPneumaBagSize(const ReqExpandWitchPneumaBagSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  expand_count_ = from.expand_count_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqExpandWitchPneumaBagSize)
}

void ReqExpandWitchPneumaBagSize::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expand_count_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(expand_count_));
}

ReqExpandWitchPneumaBagSize::~ReqExpandWitchPneumaBagSize() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqExpandWitchPneumaBagSize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqExpandWitchPneumaBagSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqExpandWitchPneumaBagSize::ArenaDtor(void* object) {
  ReqExpandWitchPneumaBagSize* _this = reinterpret_cast< ReqExpandWitchPneumaBagSize* >(object);
  (void)_this;
}
void ReqExpandWitchPneumaBagSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqExpandWitchPneumaBagSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqExpandWitchPneumaBagSize::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqExpandWitchPneumaBagSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  expand_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqExpandWitchPneumaBagSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expand_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          expand_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqExpandWitchPneumaBagSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqExpandWitchPneumaBagSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 expand_count = 2;
  if (this->expand_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_expand_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqExpandWitchPneumaBagSize)
  return target;
}

size_t ReqExpandWitchPneumaBagSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqExpandWitchPneumaBagSize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 expand_count = 2;
  if (this->expand_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expand_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqExpandWitchPneumaBagSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqExpandWitchPneumaBagSize)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqExpandWitchPneumaBagSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqExpandWitchPneumaBagSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqExpandWitchPneumaBagSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqExpandWitchPneumaBagSize)
    MergeFrom(*source);
  }
}

void ReqExpandWitchPneumaBagSize::MergeFrom(const ReqExpandWitchPneumaBagSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqExpandWitchPneumaBagSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.expand_count() != 0) {
    _internal_set_expand_count(from._internal_expand_count());
  }
}

void ReqExpandWitchPneumaBagSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqExpandWitchPneumaBagSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqExpandWitchPneumaBagSize::CopyFrom(const ReqExpandWitchPneumaBagSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqExpandWitchPneumaBagSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqExpandWitchPneumaBagSize::IsInitialized() const {
  return true;
}

void ReqExpandWitchPneumaBagSize::InternalSwap(ReqExpandWitchPneumaBagSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqExpandWitchPneumaBagSize, expand_count_)
      + sizeof(ReqExpandWitchPneumaBagSize::expand_count_)
      - PROTOBUF_FIELD_OFFSET(ReqExpandWitchPneumaBagSize, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqExpandWitchPneumaBagSize::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[100]);
}

// ===================================================================

class AckExpandWitchPneumaBagSize::_Internal {
 public:
};

AckExpandWitchPneumaBagSize::AckExpandWitchPneumaBagSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckExpandWitchPneumaBagSize)
}
AckExpandWitchPneumaBagSize::AckExpandWitchPneumaBagSize(const AckExpandWitchPneumaBagSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckExpandWitchPneumaBagSize)
}

void AckExpandWitchPneumaBagSize::SharedCtor() {
event_code_ = 0;
}

AckExpandWitchPneumaBagSize::~AckExpandWitchPneumaBagSize() {
  // @@protoc_insertion_point(destructor:KWMsg.AckExpandWitchPneumaBagSize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckExpandWitchPneumaBagSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckExpandWitchPneumaBagSize::ArenaDtor(void* object) {
  AckExpandWitchPneumaBagSize* _this = reinterpret_cast< AckExpandWitchPneumaBagSize* >(object);
  (void)_this;
}
void AckExpandWitchPneumaBagSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckExpandWitchPneumaBagSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckExpandWitchPneumaBagSize::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckExpandWitchPneumaBagSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckExpandWitchPneumaBagSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckExpandWitchPneumaBagSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckExpandWitchPneumaBagSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckExpandWitchPneumaBagSize)
  return target;
}

size_t AckExpandWitchPneumaBagSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckExpandWitchPneumaBagSize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckExpandWitchPneumaBagSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckExpandWitchPneumaBagSize)
  GOOGLE_DCHECK_NE(&from, this);
  const AckExpandWitchPneumaBagSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckExpandWitchPneumaBagSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckExpandWitchPneumaBagSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckExpandWitchPneumaBagSize)
    MergeFrom(*source);
  }
}

void AckExpandWitchPneumaBagSize::MergeFrom(const AckExpandWitchPneumaBagSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckExpandWitchPneumaBagSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckExpandWitchPneumaBagSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckExpandWitchPneumaBagSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckExpandWitchPneumaBagSize::CopyFrom(const AckExpandWitchPneumaBagSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckExpandWitchPneumaBagSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckExpandWitchPneumaBagSize::IsInitialized() const {
  return true;
}

void AckExpandWitchPneumaBagSize::InternalSwap(AckExpandWitchPneumaBagSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckExpandWitchPneumaBagSize::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[101]);
}

// ===================================================================

class ReqWitchPneumaOpt::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqWitchPneumaOpt* msg);
  static const ::KWMsg::Ident& pneuma_guid(const ReqWitchPneumaOpt* msg);
};

const ::KWMsg::Ident&
ReqWitchPneumaOpt::_Internal::player_id(const ReqWitchPneumaOpt* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqWitchPneumaOpt::_Internal::pneuma_guid(const ReqWitchPneumaOpt* msg) {
  return *msg->pneuma_guid_;
}
void ReqWitchPneumaOpt::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqWitchPneumaOpt::clear_pneuma_guid() {
  if (GetArenaForAllocation() == nullptr && pneuma_guid_ != nullptr) {
    delete pneuma_guid_;
  }
  pneuma_guid_ = nullptr;
}
ReqWitchPneumaOpt::ReqWitchPneumaOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqWitchPneumaOpt)
}
ReqWitchPneumaOpt::ReqWitchPneumaOpt(const ReqWitchPneumaOpt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_pneuma_guid()) {
    pneuma_guid_ = new ::KWMsg::Ident(*from.pneuma_guid_);
  } else {
    pneuma_guid_ = nullptr;
  }
  opt_type_ = from.opt_type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqWitchPneumaOpt)
}

void ReqWitchPneumaOpt::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opt_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(opt_type_));
}

ReqWitchPneumaOpt::~ReqWitchPneumaOpt() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqWitchPneumaOpt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqWitchPneumaOpt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete pneuma_guid_;
}

void ReqWitchPneumaOpt::ArenaDtor(void* object) {
  ReqWitchPneumaOpt* _this = reinterpret_cast< ReqWitchPneumaOpt* >(object);
  (void)_this;
}
void ReqWitchPneumaOpt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqWitchPneumaOpt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqWitchPneumaOpt::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqWitchPneumaOpt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pneuma_guid_ != nullptr) {
    delete pneuma_guid_;
  }
  pneuma_guid_ = nullptr;
  opt_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqWitchPneumaOpt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident pneuma_guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pneuma_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.EWitchPneumaOptType opt_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_opt_type(static_cast<::KWMsg::EWitchPneumaOptType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqWitchPneumaOpt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqWitchPneumaOpt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident pneuma_guid = 2;
  if (this->has_pneuma_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pneuma_guid(this), target, stream);
  }

  // bytes witch_id = 3;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_witch_id(), target);
  }

  // .KWMsg.EWitchPneumaOptType opt_type = 4;
  if (this->opt_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_opt_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqWitchPneumaOpt)
  return target;
}

size_t ReqWitchPneumaOpt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqWitchPneumaOpt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 3;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident pneuma_guid = 2;
  if (this->has_pneuma_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pneuma_guid_);
  }

  // .KWMsg.EWitchPneumaOptType opt_type = 4;
  if (this->opt_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_opt_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqWitchPneumaOpt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqWitchPneumaOpt)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqWitchPneumaOpt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqWitchPneumaOpt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqWitchPneumaOpt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqWitchPneumaOpt)
    MergeFrom(*source);
  }
}

void ReqWitchPneumaOpt::MergeFrom(const ReqWitchPneumaOpt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqWitchPneumaOpt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_pneuma_guid()) {
    _internal_mutable_pneuma_guid()->::KWMsg::Ident::MergeFrom(from._internal_pneuma_guid());
  }
  if (from.opt_type() != 0) {
    _internal_set_opt_type(from._internal_opt_type());
  }
}

void ReqWitchPneumaOpt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqWitchPneumaOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWitchPneumaOpt::CopyFrom(const ReqWitchPneumaOpt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqWitchPneumaOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWitchPneumaOpt::IsInitialized() const {
  return true;
}

void ReqWitchPneumaOpt::InternalSwap(ReqWitchPneumaOpt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqWitchPneumaOpt, opt_type_)
      + sizeof(ReqWitchPneumaOpt::opt_type_)
      - PROTOBUF_FIELD_OFFSET(ReqWitchPneumaOpt, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqWitchPneumaOpt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[102]);
}

// ===================================================================

class AckWitchPneumaOpt::_Internal {
 public:
  static const ::KWMsg::Ident& pneuma_guid(const AckWitchPneumaOpt* msg);
};

const ::KWMsg::Ident&
AckWitchPneumaOpt::_Internal::pneuma_guid(const AckWitchPneumaOpt* msg) {
  return *msg->pneuma_guid_;
}
void AckWitchPneumaOpt::clear_pneuma_guid() {
  if (GetArenaForAllocation() == nullptr && pneuma_guid_ != nullptr) {
    delete pneuma_guid_;
  }
  pneuma_guid_ = nullptr;
}
AckWitchPneumaOpt::AckWitchPneumaOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckWitchPneumaOpt)
}
AckWitchPneumaOpt::AckWitchPneumaOpt(const AckWitchPneumaOpt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pneuma_guid()) {
    pneuma_guid_ = new ::KWMsg::Ident(*from.pneuma_guid_);
  } else {
    pneuma_guid_ = nullptr;
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&opt_type_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(opt_type_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckWitchPneumaOpt)
}

void AckWitchPneumaOpt::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pneuma_guid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opt_type_) -
    reinterpret_cast<char*>(&pneuma_guid_)) + sizeof(opt_type_));
}

AckWitchPneumaOpt::~AckWitchPneumaOpt() {
  // @@protoc_insertion_point(destructor:KWMsg.AckWitchPneumaOpt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckWitchPneumaOpt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pneuma_guid_;
}

void AckWitchPneumaOpt::ArenaDtor(void* object) {
  AckWitchPneumaOpt* _this = reinterpret_cast< AckWitchPneumaOpt* >(object);
  (void)_this;
}
void AckWitchPneumaOpt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckWitchPneumaOpt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckWitchPneumaOpt::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckWitchPneumaOpt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pneuma_guid_ != nullptr) {
    delete pneuma_guid_;
  }
  pneuma_guid_ = nullptr;
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opt_type_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(opt_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckWitchPneumaOpt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident pneuma_guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pneuma_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.EWitchPneumaOptType opt_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_opt_type(static_cast<::KWMsg::EWitchPneumaOptType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckWitchPneumaOpt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckWitchPneumaOpt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident pneuma_guid = 2;
  if (this->has_pneuma_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pneuma_guid(this), target, stream);
  }

  // bytes witch_id = 3;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_witch_id(), target);
  }

  // .KWMsg.EWitchPneumaOptType opt_type = 4;
  if (this->opt_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_opt_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckWitchPneumaOpt)
  return target;
}

size_t AckWitchPneumaOpt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckWitchPneumaOpt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 3;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // .KWMsg.Ident pneuma_guid = 2;
  if (this->has_pneuma_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pneuma_guid_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // .KWMsg.EWitchPneumaOptType opt_type = 4;
  if (this->opt_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_opt_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckWitchPneumaOpt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckWitchPneumaOpt)
  GOOGLE_DCHECK_NE(&from, this);
  const AckWitchPneumaOpt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckWitchPneumaOpt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckWitchPneumaOpt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckWitchPneumaOpt)
    MergeFrom(*source);
  }
}

void AckWitchPneumaOpt::MergeFrom(const AckWitchPneumaOpt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckWitchPneumaOpt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (from.has_pneuma_guid()) {
    _internal_mutable_pneuma_guid()->::KWMsg::Ident::MergeFrom(from._internal_pneuma_guid());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.opt_type() != 0) {
    _internal_set_opt_type(from._internal_opt_type());
  }
}

void AckWitchPneumaOpt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckWitchPneumaOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckWitchPneumaOpt::CopyFrom(const AckWitchPneumaOpt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckWitchPneumaOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckWitchPneumaOpt::IsInitialized() const {
  return true;
}

void AckWitchPneumaOpt::InternalSwap(AckWitchPneumaOpt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckWitchPneumaOpt, opt_type_)
      + sizeof(AckWitchPneumaOpt::opt_type_)
      - PROTOBUF_FIELD_OFFSET(AckWitchPneumaOpt, pneuma_guid_)>(
          reinterpret_cast<char*>(&pneuma_guid_),
          reinterpret_cast<char*>(&other->pneuma_guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckWitchPneumaOpt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[103]);
}

// ===================================================================

class ReqWitchPneumaEnhance::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqWitchPneumaEnhance* msg);
  static const ::KWMsg::Ident& pneuma_guid(const ReqWitchPneumaEnhance* msg);
};

const ::KWMsg::Ident&
ReqWitchPneumaEnhance::_Internal::player_id(const ReqWitchPneumaEnhance* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqWitchPneumaEnhance::_Internal::pneuma_guid(const ReqWitchPneumaEnhance* msg) {
  return *msg->pneuma_guid_;
}
void ReqWitchPneumaEnhance::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqWitchPneumaEnhance::clear_pneuma_guid() {
  if (GetArenaForAllocation() == nullptr && pneuma_guid_ != nullptr) {
    delete pneuma_guid_;
  }
  pneuma_guid_ = nullptr;
}
ReqWitchPneumaEnhance::ReqWitchPneumaEnhance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqWitchPneumaEnhance)
}
ReqWitchPneumaEnhance::ReqWitchPneumaEnhance(const ReqWitchPneumaEnhance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_pneuma_guid()) {
    pneuma_guid_ = new ::KWMsg::Ident(*from.pneuma_guid_);
  } else {
    pneuma_guid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqWitchPneumaEnhance)
}

void ReqWitchPneumaEnhance::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pneuma_guid_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(pneuma_guid_));
}

ReqWitchPneumaEnhance::~ReqWitchPneumaEnhance() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqWitchPneumaEnhance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqWitchPneumaEnhance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete pneuma_guid_;
}

void ReqWitchPneumaEnhance::ArenaDtor(void* object) {
  ReqWitchPneumaEnhance* _this = reinterpret_cast< ReqWitchPneumaEnhance* >(object);
  (void)_this;
}
void ReqWitchPneumaEnhance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqWitchPneumaEnhance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqWitchPneumaEnhance::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqWitchPneumaEnhance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pneuma_guid_ != nullptr) {
    delete pneuma_guid_;
  }
  pneuma_guid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqWitchPneumaEnhance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident pneuma_guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pneuma_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqWitchPneumaEnhance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqWitchPneumaEnhance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident pneuma_guid = 2;
  if (this->has_pneuma_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pneuma_guid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqWitchPneumaEnhance)
  return target;
}

size_t ReqWitchPneumaEnhance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqWitchPneumaEnhance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident pneuma_guid = 2;
  if (this->has_pneuma_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pneuma_guid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqWitchPneumaEnhance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqWitchPneumaEnhance)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqWitchPneumaEnhance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqWitchPneumaEnhance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqWitchPneumaEnhance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqWitchPneumaEnhance)
    MergeFrom(*source);
  }
}

void ReqWitchPneumaEnhance::MergeFrom(const ReqWitchPneumaEnhance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqWitchPneumaEnhance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_pneuma_guid()) {
    _internal_mutable_pneuma_guid()->::KWMsg::Ident::MergeFrom(from._internal_pneuma_guid());
  }
}

void ReqWitchPneumaEnhance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqWitchPneumaEnhance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWitchPneumaEnhance::CopyFrom(const ReqWitchPneumaEnhance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqWitchPneumaEnhance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWitchPneumaEnhance::IsInitialized() const {
  return true;
}

void ReqWitchPneumaEnhance::InternalSwap(ReqWitchPneumaEnhance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqWitchPneumaEnhance, pneuma_guid_)
      + sizeof(ReqWitchPneumaEnhance::pneuma_guid_)
      - PROTOBUF_FIELD_OFFSET(ReqWitchPneumaEnhance, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqWitchPneumaEnhance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[104]);
}

// ===================================================================

class AckWitchPneumaEnhance::_Internal {
 public:
};

AckWitchPneumaEnhance::AckWitchPneumaEnhance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckWitchPneumaEnhance)
}
AckWitchPneumaEnhance::AckWitchPneumaEnhance(const AckWitchPneumaEnhance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckWitchPneumaEnhance)
}

void AckWitchPneumaEnhance::SharedCtor() {
event_code_ = 0;
}

AckWitchPneumaEnhance::~AckWitchPneumaEnhance() {
  // @@protoc_insertion_point(destructor:KWMsg.AckWitchPneumaEnhance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckWitchPneumaEnhance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckWitchPneumaEnhance::ArenaDtor(void* object) {
  AckWitchPneumaEnhance* _this = reinterpret_cast< AckWitchPneumaEnhance* >(object);
  (void)_this;
}
void AckWitchPneumaEnhance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckWitchPneumaEnhance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckWitchPneumaEnhance::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckWitchPneumaEnhance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckWitchPneumaEnhance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckWitchPneumaEnhance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckWitchPneumaEnhance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckWitchPneumaEnhance)
  return target;
}

size_t AckWitchPneumaEnhance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckWitchPneumaEnhance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckWitchPneumaEnhance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckWitchPneumaEnhance)
  GOOGLE_DCHECK_NE(&from, this);
  const AckWitchPneumaEnhance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckWitchPneumaEnhance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckWitchPneumaEnhance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckWitchPneumaEnhance)
    MergeFrom(*source);
  }
}

void AckWitchPneumaEnhance::MergeFrom(const AckWitchPneumaEnhance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckWitchPneumaEnhance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckWitchPneumaEnhance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckWitchPneumaEnhance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckWitchPneumaEnhance::CopyFrom(const AckWitchPneumaEnhance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckWitchPneumaEnhance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckWitchPneumaEnhance::IsInitialized() const {
  return true;
}

void AckWitchPneumaEnhance::InternalSwap(AckWitchPneumaEnhance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckWitchPneumaEnhance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[105]);
}

// ===================================================================

class ReqWitchPneumaDecompose::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqWitchPneumaDecompose* msg);
};

const ::KWMsg::Ident&
ReqWitchPneumaDecompose::_Internal::player_id(const ReqWitchPneumaDecompose* msg) {
  return *msg->player_id_;
}
void ReqWitchPneumaDecompose::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqWitchPneumaDecompose::clear_pneuma_guid_list() {
  pneuma_guid_list_.Clear();
}
ReqWitchPneumaDecompose::ReqWitchPneumaDecompose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pneuma_guid_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqWitchPneumaDecompose)
}
ReqWitchPneumaDecompose::ReqWitchPneumaDecompose(const ReqWitchPneumaDecompose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pneuma_guid_list_(from.pneuma_guid_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqWitchPneumaDecompose)
}

void ReqWitchPneumaDecompose::SharedCtor() {
player_id_ = nullptr;
}

ReqWitchPneumaDecompose::~ReqWitchPneumaDecompose() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqWitchPneumaDecompose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqWitchPneumaDecompose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqWitchPneumaDecompose::ArenaDtor(void* object) {
  ReqWitchPneumaDecompose* _this = reinterpret_cast< ReqWitchPneumaDecompose* >(object);
  (void)_this;
}
void ReqWitchPneumaDecompose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqWitchPneumaDecompose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqWitchPneumaDecompose::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqWitchPneumaDecompose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pneuma_guid_list_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqWitchPneumaDecompose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.Ident pneuma_guid_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pneuma_guid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqWitchPneumaDecompose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqWitchPneumaDecompose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .KWMsg.Ident pneuma_guid_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pneuma_guid_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pneuma_guid_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqWitchPneumaDecompose)
  return target;
}

size_t ReqWitchPneumaDecompose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqWitchPneumaDecompose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.Ident pneuma_guid_list = 2;
  total_size += 1UL * this->_internal_pneuma_guid_list_size();
  for (const auto& msg : this->pneuma_guid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqWitchPneumaDecompose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqWitchPneumaDecompose)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqWitchPneumaDecompose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqWitchPneumaDecompose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqWitchPneumaDecompose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqWitchPneumaDecompose)
    MergeFrom(*source);
  }
}

void ReqWitchPneumaDecompose::MergeFrom(const ReqWitchPneumaDecompose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqWitchPneumaDecompose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pneuma_guid_list_.MergeFrom(from.pneuma_guid_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqWitchPneumaDecompose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqWitchPneumaDecompose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWitchPneumaDecompose::CopyFrom(const ReqWitchPneumaDecompose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqWitchPneumaDecompose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWitchPneumaDecompose::IsInitialized() const {
  return true;
}

void ReqWitchPneumaDecompose::InternalSwap(ReqWitchPneumaDecompose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pneuma_guid_list_.InternalSwap(&other->pneuma_guid_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqWitchPneumaDecompose::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[106]);
}

// ===================================================================

class AckWitchPneumaDecompose::_Internal {
 public:
};

AckWitchPneumaDecompose::AckWitchPneumaDecompose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckWitchPneumaDecompose)
}
AckWitchPneumaDecompose::AckWitchPneumaDecompose(const AckWitchPneumaDecompose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckWitchPneumaDecompose)
}

void AckWitchPneumaDecompose::SharedCtor() {
event_code_ = 0;
}

AckWitchPneumaDecompose::~AckWitchPneumaDecompose() {
  // @@protoc_insertion_point(destructor:KWMsg.AckWitchPneumaDecompose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckWitchPneumaDecompose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckWitchPneumaDecompose::ArenaDtor(void* object) {
  AckWitchPneumaDecompose* _this = reinterpret_cast< AckWitchPneumaDecompose* >(object);
  (void)_this;
}
void AckWitchPneumaDecompose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckWitchPneumaDecompose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckWitchPneumaDecompose::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckWitchPneumaDecompose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckWitchPneumaDecompose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RewardInfo reward_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckWitchPneumaDecompose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckWitchPneumaDecompose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.RewardInfo reward_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reward_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckWitchPneumaDecompose)
  return target;
}

size_t AckWitchPneumaDecompose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckWitchPneumaDecompose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo reward_list = 2;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckWitchPneumaDecompose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckWitchPneumaDecompose)
  GOOGLE_DCHECK_NE(&from, this);
  const AckWitchPneumaDecompose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckWitchPneumaDecompose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckWitchPneumaDecompose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckWitchPneumaDecompose)
    MergeFrom(*source);
  }
}

void AckWitchPneumaDecompose::MergeFrom(const AckWitchPneumaDecompose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckWitchPneumaDecompose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckWitchPneumaDecompose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckWitchPneumaDecompose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckWitchPneumaDecompose::CopyFrom(const AckWitchPneumaDecompose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckWitchPneumaDecompose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckWitchPneumaDecompose::IsInitialized() const {
  return true;
}

void AckWitchPneumaDecompose::InternalSwap(AckWitchPneumaDecompose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckWitchPneumaDecompose::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[107]);
}

// ===================================================================

class ReqWitchSkillLevelUp::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqWitchSkillLevelUp* msg);
};

const ::KWMsg::Ident&
ReqWitchSkillLevelUp::_Internal::player_id(const ReqWitchSkillLevelUp* msg) {
  return *msg->player_id_;
}
void ReqWitchSkillLevelUp::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqWitchSkillLevelUp::ReqWitchSkillLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqWitchSkillLevelUp)
}
ReqWitchSkillLevelUp::ReqWitchSkillLevelUp(const ReqWitchSkillLevelUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  opt_type_ = from.opt_type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqWitchSkillLevelUp)
}

void ReqWitchSkillLevelUp::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opt_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(opt_type_));
}

ReqWitchSkillLevelUp::~ReqWitchSkillLevelUp() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqWitchSkillLevelUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqWitchSkillLevelUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqWitchSkillLevelUp::ArenaDtor(void* object) {
  ReqWitchSkillLevelUp* _this = reinterpret_cast< ReqWitchSkillLevelUp* >(object);
  (void)_this;
}
void ReqWitchSkillLevelUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqWitchSkillLevelUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqWitchSkillLevelUp::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqWitchSkillLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  opt_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqWitchSkillLevelUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.EWitchSkillOptType opt_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_opt_type(static_cast<::KWMsg::EWitchSkillOptType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqWitchSkillLevelUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqWitchSkillLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_id(), target);
  }

  // .KWMsg.EWitchSkillOptType opt_type = 3;
  if (this->opt_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_opt_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqWitchSkillLevelUp)
  return target;
}

size_t ReqWitchSkillLevelUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqWitchSkillLevelUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.EWitchSkillOptType opt_type = 3;
  if (this->opt_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_opt_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqWitchSkillLevelUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqWitchSkillLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqWitchSkillLevelUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqWitchSkillLevelUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqWitchSkillLevelUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqWitchSkillLevelUp)
    MergeFrom(*source);
  }
}

void ReqWitchSkillLevelUp::MergeFrom(const ReqWitchSkillLevelUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqWitchSkillLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.opt_type() != 0) {
    _internal_set_opt_type(from._internal_opt_type());
  }
}

void ReqWitchSkillLevelUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqWitchSkillLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWitchSkillLevelUp::CopyFrom(const ReqWitchSkillLevelUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqWitchSkillLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWitchSkillLevelUp::IsInitialized() const {
  return true;
}

void ReqWitchSkillLevelUp::InternalSwap(ReqWitchSkillLevelUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqWitchSkillLevelUp, opt_type_)
      + sizeof(ReqWitchSkillLevelUp::opt_type_)
      - PROTOBUF_FIELD_OFFSET(ReqWitchSkillLevelUp, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqWitchSkillLevelUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[108]);
}

// ===================================================================

class AckWitchSkillLevelUp::_Internal {
 public:
};

AckWitchSkillLevelUp::AckWitchSkillLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckWitchSkillLevelUp)
}
AckWitchSkillLevelUp::AckWitchSkillLevelUp(const AckWitchSkillLevelUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckWitchSkillLevelUp)
}

void AckWitchSkillLevelUp::SharedCtor() {
event_code_ = 0;
}

AckWitchSkillLevelUp::~AckWitchSkillLevelUp() {
  // @@protoc_insertion_point(destructor:KWMsg.AckWitchSkillLevelUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckWitchSkillLevelUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckWitchSkillLevelUp::ArenaDtor(void* object) {
  AckWitchSkillLevelUp* _this = reinterpret_cast< AckWitchSkillLevelUp* >(object);
  (void)_this;
}
void AckWitchSkillLevelUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckWitchSkillLevelUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckWitchSkillLevelUp::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckWitchSkillLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckWitchSkillLevelUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckWitchSkillLevelUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckWitchSkillLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckWitchSkillLevelUp)
  return target;
}

size_t AckWitchSkillLevelUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckWitchSkillLevelUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckWitchSkillLevelUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckWitchSkillLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  const AckWitchSkillLevelUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckWitchSkillLevelUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckWitchSkillLevelUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckWitchSkillLevelUp)
    MergeFrom(*source);
  }
}

void AckWitchSkillLevelUp::MergeFrom(const AckWitchSkillLevelUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckWitchSkillLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckWitchSkillLevelUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckWitchSkillLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckWitchSkillLevelUp::CopyFrom(const AckWitchSkillLevelUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckWitchSkillLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckWitchSkillLevelUp::IsInitialized() const {
  return true;
}

void AckWitchSkillLevelUp::InternalSwap(AckWitchSkillLevelUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckWitchSkillLevelUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[109]);
}

// ===================================================================

class ReqSweepEndlessTower::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqSweepEndlessTower* msg);
};

const ::KWMsg::Ident&
ReqSweepEndlessTower::_Internal::player_id(const ReqSweepEndlessTower* msg) {
  return *msg->player_id_;
}
void ReqSweepEndlessTower::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqSweepEndlessTower::ReqSweepEndlessTower(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqSweepEndlessTower)
}
ReqSweepEndlessTower::ReqSweepEndlessTower(const ReqSweepEndlessTower& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  sweep_count_ = from.sweep_count_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqSweepEndlessTower)
}

void ReqSweepEndlessTower::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sweep_count_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(sweep_count_));
}

ReqSweepEndlessTower::~ReqSweepEndlessTower() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqSweepEndlessTower)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqSweepEndlessTower::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqSweepEndlessTower::ArenaDtor(void* object) {
  ReqSweepEndlessTower* _this = reinterpret_cast< ReqSweepEndlessTower* >(object);
  (void)_this;
}
void ReqSweepEndlessTower::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqSweepEndlessTower::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSweepEndlessTower::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqSweepEndlessTower)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  sweep_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSweepEndlessTower::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sweep_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sweep_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSweepEndlessTower::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqSweepEndlessTower)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 sweep_count = 2;
  if (this->sweep_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sweep_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqSweepEndlessTower)
  return target;
}

size_t ReqSweepEndlessTower::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqSweepEndlessTower)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 sweep_count = 2;
  if (this->sweep_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sweep_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSweepEndlessTower::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqSweepEndlessTower)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSweepEndlessTower* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSweepEndlessTower>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqSweepEndlessTower)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqSweepEndlessTower)
    MergeFrom(*source);
  }
}

void ReqSweepEndlessTower::MergeFrom(const ReqSweepEndlessTower& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqSweepEndlessTower)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.sweep_count() != 0) {
    _internal_set_sweep_count(from._internal_sweep_count());
  }
}

void ReqSweepEndlessTower::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqSweepEndlessTower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSweepEndlessTower::CopyFrom(const ReqSweepEndlessTower& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqSweepEndlessTower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSweepEndlessTower::IsInitialized() const {
  return true;
}

void ReqSweepEndlessTower::InternalSwap(ReqSweepEndlessTower* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqSweepEndlessTower, sweep_count_)
      + sizeof(ReqSweepEndlessTower::sweep_count_)
      - PROTOBUF_FIELD_OFFSET(ReqSweepEndlessTower, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSweepEndlessTower::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[110]);
}

// ===================================================================

class AckSweepEndlessTower::_Internal {
 public:
};

AckSweepEndlessTower::AckSweepEndlessTower(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckSweepEndlessTower)
}
AckSweepEndlessTower::AckSweepEndlessTower(const AckSweepEndlessTower& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckSweepEndlessTower)
}

void AckSweepEndlessTower::SharedCtor() {
event_code_ = 0;
}

AckSweepEndlessTower::~AckSweepEndlessTower() {
  // @@protoc_insertion_point(destructor:KWMsg.AckSweepEndlessTower)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckSweepEndlessTower::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckSweepEndlessTower::ArenaDtor(void* object) {
  AckSweepEndlessTower* _this = reinterpret_cast< AckSweepEndlessTower* >(object);
  (void)_this;
}
void AckSweepEndlessTower::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckSweepEndlessTower::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckSweepEndlessTower::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckSweepEndlessTower)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckSweepEndlessTower::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RewardInfo reward_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSweepEndlessTower::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckSweepEndlessTower)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.RewardInfo reward_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reward_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckSweepEndlessTower)
  return target;
}

size_t AckSweepEndlessTower::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckSweepEndlessTower)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo reward_list = 2;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSweepEndlessTower::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckSweepEndlessTower)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSweepEndlessTower* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSweepEndlessTower>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckSweepEndlessTower)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckSweepEndlessTower)
    MergeFrom(*source);
  }
}

void AckSweepEndlessTower::MergeFrom(const AckSweepEndlessTower& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckSweepEndlessTower)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckSweepEndlessTower::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckSweepEndlessTower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSweepEndlessTower::CopyFrom(const AckSweepEndlessTower& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckSweepEndlessTower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSweepEndlessTower::IsInitialized() const {
  return true;
}

void AckSweepEndlessTower::InternalSwap(AckSweepEndlessTower* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSweepEndlessTower::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[111]);
}

// ===================================================================

class ReqBlackmartCommodityList::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBlackmartCommodityList* msg);
};

const ::KWMsg::Ident&
ReqBlackmartCommodityList::_Internal::player_id(const ReqBlackmartCommodityList* msg) {
  return *msg->player_id_;
}
void ReqBlackmartCommodityList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqBlackmartCommodityList::ReqBlackmartCommodityList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBlackmartCommodityList)
}
ReqBlackmartCommodityList::ReqBlackmartCommodityList(const ReqBlackmartCommodityList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBlackmartCommodityList)
}

void ReqBlackmartCommodityList::SharedCtor() {
player_id_ = nullptr;
}

ReqBlackmartCommodityList::~ReqBlackmartCommodityList() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBlackmartCommodityList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBlackmartCommodityList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqBlackmartCommodityList::ArenaDtor(void* object) {
  ReqBlackmartCommodityList* _this = reinterpret_cast< ReqBlackmartCommodityList* >(object);
  (void)_this;
}
void ReqBlackmartCommodityList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBlackmartCommodityList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBlackmartCommodityList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBlackmartCommodityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBlackmartCommodityList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBlackmartCommodityList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBlackmartCommodityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBlackmartCommodityList)
  return target;
}

size_t ReqBlackmartCommodityList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBlackmartCommodityList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBlackmartCommodityList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBlackmartCommodityList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBlackmartCommodityList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBlackmartCommodityList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBlackmartCommodityList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBlackmartCommodityList)
    MergeFrom(*source);
  }
}

void ReqBlackmartCommodityList::MergeFrom(const ReqBlackmartCommodityList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBlackmartCommodityList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqBlackmartCommodityList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBlackmartCommodityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBlackmartCommodityList::CopyFrom(const ReqBlackmartCommodityList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBlackmartCommodityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBlackmartCommodityList::IsInitialized() const {
  return true;
}

void ReqBlackmartCommodityList::InternalSwap(ReqBlackmartCommodityList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBlackmartCommodityList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[112]);
}

// ===================================================================

class AckBlackmartCommodityList::_Internal {
 public:
};

AckBlackmartCommodityList::AckBlackmartCommodityList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBlackmartCommodityList)
}
AckBlackmartCommodityList::AckBlackmartCommodityList(const AckBlackmartCommodityList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBlackmartCommodityList)
}

void AckBlackmartCommodityList::SharedCtor() {
event_code_ = 0;
}

AckBlackmartCommodityList::~AckBlackmartCommodityList() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBlackmartCommodityList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBlackmartCommodityList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckBlackmartCommodityList::ArenaDtor(void* object) {
  AckBlackmartCommodityList* _this = reinterpret_cast< AckBlackmartCommodityList* >(object);
  (void)_this;
}
void AckBlackmartCommodityList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBlackmartCommodityList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBlackmartCommodityList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBlackmartCommodityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBlackmartCommodityList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBlackmartCommodityList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBlackmartCommodityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBlackmartCommodityList)
  return target;
}

size_t AckBlackmartCommodityList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBlackmartCommodityList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBlackmartCommodityList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBlackmartCommodityList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBlackmartCommodityList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBlackmartCommodityList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBlackmartCommodityList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBlackmartCommodityList)
    MergeFrom(*source);
  }
}

void AckBlackmartCommodityList::MergeFrom(const AckBlackmartCommodityList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBlackmartCommodityList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckBlackmartCommodityList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBlackmartCommodityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBlackmartCommodityList::CopyFrom(const AckBlackmartCommodityList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBlackmartCommodityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBlackmartCommodityList::IsInitialized() const {
  return true;
}

void AckBlackmartCommodityList::InternalSwap(AckBlackmartCommodityList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBlackmartCommodityList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[113]);
}

// ===================================================================

class ReqRefreshBlackmartCommodityList::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqRefreshBlackmartCommodityList* msg);
};

const ::KWMsg::Ident&
ReqRefreshBlackmartCommodityList::_Internal::player_id(const ReqRefreshBlackmartCommodityList* msg) {
  return *msg->player_id_;
}
void ReqRefreshBlackmartCommodityList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqRefreshBlackmartCommodityList::ReqRefreshBlackmartCommodityList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqRefreshBlackmartCommodityList)
}
ReqRefreshBlackmartCommodityList::ReqRefreshBlackmartCommodityList(const ReqRefreshBlackmartCommodityList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqRefreshBlackmartCommodityList)
}

void ReqRefreshBlackmartCommodityList::SharedCtor() {
player_id_ = nullptr;
}

ReqRefreshBlackmartCommodityList::~ReqRefreshBlackmartCommodityList() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqRefreshBlackmartCommodityList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqRefreshBlackmartCommodityList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqRefreshBlackmartCommodityList::ArenaDtor(void* object) {
  ReqRefreshBlackmartCommodityList* _this = reinterpret_cast< ReqRefreshBlackmartCommodityList* >(object);
  (void)_this;
}
void ReqRefreshBlackmartCommodityList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqRefreshBlackmartCommodityList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqRefreshBlackmartCommodityList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqRefreshBlackmartCommodityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqRefreshBlackmartCommodityList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqRefreshBlackmartCommodityList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqRefreshBlackmartCommodityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqRefreshBlackmartCommodityList)
  return target;
}

size_t ReqRefreshBlackmartCommodityList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqRefreshBlackmartCommodityList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqRefreshBlackmartCommodityList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqRefreshBlackmartCommodityList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRefreshBlackmartCommodityList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqRefreshBlackmartCommodityList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqRefreshBlackmartCommodityList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqRefreshBlackmartCommodityList)
    MergeFrom(*source);
  }
}

void ReqRefreshBlackmartCommodityList::MergeFrom(const ReqRefreshBlackmartCommodityList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqRefreshBlackmartCommodityList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqRefreshBlackmartCommodityList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqRefreshBlackmartCommodityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRefreshBlackmartCommodityList::CopyFrom(const ReqRefreshBlackmartCommodityList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqRefreshBlackmartCommodityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRefreshBlackmartCommodityList::IsInitialized() const {
  return true;
}

void ReqRefreshBlackmartCommodityList::InternalSwap(ReqRefreshBlackmartCommodityList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqRefreshBlackmartCommodityList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[114]);
}

// ===================================================================

class AckRefreshBlackmartCommodityList::_Internal {
 public:
};

AckRefreshBlackmartCommodityList::AckRefreshBlackmartCommodityList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckRefreshBlackmartCommodityList)
}
AckRefreshBlackmartCommodityList::AckRefreshBlackmartCommodityList(const AckRefreshBlackmartCommodityList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckRefreshBlackmartCommodityList)
}

void AckRefreshBlackmartCommodityList::SharedCtor() {
event_code_ = 0;
}

AckRefreshBlackmartCommodityList::~AckRefreshBlackmartCommodityList() {
  // @@protoc_insertion_point(destructor:KWMsg.AckRefreshBlackmartCommodityList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckRefreshBlackmartCommodityList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckRefreshBlackmartCommodityList::ArenaDtor(void* object) {
  AckRefreshBlackmartCommodityList* _this = reinterpret_cast< AckRefreshBlackmartCommodityList* >(object);
  (void)_this;
}
void AckRefreshBlackmartCommodityList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckRefreshBlackmartCommodityList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckRefreshBlackmartCommodityList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckRefreshBlackmartCommodityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckRefreshBlackmartCommodityList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckRefreshBlackmartCommodityList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckRefreshBlackmartCommodityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckRefreshBlackmartCommodityList)
  return target;
}

size_t AckRefreshBlackmartCommodityList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckRefreshBlackmartCommodityList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckRefreshBlackmartCommodityList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckRefreshBlackmartCommodityList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckRefreshBlackmartCommodityList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckRefreshBlackmartCommodityList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckRefreshBlackmartCommodityList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckRefreshBlackmartCommodityList)
    MergeFrom(*source);
  }
}

void AckRefreshBlackmartCommodityList::MergeFrom(const AckRefreshBlackmartCommodityList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckRefreshBlackmartCommodityList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckRefreshBlackmartCommodityList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckRefreshBlackmartCommodityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRefreshBlackmartCommodityList::CopyFrom(const AckRefreshBlackmartCommodityList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckRefreshBlackmartCommodityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRefreshBlackmartCommodityList::IsInitialized() const {
  return true;
}

void AckRefreshBlackmartCommodityList::InternalSwap(AckRefreshBlackmartCommodityList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckRefreshBlackmartCommodityList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[115]);
}

// ===================================================================

class ReqBuyBlackmartCommodity::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBuyBlackmartCommodity* msg);
};

const ::KWMsg::Ident&
ReqBuyBlackmartCommodity::_Internal::player_id(const ReqBuyBlackmartCommodity* msg) {
  return *msg->player_id_;
}
void ReqBuyBlackmartCommodity::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqBuyBlackmartCommodity::ReqBuyBlackmartCommodity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBuyBlackmartCommodity)
}
ReqBuyBlackmartCommodity::ReqBuyBlackmartCommodity(const ReqBuyBlackmartCommodity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  commodity_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_commodity_id().empty()) {
    commodity_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_commodity_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBuyBlackmartCommodity)
}

void ReqBuyBlackmartCommodity::SharedCtor() {
commodity_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(count_));
}

ReqBuyBlackmartCommodity::~ReqBuyBlackmartCommodity() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBuyBlackmartCommodity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBuyBlackmartCommodity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  commodity_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqBuyBlackmartCommodity::ArenaDtor(void* object) {
  ReqBuyBlackmartCommodity* _this = reinterpret_cast< ReqBuyBlackmartCommodity* >(object);
  (void)_this;
}
void ReqBuyBlackmartCommodity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBuyBlackmartCommodity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBuyBlackmartCommodity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBuyBlackmartCommodity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commodity_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBuyBlackmartCommodity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes commodity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_commodity_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBuyBlackmartCommodity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBuyBlackmartCommodity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes commodity_id = 2;
  if (!this->commodity_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_commodity_id(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBuyBlackmartCommodity)
  return target;
}

size_t ReqBuyBlackmartCommodity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBuyBlackmartCommodity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes commodity_id = 2;
  if (!this->commodity_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_commodity_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBuyBlackmartCommodity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBuyBlackmartCommodity)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBuyBlackmartCommodity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBuyBlackmartCommodity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBuyBlackmartCommodity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBuyBlackmartCommodity)
    MergeFrom(*source);
  }
}

void ReqBuyBlackmartCommodity::MergeFrom(const ReqBuyBlackmartCommodity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBuyBlackmartCommodity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.commodity_id().empty()) {
    _internal_set_commodity_id(from._internal_commodity_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ReqBuyBlackmartCommodity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBuyBlackmartCommodity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuyBlackmartCommodity::CopyFrom(const ReqBuyBlackmartCommodity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBuyBlackmartCommodity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuyBlackmartCommodity::IsInitialized() const {
  return true;
}

void ReqBuyBlackmartCommodity::InternalSwap(ReqBuyBlackmartCommodity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &commodity_id_, GetArenaForAllocation(),
      &other->commodity_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqBuyBlackmartCommodity, count_)
      + sizeof(ReqBuyBlackmartCommodity::count_)
      - PROTOBUF_FIELD_OFFSET(ReqBuyBlackmartCommodity, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBuyBlackmartCommodity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[116]);
}

// ===================================================================

class AckBuyBlackmartCommodity::_Internal {
 public:
};

AckBuyBlackmartCommodity::AckBuyBlackmartCommodity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBuyBlackmartCommodity)
}
AckBuyBlackmartCommodity::AckBuyBlackmartCommodity(const AckBuyBlackmartCommodity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  commodity_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_commodity_id().empty()) {
    commodity_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_commodity_id(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBuyBlackmartCommodity)
}

void AckBuyBlackmartCommodity::SharedCtor() {
commodity_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckBuyBlackmartCommodity::~AckBuyBlackmartCommodity() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBuyBlackmartCommodity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBuyBlackmartCommodity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  commodity_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckBuyBlackmartCommodity::ArenaDtor(void* object) {
  AckBuyBlackmartCommodity* _this = reinterpret_cast< AckBuyBlackmartCommodity* >(object);
  (void)_this;
}
void AckBuyBlackmartCommodity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBuyBlackmartCommodity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBuyBlackmartCommodity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBuyBlackmartCommodity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commodity_id_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBuyBlackmartCommodity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes commodity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_commodity_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBuyBlackmartCommodity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBuyBlackmartCommodity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes commodity_id = 2;
  if (!this->commodity_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_commodity_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBuyBlackmartCommodity)
  return target;
}

size_t AckBuyBlackmartCommodity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBuyBlackmartCommodity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes commodity_id = 2;
  if (!this->commodity_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_commodity_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBuyBlackmartCommodity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBuyBlackmartCommodity)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBuyBlackmartCommodity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBuyBlackmartCommodity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBuyBlackmartCommodity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBuyBlackmartCommodity)
    MergeFrom(*source);
  }
}

void AckBuyBlackmartCommodity::MergeFrom(const AckBuyBlackmartCommodity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBuyBlackmartCommodity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.commodity_id().empty()) {
    _internal_set_commodity_id(from._internal_commodity_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckBuyBlackmartCommodity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBuyBlackmartCommodity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBuyBlackmartCommodity::CopyFrom(const AckBuyBlackmartCommodity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBuyBlackmartCommodity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBuyBlackmartCommodity::IsInitialized() const {
  return true;
}

void AckBuyBlackmartCommodity::InternalSwap(AckBuyBlackmartCommodity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &commodity_id_, GetArenaForAllocation(),
      &other->commodity_id_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBuyBlackmartCommodity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[117]);
}

// ===================================================================

class SyncBlackmartCommodityUpdated::_Internal {
 public:
};

SyncBlackmartCommodityUpdated::SyncBlackmartCommodityUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncBlackmartCommodityUpdated)
}
SyncBlackmartCommodityUpdated::SyncBlackmartCommodityUpdated(const SyncBlackmartCommodityUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  update_type_ = from.update_type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncBlackmartCommodityUpdated)
}

void SyncBlackmartCommodityUpdated::SharedCtor() {
update_type_ = 0;
}

SyncBlackmartCommodityUpdated::~SyncBlackmartCommodityUpdated() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncBlackmartCommodityUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncBlackmartCommodityUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncBlackmartCommodityUpdated::ArenaDtor(void* object) {
  SyncBlackmartCommodityUpdated* _this = reinterpret_cast< SyncBlackmartCommodityUpdated* >(object);
  (void)_this;
}
void SyncBlackmartCommodityUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncBlackmartCommodityUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncBlackmartCommodityUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncBlackmartCommodityUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncBlackmartCommodityUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 update_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          update_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncBlackmartCommodityUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncBlackmartCommodityUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 update_type = 1;
  if (this->update_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_update_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncBlackmartCommodityUpdated)
  return target;
}

size_t SyncBlackmartCommodityUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncBlackmartCommodityUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 update_type = 1;
  if (this->update_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_update_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncBlackmartCommodityUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncBlackmartCommodityUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncBlackmartCommodityUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncBlackmartCommodityUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncBlackmartCommodityUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncBlackmartCommodityUpdated)
    MergeFrom(*source);
  }
}

void SyncBlackmartCommodityUpdated::MergeFrom(const SyncBlackmartCommodityUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncBlackmartCommodityUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.update_type() != 0) {
    _internal_set_update_type(from._internal_update_type());
  }
}

void SyncBlackmartCommodityUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncBlackmartCommodityUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncBlackmartCommodityUpdated::CopyFrom(const SyncBlackmartCommodityUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncBlackmartCommodityUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncBlackmartCommodityUpdated::IsInitialized() const {
  return true;
}

void SyncBlackmartCommodityUpdated::InternalSwap(SyncBlackmartCommodityUpdated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(update_type_, other->update_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncBlackmartCommodityUpdated::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[118]);
}

// ===================================================================

class ReqActiveMissionOperation::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqActiveMissionOperation* msg);
};

const ::KWMsg::Ident&
ReqActiveMissionOperation::_Internal::player_id(const ReqActiveMissionOperation* msg) {
  return *msg->player_id_;
}
void ReqActiveMissionOperation::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqActiveMissionOperation::ReqActiveMissionOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqActiveMissionOperation)
}
ReqActiveMissionOperation::ReqActiveMissionOperation(const ReqActiveMissionOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  mission_flag_ = from.mission_flag_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqActiveMissionOperation)
}

void ReqActiveMissionOperation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mission_flag_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(mission_flag_));
}

ReqActiveMissionOperation::~ReqActiveMissionOperation() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqActiveMissionOperation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqActiveMissionOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqActiveMissionOperation::ArenaDtor(void* object) {
  ReqActiveMissionOperation* _this = reinterpret_cast< ReqActiveMissionOperation* >(object);
  (void)_this;
}
void ReqActiveMissionOperation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqActiveMissionOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqActiveMissionOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqActiveMissionOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  mission_flag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqActiveMissionOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.EActiveMisisonFlag mission_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mission_flag(static_cast<::KWMsg::EActiveMisisonFlag>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqActiveMissionOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqActiveMissionOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.EActiveMisisonFlag mission_flag = 2;
  if (this->mission_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mission_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqActiveMissionOperation)
  return target;
}

size_t ReqActiveMissionOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqActiveMissionOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.EActiveMisisonFlag mission_flag = 2;
  if (this->mission_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mission_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqActiveMissionOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqActiveMissionOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqActiveMissionOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqActiveMissionOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqActiveMissionOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqActiveMissionOperation)
    MergeFrom(*source);
  }
}

void ReqActiveMissionOperation::MergeFrom(const ReqActiveMissionOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqActiveMissionOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.mission_flag() != 0) {
    _internal_set_mission_flag(from._internal_mission_flag());
  }
}

void ReqActiveMissionOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqActiveMissionOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqActiveMissionOperation::CopyFrom(const ReqActiveMissionOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqActiveMissionOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqActiveMissionOperation::IsInitialized() const {
  return true;
}

void ReqActiveMissionOperation::InternalSwap(ReqActiveMissionOperation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqActiveMissionOperation, mission_flag_)
      + sizeof(ReqActiveMissionOperation::mission_flag_)
      - PROTOBUF_FIELD_OFFSET(ReqActiveMissionOperation, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqActiveMissionOperation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[119]);
}

// ===================================================================

class AckActiveMissionOperation::_Internal {
 public:
};

AckActiveMissionOperation::AckActiveMissionOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckActiveMissionOperation)
}
AckActiveMissionOperation::AckActiveMissionOperation(const AckActiveMissionOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckActiveMissionOperation)
}

void AckActiveMissionOperation::SharedCtor() {
event_code_ = 0;
}

AckActiveMissionOperation::~AckActiveMissionOperation() {
  // @@protoc_insertion_point(destructor:KWMsg.AckActiveMissionOperation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckActiveMissionOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckActiveMissionOperation::ArenaDtor(void* object) {
  AckActiveMissionOperation* _this = reinterpret_cast< AckActiveMissionOperation* >(object);
  (void)_this;
}
void AckActiveMissionOperation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckActiveMissionOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckActiveMissionOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckActiveMissionOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckActiveMissionOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckActiveMissionOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckActiveMissionOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckActiveMissionOperation)
  return target;
}

size_t AckActiveMissionOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckActiveMissionOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckActiveMissionOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckActiveMissionOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const AckActiveMissionOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckActiveMissionOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckActiveMissionOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckActiveMissionOperation)
    MergeFrom(*source);
  }
}

void AckActiveMissionOperation::MergeFrom(const AckActiveMissionOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckActiveMissionOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckActiveMissionOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckActiveMissionOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckActiveMissionOperation::CopyFrom(const AckActiveMissionOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckActiveMissionOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckActiveMissionOperation::IsInitialized() const {
  return true;
}

void AckActiveMissionOperation::InternalSwap(AckActiveMissionOperation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckActiveMissionOperation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[120]);
}

// ===================================================================

class ReqGetActiveMissionReward::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqGetActiveMissionReward* msg);
};

const ::KWMsg::Ident&
ReqGetActiveMissionReward::_Internal::player_id(const ReqGetActiveMissionReward* msg) {
  return *msg->player_id_;
}
void ReqGetActiveMissionReward::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqGetActiveMissionReward::ReqGetActiveMissionReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqGetActiveMissionReward)
}
ReqGetActiveMissionReward::ReqGetActiveMissionReward(const ReqGetActiveMissionReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mission_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mission_id().empty()) {
    mission_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mission_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqGetActiveMissionReward)
}

void ReqGetActiveMissionReward::SharedCtor() {
mission_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqGetActiveMissionReward::~ReqGetActiveMissionReward() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqGetActiveMissionReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqGetActiveMissionReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mission_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqGetActiveMissionReward::ArenaDtor(void* object) {
  ReqGetActiveMissionReward* _this = reinterpret_cast< ReqGetActiveMissionReward* >(object);
  (void)_this;
}
void ReqGetActiveMissionReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetActiveMissionReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetActiveMissionReward::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqGetActiveMissionReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetActiveMissionReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes mission_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mission_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetActiveMissionReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqGetActiveMissionReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes mission_id = 2;
  if (!this->mission_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_mission_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqGetActiveMissionReward)
  return target;
}

size_t ReqGetActiveMissionReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqGetActiveMissionReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes mission_id = 2;
  if (!this->mission_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mission_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetActiveMissionReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqGetActiveMissionReward)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetActiveMissionReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetActiveMissionReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqGetActiveMissionReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqGetActiveMissionReward)
    MergeFrom(*source);
  }
}

void ReqGetActiveMissionReward::MergeFrom(const ReqGetActiveMissionReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqGetActiveMissionReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.mission_id().empty()) {
    _internal_set_mission_id(from._internal_mission_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqGetActiveMissionReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqGetActiveMissionReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetActiveMissionReward::CopyFrom(const ReqGetActiveMissionReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqGetActiveMissionReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetActiveMissionReward::IsInitialized() const {
  return true;
}

void ReqGetActiveMissionReward::InternalSwap(ReqGetActiveMissionReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mission_id_, GetArenaForAllocation(),
      &other->mission_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetActiveMissionReward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[121]);
}

// ===================================================================

class AckGetActiveMissionReward::_Internal {
 public:
};

AckGetActiveMissionReward::AckGetActiveMissionReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckGetActiveMissionReward)
}
AckGetActiveMissionReward::AckGetActiveMissionReward(const AckGetActiveMissionReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckGetActiveMissionReward)
}

void AckGetActiveMissionReward::SharedCtor() {
event_code_ = 0;
}

AckGetActiveMissionReward::~AckGetActiveMissionReward() {
  // @@protoc_insertion_point(destructor:KWMsg.AckGetActiveMissionReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckGetActiveMissionReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckGetActiveMissionReward::ArenaDtor(void* object) {
  AckGetActiveMissionReward* _this = reinterpret_cast< AckGetActiveMissionReward* >(object);
  (void)_this;
}
void AckGetActiveMissionReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckGetActiveMissionReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckGetActiveMissionReward::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckGetActiveMissionReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckGetActiveMissionReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckGetActiveMissionReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckGetActiveMissionReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckGetActiveMissionReward)
  return target;
}

size_t AckGetActiveMissionReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckGetActiveMissionReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckGetActiveMissionReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckGetActiveMissionReward)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetActiveMissionReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckGetActiveMissionReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckGetActiveMissionReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckGetActiveMissionReward)
    MergeFrom(*source);
  }
}

void AckGetActiveMissionReward::MergeFrom(const AckGetActiveMissionReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckGetActiveMissionReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckGetActiveMissionReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckGetActiveMissionReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetActiveMissionReward::CopyFrom(const AckGetActiveMissionReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckGetActiveMissionReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetActiveMissionReward::IsInitialized() const {
  return true;
}

void AckGetActiveMissionReward::InternalSwap(AckGetActiveMissionReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckGetActiveMissionReward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[122]);
}

// ===================================================================

class ReqDrawCard::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqDrawCard* msg);
};

const ::KWMsg::Ident&
ReqDrawCard::_Internal::player_id(const ReqDrawCard* msg) {
  return *msg->player_id_;
}
void ReqDrawCard::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqDrawCard::ReqDrawCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqDrawCard)
}
ReqDrawCard::ReqDrawCard(const ReqDrawCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  card_pool_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_card_pool_id().empty()) {
    card_pool_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_card_pool_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  dc_count_ = from.dc_count_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqDrawCard)
}

void ReqDrawCard::SharedCtor() {
card_pool_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dc_count_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(dc_count_));
}

ReqDrawCard::~ReqDrawCard() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqDrawCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqDrawCard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  card_pool_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqDrawCard::ArenaDtor(void* object) {
  ReqDrawCard* _this = reinterpret_cast< ReqDrawCard* >(object);
  (void)_this;
}
void ReqDrawCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqDrawCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDrawCard::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqDrawCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_pool_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  dc_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDrawCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes card_pool_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_card_pool_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dc_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dc_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqDrawCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqDrawCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes card_pool_id = 2;
  if (!this->card_pool_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_card_pool_id(), target);
  }

  // int32 dc_count = 3;
  if (this->dc_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dc_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqDrawCard)
  return target;
}

size_t ReqDrawCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqDrawCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes card_pool_id = 2;
  if (!this->card_pool_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_card_pool_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 dc_count = 3;
  if (this->dc_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dc_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqDrawCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqDrawCard)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqDrawCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqDrawCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqDrawCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqDrawCard)
    MergeFrom(*source);
  }
}

void ReqDrawCard::MergeFrom(const ReqDrawCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqDrawCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.card_pool_id().empty()) {
    _internal_set_card_pool_id(from._internal_card_pool_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.dc_count() != 0) {
    _internal_set_dc_count(from._internal_dc_count());
  }
}

void ReqDrawCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqDrawCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDrawCard::CopyFrom(const ReqDrawCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqDrawCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDrawCard::IsInitialized() const {
  return true;
}

void ReqDrawCard::InternalSwap(ReqDrawCard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &card_pool_id_, GetArenaForAllocation(),
      &other->card_pool_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqDrawCard, dc_count_)
      + sizeof(ReqDrawCard::dc_count_)
      - PROTOBUF_FIELD_OFFSET(ReqDrawCard, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDrawCard::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[123]);
}

// ===================================================================

class AckDrawCard::_Internal {
 public:
};

AckDrawCard::AckDrawCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckDrawCard)
}
AckDrawCard::AckDrawCard(const AckDrawCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      result_(from.result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckDrawCard)
}

void AckDrawCard::SharedCtor() {
event_code_ = 0;
}

AckDrawCard::~AckDrawCard() {
  // @@protoc_insertion_point(destructor:KWMsg.AckDrawCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckDrawCard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckDrawCard::ArenaDtor(void* object) {
  AckDrawCard* _this = reinterpret_cast< AckDrawCard* >(object);
  (void)_this;
}
void AckDrawCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckDrawCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckDrawCard::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckDrawCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckDrawCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.DrawCardInfo result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckDrawCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckDrawCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.DrawCardInfo result = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_result(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckDrawCard)
  return target;
}

size_t AckDrawCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckDrawCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.DrawCardInfo result = 2;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckDrawCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckDrawCard)
  GOOGLE_DCHECK_NE(&from, this);
  const AckDrawCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckDrawCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckDrawCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckDrawCard)
    MergeFrom(*source);
  }
}

void AckDrawCard::MergeFrom(const AckDrawCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckDrawCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckDrawCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckDrawCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDrawCard::CopyFrom(const AckDrawCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckDrawCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDrawCard::IsInitialized() const {
  return true;
}

void AckDrawCard::InternalSwap(AckDrawCard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  result_.InternalSwap(&other->result_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckDrawCard::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[124]);
}

// ===================================================================

class CommunityMemberInfo::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const CommunityMemberInfo* msg);
};

const ::KWMsg::Ident&
CommunityMemberInfo::_Internal::player_id(const CommunityMemberInfo* msg) {
  return *msg->player_id_;
}
void CommunityMemberInfo::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
CommunityMemberInfo::CommunityMemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.CommunityMemberInfo)
}
CommunityMemberInfo::CommunityMemberInfo(const CommunityMemberInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_url(), 
      GetArenaForAllocation());
  }
  avatar_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_frame().empty()) {
    avatar_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_frame(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&level_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.CommunityMemberInfo)
}

void CommunityMemberInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(position_));
}

CommunityMemberInfo::~CommunityMemberInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.CommunityMemberInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommunityMemberInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void CommunityMemberInfo::ArenaDtor(void* object) {
  CommunityMemberInfo* _this = reinterpret_cast< CommunityMemberInfo* >(object);
  (void)_this;
}
void CommunityMemberInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommunityMemberInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommunityMemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.CommunityMemberInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  avatar_url_.ClearToEmpty();
  avatar_frame_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&level_)) + sizeof(position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommunityMemberInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatar_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatar_frame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_avatar_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fighting_capacity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          fighting_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 weekly_active_val = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          weekly_active_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_active_val = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          total_active_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ECommunityMemberPosition position = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_position(static_cast<::KWMsg::ECommunityMemberPosition>(val));
        } else goto handle_unusual;
        continue;
      // int64 join_ts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          join_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offline_ts = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          offline_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommunityMemberInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.CommunityMemberInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes name = 2;
  if (!this->name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes avatar_url = 3;
  if (!this->avatar_url().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_avatar_url(), target);
  }

  // bytes avatar_frame = 4;
  if (!this->avatar_frame().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_avatar_frame(), target);
  }

  // int32 level = 5;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  // int32 fighting_capacity = 6;
  if (this->fighting_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_fighting_capacity(), target);
  }

  // int32 weekly_active_val = 7;
  if (this->weekly_active_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_weekly_active_val(), target);
  }

  // int32 total_active_val = 8;
  if (this->total_active_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_total_active_val(), target);
  }

  // .KWMsg.ECommunityMemberPosition position = 9;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_position(), target);
  }

  // int64 join_ts = 10;
  if (this->join_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_join_ts(), target);
  }

  // int64 offline_ts = 11;
  if (this->offline_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_offline_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.CommunityMemberInfo)
  return target;
}

size_t CommunityMemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.CommunityMemberInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes avatar_url = 3;
  if (!this->avatar_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar_url());
  }

  // bytes avatar_frame = 4;
  if (!this->avatar_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar_frame());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 fighting_capacity = 6;
  if (this->fighting_capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fighting_capacity());
  }

  // int32 weekly_active_val = 7;
  if (this->weekly_active_val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weekly_active_val());
  }

  // int32 total_active_val = 8;
  if (this->total_active_val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_active_val());
  }

  // int64 join_ts = 10;
  if (this->join_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_join_ts());
  }

  // int64 offline_ts = 11;
  if (this->offline_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offline_ts());
  }

  // .KWMsg.ECommunityMemberPosition position = 9;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommunityMemberInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.CommunityMemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunityMemberInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommunityMemberInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.CommunityMemberInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.CommunityMemberInfo)
    MergeFrom(*source);
  }
}

void CommunityMemberInfo::MergeFrom(const CommunityMemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.CommunityMemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from.avatar_url().empty()) {
    _internal_set_avatar_url(from._internal_avatar_url());
  }
  if (!from.avatar_frame().empty()) {
    _internal_set_avatar_frame(from._internal_avatar_frame());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.fighting_capacity() != 0) {
    _internal_set_fighting_capacity(from._internal_fighting_capacity());
  }
  if (from.weekly_active_val() != 0) {
    _internal_set_weekly_active_val(from._internal_weekly_active_val());
  }
  if (from.total_active_val() != 0) {
    _internal_set_total_active_val(from._internal_total_active_val());
  }
  if (from.join_ts() != 0) {
    _internal_set_join_ts(from._internal_join_ts());
  }
  if (from.offline_ts() != 0) {
    _internal_set_offline_ts(from._internal_offline_ts());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
}

void CommunityMemberInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.CommunityMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunityMemberInfo::CopyFrom(const CommunityMemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.CommunityMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunityMemberInfo::IsInitialized() const {
  return true;
}

void CommunityMemberInfo::InternalSwap(CommunityMemberInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_url_, GetArenaForAllocation(),
      &other->avatar_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_frame_, GetArenaForAllocation(),
      &other->avatar_frame_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommunityMemberInfo, position_)
      + sizeof(CommunityMemberInfo::position_)
      - PROTOBUF_FIELD_OFFSET(CommunityMemberInfo, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunityMemberInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[125]);
}

// ===================================================================

class CommunityInfo::_Internal {
 public:
  static const ::KWMsg::Ident& community_chief_player_id(const CommunityInfo* msg);
};

const ::KWMsg::Ident&
CommunityInfo::_Internal::community_chief_player_id(const CommunityInfo* msg) {
  return *msg->community_chief_player_id_;
}
void CommunityInfo::clear_community_chief_player_id() {
  if (GetArenaForAllocation() == nullptr && community_chief_player_id_ != nullptr) {
    delete community_chief_player_id_;
  }
  community_chief_player_id_ = nullptr;
}
CommunityInfo::CommunityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.CommunityInfo)
}
CommunityInfo::CommunityInfo(const CommunityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  community_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_name().empty()) {
    community_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_name(), 
      GetArenaForAllocation());
  }
  community_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_flag().empty()) {
    community_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_flag(), 
      GetArenaForAllocation());
  }
  community_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_icon().empty()) {
    community_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_icon(), 
      GetArenaForAllocation());
  }
  community_declaration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_declaration().empty()) {
    community_declaration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_declaration(), 
      GetArenaForAllocation());
  }
  community_chat_channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_chat_channel_id().empty()) {
    community_chat_channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_chat_channel_id(), 
      GetArenaForAllocation());
  }
  community_chief_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_chief_name().empty()) {
    community_chief_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_chief_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_community_chief_player_id()) {
    community_chief_player_id_ = new ::KWMsg::Ident(*from.community_chief_player_id_);
  } else {
    community_chief_player_id_ = nullptr;
  }
  ::memcpy(&community_id_, &from.community_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_num_) -
    reinterpret_cast<char*>(&community_id_)) + sizeof(member_num_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.CommunityInfo)
}

void CommunityInfo::SharedCtor() {
community_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
community_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
community_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
community_declaration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
community_chat_channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
community_chief_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&community_chief_player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&member_num_) -
    reinterpret_cast<char*>(&community_chief_player_id_)) + sizeof(member_num_));
}

CommunityInfo::~CommunityInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.CommunityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommunityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  community_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  community_flag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  community_icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  community_declaration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  community_chat_channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  community_chief_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete community_chief_player_id_;
}

void CommunityInfo::ArenaDtor(void* object) {
  CommunityInfo* _this = reinterpret_cast< CommunityInfo* >(object);
  (void)_this;
}
void CommunityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommunityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommunityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.CommunityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  community_name_.ClearToEmpty();
  community_flag_.ClearToEmpty();
  community_icon_.ClearToEmpty();
  community_declaration_.ClearToEmpty();
  community_chat_channel_id_.ClearToEmpty();
  community_chief_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && community_chief_player_id_ != nullptr) {
    delete community_chief_player_id_;
  }
  community_chief_player_id_ = nullptr;
  ::memset(&community_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_num_) -
      reinterpret_cast<char*>(&community_id_)) + sizeof(member_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommunityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes community_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_community_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_community_flag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_community_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_declaration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_community_declaration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_chat_channel_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_community_chat_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_chief_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_community_chief_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident community_chief_player_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_community_chief_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_level = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          community_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_exp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          community_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_fighting_capacity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          community_fighting_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_weekly_active_val = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          community_weekly_active_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_total_active_val = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          community_total_active_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_approve_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          community_approve_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level_restriction = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          level_restriction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 member_num = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          member_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommunityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.CommunityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes community_name = 1;
  if (!this->community_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_community_name(), target);
  }

  // bytes community_flag = 2;
  if (!this->community_flag().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_community_flag(), target);
  }

  // bytes community_icon = 3;
  if (!this->community_icon().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_community_icon(), target);
  }

  // bytes community_declaration = 4;
  if (!this->community_declaration().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_community_declaration(), target);
  }

  // bytes community_chat_channel_id = 5;
  if (!this->community_chat_channel_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_community_chat_channel_id(), target);
  }

  // bytes community_chief_name = 6;
  if (!this->community_chief_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_community_chief_name(), target);
  }

  // .KWMsg.Ident community_chief_player_id = 7;
  if (this->has_community_chief_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::community_chief_player_id(this), target, stream);
  }

  // int32 community_id = 8;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_community_id(), target);
  }

  // int32 community_level = 9;
  if (this->community_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_community_level(), target);
  }

  // int32 community_exp = 10;
  if (this->community_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_community_exp(), target);
  }

  // int32 community_fighting_capacity = 11;
  if (this->community_fighting_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_community_fighting_capacity(), target);
  }

  // int32 community_weekly_active_val = 12;
  if (this->community_weekly_active_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_community_weekly_active_val(), target);
  }

  // int32 community_total_active_val = 13;
  if (this->community_total_active_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_community_total_active_val(), target);
  }

  // int32 community_approve_type = 14;
  if (this->community_approve_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_community_approve_type(), target);
  }

  // int32 level_restriction = 15;
  if (this->level_restriction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_level_restriction(), target);
  }

  // int32 member_num = 16;
  if (this->member_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_member_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.CommunityInfo)
  return target;
}

size_t CommunityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.CommunityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes community_name = 1;
  if (!this->community_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_name());
  }

  // bytes community_flag = 2;
  if (!this->community_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_flag());
  }

  // bytes community_icon = 3;
  if (!this->community_icon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_icon());
  }

  // bytes community_declaration = 4;
  if (!this->community_declaration().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_declaration());
  }

  // bytes community_chat_channel_id = 5;
  if (!this->community_chat_channel_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_chat_channel_id());
  }

  // bytes community_chief_name = 6;
  if (!this->community_chief_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_chief_name());
  }

  // .KWMsg.Ident community_chief_player_id = 7;
  if (this->has_community_chief_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *community_chief_player_id_);
  }

  // int32 community_id = 8;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  // int32 community_level = 9;
  if (this->community_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_level());
  }

  // int32 community_exp = 10;
  if (this->community_exp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_exp());
  }

  // int32 community_fighting_capacity = 11;
  if (this->community_fighting_capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_fighting_capacity());
  }

  // int32 community_weekly_active_val = 12;
  if (this->community_weekly_active_val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_weekly_active_val());
  }

  // int32 community_total_active_val = 13;
  if (this->community_total_active_val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_total_active_val());
  }

  // int32 community_approve_type = 14;
  if (this->community_approve_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_approve_type());
  }

  // int32 level_restriction = 15;
  if (this->level_restriction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level_restriction());
  }

  // int32 member_num = 16;
  if (this->member_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_member_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommunityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.CommunityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommunityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.CommunityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.CommunityInfo)
    MergeFrom(*source);
  }
}

void CommunityInfo::MergeFrom(const CommunityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.CommunityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.community_name().empty()) {
    _internal_set_community_name(from._internal_community_name());
  }
  if (!from.community_flag().empty()) {
    _internal_set_community_flag(from._internal_community_flag());
  }
  if (!from.community_icon().empty()) {
    _internal_set_community_icon(from._internal_community_icon());
  }
  if (!from.community_declaration().empty()) {
    _internal_set_community_declaration(from._internal_community_declaration());
  }
  if (!from.community_chat_channel_id().empty()) {
    _internal_set_community_chat_channel_id(from._internal_community_chat_channel_id());
  }
  if (!from.community_chief_name().empty()) {
    _internal_set_community_chief_name(from._internal_community_chief_name());
  }
  if (from.has_community_chief_player_id()) {
    _internal_mutable_community_chief_player_id()->::KWMsg::Ident::MergeFrom(from._internal_community_chief_player_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
  if (from.community_level() != 0) {
    _internal_set_community_level(from._internal_community_level());
  }
  if (from.community_exp() != 0) {
    _internal_set_community_exp(from._internal_community_exp());
  }
  if (from.community_fighting_capacity() != 0) {
    _internal_set_community_fighting_capacity(from._internal_community_fighting_capacity());
  }
  if (from.community_weekly_active_val() != 0) {
    _internal_set_community_weekly_active_val(from._internal_community_weekly_active_val());
  }
  if (from.community_total_active_val() != 0) {
    _internal_set_community_total_active_val(from._internal_community_total_active_val());
  }
  if (from.community_approve_type() != 0) {
    _internal_set_community_approve_type(from._internal_community_approve_type());
  }
  if (from.level_restriction() != 0) {
    _internal_set_level_restriction(from._internal_level_restriction());
  }
  if (from.member_num() != 0) {
    _internal_set_member_num(from._internal_member_num());
  }
}

void CommunityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.CommunityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunityInfo::CopyFrom(const CommunityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.CommunityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunityInfo::IsInitialized() const {
  return true;
}

void CommunityInfo::InternalSwap(CommunityInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_name_, GetArenaForAllocation(),
      &other->community_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_flag_, GetArenaForAllocation(),
      &other->community_flag_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_icon_, GetArenaForAllocation(),
      &other->community_icon_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_declaration_, GetArenaForAllocation(),
      &other->community_declaration_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_chat_channel_id_, GetArenaForAllocation(),
      &other->community_chat_channel_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_chief_name_, GetArenaForAllocation(),
      &other->community_chief_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommunityInfo, member_num_)
      + sizeof(CommunityInfo::member_num_)
      - PROTOBUF_FIELD_OFFSET(CommunityInfo, community_chief_player_id_)>(
          reinterpret_cast<char*>(&community_chief_player_id_),
          reinterpret_cast<char*>(&other->community_chief_player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunityInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[126]);
}

// ===================================================================

class AppliedCommunityInfo::_Internal {
 public:
  static const ::KWMsg::CommunityInfo& community_info(const AppliedCommunityInfo* msg);
};

const ::KWMsg::CommunityInfo&
AppliedCommunityInfo::_Internal::community_info(const AppliedCommunityInfo* msg) {
  return *msg->community_info_;
}
AppliedCommunityInfo::AppliedCommunityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AppliedCommunityInfo)
}
AppliedCommunityInfo::AppliedCommunityInfo(const AppliedCommunityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_community_info()) {
    community_info_ = new ::KWMsg::CommunityInfo(*from.community_info_);
  } else {
    community_info_ = nullptr;
  }
  apply_join_ts_ = from.apply_join_ts_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AppliedCommunityInfo)
}

void AppliedCommunityInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&community_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&apply_join_ts_) -
    reinterpret_cast<char*>(&community_info_)) + sizeof(apply_join_ts_));
}

AppliedCommunityInfo::~AppliedCommunityInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.AppliedCommunityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppliedCommunityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete community_info_;
}

void AppliedCommunityInfo::ArenaDtor(void* object) {
  AppliedCommunityInfo* _this = reinterpret_cast< AppliedCommunityInfo* >(object);
  (void)_this;
}
void AppliedCommunityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppliedCommunityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppliedCommunityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AppliedCommunityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && community_info_ != nullptr) {
    delete community_info_;
  }
  community_info_ = nullptr;
  apply_join_ts_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppliedCommunityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 apply_join_ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          apply_join_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.CommunityInfo community_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_community_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppliedCommunityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AppliedCommunityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 apply_join_ts = 1;
  if (this->apply_join_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_apply_join_ts(), target);
  }

  // .KWMsg.CommunityInfo community_info = 2;
  if (this->has_community_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::community_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AppliedCommunityInfo)
  return target;
}

size_t AppliedCommunityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AppliedCommunityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.CommunityInfo community_info = 2;
  if (this->has_community_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *community_info_);
  }

  // int64 apply_join_ts = 1;
  if (this->apply_join_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_apply_join_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppliedCommunityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AppliedCommunityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AppliedCommunityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppliedCommunityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AppliedCommunityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AppliedCommunityInfo)
    MergeFrom(*source);
  }
}

void AppliedCommunityInfo::MergeFrom(const AppliedCommunityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AppliedCommunityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_community_info()) {
    _internal_mutable_community_info()->::KWMsg::CommunityInfo::MergeFrom(from._internal_community_info());
  }
  if (from.apply_join_ts() != 0) {
    _internal_set_apply_join_ts(from._internal_apply_join_ts());
  }
}

void AppliedCommunityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AppliedCommunityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppliedCommunityInfo::CopyFrom(const AppliedCommunityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AppliedCommunityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppliedCommunityInfo::IsInitialized() const {
  return true;
}

void AppliedCommunityInfo::InternalSwap(AppliedCommunityInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppliedCommunityInfo, apply_join_ts_)
      + sizeof(AppliedCommunityInfo::apply_join_ts_)
      - PROTOBUF_FIELD_OFFSET(AppliedCommunityInfo, community_info_)>(
          reinterpret_cast<char*>(&community_info_),
          reinterpret_cast<char*>(&other->community_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppliedCommunityInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[127]);
}

// ===================================================================

class AppliedPlayerInfo::_Internal {
 public:
  static const ::KWMsg::CommunityMemberInfo& player_info(const AppliedPlayerInfo* msg);
};

const ::KWMsg::CommunityMemberInfo&
AppliedPlayerInfo::_Internal::player_info(const AppliedPlayerInfo* msg) {
  return *msg->player_info_;
}
AppliedPlayerInfo::AppliedPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AppliedPlayerInfo)
}
AppliedPlayerInfo::AppliedPlayerInfo(const AppliedPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_info()) {
    player_info_ = new ::KWMsg::CommunityMemberInfo(*from.player_info_);
  } else {
    player_info_ = nullptr;
  }
  apply_join_ts_ = from.apply_join_ts_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AppliedPlayerInfo)
}

void AppliedPlayerInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&apply_join_ts_) -
    reinterpret_cast<char*>(&player_info_)) + sizeof(apply_join_ts_));
}

AppliedPlayerInfo::~AppliedPlayerInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.AppliedPlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppliedPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_info_;
}

void AppliedPlayerInfo::ArenaDtor(void* object) {
  AppliedPlayerInfo* _this = reinterpret_cast< AppliedPlayerInfo* >(object);
  (void)_this;
}
void AppliedPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppliedPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppliedPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AppliedPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_info_ != nullptr) {
    delete player_info_;
  }
  player_info_ = nullptr;
  apply_join_ts_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppliedPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 apply_join_ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          apply_join_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.CommunityMemberInfo player_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppliedPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AppliedPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 apply_join_ts = 1;
  if (this->apply_join_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_apply_join_ts(), target);
  }

  // .KWMsg.CommunityMemberInfo player_info = 2;
  if (this->has_player_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AppliedPlayerInfo)
  return target;
}

size_t AppliedPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AppliedPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.CommunityMemberInfo player_info = 2;
  if (this->has_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_info_);
  }

  // int64 apply_join_ts = 1;
  if (this->apply_join_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_apply_join_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppliedPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AppliedPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AppliedPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppliedPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AppliedPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AppliedPlayerInfo)
    MergeFrom(*source);
  }
}

void AppliedPlayerInfo::MergeFrom(const AppliedPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AppliedPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_info()) {
    _internal_mutable_player_info()->::KWMsg::CommunityMemberInfo::MergeFrom(from._internal_player_info());
  }
  if (from.apply_join_ts() != 0) {
    _internal_set_apply_join_ts(from._internal_apply_join_ts());
  }
}

void AppliedPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AppliedPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppliedPlayerInfo::CopyFrom(const AppliedPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AppliedPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppliedPlayerInfo::IsInitialized() const {
  return true;
}

void AppliedPlayerInfo::InternalSwap(AppliedPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppliedPlayerInfo, apply_join_ts_)
      + sizeof(AppliedPlayerInfo::apply_join_ts_)
      - PROTOBUF_FIELD_OFFSET(AppliedPlayerInfo, player_info_)>(
          reinterpret_cast<char*>(&player_info_),
          reinterpret_cast<char*>(&other->player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppliedPlayerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[128]);
}

// ===================================================================

class SyncPlayerCommunityInfo::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SyncPlayerCommunityInfo* msg);
};

const ::KWMsg::Ident&
SyncPlayerCommunityInfo::_Internal::player_id(const SyncPlayerCommunityInfo* msg) {
  return *msg->player_id_;
}
void SyncPlayerCommunityInfo::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
SyncPlayerCommunityInfo::SyncPlayerCommunityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncPlayerCommunityInfo)
}
SyncPlayerCommunityInfo::SyncPlayerCommunityInfo(const SyncPlayerCommunityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&community_id_, &from.community_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&quit_ts_) -
    reinterpret_cast<char*>(&community_id_)) + sizeof(quit_ts_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncPlayerCommunityInfo)
}

void SyncPlayerCommunityInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quit_ts_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(quit_ts_));
}

SyncPlayerCommunityInfo::~SyncPlayerCommunityInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncPlayerCommunityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncPlayerCommunityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void SyncPlayerCommunityInfo::ArenaDtor(void* object) {
  SyncPlayerCommunityInfo* _this = reinterpret_cast< SyncPlayerCommunityInfo* >(object);
  (void)_this;
}
void SyncPlayerCommunityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncPlayerCommunityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncPlayerCommunityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncPlayerCommunityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&community_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quit_ts_) -
      reinterpret_cast<char*>(&community_id_)) + sizeof(quit_ts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncPlayerCommunityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ECommunityMemberPosition position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_position(static_cast<::KWMsg::ECommunityMemberPosition>(val));
        } else goto handle_unusual;
        continue;
      // int64 quit_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          quit_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPlayerCommunityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncPlayerCommunityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_community_id(), target);
  }

  // .KWMsg.ECommunityMemberPosition position = 3;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_position(), target);
  }

  // int64 quit_ts = 4;
  if (this->quit_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_quit_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncPlayerCommunityInfo)
  return target;
}

size_t SyncPlayerCommunityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncPlayerCommunityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  // .KWMsg.ECommunityMemberPosition position = 3;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_position());
  }

  // int64 quit_ts = 4;
  if (this->quit_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_quit_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPlayerCommunityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncPlayerCommunityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPlayerCommunityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPlayerCommunityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncPlayerCommunityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncPlayerCommunityInfo)
    MergeFrom(*source);
  }
}

void SyncPlayerCommunityInfo::MergeFrom(const SyncPlayerCommunityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncPlayerCommunityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.quit_ts() != 0) {
    _internal_set_quit_ts(from._internal_quit_ts());
  }
}

void SyncPlayerCommunityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncPlayerCommunityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPlayerCommunityInfo::CopyFrom(const SyncPlayerCommunityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncPlayerCommunityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayerCommunityInfo::IsInitialized() const {
  return true;
}

void SyncPlayerCommunityInfo::InternalSwap(SyncPlayerCommunityInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncPlayerCommunityInfo, quit_ts_)
      + sizeof(SyncPlayerCommunityInfo::quit_ts_)
      - PROTOBUF_FIELD_OFFSET(SyncPlayerCommunityInfo, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayerCommunityInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[129]);
}

// ===================================================================

class AddCommunityActiveValAndExp::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AddCommunityActiveValAndExp* msg);
};

const ::KWMsg::Ident&
AddCommunityActiveValAndExp::_Internal::player_id(const AddCommunityActiveValAndExp* msg) {
  return *msg->player_id_;
}
void AddCommunityActiveValAndExp::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AddCommunityActiveValAndExp::AddCommunityActiveValAndExp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AddCommunityActiveValAndExp)
}
AddCommunityActiveValAndExp::AddCommunityActiveValAndExp(const AddCommunityActiveValAndExp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&community_id_, &from.community_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_exp_) -
    reinterpret_cast<char*>(&community_id_)) + sizeof(level_exp_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AddCommunityActiveValAndExp)
}

void AddCommunityActiveValAndExp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_exp_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(level_exp_));
}

AddCommunityActiveValAndExp::~AddCommunityActiveValAndExp() {
  // @@protoc_insertion_point(destructor:KWMsg.AddCommunityActiveValAndExp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddCommunityActiveValAndExp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void AddCommunityActiveValAndExp::ArenaDtor(void* object) {
  AddCommunityActiveValAndExp* _this = reinterpret_cast< AddCommunityActiveValAndExp* >(object);
  (void)_this;
}
void AddCommunityActiveValAndExp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddCommunityActiveValAndExp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddCommunityActiveValAndExp::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AddCommunityActiveValAndExp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&community_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_exp_) -
      reinterpret_cast<char*>(&community_id_)) + sizeof(level_exp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddCommunityActiveValAndExp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 active_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          active_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level_exp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddCommunityActiveValAndExp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AddCommunityActiveValAndExp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_community_id(), target);
  }

  // int32 active_val = 3;
  if (this->active_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_active_val(), target);
  }

  // int32 level_exp = 4;
  if (this->level_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_level_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AddCommunityActiveValAndExp)
  return target;
}

size_t AddCommunityActiveValAndExp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AddCommunityActiveValAndExp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  // int32 active_val = 3;
  if (this->active_val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_active_val());
  }

  // int32 level_exp = 4;
  if (this->level_exp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level_exp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCommunityActiveValAndExp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AddCommunityActiveValAndExp)
  GOOGLE_DCHECK_NE(&from, this);
  const AddCommunityActiveValAndExp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddCommunityActiveValAndExp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AddCommunityActiveValAndExp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AddCommunityActiveValAndExp)
    MergeFrom(*source);
  }
}

void AddCommunityActiveValAndExp::MergeFrom(const AddCommunityActiveValAndExp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AddCommunityActiveValAndExp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
  if (from.active_val() != 0) {
    _internal_set_active_val(from._internal_active_val());
  }
  if (from.level_exp() != 0) {
    _internal_set_level_exp(from._internal_level_exp());
  }
}

void AddCommunityActiveValAndExp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AddCommunityActiveValAndExp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCommunityActiveValAndExp::CopyFrom(const AddCommunityActiveValAndExp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AddCommunityActiveValAndExp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCommunityActiveValAndExp::IsInitialized() const {
  return true;
}

void AddCommunityActiveValAndExp::InternalSwap(AddCommunityActiveValAndExp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddCommunityActiveValAndExp, level_exp_)
      + sizeof(AddCommunityActiveValAndExp::level_exp_)
      - PROTOBUF_FIELD_OFFSET(AddCommunityActiveValAndExp, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddCommunityActiveValAndExp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[130]);
}

// ===================================================================

class NotifyApplyJoinCommunityResult::_Internal {
 public:
};

NotifyApplyJoinCommunityResult::NotifyApplyJoinCommunityResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.NotifyApplyJoinCommunityResult)
}
NotifyApplyJoinCommunityResult::NotifyApplyJoinCommunityResult(const NotifyApplyJoinCommunityResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  community_chat_channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_chat_channel_id().empty()) {
    community_chat_channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_chat_channel_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&community_id_, &from.community_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&join_result_) -
    reinterpret_cast<char*>(&community_id_)) + sizeof(join_result_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.NotifyApplyJoinCommunityResult)
}

void NotifyApplyJoinCommunityResult::SharedCtor() {
community_chat_channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&community_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&join_result_) -
    reinterpret_cast<char*>(&community_id_)) + sizeof(join_result_));
}

NotifyApplyJoinCommunityResult::~NotifyApplyJoinCommunityResult() {
  // @@protoc_insertion_point(destructor:KWMsg.NotifyApplyJoinCommunityResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NotifyApplyJoinCommunityResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  community_chat_channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NotifyApplyJoinCommunityResult::ArenaDtor(void* object) {
  NotifyApplyJoinCommunityResult* _this = reinterpret_cast< NotifyApplyJoinCommunityResult* >(object);
  (void)_this;
}
void NotifyApplyJoinCommunityResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotifyApplyJoinCommunityResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotifyApplyJoinCommunityResult::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.NotifyApplyJoinCommunityResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  community_chat_channel_id_.ClearToEmpty();
  ::memset(&community_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&join_result_) -
      reinterpret_cast<char*>(&community_id_)) + sizeof(join_result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyApplyJoinCommunityResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 community_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ECommunityMemberPosition position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_position(static_cast<::KWMsg::ECommunityMemberPosition>(val));
        } else goto handle_unusual;
        continue;
      // bytes community_chat_channel_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_community_chat_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 join_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          join_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NotifyApplyJoinCommunityResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.NotifyApplyJoinCommunityResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 community_id = 1;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_community_id(), target);
  }

  // .KWMsg.ECommunityMemberPosition position = 2;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_position(), target);
  }

  // bytes community_chat_channel_id = 3;
  if (!this->community_chat_channel_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_community_chat_channel_id(), target);
  }

  // int32 join_result = 4;
  if (this->join_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_join_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.NotifyApplyJoinCommunityResult)
  return target;
}

size_t NotifyApplyJoinCommunityResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.NotifyApplyJoinCommunityResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes community_chat_channel_id = 3;
  if (!this->community_chat_channel_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_chat_channel_id());
  }

  // int32 community_id = 1;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  // .KWMsg.ECommunityMemberPosition position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_position());
  }

  // int32 join_result = 4;
  if (this->join_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_join_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyApplyJoinCommunityResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.NotifyApplyJoinCommunityResult)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyApplyJoinCommunityResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NotifyApplyJoinCommunityResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.NotifyApplyJoinCommunityResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.NotifyApplyJoinCommunityResult)
    MergeFrom(*source);
  }
}

void NotifyApplyJoinCommunityResult::MergeFrom(const NotifyApplyJoinCommunityResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.NotifyApplyJoinCommunityResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.community_chat_channel_id().empty()) {
    _internal_set_community_chat_channel_id(from._internal_community_chat_channel_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.join_result() != 0) {
    _internal_set_join_result(from._internal_join_result());
  }
}

void NotifyApplyJoinCommunityResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.NotifyApplyJoinCommunityResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyApplyJoinCommunityResult::CopyFrom(const NotifyApplyJoinCommunityResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.NotifyApplyJoinCommunityResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyApplyJoinCommunityResult::IsInitialized() const {
  return true;
}

void NotifyApplyJoinCommunityResult::InternalSwap(NotifyApplyJoinCommunityResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_chat_channel_id_, GetArenaForAllocation(),
      &other->community_chat_channel_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotifyApplyJoinCommunityResult, join_result_)
      + sizeof(NotifyApplyJoinCommunityResult::join_result_)
      - PROTOBUF_FIELD_OFFSET(NotifyApplyJoinCommunityResult, community_id_)>(
          reinterpret_cast<char*>(&community_id_),
          reinterpret_cast<char*>(&other->community_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyApplyJoinCommunityResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[131]);
}

// ===================================================================

class NotifyPlayerGetFiredFromCommunity::_Internal {
 public:
};

NotifyPlayerGetFiredFromCommunity::NotifyPlayerGetFiredFromCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.NotifyPlayerGetFiredFromCommunity)
}
NotifyPlayerGetFiredFromCommunity::NotifyPlayerGetFiredFromCommunity(const NotifyPlayerGetFiredFromCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  community_chat_channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_chat_channel_id().empty()) {
    community_chat_channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_chat_channel_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&community_id_, &from.community_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&community_id_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.NotifyPlayerGetFiredFromCommunity)
}

void NotifyPlayerGetFiredFromCommunity::SharedCtor() {
community_chat_channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&community_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&community_id_)) + sizeof(position_));
}

NotifyPlayerGetFiredFromCommunity::~NotifyPlayerGetFiredFromCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.NotifyPlayerGetFiredFromCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NotifyPlayerGetFiredFromCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  community_chat_channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NotifyPlayerGetFiredFromCommunity::ArenaDtor(void* object) {
  NotifyPlayerGetFiredFromCommunity* _this = reinterpret_cast< NotifyPlayerGetFiredFromCommunity* >(object);
  (void)_this;
}
void NotifyPlayerGetFiredFromCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotifyPlayerGetFiredFromCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotifyPlayerGetFiredFromCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.NotifyPlayerGetFiredFromCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  community_chat_channel_id_.ClearToEmpty();
  ::memset(&community_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&community_id_)) + sizeof(position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyPlayerGetFiredFromCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 community_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ECommunityMemberPosition position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_position(static_cast<::KWMsg::ECommunityMemberPosition>(val));
        } else goto handle_unusual;
        continue;
      // bytes community_chat_channel_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_community_chat_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NotifyPlayerGetFiredFromCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.NotifyPlayerGetFiredFromCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 community_id = 1;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_community_id(), target);
  }

  // .KWMsg.ECommunityMemberPosition position = 2;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_position(), target);
  }

  // bytes community_chat_channel_id = 3;
  if (!this->community_chat_channel_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_community_chat_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.NotifyPlayerGetFiredFromCommunity)
  return target;
}

size_t NotifyPlayerGetFiredFromCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.NotifyPlayerGetFiredFromCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes community_chat_channel_id = 3;
  if (!this->community_chat_channel_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_chat_channel_id());
  }

  // int32 community_id = 1;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  // .KWMsg.ECommunityMemberPosition position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyPlayerGetFiredFromCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.NotifyPlayerGetFiredFromCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyPlayerGetFiredFromCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NotifyPlayerGetFiredFromCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.NotifyPlayerGetFiredFromCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.NotifyPlayerGetFiredFromCommunity)
    MergeFrom(*source);
  }
}

void NotifyPlayerGetFiredFromCommunity::MergeFrom(const NotifyPlayerGetFiredFromCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.NotifyPlayerGetFiredFromCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.community_chat_channel_id().empty()) {
    _internal_set_community_chat_channel_id(from._internal_community_chat_channel_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
}

void NotifyPlayerGetFiredFromCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.NotifyPlayerGetFiredFromCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPlayerGetFiredFromCommunity::CopyFrom(const NotifyPlayerGetFiredFromCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.NotifyPlayerGetFiredFromCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPlayerGetFiredFromCommunity::IsInitialized() const {
  return true;
}

void NotifyPlayerGetFiredFromCommunity::InternalSwap(NotifyPlayerGetFiredFromCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_chat_channel_id_, GetArenaForAllocation(),
      &other->community_chat_channel_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotifyPlayerGetFiredFromCommunity, position_)
      + sizeof(NotifyPlayerGetFiredFromCommunity::position_)
      - PROTOBUF_FIELD_OFFSET(NotifyPlayerGetFiredFromCommunity, community_id_)>(
          reinterpret_cast<char*>(&community_id_),
          reinterpret_cast<char*>(&other->community_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyPlayerGetFiredFromCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[132]);
}

// ===================================================================

class ReqCreateCommunity::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqCreateCommunity* msg);
};

const ::KWMsg::Ident&
ReqCreateCommunity::_Internal::player_id(const ReqCreateCommunity* msg) {
  return *msg->player_id_;
}
void ReqCreateCommunity::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqCreateCommunity::ReqCreateCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCreateCommunity)
}
ReqCreateCommunity::ReqCreateCommunity(const ReqCreateCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  community_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_name().empty()) {
    community_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_name(), 
      GetArenaForAllocation());
  }
  community_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_flag().empty()) {
    community_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_flag(), 
      GetArenaForAllocation());
  }
  community_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_icon().empty()) {
    community_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_icon(), 
      GetArenaForAllocation());
  }
  community_declaration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_declaration().empty()) {
    community_declaration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_declaration(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&community_approve_type_, &from.community_approve_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_restriction_) -
    reinterpret_cast<char*>(&community_approve_type_)) + sizeof(level_restriction_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCreateCommunity)
}

void ReqCreateCommunity::SharedCtor() {
community_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
community_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
community_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
community_declaration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_restriction_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(level_restriction_));
}

ReqCreateCommunity::~ReqCreateCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCreateCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCreateCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  community_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  community_flag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  community_icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  community_declaration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqCreateCommunity::ArenaDtor(void* object) {
  ReqCreateCommunity* _this = reinterpret_cast< ReqCreateCommunity* >(object);
  (void)_this;
}
void ReqCreateCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCreateCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCreateCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCreateCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  community_name_.ClearToEmpty();
  community_flag_.ClearToEmpty();
  community_icon_.ClearToEmpty();
  community_declaration_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&community_approve_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_restriction_) -
      reinterpret_cast<char*>(&community_approve_type_)) + sizeof(level_restriction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCreateCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_community_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_community_flag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_icon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_community_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_declaration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_community_declaration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_approve_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          community_approve_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level_restriction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          level_restriction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCreateCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCreateCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes community_name = 2;
  if (!this->community_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_community_name(), target);
  }

  // bytes community_flag = 3;
  if (!this->community_flag().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_community_flag(), target);
  }

  // bytes community_icon = 4;
  if (!this->community_icon().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_community_icon(), target);
  }

  // bytes community_declaration = 5;
  if (!this->community_declaration().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_community_declaration(), target);
  }

  // int32 community_approve_type = 6;
  if (this->community_approve_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_community_approve_type(), target);
  }

  // int32 level_restriction = 7;
  if (this->level_restriction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_level_restriction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCreateCommunity)
  return target;
}

size_t ReqCreateCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCreateCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes community_name = 2;
  if (!this->community_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_name());
  }

  // bytes community_flag = 3;
  if (!this->community_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_flag());
  }

  // bytes community_icon = 4;
  if (!this->community_icon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_icon());
  }

  // bytes community_declaration = 5;
  if (!this->community_declaration().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_declaration());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 community_approve_type = 6;
  if (this->community_approve_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_approve_type());
  }

  // int32 level_restriction = 7;
  if (this->level_restriction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level_restriction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCreateCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCreateCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCreateCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCreateCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCreateCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCreateCommunity)
    MergeFrom(*source);
  }
}

void ReqCreateCommunity::MergeFrom(const ReqCreateCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCreateCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.community_name().empty()) {
    _internal_set_community_name(from._internal_community_name());
  }
  if (!from.community_flag().empty()) {
    _internal_set_community_flag(from._internal_community_flag());
  }
  if (!from.community_icon().empty()) {
    _internal_set_community_icon(from._internal_community_icon());
  }
  if (!from.community_declaration().empty()) {
    _internal_set_community_declaration(from._internal_community_declaration());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.community_approve_type() != 0) {
    _internal_set_community_approve_type(from._internal_community_approve_type());
  }
  if (from.level_restriction() != 0) {
    _internal_set_level_restriction(from._internal_level_restriction());
  }
}

void ReqCreateCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCreateCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreateCommunity::CopyFrom(const ReqCreateCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCreateCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreateCommunity::IsInitialized() const {
  return true;
}

void ReqCreateCommunity::InternalSwap(ReqCreateCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_name_, GetArenaForAllocation(),
      &other->community_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_flag_, GetArenaForAllocation(),
      &other->community_flag_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_icon_, GetArenaForAllocation(),
      &other->community_icon_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_declaration_, GetArenaForAllocation(),
      &other->community_declaration_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqCreateCommunity, level_restriction_)
      + sizeof(ReqCreateCommunity::level_restriction_)
      - PROTOBUF_FIELD_OFFSET(ReqCreateCommunity, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCreateCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[133]);
}

// ===================================================================

class AckCreateCommunity::_Internal {
 public:
  static const ::KWMsg::CommunityInfo& community_info(const AckCreateCommunity* msg);
};

const ::KWMsg::CommunityInfo&
AckCreateCommunity::_Internal::community_info(const AckCreateCommunity* msg) {
  return *msg->community_info_;
}
AckCreateCommunity::AckCreateCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  member_info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCreateCommunity)
}
AckCreateCommunity::AckCreateCommunity(const AckCreateCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      member_info_list_(from.member_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_community_info()) {
    community_info_ = new ::KWMsg::CommunityInfo(*from.community_info_);
  } else {
    community_info_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCreateCommunity)
}

void AckCreateCommunity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&community_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&community_info_)) + sizeof(event_code_));
}

AckCreateCommunity::~AckCreateCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCreateCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCreateCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete community_info_;
}

void AckCreateCommunity::ArenaDtor(void* object) {
  AckCreateCommunity* _this = reinterpret_cast< AckCreateCommunity* >(object);
  (void)_this;
}
void AckCreateCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCreateCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCreateCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCreateCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_info_list_.Clear();
  if (GetArenaForAllocation() == nullptr && community_info_ != nullptr) {
    delete community_info_;
  }
  community_info_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCreateCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.CommunityInfo community_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_community_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.CommunityMemberInfo member_info_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCreateCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCreateCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.CommunityInfo community_info = 2;
  if (this->has_community_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::community_info(this), target, stream);
  }

  // repeated .KWMsg.CommunityMemberInfo member_info_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_member_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_member_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCreateCommunity)
  return target;
}

size_t AckCreateCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCreateCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.CommunityMemberInfo member_info_list = 3;
  total_size += 1UL * this->_internal_member_info_list_size();
  for (const auto& msg : this->member_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.CommunityInfo community_info = 2;
  if (this->has_community_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *community_info_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCreateCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCreateCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCreateCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCreateCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCreateCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCreateCommunity)
    MergeFrom(*source);
  }
}

void AckCreateCommunity::MergeFrom(const AckCreateCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCreateCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_info_list_.MergeFrom(from.member_info_list_);
  if (from.has_community_info()) {
    _internal_mutable_community_info()->::KWMsg::CommunityInfo::MergeFrom(from._internal_community_info());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckCreateCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCreateCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCreateCommunity::CopyFrom(const AckCreateCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCreateCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCreateCommunity::IsInitialized() const {
  return true;
}

void AckCreateCommunity::InternalSwap(AckCreateCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  member_info_list_.InternalSwap(&other->member_info_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckCreateCommunity, event_code_)
      + sizeof(AckCreateCommunity::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckCreateCommunity, community_info_)>(
          reinterpret_cast<char*>(&community_info_),
          reinterpret_cast<char*>(&other->community_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCreateCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[134]);
}

// ===================================================================

class ReqSearchCommunity::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqSearchCommunity* msg);
};

const ::KWMsg::Ident&
ReqSearchCommunity::_Internal::player_id(const ReqSearchCommunity* msg) {
  return *msg->player_id_;
}
void ReqSearchCommunity::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqSearchCommunity::ReqSearchCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqSearchCommunity)
}
ReqSearchCommunity::ReqSearchCommunity(const ReqSearchCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  community_name_or_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_name_or_id().empty()) {
    community_name_or_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_name_or_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqSearchCommunity)
}

void ReqSearchCommunity::SharedCtor() {
community_name_or_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqSearchCommunity::~ReqSearchCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqSearchCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqSearchCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  community_name_or_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqSearchCommunity::ArenaDtor(void* object) {
  ReqSearchCommunity* _this = reinterpret_cast< ReqSearchCommunity* >(object);
  (void)_this;
}
void ReqSearchCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqSearchCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSearchCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqSearchCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  community_name_or_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSearchCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_name_or_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_community_name_or_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSearchCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqSearchCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes community_name_or_id = 2;
  if (!this->community_name_or_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_community_name_or_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqSearchCommunity)
  return target;
}

size_t ReqSearchCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqSearchCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes community_name_or_id = 2;
  if (!this->community_name_or_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_name_or_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSearchCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqSearchCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSearchCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSearchCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqSearchCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqSearchCommunity)
    MergeFrom(*source);
  }
}

void ReqSearchCommunity::MergeFrom(const ReqSearchCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqSearchCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.community_name_or_id().empty()) {
    _internal_set_community_name_or_id(from._internal_community_name_or_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqSearchCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqSearchCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSearchCommunity::CopyFrom(const ReqSearchCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqSearchCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSearchCommunity::IsInitialized() const {
  return true;
}

void ReqSearchCommunity::InternalSwap(ReqSearchCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_name_or_id_, GetArenaForAllocation(),
      &other->community_name_or_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSearchCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[135]);
}

// ===================================================================

class AckSearchCommunity::_Internal {
 public:
  static const ::KWMsg::CommunityInfo& community_info(const AckSearchCommunity* msg);
};

const ::KWMsg::CommunityInfo&
AckSearchCommunity::_Internal::community_info(const AckSearchCommunity* msg) {
  return *msg->community_info_;
}
AckSearchCommunity::AckSearchCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckSearchCommunity)
}
AckSearchCommunity::AckSearchCommunity(const AckSearchCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_community_info()) {
    community_info_ = new ::KWMsg::CommunityInfo(*from.community_info_);
  } else {
    community_info_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckSearchCommunity)
}

void AckSearchCommunity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&community_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&community_info_)) + sizeof(event_code_));
}

AckSearchCommunity::~AckSearchCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.AckSearchCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckSearchCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete community_info_;
}

void AckSearchCommunity::ArenaDtor(void* object) {
  AckSearchCommunity* _this = reinterpret_cast< AckSearchCommunity* >(object);
  (void)_this;
}
void AckSearchCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckSearchCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckSearchCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckSearchCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && community_info_ != nullptr) {
    delete community_info_;
  }
  community_info_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckSearchCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.CommunityInfo community_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_community_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSearchCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckSearchCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.CommunityInfo community_info = 2;
  if (this->has_community_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::community_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckSearchCommunity)
  return target;
}

size_t AckSearchCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckSearchCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.CommunityInfo community_info = 2;
  if (this->has_community_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *community_info_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSearchCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckSearchCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSearchCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSearchCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckSearchCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckSearchCommunity)
    MergeFrom(*source);
  }
}

void AckSearchCommunity::MergeFrom(const AckSearchCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckSearchCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_community_info()) {
    _internal_mutable_community_info()->::KWMsg::CommunityInfo::MergeFrom(from._internal_community_info());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckSearchCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckSearchCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSearchCommunity::CopyFrom(const AckSearchCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckSearchCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSearchCommunity::IsInitialized() const {
  return true;
}

void AckSearchCommunity::InternalSwap(AckSearchCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckSearchCommunity, event_code_)
      + sizeof(AckSearchCommunity::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckSearchCommunity, community_info_)>(
          reinterpret_cast<char*>(&community_info_),
          reinterpret_cast<char*>(&other->community_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSearchCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[136]);
}

// ===================================================================

class ReqQueryCommunity::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqQueryCommunity* msg);
};

const ::KWMsg::Ident&
ReqQueryCommunity::_Internal::player_id(const ReqQueryCommunity* msg) {
  return *msg->player_id_;
}
void ReqQueryCommunity::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqQueryCommunity::ReqQueryCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqQueryCommunity)
}
ReqQueryCommunity::ReqQueryCommunity(const ReqQueryCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  community_id_ = from.community_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqQueryCommunity)
}

void ReqQueryCommunity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&community_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(community_id_));
}

ReqQueryCommunity::~ReqQueryCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqQueryCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqQueryCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqQueryCommunity::ArenaDtor(void* object) {
  ReqQueryCommunity* _this = reinterpret_cast< ReqQueryCommunity* >(object);
  (void)_this;
}
void ReqQueryCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqQueryCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqQueryCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqQueryCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  community_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqQueryCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqQueryCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqQueryCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_community_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqQueryCommunity)
  return target;
}

size_t ReqQueryCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqQueryCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqQueryCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqQueryCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqQueryCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqQueryCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqQueryCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqQueryCommunity)
    MergeFrom(*source);
  }
}

void ReqQueryCommunity::MergeFrom(const ReqQueryCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqQueryCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
}

void ReqQueryCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqQueryCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqQueryCommunity::CopyFrom(const ReqQueryCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqQueryCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqQueryCommunity::IsInitialized() const {
  return true;
}

void ReqQueryCommunity::InternalSwap(ReqQueryCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqQueryCommunity, community_id_)
      + sizeof(ReqQueryCommunity::community_id_)
      - PROTOBUF_FIELD_OFFSET(ReqQueryCommunity, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqQueryCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[137]);
}

// ===================================================================

class AckQueryCommunity::_Internal {
 public:
  static const ::KWMsg::CommunityInfo& community_info(const AckQueryCommunity* msg);
};

const ::KWMsg::CommunityInfo&
AckQueryCommunity::_Internal::community_info(const AckQueryCommunity* msg) {
  return *msg->community_info_;
}
AckQueryCommunity::AckQueryCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  member_info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckQueryCommunity)
}
AckQueryCommunity::AckQueryCommunity(const AckQueryCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      member_info_list_(from.member_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_community_info()) {
    community_info_ = new ::KWMsg::CommunityInfo(*from.community_info_);
  } else {
    community_info_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckQueryCommunity)
}

void AckQueryCommunity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&community_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&community_info_)) + sizeof(event_code_));
}

AckQueryCommunity::~AckQueryCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.AckQueryCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckQueryCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete community_info_;
}

void AckQueryCommunity::ArenaDtor(void* object) {
  AckQueryCommunity* _this = reinterpret_cast< AckQueryCommunity* >(object);
  (void)_this;
}
void AckQueryCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckQueryCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckQueryCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckQueryCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_info_list_.Clear();
  if (GetArenaForAllocation() == nullptr && community_info_ != nullptr) {
    delete community_info_;
  }
  community_info_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckQueryCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.CommunityInfo community_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_community_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.CommunityMemberInfo member_info_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckQueryCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckQueryCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.CommunityInfo community_info = 2;
  if (this->has_community_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::community_info(this), target, stream);
  }

  // repeated .KWMsg.CommunityMemberInfo member_info_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_member_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_member_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckQueryCommunity)
  return target;
}

size_t AckQueryCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckQueryCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.CommunityMemberInfo member_info_list = 3;
  total_size += 1UL * this->_internal_member_info_list_size();
  for (const auto& msg : this->member_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.CommunityInfo community_info = 2;
  if (this->has_community_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *community_info_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckQueryCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckQueryCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const AckQueryCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckQueryCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckQueryCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckQueryCommunity)
    MergeFrom(*source);
  }
}

void AckQueryCommunity::MergeFrom(const AckQueryCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckQueryCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_info_list_.MergeFrom(from.member_info_list_);
  if (from.has_community_info()) {
    _internal_mutable_community_info()->::KWMsg::CommunityInfo::MergeFrom(from._internal_community_info());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckQueryCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckQueryCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckQueryCommunity::CopyFrom(const AckQueryCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckQueryCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckQueryCommunity::IsInitialized() const {
  return true;
}

void AckQueryCommunity::InternalSwap(AckQueryCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  member_info_list_.InternalSwap(&other->member_info_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckQueryCommunity, event_code_)
      + sizeof(AckQueryCommunity::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckQueryCommunity, community_info_)>(
          reinterpret_cast<char*>(&community_info_),
          reinterpret_cast<char*>(&other->community_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckQueryCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[138]);
}

// ===================================================================

class ReqSpecifiedCommunityPage::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqSpecifiedCommunityPage* msg);
};

const ::KWMsg::Ident&
ReqSpecifiedCommunityPage::_Internal::player_id(const ReqSpecifiedCommunityPage* msg) {
  return *msg->player_id_;
}
void ReqSpecifiedCommunityPage::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqSpecifiedCommunityPage::ReqSpecifiedCommunityPage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqSpecifiedCommunityPage)
}
ReqSpecifiedCommunityPage::ReqSpecifiedCommunityPage(const ReqSpecifiedCommunityPage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&sort_type_, &from.sort_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_no_) -
    reinterpret_cast<char*>(&sort_type_)) + sizeof(page_no_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqSpecifiedCommunityPage)
}

void ReqSpecifiedCommunityPage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_no_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(page_no_));
}

ReqSpecifiedCommunityPage::~ReqSpecifiedCommunityPage() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqSpecifiedCommunityPage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqSpecifiedCommunityPage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqSpecifiedCommunityPage::ArenaDtor(void* object) {
  ReqSpecifiedCommunityPage* _this = reinterpret_cast< ReqSpecifiedCommunityPage* >(object);
  (void)_this;
}
void ReqSpecifiedCommunityPage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqSpecifiedCommunityPage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSpecifiedCommunityPage::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqSpecifiedCommunityPage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&sort_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_no_) -
      reinterpret_cast<char*>(&sort_type_)) + sizeof(page_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSpecifiedCommunityPage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sort_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sort_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 show_only_satisfy_rules = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          show_only_satisfy_rules_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hide_member_is_full = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hide_member_is_full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page_no = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          page_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSpecifiedCommunityPage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqSpecifiedCommunityPage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 sort_type = 2;
  if (this->sort_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sort_type(), target);
  }

  // int32 show_only_satisfy_rules = 3;
  if (this->show_only_satisfy_rules() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_show_only_satisfy_rules(), target);
  }

  // int32 hide_member_is_full = 4;
  if (this->hide_member_is_full() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_hide_member_is_full(), target);
  }

  // int32 page_no = 5;
  if (this->page_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_page_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqSpecifiedCommunityPage)
  return target;
}

size_t ReqSpecifiedCommunityPage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqSpecifiedCommunityPage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 sort_type = 2;
  if (this->sort_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sort_type());
  }

  // int32 show_only_satisfy_rules = 3;
  if (this->show_only_satisfy_rules() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_show_only_satisfy_rules());
  }

  // int32 hide_member_is_full = 4;
  if (this->hide_member_is_full() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hide_member_is_full());
  }

  // int32 page_no = 5;
  if (this->page_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSpecifiedCommunityPage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqSpecifiedCommunityPage)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSpecifiedCommunityPage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSpecifiedCommunityPage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqSpecifiedCommunityPage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqSpecifiedCommunityPage)
    MergeFrom(*source);
  }
}

void ReqSpecifiedCommunityPage::MergeFrom(const ReqSpecifiedCommunityPage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqSpecifiedCommunityPage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.sort_type() != 0) {
    _internal_set_sort_type(from._internal_sort_type());
  }
  if (from.show_only_satisfy_rules() != 0) {
    _internal_set_show_only_satisfy_rules(from._internal_show_only_satisfy_rules());
  }
  if (from.hide_member_is_full() != 0) {
    _internal_set_hide_member_is_full(from._internal_hide_member_is_full());
  }
  if (from.page_no() != 0) {
    _internal_set_page_no(from._internal_page_no());
  }
}

void ReqSpecifiedCommunityPage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqSpecifiedCommunityPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSpecifiedCommunityPage::CopyFrom(const ReqSpecifiedCommunityPage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqSpecifiedCommunityPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSpecifiedCommunityPage::IsInitialized() const {
  return true;
}

void ReqSpecifiedCommunityPage::InternalSwap(ReqSpecifiedCommunityPage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqSpecifiedCommunityPage, page_no_)
      + sizeof(ReqSpecifiedCommunityPage::page_no_)
      - PROTOBUF_FIELD_OFFSET(ReqSpecifiedCommunityPage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSpecifiedCommunityPage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[139]);
}

// ===================================================================

class AckSpecifiedCommunityPage::_Internal {
 public:
};

AckSpecifiedCommunityPage::AckSpecifiedCommunityPage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  community_info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckSpecifiedCommunityPage)
}
AckSpecifiedCommunityPage::AckSpecifiedCommunityPage(const AckSpecifiedCommunityPage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      community_info_list_(from.community_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_page_no_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(total_page_no_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckSpecifiedCommunityPage)
}

void AckSpecifiedCommunityPage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_page_no_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(total_page_no_));
}

AckSpecifiedCommunityPage::~AckSpecifiedCommunityPage() {
  // @@protoc_insertion_point(destructor:KWMsg.AckSpecifiedCommunityPage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckSpecifiedCommunityPage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckSpecifiedCommunityPage::ArenaDtor(void* object) {
  AckSpecifiedCommunityPage* _this = reinterpret_cast< AckSpecifiedCommunityPage* >(object);
  (void)_this;
}
void AckSpecifiedCommunityPage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckSpecifiedCommunityPage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckSpecifiedCommunityPage::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckSpecifiedCommunityPage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  community_info_list_.Clear();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_page_no_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(total_page_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckSpecifiedCommunityPage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 cur_page_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_page_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_page_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_page_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.CommunityInfo community_info_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_community_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSpecifiedCommunityPage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckSpecifiedCommunityPage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // int32 cur_page_no = 2;
  if (this->cur_page_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cur_page_no(), target);
  }

  // int32 total_page_no = 3;
  if (this->total_page_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_page_no(), target);
  }

  // repeated .KWMsg.CommunityInfo community_info_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_community_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_community_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckSpecifiedCommunityPage)
  return target;
}

size_t AckSpecifiedCommunityPage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckSpecifiedCommunityPage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.CommunityInfo community_info_list = 4;
  total_size += 1UL * this->_internal_community_info_list_size();
  for (const auto& msg : this->community_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 cur_page_no = 2;
  if (this->cur_page_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_page_no());
  }

  // int32 total_page_no = 3;
  if (this->total_page_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_page_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSpecifiedCommunityPage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckSpecifiedCommunityPage)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSpecifiedCommunityPage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSpecifiedCommunityPage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckSpecifiedCommunityPage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckSpecifiedCommunityPage)
    MergeFrom(*source);
  }
}

void AckSpecifiedCommunityPage::MergeFrom(const AckSpecifiedCommunityPage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckSpecifiedCommunityPage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  community_info_list_.MergeFrom(from.community_info_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.cur_page_no() != 0) {
    _internal_set_cur_page_no(from._internal_cur_page_no());
  }
  if (from.total_page_no() != 0) {
    _internal_set_total_page_no(from._internal_total_page_no());
  }
}

void AckSpecifiedCommunityPage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckSpecifiedCommunityPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSpecifiedCommunityPage::CopyFrom(const AckSpecifiedCommunityPage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckSpecifiedCommunityPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSpecifiedCommunityPage::IsInitialized() const {
  return true;
}

void AckSpecifiedCommunityPage::InternalSwap(AckSpecifiedCommunityPage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  community_info_list_.InternalSwap(&other->community_info_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckSpecifiedCommunityPage, total_page_no_)
      + sizeof(AckSpecifiedCommunityPage::total_page_no_)
      - PROTOBUF_FIELD_OFFSET(AckSpecifiedCommunityPage, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSpecifiedCommunityPage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[140]);
}

// ===================================================================

class ReqQuickJoinCommunity::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqQuickJoinCommunity* msg);
};

const ::KWMsg::Ident&
ReqQuickJoinCommunity::_Internal::player_id(const ReqQuickJoinCommunity* msg) {
  return *msg->player_id_;
}
void ReqQuickJoinCommunity::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqQuickJoinCommunity::ReqQuickJoinCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqQuickJoinCommunity)
}
ReqQuickJoinCommunity::ReqQuickJoinCommunity(const ReqQuickJoinCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqQuickJoinCommunity)
}

void ReqQuickJoinCommunity::SharedCtor() {
player_id_ = nullptr;
}

ReqQuickJoinCommunity::~ReqQuickJoinCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqQuickJoinCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqQuickJoinCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqQuickJoinCommunity::ArenaDtor(void* object) {
  ReqQuickJoinCommunity* _this = reinterpret_cast< ReqQuickJoinCommunity* >(object);
  (void)_this;
}
void ReqQuickJoinCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqQuickJoinCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqQuickJoinCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqQuickJoinCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqQuickJoinCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqQuickJoinCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqQuickJoinCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqQuickJoinCommunity)
  return target;
}

size_t ReqQuickJoinCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqQuickJoinCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqQuickJoinCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqQuickJoinCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqQuickJoinCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqQuickJoinCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqQuickJoinCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqQuickJoinCommunity)
    MergeFrom(*source);
  }
}

void ReqQuickJoinCommunity::MergeFrom(const ReqQuickJoinCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqQuickJoinCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqQuickJoinCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqQuickJoinCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqQuickJoinCommunity::CopyFrom(const ReqQuickJoinCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqQuickJoinCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqQuickJoinCommunity::IsInitialized() const {
  return true;
}

void ReqQuickJoinCommunity::InternalSwap(ReqQuickJoinCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqQuickJoinCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[141]);
}

// ===================================================================

class AckQuickJoinCommunity::_Internal {
 public:
};

AckQuickJoinCommunity::AckQuickJoinCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckQuickJoinCommunity)
}
AckQuickJoinCommunity::AckQuickJoinCommunity(const AckQuickJoinCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  community_chat_channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_chat_channel_id().empty()) {
    community_chat_channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_chat_channel_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckQuickJoinCommunity)
}

void AckQuickJoinCommunity::SharedCtor() {
community_chat_channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(position_));
}

AckQuickJoinCommunity::~AckQuickJoinCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.AckQuickJoinCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckQuickJoinCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  community_chat_channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckQuickJoinCommunity::ArenaDtor(void* object) {
  AckQuickJoinCommunity* _this = reinterpret_cast< AckQuickJoinCommunity* >(object);
  (void)_this;
}
void AckQuickJoinCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckQuickJoinCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckQuickJoinCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckQuickJoinCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  community_chat_channel_id_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckQuickJoinCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 community_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ECommunityMemberPosition position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_position(static_cast<::KWMsg::ECommunityMemberPosition>(val));
        } else goto handle_unusual;
        continue;
      // bytes community_chat_channel_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_community_chat_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckQuickJoinCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckQuickJoinCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_community_id(), target);
  }

  // .KWMsg.ECommunityMemberPosition position = 3;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_position(), target);
  }

  // bytes community_chat_channel_id = 4;
  if (!this->community_chat_channel_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_community_chat_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckQuickJoinCommunity)
  return target;
}

size_t AckQuickJoinCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckQuickJoinCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes community_chat_channel_id = 4;
  if (!this->community_chat_channel_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_chat_channel_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  // .KWMsg.ECommunityMemberPosition position = 3;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckQuickJoinCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckQuickJoinCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const AckQuickJoinCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckQuickJoinCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckQuickJoinCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckQuickJoinCommunity)
    MergeFrom(*source);
  }
}

void AckQuickJoinCommunity::MergeFrom(const AckQuickJoinCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckQuickJoinCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.community_chat_channel_id().empty()) {
    _internal_set_community_chat_channel_id(from._internal_community_chat_channel_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
}

void AckQuickJoinCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckQuickJoinCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckQuickJoinCommunity::CopyFrom(const AckQuickJoinCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckQuickJoinCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckQuickJoinCommunity::IsInitialized() const {
  return true;
}

void AckQuickJoinCommunity::InternalSwap(AckQuickJoinCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_chat_channel_id_, GetArenaForAllocation(),
      &other->community_chat_channel_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckQuickJoinCommunity, position_)
      + sizeof(AckQuickJoinCommunity::position_)
      - PROTOBUF_FIELD_OFFSET(AckQuickJoinCommunity, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckQuickJoinCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[142]);
}

// ===================================================================

class ReqApplyJoinCommunity::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqApplyJoinCommunity* msg);
};

const ::KWMsg::Ident&
ReqApplyJoinCommunity::_Internal::player_id(const ReqApplyJoinCommunity* msg) {
  return *msg->player_id_;
}
void ReqApplyJoinCommunity::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqApplyJoinCommunity::ReqApplyJoinCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqApplyJoinCommunity)
}
ReqApplyJoinCommunity::ReqApplyJoinCommunity(const ReqApplyJoinCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  community_id_ = from.community_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqApplyJoinCommunity)
}

void ReqApplyJoinCommunity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&community_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(community_id_));
}

ReqApplyJoinCommunity::~ReqApplyJoinCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqApplyJoinCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqApplyJoinCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqApplyJoinCommunity::ArenaDtor(void* object) {
  ReqApplyJoinCommunity* _this = reinterpret_cast< ReqApplyJoinCommunity* >(object);
  (void)_this;
}
void ReqApplyJoinCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqApplyJoinCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqApplyJoinCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqApplyJoinCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  community_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqApplyJoinCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqApplyJoinCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqApplyJoinCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_community_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqApplyJoinCommunity)
  return target;
}

size_t ReqApplyJoinCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqApplyJoinCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqApplyJoinCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqApplyJoinCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqApplyJoinCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqApplyJoinCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqApplyJoinCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqApplyJoinCommunity)
    MergeFrom(*source);
  }
}

void ReqApplyJoinCommunity::MergeFrom(const ReqApplyJoinCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqApplyJoinCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
}

void ReqApplyJoinCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqApplyJoinCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqApplyJoinCommunity::CopyFrom(const ReqApplyJoinCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqApplyJoinCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqApplyJoinCommunity::IsInitialized() const {
  return true;
}

void ReqApplyJoinCommunity::InternalSwap(ReqApplyJoinCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqApplyJoinCommunity, community_id_)
      + sizeof(ReqApplyJoinCommunity::community_id_)
      - PROTOBUF_FIELD_OFFSET(ReqApplyJoinCommunity, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqApplyJoinCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[143]);
}

// ===================================================================

class AckApplyJoinCommunity::_Internal {
 public:
};

AckApplyJoinCommunity::AckApplyJoinCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckApplyJoinCommunity)
}
AckApplyJoinCommunity::AckApplyJoinCommunity(const AckApplyJoinCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  community_chat_channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_chat_channel_id().empty()) {
    community_chat_channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_chat_channel_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckApplyJoinCommunity)
}

void AckApplyJoinCommunity::SharedCtor() {
community_chat_channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(position_));
}

AckApplyJoinCommunity::~AckApplyJoinCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.AckApplyJoinCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckApplyJoinCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  community_chat_channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckApplyJoinCommunity::ArenaDtor(void* object) {
  AckApplyJoinCommunity* _this = reinterpret_cast< AckApplyJoinCommunity* >(object);
  (void)_this;
}
void AckApplyJoinCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckApplyJoinCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckApplyJoinCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckApplyJoinCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  community_chat_channel_id_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckApplyJoinCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 community_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ECommunityMemberPosition position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_position(static_cast<::KWMsg::ECommunityMemberPosition>(val));
        } else goto handle_unusual;
        continue;
      // bytes community_chat_channel_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_community_chat_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckApplyJoinCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckApplyJoinCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_community_id(), target);
  }

  // .KWMsg.ECommunityMemberPosition position = 3;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_position(), target);
  }

  // bytes community_chat_channel_id = 4;
  if (!this->community_chat_channel_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_community_chat_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckApplyJoinCommunity)
  return target;
}

size_t AckApplyJoinCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckApplyJoinCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes community_chat_channel_id = 4;
  if (!this->community_chat_channel_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_chat_channel_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  // .KWMsg.ECommunityMemberPosition position = 3;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckApplyJoinCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckApplyJoinCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const AckApplyJoinCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckApplyJoinCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckApplyJoinCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckApplyJoinCommunity)
    MergeFrom(*source);
  }
}

void AckApplyJoinCommunity::MergeFrom(const AckApplyJoinCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckApplyJoinCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.community_chat_channel_id().empty()) {
    _internal_set_community_chat_channel_id(from._internal_community_chat_channel_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
}

void AckApplyJoinCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckApplyJoinCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckApplyJoinCommunity::CopyFrom(const AckApplyJoinCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckApplyJoinCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckApplyJoinCommunity::IsInitialized() const {
  return true;
}

void AckApplyJoinCommunity::InternalSwap(AckApplyJoinCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_chat_channel_id_, GetArenaForAllocation(),
      &other->community_chat_channel_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckApplyJoinCommunity, position_)
      + sizeof(AckApplyJoinCommunity::position_)
      - PROTOBUF_FIELD_OFFSET(AckApplyJoinCommunity, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckApplyJoinCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[144]);
}

// ===================================================================

class ReqCancelJoinCommunity::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqCancelJoinCommunity* msg);
};

const ::KWMsg::Ident&
ReqCancelJoinCommunity::_Internal::player_id(const ReqCancelJoinCommunity* msg) {
  return *msg->player_id_;
}
void ReqCancelJoinCommunity::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqCancelJoinCommunity::ReqCancelJoinCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCancelJoinCommunity)
}
ReqCancelJoinCommunity::ReqCancelJoinCommunity(const ReqCancelJoinCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  community_id_ = from.community_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCancelJoinCommunity)
}

void ReqCancelJoinCommunity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&community_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(community_id_));
}

ReqCancelJoinCommunity::~ReqCancelJoinCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCancelJoinCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCancelJoinCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqCancelJoinCommunity::ArenaDtor(void* object) {
  ReqCancelJoinCommunity* _this = reinterpret_cast< ReqCancelJoinCommunity* >(object);
  (void)_this;
}
void ReqCancelJoinCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCancelJoinCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCancelJoinCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCancelJoinCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  community_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCancelJoinCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCancelJoinCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCancelJoinCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_community_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCancelJoinCommunity)
  return target;
}

size_t ReqCancelJoinCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCancelJoinCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCancelJoinCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCancelJoinCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCancelJoinCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCancelJoinCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCancelJoinCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCancelJoinCommunity)
    MergeFrom(*source);
  }
}

void ReqCancelJoinCommunity::MergeFrom(const ReqCancelJoinCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCancelJoinCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
}

void ReqCancelJoinCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCancelJoinCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCancelJoinCommunity::CopyFrom(const ReqCancelJoinCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCancelJoinCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCancelJoinCommunity::IsInitialized() const {
  return true;
}

void ReqCancelJoinCommunity::InternalSwap(ReqCancelJoinCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqCancelJoinCommunity, community_id_)
      + sizeof(ReqCancelJoinCommunity::community_id_)
      - PROTOBUF_FIELD_OFFSET(ReqCancelJoinCommunity, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCancelJoinCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[145]);
}

// ===================================================================

class AckCancelJoinCommunity::_Internal {
 public:
};

AckCancelJoinCommunity::AckCancelJoinCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCancelJoinCommunity)
}
AckCancelJoinCommunity::AckCancelJoinCommunity(const AckCancelJoinCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCancelJoinCommunity)
}

void AckCancelJoinCommunity::SharedCtor() {
event_code_ = 0;
}

AckCancelJoinCommunity::~AckCancelJoinCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCancelJoinCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCancelJoinCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckCancelJoinCommunity::ArenaDtor(void* object) {
  AckCancelJoinCommunity* _this = reinterpret_cast< AckCancelJoinCommunity* >(object);
  (void)_this;
}
void AckCancelJoinCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCancelJoinCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCancelJoinCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCancelJoinCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCancelJoinCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCancelJoinCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCancelJoinCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCancelJoinCommunity)
  return target;
}

size_t AckCancelJoinCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCancelJoinCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCancelJoinCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCancelJoinCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCancelJoinCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCancelJoinCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCancelJoinCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCancelJoinCommunity)
    MergeFrom(*source);
  }
}

void AckCancelJoinCommunity::MergeFrom(const AckCancelJoinCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCancelJoinCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckCancelJoinCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCancelJoinCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCancelJoinCommunity::CopyFrom(const AckCancelJoinCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCancelJoinCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCancelJoinCommunity::IsInitialized() const {
  return true;
}

void AckCancelJoinCommunity::InternalSwap(AckCancelJoinCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCancelJoinCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[146]);
}

// ===================================================================

class ReqAppliedCommunityList::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqAppliedCommunityList* msg);
};

const ::KWMsg::Ident&
ReqAppliedCommunityList::_Internal::player_id(const ReqAppliedCommunityList* msg) {
  return *msg->player_id_;
}
void ReqAppliedCommunityList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqAppliedCommunityList::ReqAppliedCommunityList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAppliedCommunityList)
}
ReqAppliedCommunityList::ReqAppliedCommunityList(const ReqAppliedCommunityList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAppliedCommunityList)
}

void ReqAppliedCommunityList::SharedCtor() {
player_id_ = nullptr;
}

ReqAppliedCommunityList::~ReqAppliedCommunityList() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAppliedCommunityList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAppliedCommunityList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqAppliedCommunityList::ArenaDtor(void* object) {
  ReqAppliedCommunityList* _this = reinterpret_cast< ReqAppliedCommunityList* >(object);
  (void)_this;
}
void ReqAppliedCommunityList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAppliedCommunityList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAppliedCommunityList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAppliedCommunityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAppliedCommunityList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAppliedCommunityList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAppliedCommunityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAppliedCommunityList)
  return target;
}

size_t ReqAppliedCommunityList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAppliedCommunityList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAppliedCommunityList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAppliedCommunityList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAppliedCommunityList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAppliedCommunityList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAppliedCommunityList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAppliedCommunityList)
    MergeFrom(*source);
  }
}

void ReqAppliedCommunityList::MergeFrom(const ReqAppliedCommunityList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAppliedCommunityList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqAppliedCommunityList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAppliedCommunityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAppliedCommunityList::CopyFrom(const ReqAppliedCommunityList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAppliedCommunityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAppliedCommunityList::IsInitialized() const {
  return true;
}

void ReqAppliedCommunityList::InternalSwap(ReqAppliedCommunityList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAppliedCommunityList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[147]);
}

// ===================================================================

class AckAppliedCommunityList::_Internal {
 public:
};

AckAppliedCommunityList::AckAppliedCommunityList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  applied_community_info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckAppliedCommunityList)
}
AckAppliedCommunityList::AckAppliedCommunityList(const AckAppliedCommunityList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      applied_community_info_list_(from.applied_community_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckAppliedCommunityList)
}

void AckAppliedCommunityList::SharedCtor() {
event_code_ = 0;
}

AckAppliedCommunityList::~AckAppliedCommunityList() {
  // @@protoc_insertion_point(destructor:KWMsg.AckAppliedCommunityList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckAppliedCommunityList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckAppliedCommunityList::ArenaDtor(void* object) {
  AckAppliedCommunityList* _this = reinterpret_cast< AckAppliedCommunityList* >(object);
  (void)_this;
}
void AckAppliedCommunityList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckAppliedCommunityList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckAppliedCommunityList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckAppliedCommunityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applied_community_info_list_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckAppliedCommunityList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.AppliedCommunityInfo applied_community_info_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_applied_community_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckAppliedCommunityList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckAppliedCommunityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.AppliedCommunityInfo applied_community_info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_applied_community_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_applied_community_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckAppliedCommunityList)
  return target;
}

size_t AckAppliedCommunityList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckAppliedCommunityList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.AppliedCommunityInfo applied_community_info_list = 2;
  total_size += 1UL * this->_internal_applied_community_info_list_size();
  for (const auto& msg : this->applied_community_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckAppliedCommunityList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckAppliedCommunityList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckAppliedCommunityList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckAppliedCommunityList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckAppliedCommunityList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckAppliedCommunityList)
    MergeFrom(*source);
  }
}

void AckAppliedCommunityList::MergeFrom(const AckAppliedCommunityList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckAppliedCommunityList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  applied_community_info_list_.MergeFrom(from.applied_community_info_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckAppliedCommunityList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckAppliedCommunityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckAppliedCommunityList::CopyFrom(const AckAppliedCommunityList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckAppliedCommunityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckAppliedCommunityList::IsInitialized() const {
  return true;
}

void AckAppliedCommunityList::InternalSwap(AckAppliedCommunityList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  applied_community_info_list_.InternalSwap(&other->applied_community_info_list_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckAppliedCommunityList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[148]);
}

// ===================================================================

class ReqModifyNameAndDeclaration::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqModifyNameAndDeclaration* msg);
};

const ::KWMsg::Ident&
ReqModifyNameAndDeclaration::_Internal::player_id(const ReqModifyNameAndDeclaration* msg) {
  return *msg->player_id_;
}
void ReqModifyNameAndDeclaration::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqModifyNameAndDeclaration::ReqModifyNameAndDeclaration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqModifyNameAndDeclaration)
}
ReqModifyNameAndDeclaration::ReqModifyNameAndDeclaration(const ReqModifyNameAndDeclaration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  community_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_name().empty()) {
    community_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_name(), 
      GetArenaForAllocation());
  }
  community_declaration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_declaration().empty()) {
    community_declaration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_declaration(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  community_id_ = from.community_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqModifyNameAndDeclaration)
}

void ReqModifyNameAndDeclaration::SharedCtor() {
community_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
community_declaration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&community_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(community_id_));
}

ReqModifyNameAndDeclaration::~ReqModifyNameAndDeclaration() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqModifyNameAndDeclaration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqModifyNameAndDeclaration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  community_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  community_declaration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqModifyNameAndDeclaration::ArenaDtor(void* object) {
  ReqModifyNameAndDeclaration* _this = reinterpret_cast< ReqModifyNameAndDeclaration* >(object);
  (void)_this;
}
void ReqModifyNameAndDeclaration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqModifyNameAndDeclaration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqModifyNameAndDeclaration::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqModifyNameAndDeclaration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  community_name_.ClearToEmpty();
  community_declaration_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  community_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqModifyNameAndDeclaration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_community_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_declaration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_community_declaration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqModifyNameAndDeclaration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqModifyNameAndDeclaration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_community_id(), target);
  }

  // bytes community_name = 3;
  if (!this->community_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_community_name(), target);
  }

  // bytes community_declaration = 4;
  if (!this->community_declaration().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_community_declaration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqModifyNameAndDeclaration)
  return target;
}

size_t ReqModifyNameAndDeclaration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqModifyNameAndDeclaration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes community_name = 3;
  if (!this->community_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_name());
  }

  // bytes community_declaration = 4;
  if (!this->community_declaration().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_declaration());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqModifyNameAndDeclaration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqModifyNameAndDeclaration)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqModifyNameAndDeclaration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqModifyNameAndDeclaration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqModifyNameAndDeclaration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqModifyNameAndDeclaration)
    MergeFrom(*source);
  }
}

void ReqModifyNameAndDeclaration::MergeFrom(const ReqModifyNameAndDeclaration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqModifyNameAndDeclaration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.community_name().empty()) {
    _internal_set_community_name(from._internal_community_name());
  }
  if (!from.community_declaration().empty()) {
    _internal_set_community_declaration(from._internal_community_declaration());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
}

void ReqModifyNameAndDeclaration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqModifyNameAndDeclaration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqModifyNameAndDeclaration::CopyFrom(const ReqModifyNameAndDeclaration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqModifyNameAndDeclaration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqModifyNameAndDeclaration::IsInitialized() const {
  return true;
}

void ReqModifyNameAndDeclaration::InternalSwap(ReqModifyNameAndDeclaration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_name_, GetArenaForAllocation(),
      &other->community_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_declaration_, GetArenaForAllocation(),
      &other->community_declaration_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqModifyNameAndDeclaration, community_id_)
      + sizeof(ReqModifyNameAndDeclaration::community_id_)
      - PROTOBUF_FIELD_OFFSET(ReqModifyNameAndDeclaration, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqModifyNameAndDeclaration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[149]);
}

// ===================================================================

class AckModifyNameAndDeclaration::_Internal {
 public:
};

AckModifyNameAndDeclaration::AckModifyNameAndDeclaration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckModifyNameAndDeclaration)
}
AckModifyNameAndDeclaration::AckModifyNameAndDeclaration(const AckModifyNameAndDeclaration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  community_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_name().empty()) {
    community_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_name(), 
      GetArenaForAllocation());
  }
  community_declaration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_declaration().empty()) {
    community_declaration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_declaration(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckModifyNameAndDeclaration)
}

void AckModifyNameAndDeclaration::SharedCtor() {
community_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
community_declaration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckModifyNameAndDeclaration::~AckModifyNameAndDeclaration() {
  // @@protoc_insertion_point(destructor:KWMsg.AckModifyNameAndDeclaration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckModifyNameAndDeclaration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  community_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  community_declaration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckModifyNameAndDeclaration::ArenaDtor(void* object) {
  AckModifyNameAndDeclaration* _this = reinterpret_cast< AckModifyNameAndDeclaration* >(object);
  (void)_this;
}
void AckModifyNameAndDeclaration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckModifyNameAndDeclaration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckModifyNameAndDeclaration::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckModifyNameAndDeclaration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  community_name_.ClearToEmpty();
  community_declaration_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckModifyNameAndDeclaration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes community_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_community_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_declaration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_community_declaration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckModifyNameAndDeclaration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckModifyNameAndDeclaration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes community_name = 2;
  if (!this->community_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_community_name(), target);
  }

  // bytes community_declaration = 3;
  if (!this->community_declaration().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_community_declaration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckModifyNameAndDeclaration)
  return target;
}

size_t AckModifyNameAndDeclaration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckModifyNameAndDeclaration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes community_name = 2;
  if (!this->community_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_name());
  }

  // bytes community_declaration = 3;
  if (!this->community_declaration().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_declaration());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckModifyNameAndDeclaration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckModifyNameAndDeclaration)
  GOOGLE_DCHECK_NE(&from, this);
  const AckModifyNameAndDeclaration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckModifyNameAndDeclaration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckModifyNameAndDeclaration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckModifyNameAndDeclaration)
    MergeFrom(*source);
  }
}

void AckModifyNameAndDeclaration::MergeFrom(const AckModifyNameAndDeclaration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckModifyNameAndDeclaration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.community_name().empty()) {
    _internal_set_community_name(from._internal_community_name());
  }
  if (!from.community_declaration().empty()) {
    _internal_set_community_declaration(from._internal_community_declaration());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckModifyNameAndDeclaration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckModifyNameAndDeclaration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckModifyNameAndDeclaration::CopyFrom(const AckModifyNameAndDeclaration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckModifyNameAndDeclaration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckModifyNameAndDeclaration::IsInitialized() const {
  return true;
}

void AckModifyNameAndDeclaration::InternalSwap(AckModifyNameAndDeclaration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_name_, GetArenaForAllocation(),
      &other->community_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_declaration_, GetArenaForAllocation(),
      &other->community_declaration_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckModifyNameAndDeclaration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[150]);
}

// ===================================================================

class ReqModifyFlagAndIcon::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqModifyFlagAndIcon* msg);
};

const ::KWMsg::Ident&
ReqModifyFlagAndIcon::_Internal::player_id(const ReqModifyFlagAndIcon* msg) {
  return *msg->player_id_;
}
void ReqModifyFlagAndIcon::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqModifyFlagAndIcon::ReqModifyFlagAndIcon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqModifyFlagAndIcon)
}
ReqModifyFlagAndIcon::ReqModifyFlagAndIcon(const ReqModifyFlagAndIcon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  community_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_flag().empty()) {
    community_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_flag(), 
      GetArenaForAllocation());
  }
  community_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_icon().empty()) {
    community_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_icon(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  community_id_ = from.community_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqModifyFlagAndIcon)
}

void ReqModifyFlagAndIcon::SharedCtor() {
community_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
community_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&community_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(community_id_));
}

ReqModifyFlagAndIcon::~ReqModifyFlagAndIcon() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqModifyFlagAndIcon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqModifyFlagAndIcon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  community_flag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  community_icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqModifyFlagAndIcon::ArenaDtor(void* object) {
  ReqModifyFlagAndIcon* _this = reinterpret_cast< ReqModifyFlagAndIcon* >(object);
  (void)_this;
}
void ReqModifyFlagAndIcon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqModifyFlagAndIcon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqModifyFlagAndIcon::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqModifyFlagAndIcon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  community_flag_.ClearToEmpty();
  community_icon_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  community_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqModifyFlagAndIcon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_community_flag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_icon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_community_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqModifyFlagAndIcon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqModifyFlagAndIcon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_community_id(), target);
  }

  // bytes community_flag = 3;
  if (!this->community_flag().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_community_flag(), target);
  }

  // bytes community_icon = 4;
  if (!this->community_icon().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_community_icon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqModifyFlagAndIcon)
  return target;
}

size_t ReqModifyFlagAndIcon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqModifyFlagAndIcon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes community_flag = 3;
  if (!this->community_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_flag());
  }

  // bytes community_icon = 4;
  if (!this->community_icon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_icon());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqModifyFlagAndIcon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqModifyFlagAndIcon)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqModifyFlagAndIcon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqModifyFlagAndIcon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqModifyFlagAndIcon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqModifyFlagAndIcon)
    MergeFrom(*source);
  }
}

void ReqModifyFlagAndIcon::MergeFrom(const ReqModifyFlagAndIcon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqModifyFlagAndIcon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.community_flag().empty()) {
    _internal_set_community_flag(from._internal_community_flag());
  }
  if (!from.community_icon().empty()) {
    _internal_set_community_icon(from._internal_community_icon());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
}

void ReqModifyFlagAndIcon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqModifyFlagAndIcon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqModifyFlagAndIcon::CopyFrom(const ReqModifyFlagAndIcon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqModifyFlagAndIcon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqModifyFlagAndIcon::IsInitialized() const {
  return true;
}

void ReqModifyFlagAndIcon::InternalSwap(ReqModifyFlagAndIcon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_flag_, GetArenaForAllocation(),
      &other->community_flag_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_icon_, GetArenaForAllocation(),
      &other->community_icon_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqModifyFlagAndIcon, community_id_)
      + sizeof(ReqModifyFlagAndIcon::community_id_)
      - PROTOBUF_FIELD_OFFSET(ReqModifyFlagAndIcon, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqModifyFlagAndIcon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[151]);
}

// ===================================================================

class AckModifyFlagAndIcon::_Internal {
 public:
};

AckModifyFlagAndIcon::AckModifyFlagAndIcon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckModifyFlagAndIcon)
}
AckModifyFlagAndIcon::AckModifyFlagAndIcon(const AckModifyFlagAndIcon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  community_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_flag().empty()) {
    community_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_flag(), 
      GetArenaForAllocation());
  }
  community_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_icon().empty()) {
    community_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_icon(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckModifyFlagAndIcon)
}

void AckModifyFlagAndIcon::SharedCtor() {
community_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
community_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckModifyFlagAndIcon::~AckModifyFlagAndIcon() {
  // @@protoc_insertion_point(destructor:KWMsg.AckModifyFlagAndIcon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckModifyFlagAndIcon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  community_flag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  community_icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckModifyFlagAndIcon::ArenaDtor(void* object) {
  AckModifyFlagAndIcon* _this = reinterpret_cast< AckModifyFlagAndIcon* >(object);
  (void)_this;
}
void AckModifyFlagAndIcon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckModifyFlagAndIcon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckModifyFlagAndIcon::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckModifyFlagAndIcon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  community_flag_.ClearToEmpty();
  community_icon_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckModifyFlagAndIcon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes community_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_community_flag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_community_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckModifyFlagAndIcon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckModifyFlagAndIcon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes community_flag = 2;
  if (!this->community_flag().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_community_flag(), target);
  }

  // bytes community_icon = 3;
  if (!this->community_icon().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_community_icon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckModifyFlagAndIcon)
  return target;
}

size_t AckModifyFlagAndIcon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckModifyFlagAndIcon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes community_flag = 2;
  if (!this->community_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_flag());
  }

  // bytes community_icon = 3;
  if (!this->community_icon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_icon());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckModifyFlagAndIcon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckModifyFlagAndIcon)
  GOOGLE_DCHECK_NE(&from, this);
  const AckModifyFlagAndIcon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckModifyFlagAndIcon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckModifyFlagAndIcon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckModifyFlagAndIcon)
    MergeFrom(*source);
  }
}

void AckModifyFlagAndIcon::MergeFrom(const AckModifyFlagAndIcon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckModifyFlagAndIcon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.community_flag().empty()) {
    _internal_set_community_flag(from._internal_community_flag());
  }
  if (!from.community_icon().empty()) {
    _internal_set_community_icon(from._internal_community_icon());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckModifyFlagAndIcon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckModifyFlagAndIcon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckModifyFlagAndIcon::CopyFrom(const AckModifyFlagAndIcon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckModifyFlagAndIcon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckModifyFlagAndIcon::IsInitialized() const {
  return true;
}

void AckModifyFlagAndIcon::InternalSwap(AckModifyFlagAndIcon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_flag_, GetArenaForAllocation(),
      &other->community_flag_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_icon_, GetArenaForAllocation(),
      &other->community_icon_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckModifyFlagAndIcon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[152]);
}

// ===================================================================

class ReqModifyApprovedRules::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqModifyApprovedRules* msg);
};

const ::KWMsg::Ident&
ReqModifyApprovedRules::_Internal::player_id(const ReqModifyApprovedRules* msg) {
  return *msg->player_id_;
}
void ReqModifyApprovedRules::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqModifyApprovedRules::ReqModifyApprovedRules(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqModifyApprovedRules)
}
ReqModifyApprovedRules::ReqModifyApprovedRules(const ReqModifyApprovedRules& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&community_id_, &from.community_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_restriction_) -
    reinterpret_cast<char*>(&community_id_)) + sizeof(level_restriction_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqModifyApprovedRules)
}

void ReqModifyApprovedRules::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_restriction_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(level_restriction_));
}

ReqModifyApprovedRules::~ReqModifyApprovedRules() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqModifyApprovedRules)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqModifyApprovedRules::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqModifyApprovedRules::ArenaDtor(void* object) {
  ReqModifyApprovedRules* _this = reinterpret_cast< ReqModifyApprovedRules* >(object);
  (void)_this;
}
void ReqModifyApprovedRules::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqModifyApprovedRules::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqModifyApprovedRules::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqModifyApprovedRules)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&community_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_restriction_) -
      reinterpret_cast<char*>(&community_id_)) + sizeof(level_restriction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqModifyApprovedRules::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_approve_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          community_approve_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level_restriction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_restriction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqModifyApprovedRules::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqModifyApprovedRules)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_community_id(), target);
  }

  // int32 community_approve_type = 3;
  if (this->community_approve_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_community_approve_type(), target);
  }

  // int32 level_restriction = 4;
  if (this->level_restriction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_level_restriction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqModifyApprovedRules)
  return target;
}

size_t ReqModifyApprovedRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqModifyApprovedRules)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  // int32 community_approve_type = 3;
  if (this->community_approve_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_approve_type());
  }

  // int32 level_restriction = 4;
  if (this->level_restriction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level_restriction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqModifyApprovedRules::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqModifyApprovedRules)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqModifyApprovedRules* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqModifyApprovedRules>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqModifyApprovedRules)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqModifyApprovedRules)
    MergeFrom(*source);
  }
}

void ReqModifyApprovedRules::MergeFrom(const ReqModifyApprovedRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqModifyApprovedRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
  if (from.community_approve_type() != 0) {
    _internal_set_community_approve_type(from._internal_community_approve_type());
  }
  if (from.level_restriction() != 0) {
    _internal_set_level_restriction(from._internal_level_restriction());
  }
}

void ReqModifyApprovedRules::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqModifyApprovedRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqModifyApprovedRules::CopyFrom(const ReqModifyApprovedRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqModifyApprovedRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqModifyApprovedRules::IsInitialized() const {
  return true;
}

void ReqModifyApprovedRules::InternalSwap(ReqModifyApprovedRules* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqModifyApprovedRules, level_restriction_)
      + sizeof(ReqModifyApprovedRules::level_restriction_)
      - PROTOBUF_FIELD_OFFSET(ReqModifyApprovedRules, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqModifyApprovedRules::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[153]);
}

// ===================================================================

class AckModifyApprovedRules::_Internal {
 public:
};

AckModifyApprovedRules::AckModifyApprovedRules(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckModifyApprovedRules)
}
AckModifyApprovedRules::AckModifyApprovedRules(const AckModifyApprovedRules& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_restriction_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(level_restriction_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckModifyApprovedRules)
}

void AckModifyApprovedRules::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_restriction_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(level_restriction_));
}

AckModifyApprovedRules::~AckModifyApprovedRules() {
  // @@protoc_insertion_point(destructor:KWMsg.AckModifyApprovedRules)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckModifyApprovedRules::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckModifyApprovedRules::ArenaDtor(void* object) {
  AckModifyApprovedRules* _this = reinterpret_cast< AckModifyApprovedRules* >(object);
  (void)_this;
}
void AckModifyApprovedRules::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckModifyApprovedRules::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckModifyApprovedRules::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckModifyApprovedRules)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_restriction_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(level_restriction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckModifyApprovedRules::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 community_approve_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          community_approve_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level_restriction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          level_restriction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckModifyApprovedRules::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckModifyApprovedRules)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // int32 community_approve_type = 2;
  if (this->community_approve_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_community_approve_type(), target);
  }

  // int32 level_restriction = 3;
  if (this->level_restriction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_level_restriction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckModifyApprovedRules)
  return target;
}

size_t AckModifyApprovedRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckModifyApprovedRules)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 community_approve_type = 2;
  if (this->community_approve_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_approve_type());
  }

  // int32 level_restriction = 3;
  if (this->level_restriction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level_restriction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckModifyApprovedRules::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckModifyApprovedRules)
  GOOGLE_DCHECK_NE(&from, this);
  const AckModifyApprovedRules* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckModifyApprovedRules>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckModifyApprovedRules)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckModifyApprovedRules)
    MergeFrom(*source);
  }
}

void AckModifyApprovedRules::MergeFrom(const AckModifyApprovedRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckModifyApprovedRules)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.community_approve_type() != 0) {
    _internal_set_community_approve_type(from._internal_community_approve_type());
  }
  if (from.level_restriction() != 0) {
    _internal_set_level_restriction(from._internal_level_restriction());
  }
}

void AckModifyApprovedRules::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckModifyApprovedRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckModifyApprovedRules::CopyFrom(const AckModifyApprovedRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckModifyApprovedRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckModifyApprovedRules::IsInitialized() const {
  return true;
}

void AckModifyApprovedRules::InternalSwap(AckModifyApprovedRules* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckModifyApprovedRules, level_restriction_)
      + sizeof(AckModifyApprovedRules::level_restriction_)
      - PROTOBUF_FIELD_OFFSET(AckModifyApprovedRules, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckModifyApprovedRules::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[154]);
}

// ===================================================================

class ReqPromotionOrDemotionManager::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqPromotionOrDemotionManager* msg);
  static const ::KWMsg::Ident& target_id(const ReqPromotionOrDemotionManager* msg);
};

const ::KWMsg::Ident&
ReqPromotionOrDemotionManager::_Internal::player_id(const ReqPromotionOrDemotionManager* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqPromotionOrDemotionManager::_Internal::target_id(const ReqPromotionOrDemotionManager* msg) {
  return *msg->target_id_;
}
void ReqPromotionOrDemotionManager::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqPromotionOrDemotionManager::clear_target_id() {
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
}
ReqPromotionOrDemotionManager::ReqPromotionOrDemotionManager(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqPromotionOrDemotionManager)
}
ReqPromotionOrDemotionManager::ReqPromotionOrDemotionManager(const ReqPromotionOrDemotionManager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::KWMsg::Ident(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  ::memcpy(&community_id_, &from.community_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&opt_type_) -
    reinterpret_cast<char*>(&community_id_)) + sizeof(opt_type_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqPromotionOrDemotionManager)
}

void ReqPromotionOrDemotionManager::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opt_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(opt_type_));
}

ReqPromotionOrDemotionManager::~ReqPromotionOrDemotionManager() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqPromotionOrDemotionManager)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqPromotionOrDemotionManager::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void ReqPromotionOrDemotionManager::ArenaDtor(void* object) {
  ReqPromotionOrDemotionManager* _this = reinterpret_cast< ReqPromotionOrDemotionManager* >(object);
  (void)_this;
}
void ReqPromotionOrDemotionManager::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqPromotionOrDemotionManager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqPromotionOrDemotionManager::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqPromotionOrDemotionManager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
  ::memset(&community_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opt_type_) -
      reinterpret_cast<char*>(&community_id_)) + sizeof(opt_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqPromotionOrDemotionManager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 opt_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          opt_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqPromotionOrDemotionManager::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqPromotionOrDemotionManager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  // int32 community_id = 3;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_community_id(), target);
  }

  // int32 opt_type = 4;
  if (this->opt_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_opt_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqPromotionOrDemotionManager)
  return target;
}

size_t ReqPromotionOrDemotionManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqPromotionOrDemotionManager)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  // int32 community_id = 3;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  // int32 opt_type = 4;
  if (this->opt_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_opt_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqPromotionOrDemotionManager::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqPromotionOrDemotionManager)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqPromotionOrDemotionManager* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqPromotionOrDemotionManager>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqPromotionOrDemotionManager)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqPromotionOrDemotionManager)
    MergeFrom(*source);
  }
}

void ReqPromotionOrDemotionManager::MergeFrom(const ReqPromotionOrDemotionManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqPromotionOrDemotionManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_target_id()) {
    _internal_mutable_target_id()->::KWMsg::Ident::MergeFrom(from._internal_target_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
  if (from.opt_type() != 0) {
    _internal_set_opt_type(from._internal_opt_type());
  }
}

void ReqPromotionOrDemotionManager::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqPromotionOrDemotionManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPromotionOrDemotionManager::CopyFrom(const ReqPromotionOrDemotionManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqPromotionOrDemotionManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPromotionOrDemotionManager::IsInitialized() const {
  return true;
}

void ReqPromotionOrDemotionManager::InternalSwap(ReqPromotionOrDemotionManager* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqPromotionOrDemotionManager, opt_type_)
      + sizeof(ReqPromotionOrDemotionManager::opt_type_)
      - PROTOBUF_FIELD_OFFSET(ReqPromotionOrDemotionManager, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqPromotionOrDemotionManager::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[155]);
}

// ===================================================================

class AckPromotionOrDemotionManager::_Internal {
 public:
};

AckPromotionOrDemotionManager::AckPromotionOrDemotionManager(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckPromotionOrDemotionManager)
}
AckPromotionOrDemotionManager::AckPromotionOrDemotionManager(const AckPromotionOrDemotionManager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckPromotionOrDemotionManager)
}

void AckPromotionOrDemotionManager::SharedCtor() {
event_code_ = 0;
}

AckPromotionOrDemotionManager::~AckPromotionOrDemotionManager() {
  // @@protoc_insertion_point(destructor:KWMsg.AckPromotionOrDemotionManager)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckPromotionOrDemotionManager::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckPromotionOrDemotionManager::ArenaDtor(void* object) {
  AckPromotionOrDemotionManager* _this = reinterpret_cast< AckPromotionOrDemotionManager* >(object);
  (void)_this;
}
void AckPromotionOrDemotionManager::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckPromotionOrDemotionManager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckPromotionOrDemotionManager::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckPromotionOrDemotionManager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckPromotionOrDemotionManager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckPromotionOrDemotionManager::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckPromotionOrDemotionManager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckPromotionOrDemotionManager)
  return target;
}

size_t AckPromotionOrDemotionManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckPromotionOrDemotionManager)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPromotionOrDemotionManager::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckPromotionOrDemotionManager)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPromotionOrDemotionManager* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckPromotionOrDemotionManager>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckPromotionOrDemotionManager)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckPromotionOrDemotionManager)
    MergeFrom(*source);
  }
}

void AckPromotionOrDemotionManager::MergeFrom(const AckPromotionOrDemotionManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckPromotionOrDemotionManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckPromotionOrDemotionManager::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckPromotionOrDemotionManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPromotionOrDemotionManager::CopyFrom(const AckPromotionOrDemotionManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckPromotionOrDemotionManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPromotionOrDemotionManager::IsInitialized() const {
  return true;
}

void AckPromotionOrDemotionManager::InternalSwap(AckPromotionOrDemotionManager* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckPromotionOrDemotionManager::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[156]);
}

// ===================================================================

class ReqAppliedPlayerList::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqAppliedPlayerList* msg);
};

const ::KWMsg::Ident&
ReqAppliedPlayerList::_Internal::player_id(const ReqAppliedPlayerList* msg) {
  return *msg->player_id_;
}
void ReqAppliedPlayerList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqAppliedPlayerList::ReqAppliedPlayerList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAppliedPlayerList)
}
ReqAppliedPlayerList::ReqAppliedPlayerList(const ReqAppliedPlayerList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  community_id_ = from.community_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAppliedPlayerList)
}

void ReqAppliedPlayerList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&community_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(community_id_));
}

ReqAppliedPlayerList::~ReqAppliedPlayerList() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAppliedPlayerList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAppliedPlayerList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqAppliedPlayerList::ArenaDtor(void* object) {
  ReqAppliedPlayerList* _this = reinterpret_cast< ReqAppliedPlayerList* >(object);
  (void)_this;
}
void ReqAppliedPlayerList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAppliedPlayerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAppliedPlayerList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAppliedPlayerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  community_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAppliedPlayerList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAppliedPlayerList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAppliedPlayerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_community_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAppliedPlayerList)
  return target;
}

size_t ReqAppliedPlayerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAppliedPlayerList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAppliedPlayerList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAppliedPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAppliedPlayerList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAppliedPlayerList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAppliedPlayerList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAppliedPlayerList)
    MergeFrom(*source);
  }
}

void ReqAppliedPlayerList::MergeFrom(const ReqAppliedPlayerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAppliedPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
}

void ReqAppliedPlayerList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAppliedPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAppliedPlayerList::CopyFrom(const ReqAppliedPlayerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAppliedPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAppliedPlayerList::IsInitialized() const {
  return true;
}

void ReqAppliedPlayerList::InternalSwap(ReqAppliedPlayerList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqAppliedPlayerList, community_id_)
      + sizeof(ReqAppliedPlayerList::community_id_)
      - PROTOBUF_FIELD_OFFSET(ReqAppliedPlayerList, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAppliedPlayerList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[157]);
}

// ===================================================================

class AckAppliedPlayerList::_Internal {
 public:
};

AckAppliedPlayerList::AckAppliedPlayerList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  applied_player_info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckAppliedPlayerList)
}
AckAppliedPlayerList::AckAppliedPlayerList(const AckAppliedPlayerList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      applied_player_info_list_(from.applied_player_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckAppliedPlayerList)
}

void AckAppliedPlayerList::SharedCtor() {
event_code_ = 0;
}

AckAppliedPlayerList::~AckAppliedPlayerList() {
  // @@protoc_insertion_point(destructor:KWMsg.AckAppliedPlayerList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckAppliedPlayerList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckAppliedPlayerList::ArenaDtor(void* object) {
  AckAppliedPlayerList* _this = reinterpret_cast< AckAppliedPlayerList* >(object);
  (void)_this;
}
void AckAppliedPlayerList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckAppliedPlayerList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckAppliedPlayerList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckAppliedPlayerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applied_player_info_list_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckAppliedPlayerList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.AppliedPlayerInfo applied_player_info_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_applied_player_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckAppliedPlayerList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckAppliedPlayerList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.AppliedPlayerInfo applied_player_info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_applied_player_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_applied_player_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckAppliedPlayerList)
  return target;
}

size_t AckAppliedPlayerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckAppliedPlayerList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.AppliedPlayerInfo applied_player_info_list = 2;
  total_size += 1UL * this->_internal_applied_player_info_list_size();
  for (const auto& msg : this->applied_player_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckAppliedPlayerList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckAppliedPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckAppliedPlayerList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckAppliedPlayerList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckAppliedPlayerList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckAppliedPlayerList)
    MergeFrom(*source);
  }
}

void AckAppliedPlayerList::MergeFrom(const AckAppliedPlayerList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckAppliedPlayerList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  applied_player_info_list_.MergeFrom(from.applied_player_info_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckAppliedPlayerList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckAppliedPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckAppliedPlayerList::CopyFrom(const AckAppliedPlayerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckAppliedPlayerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckAppliedPlayerList::IsInitialized() const {
  return true;
}

void AckAppliedPlayerList::InternalSwap(AckAppliedPlayerList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  applied_player_info_list_.InternalSwap(&other->applied_player_info_list_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckAppliedPlayerList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[158]);
}

// ===================================================================

class ReqDealWithJoinCommunity::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqDealWithJoinCommunity* msg);
  static const ::KWMsg::Ident& target_id(const ReqDealWithJoinCommunity* msg);
};

const ::KWMsg::Ident&
ReqDealWithJoinCommunity::_Internal::player_id(const ReqDealWithJoinCommunity* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqDealWithJoinCommunity::_Internal::target_id(const ReqDealWithJoinCommunity* msg) {
  return *msg->target_id_;
}
void ReqDealWithJoinCommunity::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqDealWithJoinCommunity::clear_target_id() {
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
}
ReqDealWithJoinCommunity::ReqDealWithJoinCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqDealWithJoinCommunity)
}
ReqDealWithJoinCommunity::ReqDealWithJoinCommunity(const ReqDealWithJoinCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::KWMsg::Ident(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  ::memcpy(&community_id_, &from.community_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&opt_type_) -
    reinterpret_cast<char*>(&community_id_)) + sizeof(opt_type_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqDealWithJoinCommunity)
}

void ReqDealWithJoinCommunity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opt_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(opt_type_));
}

ReqDealWithJoinCommunity::~ReqDealWithJoinCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqDealWithJoinCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqDealWithJoinCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void ReqDealWithJoinCommunity::ArenaDtor(void* object) {
  ReqDealWithJoinCommunity* _this = reinterpret_cast< ReqDealWithJoinCommunity* >(object);
  (void)_this;
}
void ReqDealWithJoinCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqDealWithJoinCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDealWithJoinCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqDealWithJoinCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
  ::memset(&community_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opt_type_) -
      reinterpret_cast<char*>(&community_id_)) + sizeof(opt_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDealWithJoinCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 opt_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          opt_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqDealWithJoinCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqDealWithJoinCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  // int32 community_id = 3;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_community_id(), target);
  }

  // int32 opt_type = 4;
  if (this->opt_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_opt_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqDealWithJoinCommunity)
  return target;
}

size_t ReqDealWithJoinCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqDealWithJoinCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  // int32 community_id = 3;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  // int32 opt_type = 4;
  if (this->opt_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_opt_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqDealWithJoinCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqDealWithJoinCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqDealWithJoinCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqDealWithJoinCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqDealWithJoinCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqDealWithJoinCommunity)
    MergeFrom(*source);
  }
}

void ReqDealWithJoinCommunity::MergeFrom(const ReqDealWithJoinCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqDealWithJoinCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_target_id()) {
    _internal_mutable_target_id()->::KWMsg::Ident::MergeFrom(from._internal_target_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
  if (from.opt_type() != 0) {
    _internal_set_opt_type(from._internal_opt_type());
  }
}

void ReqDealWithJoinCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqDealWithJoinCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDealWithJoinCommunity::CopyFrom(const ReqDealWithJoinCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqDealWithJoinCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDealWithJoinCommunity::IsInitialized() const {
  return true;
}

void ReqDealWithJoinCommunity::InternalSwap(ReqDealWithJoinCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqDealWithJoinCommunity, opt_type_)
      + sizeof(ReqDealWithJoinCommunity::opt_type_)
      - PROTOBUF_FIELD_OFFSET(ReqDealWithJoinCommunity, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDealWithJoinCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[159]);
}

// ===================================================================

class AckDealWithJoinCommunity::_Internal {
 public:
};

AckDealWithJoinCommunity::AckDealWithJoinCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckDealWithJoinCommunity)
}
AckDealWithJoinCommunity::AckDealWithJoinCommunity(const AckDealWithJoinCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckDealWithJoinCommunity)
}

void AckDealWithJoinCommunity::SharedCtor() {
event_code_ = 0;
}

AckDealWithJoinCommunity::~AckDealWithJoinCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.AckDealWithJoinCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckDealWithJoinCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckDealWithJoinCommunity::ArenaDtor(void* object) {
  AckDealWithJoinCommunity* _this = reinterpret_cast< AckDealWithJoinCommunity* >(object);
  (void)_this;
}
void AckDealWithJoinCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckDealWithJoinCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckDealWithJoinCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckDealWithJoinCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckDealWithJoinCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckDealWithJoinCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckDealWithJoinCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckDealWithJoinCommunity)
  return target;
}

size_t AckDealWithJoinCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckDealWithJoinCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckDealWithJoinCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckDealWithJoinCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const AckDealWithJoinCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckDealWithJoinCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckDealWithJoinCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckDealWithJoinCommunity)
    MergeFrom(*source);
  }
}

void AckDealWithJoinCommunity::MergeFrom(const AckDealWithJoinCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckDealWithJoinCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckDealWithJoinCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckDealWithJoinCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDealWithJoinCommunity::CopyFrom(const AckDealWithJoinCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckDealWithJoinCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDealWithJoinCommunity::IsInitialized() const {
  return true;
}

void AckDealWithJoinCommunity::InternalSwap(AckDealWithJoinCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckDealWithJoinCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[160]);
}

// ===================================================================

class ReqQuitCommunity::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqQuitCommunity* msg);
};

const ::KWMsg::Ident&
ReqQuitCommunity::_Internal::player_id(const ReqQuitCommunity* msg) {
  return *msg->player_id_;
}
void ReqQuitCommunity::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqQuitCommunity::ReqQuitCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqQuitCommunity)
}
ReqQuitCommunity::ReqQuitCommunity(const ReqQuitCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  community_id_ = from.community_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqQuitCommunity)
}

void ReqQuitCommunity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&community_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(community_id_));
}

ReqQuitCommunity::~ReqQuitCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqQuitCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqQuitCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqQuitCommunity::ArenaDtor(void* object) {
  ReqQuitCommunity* _this = reinterpret_cast< ReqQuitCommunity* >(object);
  (void)_this;
}
void ReqQuitCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqQuitCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqQuitCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqQuitCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  community_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqQuitCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqQuitCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqQuitCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_community_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqQuitCommunity)
  return target;
}

size_t ReqQuitCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqQuitCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqQuitCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqQuitCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqQuitCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqQuitCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqQuitCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqQuitCommunity)
    MergeFrom(*source);
  }
}

void ReqQuitCommunity::MergeFrom(const ReqQuitCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqQuitCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
}

void ReqQuitCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqQuitCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqQuitCommunity::CopyFrom(const ReqQuitCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqQuitCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqQuitCommunity::IsInitialized() const {
  return true;
}

void ReqQuitCommunity::InternalSwap(ReqQuitCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqQuitCommunity, community_id_)
      + sizeof(ReqQuitCommunity::community_id_)
      - PROTOBUF_FIELD_OFFSET(ReqQuitCommunity, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqQuitCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[161]);
}

// ===================================================================

class AckQuitCommunity::_Internal {
 public:
};

AckQuitCommunity::AckQuitCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckQuitCommunity)
}
AckQuitCommunity::AckQuitCommunity(const AckQuitCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  community_chat_channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_chat_channel_id().empty()) {
    community_chat_channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_chat_channel_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckQuitCommunity)
}

void AckQuitCommunity::SharedCtor() {
community_chat_channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(position_));
}

AckQuitCommunity::~AckQuitCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.AckQuitCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckQuitCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  community_chat_channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckQuitCommunity::ArenaDtor(void* object) {
  AckQuitCommunity* _this = reinterpret_cast< AckQuitCommunity* >(object);
  (void)_this;
}
void AckQuitCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckQuitCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckQuitCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckQuitCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  community_chat_channel_id_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckQuitCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 community_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ECommunityMemberPosition position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_position(static_cast<::KWMsg::ECommunityMemberPosition>(val));
        } else goto handle_unusual;
        continue;
      // bytes community_chat_channel_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_community_chat_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckQuitCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckQuitCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_community_id(), target);
  }

  // .KWMsg.ECommunityMemberPosition position = 3;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_position(), target);
  }

  // bytes community_chat_channel_id = 4;
  if (!this->community_chat_channel_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_community_chat_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckQuitCommunity)
  return target;
}

size_t AckQuitCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckQuitCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes community_chat_channel_id = 4;
  if (!this->community_chat_channel_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_chat_channel_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  // .KWMsg.ECommunityMemberPosition position = 3;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckQuitCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckQuitCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const AckQuitCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckQuitCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckQuitCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckQuitCommunity)
    MergeFrom(*source);
  }
}

void AckQuitCommunity::MergeFrom(const AckQuitCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckQuitCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.community_chat_channel_id().empty()) {
    _internal_set_community_chat_channel_id(from._internal_community_chat_channel_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
}

void AckQuitCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckQuitCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckQuitCommunity::CopyFrom(const AckQuitCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckQuitCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckQuitCommunity::IsInitialized() const {
  return true;
}

void AckQuitCommunity::InternalSwap(AckQuitCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_chat_channel_id_, GetArenaForAllocation(),
      &other->community_chat_channel_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckQuitCommunity, position_)
      + sizeof(AckQuitCommunity::position_)
      - PROTOBUF_FIELD_OFFSET(AckQuitCommunity, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckQuitCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[162]);
}

// ===================================================================

class ReqGetOutOfMyCommunity::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqGetOutOfMyCommunity* msg);
  static const ::KWMsg::Ident& target_id(const ReqGetOutOfMyCommunity* msg);
};

const ::KWMsg::Ident&
ReqGetOutOfMyCommunity::_Internal::player_id(const ReqGetOutOfMyCommunity* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqGetOutOfMyCommunity::_Internal::target_id(const ReqGetOutOfMyCommunity* msg) {
  return *msg->target_id_;
}
void ReqGetOutOfMyCommunity::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqGetOutOfMyCommunity::clear_target_id() {
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
}
ReqGetOutOfMyCommunity::ReqGetOutOfMyCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqGetOutOfMyCommunity)
}
ReqGetOutOfMyCommunity::ReqGetOutOfMyCommunity(const ReqGetOutOfMyCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::KWMsg::Ident(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  community_id_ = from.community_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqGetOutOfMyCommunity)
}

void ReqGetOutOfMyCommunity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&community_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(community_id_));
}

ReqGetOutOfMyCommunity::~ReqGetOutOfMyCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqGetOutOfMyCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqGetOutOfMyCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void ReqGetOutOfMyCommunity::ArenaDtor(void* object) {
  ReqGetOutOfMyCommunity* _this = reinterpret_cast< ReqGetOutOfMyCommunity* >(object);
  (void)_this;
}
void ReqGetOutOfMyCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetOutOfMyCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetOutOfMyCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqGetOutOfMyCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
  community_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetOutOfMyCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetOutOfMyCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqGetOutOfMyCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  // int32 community_id = 3;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_community_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqGetOutOfMyCommunity)
  return target;
}

size_t ReqGetOutOfMyCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqGetOutOfMyCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  // int32 community_id = 3;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetOutOfMyCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqGetOutOfMyCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetOutOfMyCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetOutOfMyCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqGetOutOfMyCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqGetOutOfMyCommunity)
    MergeFrom(*source);
  }
}

void ReqGetOutOfMyCommunity::MergeFrom(const ReqGetOutOfMyCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqGetOutOfMyCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_target_id()) {
    _internal_mutable_target_id()->::KWMsg::Ident::MergeFrom(from._internal_target_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
}

void ReqGetOutOfMyCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqGetOutOfMyCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetOutOfMyCommunity::CopyFrom(const ReqGetOutOfMyCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqGetOutOfMyCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetOutOfMyCommunity::IsInitialized() const {
  return true;
}

void ReqGetOutOfMyCommunity::InternalSwap(ReqGetOutOfMyCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqGetOutOfMyCommunity, community_id_)
      + sizeof(ReqGetOutOfMyCommunity::community_id_)
      - PROTOBUF_FIELD_OFFSET(ReqGetOutOfMyCommunity, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetOutOfMyCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[163]);
}

// ===================================================================

class AckGetOutOfMyCommunity::_Internal {
 public:
};

AckGetOutOfMyCommunity::AckGetOutOfMyCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckGetOutOfMyCommunity)
}
AckGetOutOfMyCommunity::AckGetOutOfMyCommunity(const AckGetOutOfMyCommunity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckGetOutOfMyCommunity)
}

void AckGetOutOfMyCommunity::SharedCtor() {
event_code_ = 0;
}

AckGetOutOfMyCommunity::~AckGetOutOfMyCommunity() {
  // @@protoc_insertion_point(destructor:KWMsg.AckGetOutOfMyCommunity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckGetOutOfMyCommunity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckGetOutOfMyCommunity::ArenaDtor(void* object) {
  AckGetOutOfMyCommunity* _this = reinterpret_cast< AckGetOutOfMyCommunity* >(object);
  (void)_this;
}
void AckGetOutOfMyCommunity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckGetOutOfMyCommunity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckGetOutOfMyCommunity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckGetOutOfMyCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckGetOutOfMyCommunity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckGetOutOfMyCommunity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckGetOutOfMyCommunity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckGetOutOfMyCommunity)
  return target;
}

size_t AckGetOutOfMyCommunity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckGetOutOfMyCommunity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckGetOutOfMyCommunity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckGetOutOfMyCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetOutOfMyCommunity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckGetOutOfMyCommunity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckGetOutOfMyCommunity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckGetOutOfMyCommunity)
    MergeFrom(*source);
  }
}

void AckGetOutOfMyCommunity::MergeFrom(const AckGetOutOfMyCommunity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckGetOutOfMyCommunity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckGetOutOfMyCommunity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckGetOutOfMyCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetOutOfMyCommunity::CopyFrom(const AckGetOutOfMyCommunity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckGetOutOfMyCommunity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetOutOfMyCommunity::IsInitialized() const {
  return true;
}

void AckGetOutOfMyCommunity::InternalSwap(AckGetOutOfMyCommunity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckGetOutOfMyCommunity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[164]);
}

// ===================================================================

class ReqCommunitySignIn::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqCommunitySignIn* msg);
};

const ::KWMsg::Ident&
ReqCommunitySignIn::_Internal::player_id(const ReqCommunitySignIn* msg) {
  return *msg->player_id_;
}
void ReqCommunitySignIn::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqCommunitySignIn::ReqCommunitySignIn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCommunitySignIn)
}
ReqCommunitySignIn::ReqCommunitySignIn(const ReqCommunitySignIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  community_id_ = from.community_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCommunitySignIn)
}

void ReqCommunitySignIn::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&community_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(community_id_));
}

ReqCommunitySignIn::~ReqCommunitySignIn() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCommunitySignIn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCommunitySignIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqCommunitySignIn::ArenaDtor(void* object) {
  ReqCommunitySignIn* _this = reinterpret_cast< ReqCommunitySignIn* >(object);
  (void)_this;
}
void ReqCommunitySignIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCommunitySignIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCommunitySignIn::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCommunitySignIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  community_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCommunitySignIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCommunitySignIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCommunitySignIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_community_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCommunitySignIn)
  return target;
}

size_t ReqCommunitySignIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCommunitySignIn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 community_id = 2;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCommunitySignIn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCommunitySignIn)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCommunitySignIn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCommunitySignIn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCommunitySignIn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCommunitySignIn)
    MergeFrom(*source);
  }
}

void ReqCommunitySignIn::MergeFrom(const ReqCommunitySignIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCommunitySignIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
}

void ReqCommunitySignIn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCommunitySignIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCommunitySignIn::CopyFrom(const ReqCommunitySignIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCommunitySignIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCommunitySignIn::IsInitialized() const {
  return true;
}

void ReqCommunitySignIn::InternalSwap(ReqCommunitySignIn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqCommunitySignIn, community_id_)
      + sizeof(ReqCommunitySignIn::community_id_)
      - PROTOBUF_FIELD_OFFSET(ReqCommunitySignIn, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCommunitySignIn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[165]);
}

// ===================================================================

class AckCommunitySignIn::_Internal {
 public:
};

AckCommunitySignIn::AckCommunitySignIn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCommunitySignIn)
}
AckCommunitySignIn::AckCommunitySignIn(const AckCommunitySignIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCommunitySignIn)
}

void AckCommunitySignIn::SharedCtor() {
event_code_ = 0;
}

AckCommunitySignIn::~AckCommunitySignIn() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCommunitySignIn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCommunitySignIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckCommunitySignIn::ArenaDtor(void* object) {
  AckCommunitySignIn* _this = reinterpret_cast< AckCommunitySignIn* >(object);
  (void)_this;
}
void AckCommunitySignIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCommunitySignIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCommunitySignIn::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCommunitySignIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCommunitySignIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RewardInfo reward_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCommunitySignIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCommunitySignIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.RewardInfo reward_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reward_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCommunitySignIn)
  return target;
}

size_t AckCommunitySignIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCommunitySignIn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo reward_list = 2;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCommunitySignIn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCommunitySignIn)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCommunitySignIn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCommunitySignIn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCommunitySignIn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCommunitySignIn)
    MergeFrom(*source);
  }
}

void AckCommunitySignIn::MergeFrom(const AckCommunitySignIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCommunitySignIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckCommunitySignIn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCommunitySignIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCommunitySignIn::CopyFrom(const AckCommunitySignIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCommunitySignIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCommunitySignIn::IsInitialized() const {
  return true;
}

void AckCommunitySignIn::InternalSwap(AckCommunitySignIn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCommunitySignIn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[166]);
}

// ===================================================================

class PlayerBaseInfo::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const PlayerBaseInfo* msg);
};

const ::KWMsg::Ident&
PlayerBaseInfo::_Internal::player_id(const PlayerBaseInfo* msg) {
  return *msg->player_id_;
}
void PlayerBaseInfo::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
PlayerBaseInfo::PlayerBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PlayerBaseInfo)
}
PlayerBaseInfo::PlayerBaseInfo(const PlayerBaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_url(), 
      GetArenaForAllocation());
  }
  avatar_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_frame().empty()) {
    avatar_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_frame(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  community_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_name().empty()) {
    community_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&offline_ts_, &from.offline_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&community_id_) -
    reinterpret_cast<char*>(&offline_ts_)) + sizeof(community_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.PlayerBaseInfo)
}

void PlayerBaseInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
community_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&community_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(community_id_));
}

PlayerBaseInfo::~PlayerBaseInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.PlayerBaseInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerBaseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  community_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void PlayerBaseInfo::ArenaDtor(void* object) {
  PlayerBaseInfo* _this = reinterpret_cast< PlayerBaseInfo* >(object);
  (void)_this;
}
void PlayerBaseInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerBaseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PlayerBaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  avatar_url_.ClearToEmpty();
  avatar_frame_.ClearToEmpty();
  title_.ClearToEmpty();
  community_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&offline_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&community_id_) -
      reinterpret_cast<char*>(&offline_ts_)) + sizeof(community_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerBaseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatar_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatar_frame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_avatar_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offline_ts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          offline_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 community_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          community_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_community_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerBaseInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PlayerBaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes name = 2;
  if (!this->name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes avatar_url = 3;
  if (!this->avatar_url().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_avatar_url(), target);
  }

  // bytes avatar_frame = 4;
  if (!this->avatar_frame().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_avatar_frame(), target);
  }

  // bytes title = 5;
  if (!this->title().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_title(), target);
  }

  // int64 offline_ts = 6;
  if (this->offline_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_offline_ts(), target);
  }

  // int32 level = 7;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_level(), target);
  }

  // int32 community_id = 8;
  if (this->community_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_community_id(), target);
  }

  // bytes community_name = 9;
  if (!this->community_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_community_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PlayerBaseInfo)
  return target;
}

size_t PlayerBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PlayerBaseInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes avatar_url = 3;
  if (!this->avatar_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar_url());
  }

  // bytes avatar_frame = 4;
  if (!this->avatar_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar_frame());
  }

  // bytes title = 5;
  if (!this->title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_title());
  }

  // bytes community_name = 9;
  if (!this->community_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int64 offline_ts = 6;
  if (this->offline_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offline_ts());
  }

  // int32 level = 7;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 community_id = 8;
  if (this->community_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_community_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerBaseInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PlayerBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerBaseInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerBaseInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PlayerBaseInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PlayerBaseInfo)
    MergeFrom(*source);
  }
}

void PlayerBaseInfo::MergeFrom(const PlayerBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PlayerBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from.avatar_url().empty()) {
    _internal_set_avatar_url(from._internal_avatar_url());
  }
  if (!from.avatar_frame().empty()) {
    _internal_set_avatar_frame(from._internal_avatar_frame());
  }
  if (!from.title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from.community_name().empty()) {
    _internal_set_community_name(from._internal_community_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.offline_ts() != 0) {
    _internal_set_offline_ts(from._internal_offline_ts());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.community_id() != 0) {
    _internal_set_community_id(from._internal_community_id());
  }
}

void PlayerBaseInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PlayerBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBaseInfo::CopyFrom(const PlayerBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PlayerBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBaseInfo::IsInitialized() const {
  return true;
}

void PlayerBaseInfo::InternalSwap(PlayerBaseInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_url_, GetArenaForAllocation(),
      &other->avatar_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_frame_, GetArenaForAllocation(),
      &other->avatar_frame_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, GetArenaForAllocation(),
      &other->title_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_name_, GetArenaForAllocation(),
      &other->community_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerBaseInfo, community_id_)
      + sizeof(PlayerBaseInfo::community_id_)
      - PROTOBUF_FIELD_OFFSET(PlayerBaseInfo, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerBaseInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[167]);
}

// ===================================================================

class FriendInfo::_Internal {
 public:
  static const ::KWMsg::PlayerBaseInfo& base_info(const FriendInfo* msg);
};

const ::KWMsg::PlayerBaseInfo&
FriendInfo::_Internal::base_info(const FriendInfo* msg) {
  return *msg->base_info_;
}
FriendInfo::FriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.FriendInfo)
}
FriendInfo::FriendInfo(const FriendInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base_info()) {
    base_info_ = new ::KWMsg::PlayerBaseInfo(*from.base_info_);
  } else {
    base_info_ = nullptr;
  }
  ::memcpy(&add_ts_, &from.add_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_collect_) -
    reinterpret_cast<char*>(&add_ts_)) + sizeof(is_collect_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.FriendInfo)
}

void FriendInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_collect_) -
    reinterpret_cast<char*>(&base_info_)) + sizeof(is_collect_));
}

FriendInfo::~FriendInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.FriendInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FriendInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_info_;
}

void FriendInfo::ArenaDtor(void* object) {
  FriendInfo* _this = reinterpret_cast< FriendInfo* >(object);
  (void)_this;
}
void FriendInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.FriendInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && base_info_ != nullptr) {
    delete base_info_;
  }
  base_info_ = nullptr;
  ::memset(&add_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_collect_) -
      reinterpret_cast<char*>(&add_ts_)) + sizeof(is_collect_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.PlayerBaseInfo base_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_collect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_collect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 add_ts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          add_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.FriendInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.PlayerBaseInfo base_info = 1;
  if (this->has_base_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base_info(this), target, stream);
  }

  // int32 is_collect = 2;
  if (this->is_collect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_is_collect(), target);
  }

  // int64 add_ts = 3;
  if (this->add_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_add_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.FriendInfo)
  return target;
}

size_t FriendInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.FriendInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.PlayerBaseInfo base_info = 1;
  if (this->has_base_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_info_);
  }

  // int64 add_ts = 3;
  if (this->add_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_add_ts());
  }

  // int32 is_collect = 2;
  if (this->is_collect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_collect());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.FriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.FriendInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.FriendInfo)
    MergeFrom(*source);
  }
}

void FriendInfo::MergeFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.FriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base_info()) {
    _internal_mutable_base_info()->::KWMsg::PlayerBaseInfo::MergeFrom(from._internal_base_info());
  }
  if (from.add_ts() != 0) {
    _internal_set_add_ts(from._internal_add_ts());
  }
  if (from.is_collect() != 0) {
    _internal_set_is_collect(from._internal_is_collect());
  }
}

void FriendInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.FriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.FriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfo::IsInitialized() const {
  return true;
}

void FriendInfo::InternalSwap(FriendInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendInfo, is_collect_)
      + sizeof(FriendInfo::is_collect_)
      - PROTOBUF_FIELD_OFFSET(FriendInfo, base_info_)>(
          reinterpret_cast<char*>(&base_info_),
          reinterpret_cast<char*>(&other->base_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[168]);
}

// ===================================================================

class AppliedFriendInfo::_Internal {
 public:
  static const ::KWMsg::PlayerBaseInfo& base_info(const AppliedFriendInfo* msg);
};

const ::KWMsg::PlayerBaseInfo&
AppliedFriendInfo::_Internal::base_info(const AppliedFriendInfo* msg) {
  return *msg->base_info_;
}
AppliedFriendInfo::AppliedFriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AppliedFriendInfo)
}
AppliedFriendInfo::AppliedFriendInfo(const AppliedFriendInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base_info()) {
    base_info_ = new ::KWMsg::PlayerBaseInfo(*from.base_info_);
  } else {
    base_info_ = nullptr;
  }
  apply_ts_ = from.apply_ts_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AppliedFriendInfo)
}

void AppliedFriendInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&apply_ts_) -
    reinterpret_cast<char*>(&base_info_)) + sizeof(apply_ts_));
}

AppliedFriendInfo::~AppliedFriendInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.AppliedFriendInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppliedFriendInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_info_;
}

void AppliedFriendInfo::ArenaDtor(void* object) {
  AppliedFriendInfo* _this = reinterpret_cast< AppliedFriendInfo* >(object);
  (void)_this;
}
void AppliedFriendInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppliedFriendInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppliedFriendInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AppliedFriendInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && base_info_ != nullptr) {
    delete base_info_;
  }
  base_info_ = nullptr;
  apply_ts_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppliedFriendInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.PlayerBaseInfo base_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 apply_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          apply_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppliedFriendInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AppliedFriendInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.PlayerBaseInfo base_info = 1;
  if (this->has_base_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base_info(this), target, stream);
  }

  // int64 apply_ts = 2;
  if (this->apply_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_apply_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AppliedFriendInfo)
  return target;
}

size_t AppliedFriendInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AppliedFriendInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.PlayerBaseInfo base_info = 1;
  if (this->has_base_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_info_);
  }

  // int64 apply_ts = 2;
  if (this->apply_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_apply_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppliedFriendInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AppliedFriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AppliedFriendInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppliedFriendInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AppliedFriendInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AppliedFriendInfo)
    MergeFrom(*source);
  }
}

void AppliedFriendInfo::MergeFrom(const AppliedFriendInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AppliedFriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base_info()) {
    _internal_mutable_base_info()->::KWMsg::PlayerBaseInfo::MergeFrom(from._internal_base_info());
  }
  if (from.apply_ts() != 0) {
    _internal_set_apply_ts(from._internal_apply_ts());
  }
}

void AppliedFriendInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AppliedFriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppliedFriendInfo::CopyFrom(const AppliedFriendInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AppliedFriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppliedFriendInfo::IsInitialized() const {
  return true;
}

void AppliedFriendInfo::InternalSwap(AppliedFriendInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppliedFriendInfo, apply_ts_)
      + sizeof(AppliedFriendInfo::apply_ts_)
      - PROTOBUF_FIELD_OFFSET(AppliedFriendInfo, base_info_)>(
          reinterpret_cast<char*>(&base_info_),
          reinterpret_cast<char*>(&other->base_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppliedFriendInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[169]);
}

// ===================================================================

class RecommendedFriendInfo::_Internal {
 public:
  static const ::KWMsg::PlayerBaseInfo& base_info(const RecommendedFriendInfo* msg);
};

const ::KWMsg::PlayerBaseInfo&
RecommendedFriendInfo::_Internal::base_info(const RecommendedFriendInfo* msg) {
  return *msg->base_info_;
}
RecommendedFriendInfo::RecommendedFriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.RecommendedFriendInfo)
}
RecommendedFriendInfo::RecommendedFriendInfo(const RecommendedFriendInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base_info()) {
    base_info_ = new ::KWMsg::PlayerBaseInfo(*from.base_info_);
  } else {
    base_info_ = nullptr;
  }
  recommended_type_ = from.recommended_type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.RecommendedFriendInfo)
}

void RecommendedFriendInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recommended_type_) -
    reinterpret_cast<char*>(&base_info_)) + sizeof(recommended_type_));
}

RecommendedFriendInfo::~RecommendedFriendInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.RecommendedFriendInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecommendedFriendInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_info_;
}

void RecommendedFriendInfo::ArenaDtor(void* object) {
  RecommendedFriendInfo* _this = reinterpret_cast< RecommendedFriendInfo* >(object);
  (void)_this;
}
void RecommendedFriendInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecommendedFriendInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecommendedFriendInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.RecommendedFriendInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && base_info_ != nullptr) {
    delete base_info_;
  }
  base_info_ = nullptr;
  recommended_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecommendedFriendInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.PlayerBaseInfo base_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ERecommendedFriendType recommended_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_recommended_type(static_cast<::KWMsg::ERecommendedFriendType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecommendedFriendInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.RecommendedFriendInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.PlayerBaseInfo base_info = 1;
  if (this->has_base_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base_info(this), target, stream);
  }

  // .KWMsg.ERecommendedFriendType recommended_type = 2;
  if (this->recommended_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_recommended_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.RecommendedFriendInfo)
  return target;
}

size_t RecommendedFriendInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.RecommendedFriendInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.PlayerBaseInfo base_info = 1;
  if (this->has_base_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_info_);
  }

  // .KWMsg.ERecommendedFriendType recommended_type = 2;
  if (this->recommended_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_recommended_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecommendedFriendInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.RecommendedFriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RecommendedFriendInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecommendedFriendInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.RecommendedFriendInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.RecommendedFriendInfo)
    MergeFrom(*source);
  }
}

void RecommendedFriendInfo::MergeFrom(const RecommendedFriendInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.RecommendedFriendInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base_info()) {
    _internal_mutable_base_info()->::KWMsg::PlayerBaseInfo::MergeFrom(from._internal_base_info());
  }
  if (from.recommended_type() != 0) {
    _internal_set_recommended_type(from._internal_recommended_type());
  }
}

void RecommendedFriendInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.RecommendedFriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecommendedFriendInfo::CopyFrom(const RecommendedFriendInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.RecommendedFriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecommendedFriendInfo::IsInitialized() const {
  return true;
}

void RecommendedFriendInfo::InternalSwap(RecommendedFriendInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecommendedFriendInfo, recommended_type_)
      + sizeof(RecommendedFriendInfo::recommended_type_)
      - PROTOBUF_FIELD_OFFSET(RecommendedFriendInfo, base_info_)>(
          reinterpret_cast<char*>(&base_info_),
          reinterpret_cast<char*>(&other->base_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecommendedFriendInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[170]);
}

// ===================================================================

class ReqFriendList::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqFriendList* msg);
};

const ::KWMsg::Ident&
ReqFriendList::_Internal::player_id(const ReqFriendList* msg) {
  return *msg->player_id_;
}
void ReqFriendList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqFriendList::ReqFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqFriendList)
}
ReqFriendList::ReqFriendList(const ReqFriendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqFriendList)
}

void ReqFriendList::SharedCtor() {
player_id_ = nullptr;
}

ReqFriendList::~ReqFriendList() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqFriendList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqFriendList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqFriendList::ArenaDtor(void* object) {
  ReqFriendList* _this = reinterpret_cast< ReqFriendList* >(object);
  (void)_this;
}
void ReqFriendList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqFriendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqFriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqFriendList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqFriendList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqFriendList)
  return target;
}

size_t ReqFriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqFriendList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqFriendList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqFriendList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqFriendList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqFriendList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqFriendList)
    MergeFrom(*source);
  }
}

void ReqFriendList::MergeFrom(const ReqFriendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqFriendList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqFriendList::CopyFrom(const ReqFriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFriendList::IsInitialized() const {
  return true;
}

void ReqFriendList::InternalSwap(ReqFriendList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqFriendList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[171]);
}

// ===================================================================

class AckFriendList::_Internal {
 public:
};

AckFriendList::AckFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckFriendList)
}
AckFriendList::AckFriendList(const AckFriendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      info_list_(from.info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckFriendList)
}

void AckFriendList::SharedCtor() {
event_code_ = 0;
}

AckFriendList::~AckFriendList() {
  // @@protoc_insertion_point(destructor:KWMsg.AckFriendList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckFriendList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckFriendList::ArenaDtor(void* object) {
  AckFriendList* _this = reinterpret_cast< AckFriendList* >(object);
  (void)_this;
}
void AckFriendList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckFriendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckFriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_list_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckFriendList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.FriendInfo info_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckFriendList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.FriendInfo info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckFriendList)
  return target;
}

size_t AckFriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckFriendList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.FriendInfo info_list = 2;
  total_size += 1UL * this->_internal_info_list_size();
  for (const auto& msg : this->info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckFriendList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckFriendList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckFriendList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckFriendList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckFriendList)
    MergeFrom(*source);
  }
}

void AckFriendList::MergeFrom(const AckFriendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_list_.MergeFrom(from.info_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckFriendList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFriendList::CopyFrom(const AckFriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFriendList::IsInitialized() const {
  return true;
}

void AckFriendList::InternalSwap(AckFriendList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  info_list_.InternalSwap(&other->info_list_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckFriendList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[172]);
}

// ===================================================================

class ReqAppliedFriendList::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqAppliedFriendList* msg);
};

const ::KWMsg::Ident&
ReqAppliedFriendList::_Internal::player_id(const ReqAppliedFriendList* msg) {
  return *msg->player_id_;
}
void ReqAppliedFriendList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqAppliedFriendList::ReqAppliedFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAppliedFriendList)
}
ReqAppliedFriendList::ReqAppliedFriendList(const ReqAppliedFriendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAppliedFriendList)
}

void ReqAppliedFriendList::SharedCtor() {
player_id_ = nullptr;
}

ReqAppliedFriendList::~ReqAppliedFriendList() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAppliedFriendList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAppliedFriendList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqAppliedFriendList::ArenaDtor(void* object) {
  ReqAppliedFriendList* _this = reinterpret_cast< ReqAppliedFriendList* >(object);
  (void)_this;
}
void ReqAppliedFriendList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAppliedFriendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAppliedFriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAppliedFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAppliedFriendList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAppliedFriendList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAppliedFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAppliedFriendList)
  return target;
}

size_t ReqAppliedFriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAppliedFriendList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAppliedFriendList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAppliedFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAppliedFriendList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAppliedFriendList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAppliedFriendList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAppliedFriendList)
    MergeFrom(*source);
  }
}

void ReqAppliedFriendList::MergeFrom(const ReqAppliedFriendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAppliedFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqAppliedFriendList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAppliedFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAppliedFriendList::CopyFrom(const ReqAppliedFriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAppliedFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAppliedFriendList::IsInitialized() const {
  return true;
}

void ReqAppliedFriendList::InternalSwap(ReqAppliedFriendList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAppliedFriendList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[173]);
}

// ===================================================================

class AckAppliedFriendList::_Internal {
 public:
};

AckAppliedFriendList::AckAppliedFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckAppliedFriendList)
}
AckAppliedFriendList::AckAppliedFriendList(const AckAppliedFriendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      info_list_(from.info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckAppliedFriendList)
}

void AckAppliedFriendList::SharedCtor() {
event_code_ = 0;
}

AckAppliedFriendList::~AckAppliedFriendList() {
  // @@protoc_insertion_point(destructor:KWMsg.AckAppliedFriendList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckAppliedFriendList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckAppliedFriendList::ArenaDtor(void* object) {
  AckAppliedFriendList* _this = reinterpret_cast< AckAppliedFriendList* >(object);
  (void)_this;
}
void AckAppliedFriendList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckAppliedFriendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckAppliedFriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckAppliedFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_list_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckAppliedFriendList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.AppliedFriendInfo info_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckAppliedFriendList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckAppliedFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.AppliedFriendInfo info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckAppliedFriendList)
  return target;
}

size_t AckAppliedFriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckAppliedFriendList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.AppliedFriendInfo info_list = 2;
  total_size += 1UL * this->_internal_info_list_size();
  for (const auto& msg : this->info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckAppliedFriendList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckAppliedFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckAppliedFriendList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckAppliedFriendList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckAppliedFriendList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckAppliedFriendList)
    MergeFrom(*source);
  }
}

void AckAppliedFriendList::MergeFrom(const AckAppliedFriendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckAppliedFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_list_.MergeFrom(from.info_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckAppliedFriendList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckAppliedFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckAppliedFriendList::CopyFrom(const AckAppliedFriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckAppliedFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckAppliedFriendList::IsInitialized() const {
  return true;
}

void AckAppliedFriendList::InternalSwap(AckAppliedFriendList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  info_list_.InternalSwap(&other->info_list_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckAppliedFriendList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[174]);
}

// ===================================================================

class ReqAddFriend::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqAddFriend* msg);
  static const ::KWMsg::Ident& target_id(const ReqAddFriend* msg);
};

const ::KWMsg::Ident&
ReqAddFriend::_Internal::player_id(const ReqAddFriend* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqAddFriend::_Internal::target_id(const ReqAddFriend* msg) {
  return *msg->target_id_;
}
void ReqAddFriend::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqAddFriend::clear_target_id() {
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
}
ReqAddFriend::ReqAddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAddFriend)
}
ReqAddFriend::ReqAddFriend(const ReqAddFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::KWMsg::Ident(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAddFriend)
}

void ReqAddFriend::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(target_id_));
}

ReqAddFriend::~ReqAddFriend() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAddFriend)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAddFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void ReqAddFriend::ArenaDtor(void* object) {
  ReqAddFriend* _this = reinterpret_cast< ReqAddFriend* >(object);
  (void)_this;
}
void ReqAddFriend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAddFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAddFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAddFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAddFriend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAddFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAddFriend)
  return target;
}

size_t ReqAddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAddFriend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAddFriend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAddFriend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAddFriend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAddFriend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAddFriend)
    MergeFrom(*source);
  }
}

void ReqAddFriend::MergeFrom(const ReqAddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_target_id()) {
    _internal_mutable_target_id()->::KWMsg::Ident::MergeFrom(from._internal_target_id());
  }
}

void ReqAddFriend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAddFriend::CopyFrom(const ReqAddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAddFriend::IsInitialized() const {
  return true;
}

void ReqAddFriend::InternalSwap(ReqAddFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqAddFriend, target_id_)
      + sizeof(ReqAddFriend::target_id_)
      - PROTOBUF_FIELD_OFFSET(ReqAddFriend, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAddFriend::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[175]);
}

// ===================================================================

class AckAddFriend::_Internal {
 public:
};

AckAddFriend::AckAddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckAddFriend)
}
AckAddFriend::AckAddFriend(const AckAddFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckAddFriend)
}

void AckAddFriend::SharedCtor() {
event_code_ = 0;
}

AckAddFriend::~AckAddFriend() {
  // @@protoc_insertion_point(destructor:KWMsg.AckAddFriend)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckAddFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckAddFriend::ArenaDtor(void* object) {
  AckAddFriend* _this = reinterpret_cast< AckAddFriend* >(object);
  (void)_this;
}
void AckAddFriend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckAddFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckAddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckAddFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckAddFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckAddFriend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckAddFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckAddFriend)
  return target;
}

size_t AckAddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckAddFriend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckAddFriend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const AckAddFriend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckAddFriend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckAddFriend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckAddFriend)
    MergeFrom(*source);
  }
}

void AckAddFriend::MergeFrom(const AckAddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckAddFriend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckAddFriend::CopyFrom(const AckAddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckAddFriend::IsInitialized() const {
  return true;
}

void AckAddFriend::InternalSwap(AckAddFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckAddFriend::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[176]);
}

// ===================================================================

class ReqDealWithAddFriend::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqDealWithAddFriend* msg);
  static const ::KWMsg::Ident& target_id(const ReqDealWithAddFriend* msg);
};

const ::KWMsg::Ident&
ReqDealWithAddFriend::_Internal::player_id(const ReqDealWithAddFriend* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqDealWithAddFriend::_Internal::target_id(const ReqDealWithAddFriend* msg) {
  return *msg->target_id_;
}
void ReqDealWithAddFriend::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqDealWithAddFriend::clear_target_id() {
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
}
ReqDealWithAddFriend::ReqDealWithAddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqDealWithAddFriend)
}
ReqDealWithAddFriend::ReqDealWithAddFriend(const ReqDealWithAddFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::KWMsg::Ident(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  opt_type_ = from.opt_type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqDealWithAddFriend)
}

void ReqDealWithAddFriend::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opt_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(opt_type_));
}

ReqDealWithAddFriend::~ReqDealWithAddFriend() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqDealWithAddFriend)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqDealWithAddFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void ReqDealWithAddFriend::ArenaDtor(void* object) {
  ReqDealWithAddFriend* _this = reinterpret_cast< ReqDealWithAddFriend* >(object);
  (void)_this;
}
void ReqDealWithAddFriend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqDealWithAddFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDealWithAddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqDealWithAddFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
  opt_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDealWithAddFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 opt_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          opt_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqDealWithAddFriend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqDealWithAddFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  // int32 opt_type = 3;
  if (this->opt_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_opt_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqDealWithAddFriend)
  return target;
}

size_t ReqDealWithAddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqDealWithAddFriend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  // int32 opt_type = 3;
  if (this->opt_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_opt_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqDealWithAddFriend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqDealWithAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqDealWithAddFriend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqDealWithAddFriend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqDealWithAddFriend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqDealWithAddFriend)
    MergeFrom(*source);
  }
}

void ReqDealWithAddFriend::MergeFrom(const ReqDealWithAddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqDealWithAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_target_id()) {
    _internal_mutable_target_id()->::KWMsg::Ident::MergeFrom(from._internal_target_id());
  }
  if (from.opt_type() != 0) {
    _internal_set_opt_type(from._internal_opt_type());
  }
}

void ReqDealWithAddFriend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqDealWithAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDealWithAddFriend::CopyFrom(const ReqDealWithAddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqDealWithAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDealWithAddFriend::IsInitialized() const {
  return true;
}

void ReqDealWithAddFriend::InternalSwap(ReqDealWithAddFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqDealWithAddFriend, opt_type_)
      + sizeof(ReqDealWithAddFriend::opt_type_)
      - PROTOBUF_FIELD_OFFSET(ReqDealWithAddFriend, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDealWithAddFriend::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[177]);
}

// ===================================================================

class AckDealWithAddFriend::_Internal {
 public:
};

AckDealWithAddFriend::AckDealWithAddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckDealWithAddFriend)
}
AckDealWithAddFriend::AckDealWithAddFriend(const AckDealWithAddFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckDealWithAddFriend)
}

void AckDealWithAddFriend::SharedCtor() {
event_code_ = 0;
}

AckDealWithAddFriend::~AckDealWithAddFriend() {
  // @@protoc_insertion_point(destructor:KWMsg.AckDealWithAddFriend)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckDealWithAddFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckDealWithAddFriend::ArenaDtor(void* object) {
  AckDealWithAddFriend* _this = reinterpret_cast< AckDealWithAddFriend* >(object);
  (void)_this;
}
void AckDealWithAddFriend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckDealWithAddFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckDealWithAddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckDealWithAddFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckDealWithAddFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckDealWithAddFriend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckDealWithAddFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckDealWithAddFriend)
  return target;
}

size_t AckDealWithAddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckDealWithAddFriend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckDealWithAddFriend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckDealWithAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const AckDealWithAddFriend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckDealWithAddFriend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckDealWithAddFriend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckDealWithAddFriend)
    MergeFrom(*source);
  }
}

void AckDealWithAddFriend::MergeFrom(const AckDealWithAddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckDealWithAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckDealWithAddFriend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckDealWithAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDealWithAddFriend::CopyFrom(const AckDealWithAddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckDealWithAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDealWithAddFriend::IsInitialized() const {
  return true;
}

void AckDealWithAddFriend::InternalSwap(AckDealWithAddFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckDealWithAddFriend::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[178]);
}

// ===================================================================

class ReqDelFriend::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqDelFriend* msg);
  static const ::KWMsg::Ident& target_id(const ReqDelFriend* msg);
};

const ::KWMsg::Ident&
ReqDelFriend::_Internal::player_id(const ReqDelFriend* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqDelFriend::_Internal::target_id(const ReqDelFriend* msg) {
  return *msg->target_id_;
}
void ReqDelFriend::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqDelFriend::clear_target_id() {
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
}
ReqDelFriend::ReqDelFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqDelFriend)
}
ReqDelFriend::ReqDelFriend(const ReqDelFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::KWMsg::Ident(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqDelFriend)
}

void ReqDelFriend::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(target_id_));
}

ReqDelFriend::~ReqDelFriend() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqDelFriend)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqDelFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void ReqDelFriend::ArenaDtor(void* object) {
  ReqDelFriend* _this = reinterpret_cast< ReqDelFriend* >(object);
  (void)_this;
}
void ReqDelFriend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqDelFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDelFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqDelFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDelFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqDelFriend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqDelFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqDelFriend)
  return target;
}

size_t ReqDelFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqDelFriend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqDelFriend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqDelFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqDelFriend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqDelFriend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqDelFriend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqDelFriend)
    MergeFrom(*source);
  }
}

void ReqDelFriend::MergeFrom(const ReqDelFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqDelFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_target_id()) {
    _internal_mutable_target_id()->::KWMsg::Ident::MergeFrom(from._internal_target_id());
  }
}

void ReqDelFriend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqDelFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDelFriend::CopyFrom(const ReqDelFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqDelFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDelFriend::IsInitialized() const {
  return true;
}

void ReqDelFriend::InternalSwap(ReqDelFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqDelFriend, target_id_)
      + sizeof(ReqDelFriend::target_id_)
      - PROTOBUF_FIELD_OFFSET(ReqDelFriend, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDelFriend::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[179]);
}

// ===================================================================

class AckDelFriend::_Internal {
 public:
  static const ::KWMsg::Ident& target_id(const AckDelFriend* msg);
};

const ::KWMsg::Ident&
AckDelFriend::_Internal::target_id(const AckDelFriend* msg) {
  return *msg->target_id_;
}
void AckDelFriend::clear_target_id() {
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
}
AckDelFriend::AckDelFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckDelFriend)
}
AckDelFriend::AckDelFriend(const AckDelFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_id()) {
    target_id_ = new ::KWMsg::Ident(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckDelFriend)
}

void AckDelFriend::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(event_code_));
}

AckDelFriend::~AckDelFriend() {
  // @@protoc_insertion_point(destructor:KWMsg.AckDelFriend)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckDelFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete target_id_;
}

void AckDelFriend::ArenaDtor(void* object) {
  AckDelFriend* _this = reinterpret_cast< AckDelFriend* >(object);
  (void)_this;
}
void AckDelFriend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckDelFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckDelFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckDelFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckDelFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckDelFriend::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckDelFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckDelFriend)
  return target;
}

size_t AckDelFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckDelFriend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckDelFriend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckDelFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const AckDelFriend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckDelFriend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckDelFriend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckDelFriend)
    MergeFrom(*source);
  }
}

void AckDelFriend::MergeFrom(const AckDelFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckDelFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_id()) {
    _internal_mutable_target_id()->::KWMsg::Ident::MergeFrom(from._internal_target_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckDelFriend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckDelFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDelFriend::CopyFrom(const AckDelFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckDelFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDelFriend::IsInitialized() const {
  return true;
}

void AckDelFriend::InternalSwap(AckDelFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckDelFriend, event_code_)
      + sizeof(AckDelFriend::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckDelFriend, target_id_)>(
          reinterpret_cast<char*>(&target_id_),
          reinterpret_cast<char*>(&other->target_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckDelFriend::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[180]);
}

// ===================================================================

class ReqBlacklist::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBlacklist* msg);
};

const ::KWMsg::Ident&
ReqBlacklist::_Internal::player_id(const ReqBlacklist* msg) {
  return *msg->player_id_;
}
void ReqBlacklist::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqBlacklist::ReqBlacklist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBlacklist)
}
ReqBlacklist::ReqBlacklist(const ReqBlacklist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBlacklist)
}

void ReqBlacklist::SharedCtor() {
player_id_ = nullptr;
}

ReqBlacklist::~ReqBlacklist() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBlacklist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBlacklist::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqBlacklist::ArenaDtor(void* object) {
  ReqBlacklist* _this = reinterpret_cast< ReqBlacklist* >(object);
  (void)_this;
}
void ReqBlacklist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBlacklist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBlacklist::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBlacklist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBlacklist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBlacklist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBlacklist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBlacklist)
  return target;
}

size_t ReqBlacklist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBlacklist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBlacklist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBlacklist)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBlacklist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBlacklist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBlacklist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBlacklist)
    MergeFrom(*source);
  }
}

void ReqBlacklist::MergeFrom(const ReqBlacklist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBlacklist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqBlacklist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBlacklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBlacklist::CopyFrom(const ReqBlacklist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBlacklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBlacklist::IsInitialized() const {
  return true;
}

void ReqBlacklist::InternalSwap(ReqBlacklist* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBlacklist::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[181]);
}

// ===================================================================

class AckBlacklist::_Internal {
 public:
};

AckBlacklist::AckBlacklist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBlacklist)
}
AckBlacklist::AckBlacklist(const AckBlacklist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      info_list_(from.info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBlacklist)
}

void AckBlacklist::SharedCtor() {
event_code_ = 0;
}

AckBlacklist::~AckBlacklist() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBlacklist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBlacklist::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckBlacklist::ArenaDtor(void* object) {
  AckBlacklist* _this = reinterpret_cast< AckBlacklist* >(object);
  (void)_this;
}
void AckBlacklist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBlacklist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBlacklist::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBlacklist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_list_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBlacklist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.PlayerBaseInfo info_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBlacklist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBlacklist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.PlayerBaseInfo info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBlacklist)
  return target;
}

size_t AckBlacklist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBlacklist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.PlayerBaseInfo info_list = 2;
  total_size += 1UL * this->_internal_info_list_size();
  for (const auto& msg : this->info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBlacklist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBlacklist)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBlacklist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBlacklist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBlacklist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBlacklist)
    MergeFrom(*source);
  }
}

void AckBlacklist::MergeFrom(const AckBlacklist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBlacklist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_list_.MergeFrom(from.info_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckBlacklist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBlacklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBlacklist::CopyFrom(const AckBlacklist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBlacklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBlacklist::IsInitialized() const {
  return true;
}

void AckBlacklist::InternalSwap(AckBlacklist* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  info_list_.InternalSwap(&other->info_list_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBlacklist::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[182]);
}

// ===================================================================

class ReqBlacklistOpt::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBlacklistOpt* msg);
  static const ::KWMsg::Ident& target_id(const ReqBlacklistOpt* msg);
};

const ::KWMsg::Ident&
ReqBlacklistOpt::_Internal::player_id(const ReqBlacklistOpt* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqBlacklistOpt::_Internal::target_id(const ReqBlacklistOpt* msg) {
  return *msg->target_id_;
}
void ReqBlacklistOpt::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqBlacklistOpt::clear_target_id() {
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
}
ReqBlacklistOpt::ReqBlacklistOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBlacklistOpt)
}
ReqBlacklistOpt::ReqBlacklistOpt(const ReqBlacklistOpt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::KWMsg::Ident(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  opt_type_ = from.opt_type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBlacklistOpt)
}

void ReqBlacklistOpt::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opt_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(opt_type_));
}

ReqBlacklistOpt::~ReqBlacklistOpt() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBlacklistOpt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBlacklistOpt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void ReqBlacklistOpt::ArenaDtor(void* object) {
  ReqBlacklistOpt* _this = reinterpret_cast< ReqBlacklistOpt* >(object);
  (void)_this;
}
void ReqBlacklistOpt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBlacklistOpt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBlacklistOpt::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBlacklistOpt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
  opt_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBlacklistOpt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 opt_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          opt_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBlacklistOpt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBlacklistOpt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  // int32 opt_type = 3;
  if (this->opt_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_opt_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBlacklistOpt)
  return target;
}

size_t ReqBlacklistOpt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBlacklistOpt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  // int32 opt_type = 3;
  if (this->opt_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_opt_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBlacklistOpt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBlacklistOpt)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBlacklistOpt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBlacklistOpt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBlacklistOpt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBlacklistOpt)
    MergeFrom(*source);
  }
}

void ReqBlacklistOpt::MergeFrom(const ReqBlacklistOpt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBlacklistOpt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_target_id()) {
    _internal_mutable_target_id()->::KWMsg::Ident::MergeFrom(from._internal_target_id());
  }
  if (from.opt_type() != 0) {
    _internal_set_opt_type(from._internal_opt_type());
  }
}

void ReqBlacklistOpt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBlacklistOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBlacklistOpt::CopyFrom(const ReqBlacklistOpt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBlacklistOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBlacklistOpt::IsInitialized() const {
  return true;
}

void ReqBlacklistOpt::InternalSwap(ReqBlacklistOpt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqBlacklistOpt, opt_type_)
      + sizeof(ReqBlacklistOpt::opt_type_)
      - PROTOBUF_FIELD_OFFSET(ReqBlacklistOpt, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBlacklistOpt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[183]);
}

// ===================================================================

class AckBlacklistOpt::_Internal {
 public:
  static const ::KWMsg::Ident& target_id(const AckBlacklistOpt* msg);
};

const ::KWMsg::Ident&
AckBlacklistOpt::_Internal::target_id(const AckBlacklistOpt* msg) {
  return *msg->target_id_;
}
void AckBlacklistOpt::clear_target_id() {
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
}
AckBlacklistOpt::AckBlacklistOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBlacklistOpt)
}
AckBlacklistOpt::AckBlacklistOpt(const AckBlacklistOpt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_id()) {
    target_id_ = new ::KWMsg::Ident(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBlacklistOpt)
}

void AckBlacklistOpt::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(event_code_));
}

AckBlacklistOpt::~AckBlacklistOpt() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBlacklistOpt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBlacklistOpt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete target_id_;
}

void AckBlacklistOpt::ArenaDtor(void* object) {
  AckBlacklistOpt* _this = reinterpret_cast< AckBlacklistOpt* >(object);
  (void)_this;
}
void AckBlacklistOpt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBlacklistOpt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBlacklistOpt::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBlacklistOpt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBlacklistOpt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBlacklistOpt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBlacklistOpt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBlacklistOpt)
  return target;
}

size_t AckBlacklistOpt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBlacklistOpt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBlacklistOpt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBlacklistOpt)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBlacklistOpt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBlacklistOpt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBlacklistOpt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBlacklistOpt)
    MergeFrom(*source);
  }
}

void AckBlacklistOpt::MergeFrom(const AckBlacklistOpt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBlacklistOpt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_id()) {
    _internal_mutable_target_id()->::KWMsg::Ident::MergeFrom(from._internal_target_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckBlacklistOpt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBlacklistOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBlacklistOpt::CopyFrom(const AckBlacklistOpt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBlacklistOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBlacklistOpt::IsInitialized() const {
  return true;
}

void AckBlacklistOpt::InternalSwap(AckBlacklistOpt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckBlacklistOpt, event_code_)
      + sizeof(AckBlacklistOpt::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckBlacklistOpt, target_id_)>(
          reinterpret_cast<char*>(&target_id_),
          reinterpret_cast<char*>(&other->target_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBlacklistOpt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[184]);
}

// ===================================================================

class ReqRecommendedFriendList::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqRecommendedFriendList* msg);
};

const ::KWMsg::Ident&
ReqRecommendedFriendList::_Internal::player_id(const ReqRecommendedFriendList* msg) {
  return *msg->player_id_;
}
void ReqRecommendedFriendList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqRecommendedFriendList::ReqRecommendedFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqRecommendedFriendList)
}
ReqRecommendedFriendList::ReqRecommendedFriendList(const ReqRecommendedFriendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  refresh_flag_ = from.refresh_flag_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqRecommendedFriendList)
}

void ReqRecommendedFriendList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&refresh_flag_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(refresh_flag_));
}

ReqRecommendedFriendList::~ReqRecommendedFriendList() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqRecommendedFriendList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqRecommendedFriendList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqRecommendedFriendList::ArenaDtor(void* object) {
  ReqRecommendedFriendList* _this = reinterpret_cast< ReqRecommendedFriendList* >(object);
  (void)_this;
}
void ReqRecommendedFriendList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqRecommendedFriendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqRecommendedFriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqRecommendedFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  refresh_flag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqRecommendedFriendList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 refresh_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          refresh_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqRecommendedFriendList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqRecommendedFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 refresh_flag = 2;
  if (this->refresh_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_refresh_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqRecommendedFriendList)
  return target;
}

size_t ReqRecommendedFriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqRecommendedFriendList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 refresh_flag = 2;
  if (this->refresh_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_refresh_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqRecommendedFriendList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqRecommendedFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRecommendedFriendList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqRecommendedFriendList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqRecommendedFriendList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqRecommendedFriendList)
    MergeFrom(*source);
  }
}

void ReqRecommendedFriendList::MergeFrom(const ReqRecommendedFriendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqRecommendedFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.refresh_flag() != 0) {
    _internal_set_refresh_flag(from._internal_refresh_flag());
  }
}

void ReqRecommendedFriendList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqRecommendedFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRecommendedFriendList::CopyFrom(const ReqRecommendedFriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqRecommendedFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRecommendedFriendList::IsInitialized() const {
  return true;
}

void ReqRecommendedFriendList::InternalSwap(ReqRecommendedFriendList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqRecommendedFriendList, refresh_flag_)
      + sizeof(ReqRecommendedFriendList::refresh_flag_)
      - PROTOBUF_FIELD_OFFSET(ReqRecommendedFriendList, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqRecommendedFriendList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[185]);
}

// ===================================================================

class AckRecommendedFriendList::_Internal {
 public:
};

AckRecommendedFriendList::AckRecommendedFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  info_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckRecommendedFriendList)
}
AckRecommendedFriendList::AckRecommendedFriendList(const AckRecommendedFriendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      info_list_(from.info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckRecommendedFriendList)
}

void AckRecommendedFriendList::SharedCtor() {
event_code_ = 0;
}

AckRecommendedFriendList::~AckRecommendedFriendList() {
  // @@protoc_insertion_point(destructor:KWMsg.AckRecommendedFriendList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckRecommendedFriendList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckRecommendedFriendList::ArenaDtor(void* object) {
  AckRecommendedFriendList* _this = reinterpret_cast< AckRecommendedFriendList* >(object);
  (void)_this;
}
void AckRecommendedFriendList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckRecommendedFriendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckRecommendedFriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckRecommendedFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_list_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckRecommendedFriendList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecommendedFriendInfo info_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckRecommendedFriendList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckRecommendedFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.RecommendedFriendInfo info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckRecommendedFriendList)
  return target;
}

size_t AckRecommendedFriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckRecommendedFriendList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RecommendedFriendInfo info_list = 2;
  total_size += 1UL * this->_internal_info_list_size();
  for (const auto& msg : this->info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckRecommendedFriendList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckRecommendedFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckRecommendedFriendList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckRecommendedFriendList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckRecommendedFriendList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckRecommendedFriendList)
    MergeFrom(*source);
  }
}

void AckRecommendedFriendList::MergeFrom(const AckRecommendedFriendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckRecommendedFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_list_.MergeFrom(from.info_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckRecommendedFriendList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckRecommendedFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRecommendedFriendList::CopyFrom(const AckRecommendedFriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckRecommendedFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRecommendedFriendList::IsInitialized() const {
  return true;
}

void AckRecommendedFriendList::InternalSwap(AckRecommendedFriendList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  info_list_.InternalSwap(&other->info_list_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckRecommendedFriendList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[186]);
}

// ===================================================================

class ReqFriendCollectOpt::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqFriendCollectOpt* msg);
  static const ::KWMsg::Ident& target_id(const ReqFriendCollectOpt* msg);
};

const ::KWMsg::Ident&
ReqFriendCollectOpt::_Internal::player_id(const ReqFriendCollectOpt* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqFriendCollectOpt::_Internal::target_id(const ReqFriendCollectOpt* msg) {
  return *msg->target_id_;
}
void ReqFriendCollectOpt::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqFriendCollectOpt::clear_target_id() {
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
}
ReqFriendCollectOpt::ReqFriendCollectOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqFriendCollectOpt)
}
ReqFriendCollectOpt::ReqFriendCollectOpt(const ReqFriendCollectOpt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::KWMsg::Ident(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  opt_type_ = from.opt_type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqFriendCollectOpt)
}

void ReqFriendCollectOpt::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opt_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(opt_type_));
}

ReqFriendCollectOpt::~ReqFriendCollectOpt() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqFriendCollectOpt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqFriendCollectOpt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void ReqFriendCollectOpt::ArenaDtor(void* object) {
  ReqFriendCollectOpt* _this = reinterpret_cast< ReqFriendCollectOpt* >(object);
  (void)_this;
}
void ReqFriendCollectOpt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqFriendCollectOpt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqFriendCollectOpt::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqFriendCollectOpt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
  opt_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqFriendCollectOpt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 opt_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          opt_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqFriendCollectOpt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqFriendCollectOpt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  // int32 opt_type = 3;
  if (this->opt_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_opt_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqFriendCollectOpt)
  return target;
}

size_t ReqFriendCollectOpt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqFriendCollectOpt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  // int32 opt_type = 3;
  if (this->opt_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_opt_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqFriendCollectOpt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqFriendCollectOpt)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqFriendCollectOpt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqFriendCollectOpt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqFriendCollectOpt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqFriendCollectOpt)
    MergeFrom(*source);
  }
}

void ReqFriendCollectOpt::MergeFrom(const ReqFriendCollectOpt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqFriendCollectOpt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_target_id()) {
    _internal_mutable_target_id()->::KWMsg::Ident::MergeFrom(from._internal_target_id());
  }
  if (from.opt_type() != 0) {
    _internal_set_opt_type(from._internal_opt_type());
  }
}

void ReqFriendCollectOpt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqFriendCollectOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqFriendCollectOpt::CopyFrom(const ReqFriendCollectOpt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqFriendCollectOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFriendCollectOpt::IsInitialized() const {
  return true;
}

void ReqFriendCollectOpt::InternalSwap(ReqFriendCollectOpt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqFriendCollectOpt, opt_type_)
      + sizeof(ReqFriendCollectOpt::opt_type_)
      - PROTOBUF_FIELD_OFFSET(ReqFriendCollectOpt, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqFriendCollectOpt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[187]);
}

// ===================================================================

class AckFriendCollectOpt::_Internal {
 public:
  static const ::KWMsg::Ident& target_id(const AckFriendCollectOpt* msg);
};

const ::KWMsg::Ident&
AckFriendCollectOpt::_Internal::target_id(const AckFriendCollectOpt* msg) {
  return *msg->target_id_;
}
void AckFriendCollectOpt::clear_target_id() {
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
}
AckFriendCollectOpt::AckFriendCollectOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckFriendCollectOpt)
}
AckFriendCollectOpt::AckFriendCollectOpt(const AckFriendCollectOpt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_id()) {
    target_id_ = new ::KWMsg::Ident(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckFriendCollectOpt)
}

void AckFriendCollectOpt::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(event_code_));
}

AckFriendCollectOpt::~AckFriendCollectOpt() {
  // @@protoc_insertion_point(destructor:KWMsg.AckFriendCollectOpt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckFriendCollectOpt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete target_id_;
}

void AckFriendCollectOpt::ArenaDtor(void* object) {
  AckFriendCollectOpt* _this = reinterpret_cast< AckFriendCollectOpt* >(object);
  (void)_this;
}
void AckFriendCollectOpt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckFriendCollectOpt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckFriendCollectOpt::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckFriendCollectOpt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckFriendCollectOpt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckFriendCollectOpt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckFriendCollectOpt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckFriendCollectOpt)
  return target;
}

size_t AckFriendCollectOpt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckFriendCollectOpt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident target_id = 2;
  if (this->has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckFriendCollectOpt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckFriendCollectOpt)
  GOOGLE_DCHECK_NE(&from, this);
  const AckFriendCollectOpt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckFriendCollectOpt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckFriendCollectOpt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckFriendCollectOpt)
    MergeFrom(*source);
  }
}

void AckFriendCollectOpt::MergeFrom(const AckFriendCollectOpt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckFriendCollectOpt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_id()) {
    _internal_mutable_target_id()->::KWMsg::Ident::MergeFrom(from._internal_target_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckFriendCollectOpt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckFriendCollectOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFriendCollectOpt::CopyFrom(const AckFriendCollectOpt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckFriendCollectOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFriendCollectOpt::IsInitialized() const {
  return true;
}

void AckFriendCollectOpt::InternalSwap(AckFriendCollectOpt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckFriendCollectOpt, event_code_)
      + sizeof(AckFriendCollectOpt::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckFriendCollectOpt, target_id_)>(
          reinterpret_cast<char*>(&target_id_),
          reinterpret_cast<char*>(&other->target_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckFriendCollectOpt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[188]);
}

// ===================================================================

class ReqFindPlayer::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqFindPlayer* msg);
};

const ::KWMsg::Ident&
ReqFindPlayer::_Internal::player_id(const ReqFindPlayer* msg) {
  return *msg->player_id_;
}
void ReqFindPlayer::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqFindPlayer::ReqFindPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqFindPlayer)
}
ReqFindPlayer::ReqFindPlayer(const ReqFindPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_name_or_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_name_or_id().empty()) {
    target_name_or_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_name_or_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  find_type_ = from.find_type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqFindPlayer)
}

void ReqFindPlayer::SharedCtor() {
target_name_or_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&find_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(find_type_));
}

ReqFindPlayer::~ReqFindPlayer() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqFindPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqFindPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  target_name_or_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqFindPlayer::ArenaDtor(void* object) {
  ReqFindPlayer* _this = reinterpret_cast< ReqFindPlayer* >(object);
  (void)_this;
}
void ReqFindPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqFindPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqFindPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqFindPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_name_or_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  find_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqFindPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes target_name_or_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target_name_or_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 find_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          find_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqFindPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqFindPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes target_name_or_id = 2;
  if (!this->target_name_or_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_target_name_or_id(), target);
  }

  // int32 find_type = 3;
  if (this->find_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_find_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqFindPlayer)
  return target;
}

size_t ReqFindPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqFindPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes target_name_or_id = 2;
  if (!this->target_name_or_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_target_name_or_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 find_type = 3;
  if (this->find_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_find_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqFindPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqFindPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqFindPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqFindPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqFindPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqFindPlayer)
    MergeFrom(*source);
  }
}

void ReqFindPlayer::MergeFrom(const ReqFindPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqFindPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.target_name_or_id().empty()) {
    _internal_set_target_name_or_id(from._internal_target_name_or_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.find_type() != 0) {
    _internal_set_find_type(from._internal_find_type());
  }
}

void ReqFindPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqFindPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqFindPlayer::CopyFrom(const ReqFindPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqFindPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFindPlayer::IsInitialized() const {
  return true;
}

void ReqFindPlayer::InternalSwap(ReqFindPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_name_or_id_, GetArenaForAllocation(),
      &other->target_name_or_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqFindPlayer, find_type_)
      + sizeof(ReqFindPlayer::find_type_)
      - PROTOBUF_FIELD_OFFSET(ReqFindPlayer, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqFindPlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[189]);
}

// ===================================================================

class AckFindPlayer::_Internal {
 public:
  static const ::KWMsg::PlayerBaseInfo& base_info(const AckFindPlayer* msg);
};

const ::KWMsg::PlayerBaseInfo&
AckFindPlayer::_Internal::base_info(const AckFindPlayer* msg) {
  return *msg->base_info_;
}
AckFindPlayer::AckFindPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckFindPlayer)
}
AckFindPlayer::AckFindPlayer(const AckFindPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base_info()) {
    base_info_ = new ::KWMsg::PlayerBaseInfo(*from.base_info_);
  } else {
    base_info_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckFindPlayer)
}

void AckFindPlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&base_info_)) + sizeof(event_code_));
}

AckFindPlayer::~AckFindPlayer() {
  // @@protoc_insertion_point(destructor:KWMsg.AckFindPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckFindPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete base_info_;
}

void AckFindPlayer::ArenaDtor(void* object) {
  AckFindPlayer* _this = reinterpret_cast< AckFindPlayer* >(object);
  (void)_this;
}
void AckFindPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckFindPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckFindPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckFindPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && base_info_ != nullptr) {
    delete base_info_;
  }
  base_info_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckFindPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.PlayerBaseInfo base_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckFindPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckFindPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.PlayerBaseInfo base_info = 2;
  if (this->has_base_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::base_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckFindPlayer)
  return target;
}

size_t AckFindPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckFindPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.PlayerBaseInfo base_info = 2;
  if (this->has_base_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_info_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckFindPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckFindPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const AckFindPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckFindPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckFindPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckFindPlayer)
    MergeFrom(*source);
  }
}

void AckFindPlayer::MergeFrom(const AckFindPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckFindPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base_info()) {
    _internal_mutable_base_info()->::KWMsg::PlayerBaseInfo::MergeFrom(from._internal_base_info());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckFindPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckFindPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFindPlayer::CopyFrom(const AckFindPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckFindPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFindPlayer::IsInitialized() const {
  return true;
}

void AckFindPlayer::InternalSwap(AckFindPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckFindPlayer, event_code_)
      + sizeof(AckFindPlayer::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckFindPlayer, base_info_)>(
          reinterpret_cast<char*>(&base_info_),
          reinterpret_cast<char*>(&other->base_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckFindPlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[190]);
}

// ===================================================================

class ReqExploreUpdateNodePostion::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqExploreUpdateNodePostion* msg);
};

const ::KWMsg::Ident&
ReqExploreUpdateNodePostion::_Internal::player_id(const ReqExploreUpdateNodePostion* msg) {
  return *msg->player_id_;
}
void ReqExploreUpdateNodePostion::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqExploreUpdateNodePostion::ReqExploreUpdateNodePostion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqExploreUpdateNodePostion)
}
ReqExploreUpdateNodePostion::ReqExploreUpdateNodePostion(const ReqExploreUpdateNodePostion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  explore_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_explore_node_id().empty()) {
    explore_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_explore_node_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqExploreUpdateNodePostion)
}

void ReqExploreUpdateNodePostion::SharedCtor() {
explore_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqExploreUpdateNodePostion::~ReqExploreUpdateNodePostion() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqExploreUpdateNodePostion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqExploreUpdateNodePostion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  explore_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqExploreUpdateNodePostion::ArenaDtor(void* object) {
  ReqExploreUpdateNodePostion* _this = reinterpret_cast< ReqExploreUpdateNodePostion* >(object);
  (void)_this;
}
void ReqExploreUpdateNodePostion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqExploreUpdateNodePostion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqExploreUpdateNodePostion::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqExploreUpdateNodePostion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  explore_node_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqExploreUpdateNodePostion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes explore_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_explore_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqExploreUpdateNodePostion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqExploreUpdateNodePostion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes explore_node_id = 2;
  if (!this->explore_node_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_explore_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqExploreUpdateNodePostion)
  return target;
}

size_t ReqExploreUpdateNodePostion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqExploreUpdateNodePostion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes explore_node_id = 2;
  if (!this->explore_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_explore_node_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqExploreUpdateNodePostion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqExploreUpdateNodePostion)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqExploreUpdateNodePostion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqExploreUpdateNodePostion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqExploreUpdateNodePostion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqExploreUpdateNodePostion)
    MergeFrom(*source);
  }
}

void ReqExploreUpdateNodePostion::MergeFrom(const ReqExploreUpdateNodePostion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqExploreUpdateNodePostion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.explore_node_id().empty()) {
    _internal_set_explore_node_id(from._internal_explore_node_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqExploreUpdateNodePostion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqExploreUpdateNodePostion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqExploreUpdateNodePostion::CopyFrom(const ReqExploreUpdateNodePostion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqExploreUpdateNodePostion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqExploreUpdateNodePostion::IsInitialized() const {
  return true;
}

void ReqExploreUpdateNodePostion::InternalSwap(ReqExploreUpdateNodePostion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &explore_node_id_, GetArenaForAllocation(),
      &other->explore_node_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqExploreUpdateNodePostion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[191]);
}

// ===================================================================

class AckExploreUpdateNodePostion::_Internal {
 public:
};

AckExploreUpdateNodePostion::AckExploreUpdateNodePostion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckExploreUpdateNodePostion)
}
AckExploreUpdateNodePostion::AckExploreUpdateNodePostion(const AckExploreUpdateNodePostion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  explore_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_explore_node_id().empty()) {
    explore_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_explore_node_id(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckExploreUpdateNodePostion)
}

void AckExploreUpdateNodePostion::SharedCtor() {
explore_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckExploreUpdateNodePostion::~AckExploreUpdateNodePostion() {
  // @@protoc_insertion_point(destructor:KWMsg.AckExploreUpdateNodePostion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckExploreUpdateNodePostion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  explore_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckExploreUpdateNodePostion::ArenaDtor(void* object) {
  AckExploreUpdateNodePostion* _this = reinterpret_cast< AckExploreUpdateNodePostion* >(object);
  (void)_this;
}
void AckExploreUpdateNodePostion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckExploreUpdateNodePostion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckExploreUpdateNodePostion::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckExploreUpdateNodePostion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  explore_node_id_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckExploreUpdateNodePostion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes explore_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_explore_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckExploreUpdateNodePostion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckExploreUpdateNodePostion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes explore_node_id = 2;
  if (!this->explore_node_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_explore_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckExploreUpdateNodePostion)
  return target;
}

size_t AckExploreUpdateNodePostion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckExploreUpdateNodePostion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes explore_node_id = 2;
  if (!this->explore_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_explore_node_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckExploreUpdateNodePostion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckExploreUpdateNodePostion)
  GOOGLE_DCHECK_NE(&from, this);
  const AckExploreUpdateNodePostion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckExploreUpdateNodePostion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckExploreUpdateNodePostion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckExploreUpdateNodePostion)
    MergeFrom(*source);
  }
}

void AckExploreUpdateNodePostion::MergeFrom(const AckExploreUpdateNodePostion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckExploreUpdateNodePostion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.explore_node_id().empty()) {
    _internal_set_explore_node_id(from._internal_explore_node_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckExploreUpdateNodePostion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckExploreUpdateNodePostion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckExploreUpdateNodePostion::CopyFrom(const AckExploreUpdateNodePostion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckExploreUpdateNodePostion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckExploreUpdateNodePostion::IsInitialized() const {
  return true;
}

void AckExploreUpdateNodePostion::InternalSwap(AckExploreUpdateNodePostion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &explore_node_id_, GetArenaForAllocation(),
      &other->explore_node_id_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckExploreUpdateNodePostion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[192]);
}

// ===================================================================

class ReqGetExploreAreaProgressRewards::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqGetExploreAreaProgressRewards* msg);
};

const ::KWMsg::Ident&
ReqGetExploreAreaProgressRewards::_Internal::player_id(const ReqGetExploreAreaProgressRewards* msg) {
  return *msg->player_id_;
}
void ReqGetExploreAreaProgressRewards::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqGetExploreAreaProgressRewards::ReqGetExploreAreaProgressRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqGetExploreAreaProgressRewards)
}
ReqGetExploreAreaProgressRewards::ReqGetExploreAreaProgressRewards(const ReqGetExploreAreaProgressRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  explore_area_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_explore_area_id().empty()) {
    explore_area_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_explore_area_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqGetExploreAreaProgressRewards)
}

void ReqGetExploreAreaProgressRewards::SharedCtor() {
explore_area_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqGetExploreAreaProgressRewards::~ReqGetExploreAreaProgressRewards() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqGetExploreAreaProgressRewards)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqGetExploreAreaProgressRewards::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  explore_area_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqGetExploreAreaProgressRewards::ArenaDtor(void* object) {
  ReqGetExploreAreaProgressRewards* _this = reinterpret_cast< ReqGetExploreAreaProgressRewards* >(object);
  (void)_this;
}
void ReqGetExploreAreaProgressRewards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetExploreAreaProgressRewards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetExploreAreaProgressRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqGetExploreAreaProgressRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  explore_area_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetExploreAreaProgressRewards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes explore_area_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_explore_area_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetExploreAreaProgressRewards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqGetExploreAreaProgressRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes explore_area_id = 2;
  if (!this->explore_area_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_explore_area_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqGetExploreAreaProgressRewards)
  return target;
}

size_t ReqGetExploreAreaProgressRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqGetExploreAreaProgressRewards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes explore_area_id = 2;
  if (!this->explore_area_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_explore_area_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetExploreAreaProgressRewards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqGetExploreAreaProgressRewards)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetExploreAreaProgressRewards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetExploreAreaProgressRewards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqGetExploreAreaProgressRewards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqGetExploreAreaProgressRewards)
    MergeFrom(*source);
  }
}

void ReqGetExploreAreaProgressRewards::MergeFrom(const ReqGetExploreAreaProgressRewards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqGetExploreAreaProgressRewards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.explore_area_id().empty()) {
    _internal_set_explore_area_id(from._internal_explore_area_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqGetExploreAreaProgressRewards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqGetExploreAreaProgressRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetExploreAreaProgressRewards::CopyFrom(const ReqGetExploreAreaProgressRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqGetExploreAreaProgressRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetExploreAreaProgressRewards::IsInitialized() const {
  return true;
}

void ReqGetExploreAreaProgressRewards::InternalSwap(ReqGetExploreAreaProgressRewards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &explore_area_id_, GetArenaForAllocation(),
      &other->explore_area_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetExploreAreaProgressRewards::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[193]);
}

// ===================================================================

class AckGetExploreAreaProgressRewards::_Internal {
 public:
};

AckGetExploreAreaProgressRewards::AckGetExploreAreaProgressRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckGetExploreAreaProgressRewards)
}
AckGetExploreAreaProgressRewards::AckGetExploreAreaProgressRewards(const AckGetExploreAreaProgressRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckGetExploreAreaProgressRewards)
}

void AckGetExploreAreaProgressRewards::SharedCtor() {
event_code_ = 0;
}

AckGetExploreAreaProgressRewards::~AckGetExploreAreaProgressRewards() {
  // @@protoc_insertion_point(destructor:KWMsg.AckGetExploreAreaProgressRewards)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckGetExploreAreaProgressRewards::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckGetExploreAreaProgressRewards::ArenaDtor(void* object) {
  AckGetExploreAreaProgressRewards* _this = reinterpret_cast< AckGetExploreAreaProgressRewards* >(object);
  (void)_this;
}
void AckGetExploreAreaProgressRewards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckGetExploreAreaProgressRewards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckGetExploreAreaProgressRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckGetExploreAreaProgressRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckGetExploreAreaProgressRewards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RewardInfo reward_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckGetExploreAreaProgressRewards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckGetExploreAreaProgressRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.RewardInfo reward_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reward_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckGetExploreAreaProgressRewards)
  return target;
}

size_t AckGetExploreAreaProgressRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckGetExploreAreaProgressRewards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo reward_list = 2;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckGetExploreAreaProgressRewards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckGetExploreAreaProgressRewards)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetExploreAreaProgressRewards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckGetExploreAreaProgressRewards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckGetExploreAreaProgressRewards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckGetExploreAreaProgressRewards)
    MergeFrom(*source);
  }
}

void AckGetExploreAreaProgressRewards::MergeFrom(const AckGetExploreAreaProgressRewards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckGetExploreAreaProgressRewards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckGetExploreAreaProgressRewards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckGetExploreAreaProgressRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetExploreAreaProgressRewards::CopyFrom(const AckGetExploreAreaProgressRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckGetExploreAreaProgressRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetExploreAreaProgressRewards::IsInitialized() const {
  return true;
}

void AckGetExploreAreaProgressRewards::InternalSwap(AckGetExploreAreaProgressRewards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckGetExploreAreaProgressRewards::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[194]);
}

// ===================================================================

class ReqSweepExploreThreeStarNode::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqSweepExploreThreeStarNode* msg);
};

const ::KWMsg::Ident&
ReqSweepExploreThreeStarNode::_Internal::player_id(const ReqSweepExploreThreeStarNode* msg) {
  return *msg->player_id_;
}
void ReqSweepExploreThreeStarNode::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqSweepExploreThreeStarNode::ReqSweepExploreThreeStarNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqSweepExploreThreeStarNode)
}
ReqSweepExploreThreeStarNode::ReqSweepExploreThreeStarNode(const ReqSweepExploreThreeStarNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  explore_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_explore_node_id().empty()) {
    explore_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_explore_node_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  sweep_count_ = from.sweep_count_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqSweepExploreThreeStarNode)
}

void ReqSweepExploreThreeStarNode::SharedCtor() {
explore_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sweep_count_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(sweep_count_));
}

ReqSweepExploreThreeStarNode::~ReqSweepExploreThreeStarNode() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqSweepExploreThreeStarNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqSweepExploreThreeStarNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  explore_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqSweepExploreThreeStarNode::ArenaDtor(void* object) {
  ReqSweepExploreThreeStarNode* _this = reinterpret_cast< ReqSweepExploreThreeStarNode* >(object);
  (void)_this;
}
void ReqSweepExploreThreeStarNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqSweepExploreThreeStarNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSweepExploreThreeStarNode::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqSweepExploreThreeStarNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  explore_node_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  sweep_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSweepExploreThreeStarNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes explore_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_explore_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sweep_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sweep_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSweepExploreThreeStarNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqSweepExploreThreeStarNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes explore_node_id = 2;
  if (!this->explore_node_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_explore_node_id(), target);
  }

  // int32 sweep_count = 3;
  if (this->sweep_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sweep_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqSweepExploreThreeStarNode)
  return target;
}

size_t ReqSweepExploreThreeStarNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqSweepExploreThreeStarNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes explore_node_id = 2;
  if (!this->explore_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_explore_node_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 sweep_count = 3;
  if (this->sweep_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sweep_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSweepExploreThreeStarNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqSweepExploreThreeStarNode)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSweepExploreThreeStarNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSweepExploreThreeStarNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqSweepExploreThreeStarNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqSweepExploreThreeStarNode)
    MergeFrom(*source);
  }
}

void ReqSweepExploreThreeStarNode::MergeFrom(const ReqSweepExploreThreeStarNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqSweepExploreThreeStarNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.explore_node_id().empty()) {
    _internal_set_explore_node_id(from._internal_explore_node_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.sweep_count() != 0) {
    _internal_set_sweep_count(from._internal_sweep_count());
  }
}

void ReqSweepExploreThreeStarNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqSweepExploreThreeStarNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSweepExploreThreeStarNode::CopyFrom(const ReqSweepExploreThreeStarNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqSweepExploreThreeStarNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSweepExploreThreeStarNode::IsInitialized() const {
  return true;
}

void ReqSweepExploreThreeStarNode::InternalSwap(ReqSweepExploreThreeStarNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &explore_node_id_, GetArenaForAllocation(),
      &other->explore_node_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqSweepExploreThreeStarNode, sweep_count_)
      + sizeof(ReqSweepExploreThreeStarNode::sweep_count_)
      - PROTOBUF_FIELD_OFFSET(ReqSweepExploreThreeStarNode, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSweepExploreThreeStarNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[195]);
}

// ===================================================================

class AckSweepExploreThreeStarNode::_Internal {
 public:
};

AckSweepExploreThreeStarNode::AckSweepExploreThreeStarNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena),
  extra_reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckSweepExploreThreeStarNode)
}
AckSweepExploreThreeStarNode::AckSweepExploreThreeStarNode(const AckSweepExploreThreeStarNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_),
      extra_reward_list_(from.extra_reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckSweepExploreThreeStarNode)
}

void AckSweepExploreThreeStarNode::SharedCtor() {
event_code_ = 0;
}

AckSweepExploreThreeStarNode::~AckSweepExploreThreeStarNode() {
  // @@protoc_insertion_point(destructor:KWMsg.AckSweepExploreThreeStarNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckSweepExploreThreeStarNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckSweepExploreThreeStarNode::ArenaDtor(void* object) {
  AckSweepExploreThreeStarNode* _this = reinterpret_cast< AckSweepExploreThreeStarNode* >(object);
  (void)_this;
}
void AckSweepExploreThreeStarNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckSweepExploreThreeStarNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckSweepExploreThreeStarNode::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckSweepExploreThreeStarNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  extra_reward_list_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckSweepExploreThreeStarNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RewardInfo reward_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RewardInfo extra_reward_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSweepExploreThreeStarNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckSweepExploreThreeStarNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.RewardInfo reward_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reward_list(i), target, stream);
  }

  // repeated .KWMsg.RewardInfo extra_reward_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extra_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_extra_reward_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckSweepExploreThreeStarNode)
  return target;
}

size_t AckSweepExploreThreeStarNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckSweepExploreThreeStarNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo reward_list = 2;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.RewardInfo extra_reward_list = 3;
  total_size += 1UL * this->_internal_extra_reward_list_size();
  for (const auto& msg : this->extra_reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSweepExploreThreeStarNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckSweepExploreThreeStarNode)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSweepExploreThreeStarNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSweepExploreThreeStarNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckSweepExploreThreeStarNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckSweepExploreThreeStarNode)
    MergeFrom(*source);
  }
}

void AckSweepExploreThreeStarNode::MergeFrom(const AckSweepExploreThreeStarNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckSweepExploreThreeStarNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  extra_reward_list_.MergeFrom(from.extra_reward_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckSweepExploreThreeStarNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckSweepExploreThreeStarNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSweepExploreThreeStarNode::CopyFrom(const AckSweepExploreThreeStarNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckSweepExploreThreeStarNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSweepExploreThreeStarNode::IsInitialized() const {
  return true;
}

void AckSweepExploreThreeStarNode::InternalSwap(AckSweepExploreThreeStarNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  extra_reward_list_.InternalSwap(&other->extra_reward_list_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSweepExploreThreeStarNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[196]);
}

// ===================================================================

class ReqGetExploreMapStarRewards::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqGetExploreMapStarRewards* msg);
};

const ::KWMsg::Ident&
ReqGetExploreMapStarRewards::_Internal::player_id(const ReqGetExploreMapStarRewards* msg) {
  return *msg->player_id_;
}
void ReqGetExploreMapStarRewards::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqGetExploreMapStarRewards::ReqGetExploreMapStarRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqGetExploreMapStarRewards)
}
ReqGetExploreMapStarRewards::ReqGetExploreMapStarRewards(const ReqGetExploreMapStarRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  explore_map_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_explore_map_id().empty()) {
    explore_map_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_explore_map_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  target_ = from.target_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqGetExploreMapStarRewards)
}

void ReqGetExploreMapStarRewards::SharedCtor() {
explore_map_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(target_));
}

ReqGetExploreMapStarRewards::~ReqGetExploreMapStarRewards() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqGetExploreMapStarRewards)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqGetExploreMapStarRewards::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  explore_map_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqGetExploreMapStarRewards::ArenaDtor(void* object) {
  ReqGetExploreMapStarRewards* _this = reinterpret_cast< ReqGetExploreMapStarRewards* >(object);
  (void)_this;
}
void ReqGetExploreMapStarRewards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetExploreMapStarRewards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetExploreMapStarRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqGetExploreMapStarRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  explore_map_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  target_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetExploreMapStarRewards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes explore_map_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_explore_map_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetExploreMapStarRewards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqGetExploreMapStarRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 target = 2;
  if (this->target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_target(), target);
  }

  // bytes explore_map_id = 3;
  if (!this->explore_map_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_explore_map_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqGetExploreMapStarRewards)
  return target;
}

size_t ReqGetExploreMapStarRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqGetExploreMapStarRewards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes explore_map_id = 3;
  if (!this->explore_map_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_explore_map_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 target = 2;
  if (this->target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetExploreMapStarRewards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqGetExploreMapStarRewards)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetExploreMapStarRewards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetExploreMapStarRewards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqGetExploreMapStarRewards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqGetExploreMapStarRewards)
    MergeFrom(*source);
  }
}

void ReqGetExploreMapStarRewards::MergeFrom(const ReqGetExploreMapStarRewards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqGetExploreMapStarRewards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.explore_map_id().empty()) {
    _internal_set_explore_map_id(from._internal_explore_map_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.target() != 0) {
    _internal_set_target(from._internal_target());
  }
}

void ReqGetExploreMapStarRewards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqGetExploreMapStarRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetExploreMapStarRewards::CopyFrom(const ReqGetExploreMapStarRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqGetExploreMapStarRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetExploreMapStarRewards::IsInitialized() const {
  return true;
}

void ReqGetExploreMapStarRewards::InternalSwap(ReqGetExploreMapStarRewards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &explore_map_id_, GetArenaForAllocation(),
      &other->explore_map_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqGetExploreMapStarRewards, target_)
      + sizeof(ReqGetExploreMapStarRewards::target_)
      - PROTOBUF_FIELD_OFFSET(ReqGetExploreMapStarRewards, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetExploreMapStarRewards::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[197]);
}

// ===================================================================

class AckGetExploreMapStarRewards::_Internal {
 public:
};

AckGetExploreMapStarRewards::AckGetExploreMapStarRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckGetExploreMapStarRewards)
}
AckGetExploreMapStarRewards::AckGetExploreMapStarRewards(const AckGetExploreMapStarRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckGetExploreMapStarRewards)
}

void AckGetExploreMapStarRewards::SharedCtor() {
event_code_ = 0;
}

AckGetExploreMapStarRewards::~AckGetExploreMapStarRewards() {
  // @@protoc_insertion_point(destructor:KWMsg.AckGetExploreMapStarRewards)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckGetExploreMapStarRewards::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckGetExploreMapStarRewards::ArenaDtor(void* object) {
  AckGetExploreMapStarRewards* _this = reinterpret_cast< AckGetExploreMapStarRewards* >(object);
  (void)_this;
}
void AckGetExploreMapStarRewards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckGetExploreMapStarRewards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckGetExploreMapStarRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckGetExploreMapStarRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckGetExploreMapStarRewards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RewardInfo reward_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckGetExploreMapStarRewards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckGetExploreMapStarRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.RewardInfo reward_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reward_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckGetExploreMapStarRewards)
  return target;
}

size_t AckGetExploreMapStarRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckGetExploreMapStarRewards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo reward_list = 2;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckGetExploreMapStarRewards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckGetExploreMapStarRewards)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetExploreMapStarRewards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckGetExploreMapStarRewards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckGetExploreMapStarRewards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckGetExploreMapStarRewards)
    MergeFrom(*source);
  }
}

void AckGetExploreMapStarRewards::MergeFrom(const AckGetExploreMapStarRewards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckGetExploreMapStarRewards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckGetExploreMapStarRewards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckGetExploreMapStarRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetExploreMapStarRewards::CopyFrom(const AckGetExploreMapStarRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckGetExploreMapStarRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetExploreMapStarRewards::IsInitialized() const {
  return true;
}

void AckGetExploreMapStarRewards::InternalSwap(AckGetExploreMapStarRewards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckGetExploreMapStarRewards::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[198]);
}

// ===================================================================

class ReqGetExploreMapBranchlineRewards::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqGetExploreMapBranchlineRewards* msg);
};

const ::KWMsg::Ident&
ReqGetExploreMapBranchlineRewards::_Internal::player_id(const ReqGetExploreMapBranchlineRewards* msg) {
  return *msg->player_id_;
}
void ReqGetExploreMapBranchlineRewards::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqGetExploreMapBranchlineRewards::ReqGetExploreMapBranchlineRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqGetExploreMapBranchlineRewards)
}
ReqGetExploreMapBranchlineRewards::ReqGetExploreMapBranchlineRewards(const ReqGetExploreMapBranchlineRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  explore_map_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_explore_map_id().empty()) {
    explore_map_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_explore_map_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  target_ = from.target_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqGetExploreMapBranchlineRewards)
}

void ReqGetExploreMapBranchlineRewards::SharedCtor() {
explore_map_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(target_));
}

ReqGetExploreMapBranchlineRewards::~ReqGetExploreMapBranchlineRewards() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqGetExploreMapBranchlineRewards)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqGetExploreMapBranchlineRewards::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  explore_map_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqGetExploreMapBranchlineRewards::ArenaDtor(void* object) {
  ReqGetExploreMapBranchlineRewards* _this = reinterpret_cast< ReqGetExploreMapBranchlineRewards* >(object);
  (void)_this;
}
void ReqGetExploreMapBranchlineRewards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetExploreMapBranchlineRewards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetExploreMapBranchlineRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqGetExploreMapBranchlineRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  explore_map_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  target_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetExploreMapBranchlineRewards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes explore_map_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_explore_map_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetExploreMapBranchlineRewards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqGetExploreMapBranchlineRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 target = 2;
  if (this->target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_target(), target);
  }

  // bytes explore_map_id = 3;
  if (!this->explore_map_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_explore_map_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqGetExploreMapBranchlineRewards)
  return target;
}

size_t ReqGetExploreMapBranchlineRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqGetExploreMapBranchlineRewards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes explore_map_id = 3;
  if (!this->explore_map_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_explore_map_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 target = 2;
  if (this->target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetExploreMapBranchlineRewards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqGetExploreMapBranchlineRewards)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetExploreMapBranchlineRewards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetExploreMapBranchlineRewards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqGetExploreMapBranchlineRewards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqGetExploreMapBranchlineRewards)
    MergeFrom(*source);
  }
}

void ReqGetExploreMapBranchlineRewards::MergeFrom(const ReqGetExploreMapBranchlineRewards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqGetExploreMapBranchlineRewards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.explore_map_id().empty()) {
    _internal_set_explore_map_id(from._internal_explore_map_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.target() != 0) {
    _internal_set_target(from._internal_target());
  }
}

void ReqGetExploreMapBranchlineRewards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqGetExploreMapBranchlineRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetExploreMapBranchlineRewards::CopyFrom(const ReqGetExploreMapBranchlineRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqGetExploreMapBranchlineRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetExploreMapBranchlineRewards::IsInitialized() const {
  return true;
}

void ReqGetExploreMapBranchlineRewards::InternalSwap(ReqGetExploreMapBranchlineRewards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &explore_map_id_, GetArenaForAllocation(),
      &other->explore_map_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqGetExploreMapBranchlineRewards, target_)
      + sizeof(ReqGetExploreMapBranchlineRewards::target_)
      - PROTOBUF_FIELD_OFFSET(ReqGetExploreMapBranchlineRewards, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetExploreMapBranchlineRewards::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[199]);
}

// ===================================================================

class AckGetExploreMapBranchlineRewards::_Internal {
 public:
};

AckGetExploreMapBranchlineRewards::AckGetExploreMapBranchlineRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckGetExploreMapBranchlineRewards)
}
AckGetExploreMapBranchlineRewards::AckGetExploreMapBranchlineRewards(const AckGetExploreMapBranchlineRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckGetExploreMapBranchlineRewards)
}

void AckGetExploreMapBranchlineRewards::SharedCtor() {
event_code_ = 0;
}

AckGetExploreMapBranchlineRewards::~AckGetExploreMapBranchlineRewards() {
  // @@protoc_insertion_point(destructor:KWMsg.AckGetExploreMapBranchlineRewards)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckGetExploreMapBranchlineRewards::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckGetExploreMapBranchlineRewards::ArenaDtor(void* object) {
  AckGetExploreMapBranchlineRewards* _this = reinterpret_cast< AckGetExploreMapBranchlineRewards* >(object);
  (void)_this;
}
void AckGetExploreMapBranchlineRewards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckGetExploreMapBranchlineRewards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckGetExploreMapBranchlineRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckGetExploreMapBranchlineRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckGetExploreMapBranchlineRewards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RewardInfo reward_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckGetExploreMapBranchlineRewards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckGetExploreMapBranchlineRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.RewardInfo reward_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reward_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckGetExploreMapBranchlineRewards)
  return target;
}

size_t AckGetExploreMapBranchlineRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckGetExploreMapBranchlineRewards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo reward_list = 2;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckGetExploreMapBranchlineRewards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckGetExploreMapBranchlineRewards)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetExploreMapBranchlineRewards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckGetExploreMapBranchlineRewards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckGetExploreMapBranchlineRewards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckGetExploreMapBranchlineRewards)
    MergeFrom(*source);
  }
}

void AckGetExploreMapBranchlineRewards::MergeFrom(const AckGetExploreMapBranchlineRewards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckGetExploreMapBranchlineRewards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckGetExploreMapBranchlineRewards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckGetExploreMapBranchlineRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetExploreMapBranchlineRewards::CopyFrom(const AckGetExploreMapBranchlineRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckGetExploreMapBranchlineRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetExploreMapBranchlineRewards::IsInitialized() const {
  return true;
}

void AckGetExploreMapBranchlineRewards::InternalSwap(AckGetExploreMapBranchlineRewards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckGetExploreMapBranchlineRewards::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[200]);
}

// ===================================================================

class ReqUpgradeExploreGuiderFriendship::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqUpgradeExploreGuiderFriendship* msg);
};

const ::KWMsg::Ident&
ReqUpgradeExploreGuiderFriendship::_Internal::player_id(const ReqUpgradeExploreGuiderFriendship* msg) {
  return *msg->player_id_;
}
void ReqUpgradeExploreGuiderFriendship::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqUpgradeExploreGuiderFriendship::ReqUpgradeExploreGuiderFriendship(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqUpgradeExploreGuiderFriendship)
}
ReqUpgradeExploreGuiderFriendship::ReqUpgradeExploreGuiderFriendship(const ReqUpgradeExploreGuiderFriendship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  explore_guider_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_explore_guider_id().empty()) {
    explore_guider_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_explore_guider_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqUpgradeExploreGuiderFriendship)
}

void ReqUpgradeExploreGuiderFriendship::SharedCtor() {
explore_guider_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqUpgradeExploreGuiderFriendship::~ReqUpgradeExploreGuiderFriendship() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqUpgradeExploreGuiderFriendship)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqUpgradeExploreGuiderFriendship::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  explore_guider_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqUpgradeExploreGuiderFriendship::ArenaDtor(void* object) {
  ReqUpgradeExploreGuiderFriendship* _this = reinterpret_cast< ReqUpgradeExploreGuiderFriendship* >(object);
  (void)_this;
}
void ReqUpgradeExploreGuiderFriendship::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqUpgradeExploreGuiderFriendship::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqUpgradeExploreGuiderFriendship::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqUpgradeExploreGuiderFriendship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  explore_guider_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqUpgradeExploreGuiderFriendship::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes explore_guider_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_explore_guider_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUpgradeExploreGuiderFriendship::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqUpgradeExploreGuiderFriendship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes explore_guider_id = 2;
  if (!this->explore_guider_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_explore_guider_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqUpgradeExploreGuiderFriendship)
  return target;
}

size_t ReqUpgradeExploreGuiderFriendship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqUpgradeExploreGuiderFriendship)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes explore_guider_id = 2;
  if (!this->explore_guider_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_explore_guider_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUpgradeExploreGuiderFriendship::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqUpgradeExploreGuiderFriendship)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUpgradeExploreGuiderFriendship* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUpgradeExploreGuiderFriendship>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqUpgradeExploreGuiderFriendship)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqUpgradeExploreGuiderFriendship)
    MergeFrom(*source);
  }
}

void ReqUpgradeExploreGuiderFriendship::MergeFrom(const ReqUpgradeExploreGuiderFriendship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqUpgradeExploreGuiderFriendship)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.explore_guider_id().empty()) {
    _internal_set_explore_guider_id(from._internal_explore_guider_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqUpgradeExploreGuiderFriendship::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqUpgradeExploreGuiderFriendship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpgradeExploreGuiderFriendship::CopyFrom(const ReqUpgradeExploreGuiderFriendship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqUpgradeExploreGuiderFriendship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpgradeExploreGuiderFriendship::IsInitialized() const {
  return true;
}

void ReqUpgradeExploreGuiderFriendship::InternalSwap(ReqUpgradeExploreGuiderFriendship* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &explore_guider_id_, GetArenaForAllocation(),
      &other->explore_guider_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUpgradeExploreGuiderFriendship::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[201]);
}

// ===================================================================

class AckUpgradeExploreGuiderFriendship::_Internal {
 public:
};

AckUpgradeExploreGuiderFriendship::AckUpgradeExploreGuiderFriendship(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckUpgradeExploreGuiderFriendship)
}
AckUpgradeExploreGuiderFriendship::AckUpgradeExploreGuiderFriendship(const AckUpgradeExploreGuiderFriendship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckUpgradeExploreGuiderFriendship)
}

void AckUpgradeExploreGuiderFriendship::SharedCtor() {
event_code_ = 0;
}

AckUpgradeExploreGuiderFriendship::~AckUpgradeExploreGuiderFriendship() {
  // @@protoc_insertion_point(destructor:KWMsg.AckUpgradeExploreGuiderFriendship)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckUpgradeExploreGuiderFriendship::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckUpgradeExploreGuiderFriendship::ArenaDtor(void* object) {
  AckUpgradeExploreGuiderFriendship* _this = reinterpret_cast< AckUpgradeExploreGuiderFriendship* >(object);
  (void)_this;
}
void AckUpgradeExploreGuiderFriendship::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckUpgradeExploreGuiderFriendship::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckUpgradeExploreGuiderFriendship::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckUpgradeExploreGuiderFriendship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckUpgradeExploreGuiderFriendship::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckUpgradeExploreGuiderFriendship::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckUpgradeExploreGuiderFriendship)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckUpgradeExploreGuiderFriendship)
  return target;
}

size_t AckUpgradeExploreGuiderFriendship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckUpgradeExploreGuiderFriendship)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckUpgradeExploreGuiderFriendship::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckUpgradeExploreGuiderFriendship)
  GOOGLE_DCHECK_NE(&from, this);
  const AckUpgradeExploreGuiderFriendship* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckUpgradeExploreGuiderFriendship>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckUpgradeExploreGuiderFriendship)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckUpgradeExploreGuiderFriendship)
    MergeFrom(*source);
  }
}

void AckUpgradeExploreGuiderFriendship::MergeFrom(const AckUpgradeExploreGuiderFriendship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckUpgradeExploreGuiderFriendship)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckUpgradeExploreGuiderFriendship::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckUpgradeExploreGuiderFriendship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpgradeExploreGuiderFriendship::CopyFrom(const AckUpgradeExploreGuiderFriendship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckUpgradeExploreGuiderFriendship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpgradeExploreGuiderFriendship::IsInitialized() const {
  return true;
}

void AckUpgradeExploreGuiderFriendship::InternalSwap(AckUpgradeExploreGuiderFriendship* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckUpgradeExploreGuiderFriendship::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[202]);
}

// ===================================================================

class ReqGetAppointReward::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqGetAppointReward* msg);
};

const ::KWMsg::Ident&
ReqGetAppointReward::_Internal::player_id(const ReqGetAppointReward* msg) {
  return *msg->player_id_;
}
void ReqGetAppointReward::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqGetAppointReward::ReqGetAppointReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqGetAppointReward)
}
ReqGetAppointReward::ReqGetAppointReward(const ReqGetAppointReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqGetAppointReward)
}

void ReqGetAppointReward::SharedCtor() {
player_id_ = nullptr;
}

ReqGetAppointReward::~ReqGetAppointReward() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqGetAppointReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqGetAppointReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqGetAppointReward::ArenaDtor(void* object) {
  ReqGetAppointReward* _this = reinterpret_cast< ReqGetAppointReward* >(object);
  (void)_this;
}
void ReqGetAppointReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetAppointReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetAppointReward::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqGetAppointReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetAppointReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetAppointReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqGetAppointReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqGetAppointReward)
  return target;
}

size_t ReqGetAppointReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqGetAppointReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetAppointReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqGetAppointReward)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetAppointReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetAppointReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqGetAppointReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqGetAppointReward)
    MergeFrom(*source);
  }
}

void ReqGetAppointReward::MergeFrom(const ReqGetAppointReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqGetAppointReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqGetAppointReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqGetAppointReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetAppointReward::CopyFrom(const ReqGetAppointReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqGetAppointReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetAppointReward::IsInitialized() const {
  return true;
}

void ReqGetAppointReward::InternalSwap(ReqGetAppointReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetAppointReward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[203]);
}

// ===================================================================

class AckGetAppointReward::_Internal {
 public:
};

AckGetAppointReward::AckGetAppointReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rewards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckGetAppointReward)
}
AckGetAppointReward::AckGetAppointReward(const AckGetAppointReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rewards_(from.rewards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckGetAppointReward)
}

void AckGetAppointReward::SharedCtor() {
event_code_ = 0;
}

AckGetAppointReward::~AckGetAppointReward() {
  // @@protoc_insertion_point(destructor:KWMsg.AckGetAppointReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckGetAppointReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckGetAppointReward::ArenaDtor(void* object) {
  AckGetAppointReward* _this = reinterpret_cast< AckGetAppointReward* >(object);
  (void)_this;
}
void AckGetAppointReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckGetAppointReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckGetAppointReward::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckGetAppointReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewards_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckGetAppointReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RewardInfo rewards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckGetAppointReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckGetAppointReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.RewardInfo rewards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rewards(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckGetAppointReward)
  return target;
}

size_t AckGetAppointReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckGetAppointReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo rewards = 2;
  total_size += 1UL * this->_internal_rewards_size();
  for (const auto& msg : this->rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckGetAppointReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckGetAppointReward)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetAppointReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckGetAppointReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckGetAppointReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckGetAppointReward)
    MergeFrom(*source);
  }
}

void AckGetAppointReward::MergeFrom(const AckGetAppointReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckGetAppointReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewards_.MergeFrom(from.rewards_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckGetAppointReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckGetAppointReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetAppointReward::CopyFrom(const AckGetAppointReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckGetAppointReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetAppointReward::IsInitialized() const {
  return true;
}

void AckGetAppointReward::InternalSwap(AckGetAppointReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rewards_.InternalSwap(&other->rewards_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckGetAppointReward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[204]);
}

// ===================================================================

class ReqSwitchAppointArea::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqSwitchAppointArea* msg);
};

const ::KWMsg::Ident&
ReqSwitchAppointArea::_Internal::player_id(const ReqSwitchAppointArea* msg) {
  return *msg->player_id_;
}
void ReqSwitchAppointArea::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqSwitchAppointArea::ReqSwitchAppointArea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqSwitchAppointArea)
}
ReqSwitchAppointArea::ReqSwitchAppointArea(const ReqSwitchAppointArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appoint_area_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appoint_area_id().empty()) {
    appoint_area_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appoint_area_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqSwitchAppointArea)
}

void ReqSwitchAppointArea::SharedCtor() {
appoint_area_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqSwitchAppointArea::~ReqSwitchAppointArea() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqSwitchAppointArea)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqSwitchAppointArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  appoint_area_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqSwitchAppointArea::ArenaDtor(void* object) {
  ReqSwitchAppointArea* _this = reinterpret_cast< ReqSwitchAppointArea* >(object);
  (void)_this;
}
void ReqSwitchAppointArea::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqSwitchAppointArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSwitchAppointArea::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqSwitchAppointArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appoint_area_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSwitchAppointArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes appoint_area_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_appoint_area_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSwitchAppointArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqSwitchAppointArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes appoint_area_id = 2;
  if (!this->appoint_area_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_appoint_area_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqSwitchAppointArea)
  return target;
}

size_t ReqSwitchAppointArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqSwitchAppointArea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes appoint_area_id = 2;
  if (!this->appoint_area_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_appoint_area_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSwitchAppointArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqSwitchAppointArea)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSwitchAppointArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSwitchAppointArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqSwitchAppointArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqSwitchAppointArea)
    MergeFrom(*source);
  }
}

void ReqSwitchAppointArea::MergeFrom(const ReqSwitchAppointArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqSwitchAppointArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.appoint_area_id().empty()) {
    _internal_set_appoint_area_id(from._internal_appoint_area_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqSwitchAppointArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqSwitchAppointArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSwitchAppointArea::CopyFrom(const ReqSwitchAppointArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqSwitchAppointArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSwitchAppointArea::IsInitialized() const {
  return true;
}

void ReqSwitchAppointArea::InternalSwap(ReqSwitchAppointArea* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &appoint_area_id_, GetArenaForAllocation(),
      &other->appoint_area_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSwitchAppointArea::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[205]);
}

// ===================================================================

class AckSwitchAppointArea::_Internal {
 public:
};

AckSwitchAppointArea::AckSwitchAppointArea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rewards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckSwitchAppointArea)
}
AckSwitchAppointArea::AckSwitchAppointArea(const AckSwitchAppointArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rewards_(from.rewards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appoint_area_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appoint_area_id().empty()) {
    appoint_area_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appoint_area_id(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckSwitchAppointArea)
}

void AckSwitchAppointArea::SharedCtor() {
appoint_area_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckSwitchAppointArea::~AckSwitchAppointArea() {
  // @@protoc_insertion_point(destructor:KWMsg.AckSwitchAppointArea)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckSwitchAppointArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  appoint_area_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckSwitchAppointArea::ArenaDtor(void* object) {
  AckSwitchAppointArea* _this = reinterpret_cast< AckSwitchAppointArea* >(object);
  (void)_this;
}
void AckSwitchAppointArea::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckSwitchAppointArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckSwitchAppointArea::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckSwitchAppointArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewards_.Clear();
  appoint_area_id_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckSwitchAppointArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes appoint_area_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_appoint_area_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RewardInfo rewards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSwitchAppointArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckSwitchAppointArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes appoint_area_id = 2;
  if (!this->appoint_area_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_appoint_area_id(), target);
  }

  // repeated .KWMsg.RewardInfo rewards = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rewards(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckSwitchAppointArea)
  return target;
}

size_t AckSwitchAppointArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckSwitchAppointArea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo rewards = 3;
  total_size += 1UL * this->_internal_rewards_size();
  for (const auto& msg : this->rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes appoint_area_id = 2;
  if (!this->appoint_area_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_appoint_area_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSwitchAppointArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckSwitchAppointArea)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSwitchAppointArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSwitchAppointArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckSwitchAppointArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckSwitchAppointArea)
    MergeFrom(*source);
  }
}

void AckSwitchAppointArea::MergeFrom(const AckSwitchAppointArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckSwitchAppointArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewards_.MergeFrom(from.rewards_);
  if (!from.appoint_area_id().empty()) {
    _internal_set_appoint_area_id(from._internal_appoint_area_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckSwitchAppointArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckSwitchAppointArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSwitchAppointArea::CopyFrom(const AckSwitchAppointArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckSwitchAppointArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSwitchAppointArea::IsInitialized() const {
  return true;
}

void AckSwitchAppointArea::InternalSwap(AckSwitchAppointArea* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rewards_.InternalSwap(&other->rewards_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &appoint_area_id_, GetArenaForAllocation(),
      &other->appoint_area_id_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSwitchAppointArea::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[206]);
}

// ===================================================================

class ReqStartAffair::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqStartAffair* msg);
  static const ::KWMsg::Ident& affair_guid(const ReqStartAffair* msg);
};

const ::KWMsg::Ident&
ReqStartAffair::_Internal::player_id(const ReqStartAffair* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqStartAffair::_Internal::affair_guid(const ReqStartAffair* msg) {
  return *msg->affair_guid_;
}
void ReqStartAffair::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqStartAffair::clear_affair_guid() {
  if (GetArenaForAllocation() == nullptr && affair_guid_ != nullptr) {
    delete affair_guid_;
  }
  affair_guid_ = nullptr;
}
ReqStartAffair::ReqStartAffair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqStartAffair)
}
ReqStartAffair::ReqStartAffair(const ReqStartAffair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  affair_position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_affair_position().empty()) {
    affair_position_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_affair_position(), 
      GetArenaForAllocation());
  }
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_affair_guid()) {
    affair_guid_ = new ::KWMsg::Ident(*from.affair_guid_);
  } else {
    affair_guid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqStartAffair)
}

void ReqStartAffair::SharedCtor() {
affair_position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&affair_guid_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(affair_guid_));
}

ReqStartAffair::~ReqStartAffair() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqStartAffair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqStartAffair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  affair_position_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete affair_guid_;
}

void ReqStartAffair::ArenaDtor(void* object) {
  ReqStartAffair* _this = reinterpret_cast< ReqStartAffair* >(object);
  (void)_this;
}
void ReqStartAffair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqStartAffair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqStartAffair::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqStartAffair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affair_position_.ClearToEmpty();
  witch_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && affair_guid_ != nullptr) {
    delete affair_guid_;
  }
  affair_guid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqStartAffair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes affair_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_affair_position();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident affair_guid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_affair_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqStartAffair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqStartAffair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes affair_position = 2;
  if (!this->affair_position().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_affair_position(), target);
  }

  // bytes witch_id = 3;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_witch_id(), target);
  }

  // .KWMsg.Ident affair_guid = 4;
  if (this->has_affair_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::affair_guid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqStartAffair)
  return target;
}

size_t ReqStartAffair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqStartAffair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes affair_position = 2;
  if (!this->affair_position().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_affair_position());
  }

  // bytes witch_id = 3;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident affair_guid = 4;
  if (this->has_affair_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *affair_guid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqStartAffair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqStartAffair)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqStartAffair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqStartAffair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqStartAffair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqStartAffair)
    MergeFrom(*source);
  }
}

void ReqStartAffair::MergeFrom(const ReqStartAffair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqStartAffair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.affair_position().empty()) {
    _internal_set_affair_position(from._internal_affair_position());
  }
  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_affair_guid()) {
    _internal_mutable_affair_guid()->::KWMsg::Ident::MergeFrom(from._internal_affair_guid());
  }
}

void ReqStartAffair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqStartAffair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqStartAffair::CopyFrom(const ReqStartAffair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqStartAffair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqStartAffair::IsInitialized() const {
  return true;
}

void ReqStartAffair::InternalSwap(ReqStartAffair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &affair_position_, GetArenaForAllocation(),
      &other->affair_position_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqStartAffair, affair_guid_)
      + sizeof(ReqStartAffair::affair_guid_)
      - PROTOBUF_FIELD_OFFSET(ReqStartAffair, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqStartAffair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[207]);
}

// ===================================================================

class AckStartAffair::_Internal {
 public:
  static const ::KWMsg::Ident& affair_guid(const AckStartAffair* msg);
};

const ::KWMsg::Ident&
AckStartAffair::_Internal::affair_guid(const AckStartAffair* msg) {
  return *msg->affair_guid_;
}
void AckStartAffair::clear_affair_guid() {
  if (GetArenaForAllocation() == nullptr && affair_guid_ != nullptr) {
    delete affair_guid_;
  }
  affair_guid_ = nullptr;
}
AckStartAffair::AckStartAffair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckStartAffair)
}
AckStartAffair::AckStartAffair(const AckStartAffair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  affair_position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_affair_position().empty()) {
    affair_position_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_affair_position(), 
      GetArenaForAllocation());
  }
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_affair_guid()) {
    affair_guid_ = new ::KWMsg::Ident(*from.affair_guid_);
  } else {
    affair_guid_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckStartAffair)
}

void AckStartAffair::SharedCtor() {
affair_position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&affair_guid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&affair_guid_)) + sizeof(event_code_));
}

AckStartAffair::~AckStartAffair() {
  // @@protoc_insertion_point(destructor:KWMsg.AckStartAffair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckStartAffair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  affair_position_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete affair_guid_;
}

void AckStartAffair::ArenaDtor(void* object) {
  AckStartAffair* _this = reinterpret_cast< AckStartAffair* >(object);
  (void)_this;
}
void AckStartAffair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckStartAffair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckStartAffair::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckStartAffair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affair_position_.ClearToEmpty();
  witch_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && affair_guid_ != nullptr) {
    delete affair_guid_;
  }
  affair_guid_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckStartAffair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes affair_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_affair_position();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident affair_guid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_affair_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckStartAffair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckStartAffair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes affair_position = 2;
  if (!this->affair_position().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_affair_position(), target);
  }

  // bytes witch_id = 3;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_witch_id(), target);
  }

  // .KWMsg.Ident affair_guid = 4;
  if (this->has_affair_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::affair_guid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckStartAffair)
  return target;
}

size_t AckStartAffair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckStartAffair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes affair_position = 2;
  if (!this->affair_position().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_affair_position());
  }

  // bytes witch_id = 3;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // .KWMsg.Ident affair_guid = 4;
  if (this->has_affair_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *affair_guid_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckStartAffair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckStartAffair)
  GOOGLE_DCHECK_NE(&from, this);
  const AckStartAffair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckStartAffair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckStartAffair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckStartAffair)
    MergeFrom(*source);
  }
}

void AckStartAffair::MergeFrom(const AckStartAffair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckStartAffair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.affair_position().empty()) {
    _internal_set_affair_position(from._internal_affair_position());
  }
  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (from.has_affair_guid()) {
    _internal_mutable_affair_guid()->::KWMsg::Ident::MergeFrom(from._internal_affair_guid());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckStartAffair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckStartAffair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckStartAffair::CopyFrom(const AckStartAffair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckStartAffair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckStartAffair::IsInitialized() const {
  return true;
}

void AckStartAffair::InternalSwap(AckStartAffair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &affair_position_, GetArenaForAllocation(),
      &other->affair_position_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckStartAffair, event_code_)
      + sizeof(AckStartAffair::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckStartAffair, affair_guid_)>(
          reinterpret_cast<char*>(&affair_guid_),
          reinterpret_cast<char*>(&other->affair_guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckStartAffair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[208]);
}

// ===================================================================

class ReqTerminateAffair::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqTerminateAffair* msg);
};

const ::KWMsg::Ident&
ReqTerminateAffair::_Internal::player_id(const ReqTerminateAffair* msg) {
  return *msg->player_id_;
}
void ReqTerminateAffair::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqTerminateAffair::ReqTerminateAffair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqTerminateAffair)
}
ReqTerminateAffair::ReqTerminateAffair(const ReqTerminateAffair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  affair_position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_affair_position().empty()) {
    affair_position_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_affair_position(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqTerminateAffair)
}

void ReqTerminateAffair::SharedCtor() {
affair_position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqTerminateAffair::~ReqTerminateAffair() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqTerminateAffair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqTerminateAffair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  affair_position_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqTerminateAffair::ArenaDtor(void* object) {
  ReqTerminateAffair* _this = reinterpret_cast< ReqTerminateAffair* >(object);
  (void)_this;
}
void ReqTerminateAffair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqTerminateAffair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqTerminateAffair::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqTerminateAffair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affair_position_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqTerminateAffair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes affair_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_affair_position();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqTerminateAffair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqTerminateAffair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes affair_position = 2;
  if (!this->affair_position().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_affair_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqTerminateAffair)
  return target;
}

size_t ReqTerminateAffair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqTerminateAffair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes affair_position = 2;
  if (!this->affair_position().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_affair_position());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqTerminateAffair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqTerminateAffair)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqTerminateAffair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqTerminateAffair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqTerminateAffair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqTerminateAffair)
    MergeFrom(*source);
  }
}

void ReqTerminateAffair::MergeFrom(const ReqTerminateAffair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqTerminateAffair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.affair_position().empty()) {
    _internal_set_affair_position(from._internal_affair_position());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqTerminateAffair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqTerminateAffair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTerminateAffair::CopyFrom(const ReqTerminateAffair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqTerminateAffair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTerminateAffair::IsInitialized() const {
  return true;
}

void ReqTerminateAffair::InternalSwap(ReqTerminateAffair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &affair_position_, GetArenaForAllocation(),
      &other->affair_position_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqTerminateAffair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[209]);
}

// ===================================================================

class AckTerminateAffair::_Internal {
 public:
};

AckTerminateAffair::AckTerminateAffair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckTerminateAffair)
}
AckTerminateAffair::AckTerminateAffair(const AckTerminateAffair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  affair_position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_affair_position().empty()) {
    affair_position_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_affair_position(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckTerminateAffair)
}

void AckTerminateAffair::SharedCtor() {
affair_position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckTerminateAffair::~AckTerminateAffair() {
  // @@protoc_insertion_point(destructor:KWMsg.AckTerminateAffair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckTerminateAffair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  affair_position_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckTerminateAffair::ArenaDtor(void* object) {
  AckTerminateAffair* _this = reinterpret_cast< AckTerminateAffair* >(object);
  (void)_this;
}
void AckTerminateAffair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckTerminateAffair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckTerminateAffair::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckTerminateAffair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affair_position_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckTerminateAffair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes affair_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_affair_position();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckTerminateAffair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckTerminateAffair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes affair_position = 2;
  if (!this->affair_position().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_affair_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckTerminateAffair)
  return target;
}

size_t AckTerminateAffair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckTerminateAffair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes affair_position = 2;
  if (!this->affair_position().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_affair_position());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckTerminateAffair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckTerminateAffair)
  GOOGLE_DCHECK_NE(&from, this);
  const AckTerminateAffair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckTerminateAffair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckTerminateAffair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckTerminateAffair)
    MergeFrom(*source);
  }
}

void AckTerminateAffair::MergeFrom(const AckTerminateAffair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckTerminateAffair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.affair_position().empty()) {
    _internal_set_affair_position(from._internal_affair_position());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckTerminateAffair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckTerminateAffair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTerminateAffair::CopyFrom(const AckTerminateAffair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckTerminateAffair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTerminateAffair::IsInitialized() const {
  return true;
}

void AckTerminateAffair::InternalSwap(AckTerminateAffair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &affair_position_, GetArenaForAllocation(),
      &other->affair_position_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckTerminateAffair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[210]);
}

// ===================================================================

class ReqGetAffairReward::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqGetAffairReward* msg);
};

const ::KWMsg::Ident&
ReqGetAffairReward::_Internal::player_id(const ReqGetAffairReward* msg) {
  return *msg->player_id_;
}
void ReqGetAffairReward::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqGetAffairReward::ReqGetAffairReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqGetAffairReward)
}
ReqGetAffairReward::ReqGetAffairReward(const ReqGetAffairReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  affair_position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_affair_position().empty()) {
    affair_position_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_affair_position(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqGetAffairReward)
}

void ReqGetAffairReward::SharedCtor() {
affair_position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqGetAffairReward::~ReqGetAffairReward() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqGetAffairReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqGetAffairReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  affair_position_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqGetAffairReward::ArenaDtor(void* object) {
  ReqGetAffairReward* _this = reinterpret_cast< ReqGetAffairReward* >(object);
  (void)_this;
}
void ReqGetAffairReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetAffairReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetAffairReward::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqGetAffairReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affair_position_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetAffairReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes affair_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_affair_position();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetAffairReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqGetAffairReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes affair_position = 2;
  if (!this->affair_position().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_affair_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqGetAffairReward)
  return target;
}

size_t ReqGetAffairReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqGetAffairReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes affair_position = 2;
  if (!this->affair_position().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_affair_position());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetAffairReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqGetAffairReward)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetAffairReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetAffairReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqGetAffairReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqGetAffairReward)
    MergeFrom(*source);
  }
}

void ReqGetAffairReward::MergeFrom(const ReqGetAffairReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqGetAffairReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.affair_position().empty()) {
    _internal_set_affair_position(from._internal_affair_position());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqGetAffairReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqGetAffairReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetAffairReward::CopyFrom(const ReqGetAffairReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqGetAffairReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetAffairReward::IsInitialized() const {
  return true;
}

void ReqGetAffairReward::InternalSwap(ReqGetAffairReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &affair_position_, GetArenaForAllocation(),
      &other->affair_position_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetAffairReward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[211]);
}

// ===================================================================

class AckGetAffairReward::_Internal {
 public:
};

AckGetAffairReward::AckGetAffairReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rewards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckGetAffairReward)
}
AckGetAffairReward::AckGetAffairReward(const AckGetAffairReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rewards_(from.rewards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  affair_position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_affair_position().empty()) {
    affair_position_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_affair_position(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckGetAffairReward)
}

void AckGetAffairReward::SharedCtor() {
affair_position_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckGetAffairReward::~AckGetAffairReward() {
  // @@protoc_insertion_point(destructor:KWMsg.AckGetAffairReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckGetAffairReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  affair_position_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckGetAffairReward::ArenaDtor(void* object) {
  AckGetAffairReward* _this = reinterpret_cast< AckGetAffairReward* >(object);
  (void)_this;
}
void AckGetAffairReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckGetAffairReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckGetAffairReward::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckGetAffairReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewards_.Clear();
  affair_position_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckGetAffairReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes affair_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_affair_position();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RewardInfo rewards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckGetAffairReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckGetAffairReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes affair_position = 2;
  if (!this->affair_position().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_affair_position(), target);
  }

  // repeated .KWMsg.RewardInfo rewards = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rewards(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckGetAffairReward)
  return target;
}

size_t AckGetAffairReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckGetAffairReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo rewards = 3;
  total_size += 1UL * this->_internal_rewards_size();
  for (const auto& msg : this->rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes affair_position = 2;
  if (!this->affair_position().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_affair_position());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckGetAffairReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckGetAffairReward)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetAffairReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckGetAffairReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckGetAffairReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckGetAffairReward)
    MergeFrom(*source);
  }
}

void AckGetAffairReward::MergeFrom(const AckGetAffairReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckGetAffairReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewards_.MergeFrom(from.rewards_);
  if (!from.affair_position().empty()) {
    _internal_set_affair_position(from._internal_affair_position());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckGetAffairReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckGetAffairReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetAffairReward::CopyFrom(const AckGetAffairReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckGetAffairReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetAffairReward::IsInitialized() const {
  return true;
}

void AckGetAffairReward::InternalSwap(AckGetAffairReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rewards_.InternalSwap(&other->rewards_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &affair_position_, GetArenaForAllocation(),
      &other->affair_position_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckGetAffairReward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[212]);
}

// ===================================================================

class ReqDeleteAffair::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqDeleteAffair* msg);
  static const ::KWMsg::Ident& affair_guid(const ReqDeleteAffair* msg);
};

const ::KWMsg::Ident&
ReqDeleteAffair::_Internal::player_id(const ReqDeleteAffair* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqDeleteAffair::_Internal::affair_guid(const ReqDeleteAffair* msg) {
  return *msg->affair_guid_;
}
void ReqDeleteAffair::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqDeleteAffair::clear_affair_guid() {
  if (GetArenaForAllocation() == nullptr && affair_guid_ != nullptr) {
    delete affair_guid_;
  }
  affair_guid_ = nullptr;
}
ReqDeleteAffair::ReqDeleteAffair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqDeleteAffair)
}
ReqDeleteAffair::ReqDeleteAffair(const ReqDeleteAffair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_affair_guid()) {
    affair_guid_ = new ::KWMsg::Ident(*from.affair_guid_);
  } else {
    affair_guid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqDeleteAffair)
}

void ReqDeleteAffair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&affair_guid_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(affair_guid_));
}

ReqDeleteAffair::~ReqDeleteAffair() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqDeleteAffair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqDeleteAffair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete affair_guid_;
}

void ReqDeleteAffair::ArenaDtor(void* object) {
  ReqDeleteAffair* _this = reinterpret_cast< ReqDeleteAffair* >(object);
  (void)_this;
}
void ReqDeleteAffair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqDeleteAffair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDeleteAffair::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqDeleteAffair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && affair_guid_ != nullptr) {
    delete affair_guid_;
  }
  affair_guid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDeleteAffair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident affair_guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_affair_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqDeleteAffair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqDeleteAffair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident affair_guid = 2;
  if (this->has_affair_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::affair_guid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqDeleteAffair)
  return target;
}

size_t ReqDeleteAffair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqDeleteAffair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident affair_guid = 2;
  if (this->has_affair_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *affair_guid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqDeleteAffair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqDeleteAffair)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqDeleteAffair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqDeleteAffair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqDeleteAffair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqDeleteAffair)
    MergeFrom(*source);
  }
}

void ReqDeleteAffair::MergeFrom(const ReqDeleteAffair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqDeleteAffair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_affair_guid()) {
    _internal_mutable_affair_guid()->::KWMsg::Ident::MergeFrom(from._internal_affair_guid());
  }
}

void ReqDeleteAffair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqDeleteAffair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDeleteAffair::CopyFrom(const ReqDeleteAffair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqDeleteAffair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDeleteAffair::IsInitialized() const {
  return true;
}

void ReqDeleteAffair::InternalSwap(ReqDeleteAffair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqDeleteAffair, affair_guid_)
      + sizeof(ReqDeleteAffair::affair_guid_)
      - PROTOBUF_FIELD_OFFSET(ReqDeleteAffair, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDeleteAffair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[213]);
}

// ===================================================================

class AckDeleteAffair::_Internal {
 public:
  static const ::KWMsg::Ident& affair_guid(const AckDeleteAffair* msg);
};

const ::KWMsg::Ident&
AckDeleteAffair::_Internal::affair_guid(const AckDeleteAffair* msg) {
  return *msg->affair_guid_;
}
void AckDeleteAffair::clear_affair_guid() {
  if (GetArenaForAllocation() == nullptr && affair_guid_ != nullptr) {
    delete affair_guid_;
  }
  affair_guid_ = nullptr;
}
AckDeleteAffair::AckDeleteAffair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckDeleteAffair)
}
AckDeleteAffair::AckDeleteAffair(const AckDeleteAffair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_affair_guid()) {
    affair_guid_ = new ::KWMsg::Ident(*from.affair_guid_);
  } else {
    affair_guid_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckDeleteAffair)
}

void AckDeleteAffair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&affair_guid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&affair_guid_)) + sizeof(event_code_));
}

AckDeleteAffair::~AckDeleteAffair() {
  // @@protoc_insertion_point(destructor:KWMsg.AckDeleteAffair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckDeleteAffair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete affair_guid_;
}

void AckDeleteAffair::ArenaDtor(void* object) {
  AckDeleteAffair* _this = reinterpret_cast< AckDeleteAffair* >(object);
  (void)_this;
}
void AckDeleteAffair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckDeleteAffair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckDeleteAffair::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckDeleteAffair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && affair_guid_ != nullptr) {
    delete affair_guid_;
  }
  affair_guid_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckDeleteAffair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident affair_guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_affair_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckDeleteAffair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckDeleteAffair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident affair_guid = 2;
  if (this->has_affair_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::affair_guid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckDeleteAffair)
  return target;
}

size_t AckDeleteAffair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckDeleteAffair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident affair_guid = 2;
  if (this->has_affair_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *affair_guid_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckDeleteAffair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckDeleteAffair)
  GOOGLE_DCHECK_NE(&from, this);
  const AckDeleteAffair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckDeleteAffair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckDeleteAffair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckDeleteAffair)
    MergeFrom(*source);
  }
}

void AckDeleteAffair::MergeFrom(const AckDeleteAffair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckDeleteAffair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_affair_guid()) {
    _internal_mutable_affair_guid()->::KWMsg::Ident::MergeFrom(from._internal_affair_guid());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckDeleteAffair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckDeleteAffair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDeleteAffair::CopyFrom(const AckDeleteAffair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckDeleteAffair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDeleteAffair::IsInitialized() const {
  return true;
}

void AckDeleteAffair::InternalSwap(AckDeleteAffair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckDeleteAffair, event_code_)
      + sizeof(AckDeleteAffair::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckDeleteAffair, affair_guid_)>(
          reinterpret_cast<char*>(&affair_guid_),
          reinterpret_cast<char*>(&other->affair_guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckDeleteAffair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[214]);
}

// ===================================================================

class ReqStartAppoint::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqStartAppoint* msg);
};

const ::KWMsg::Ident&
ReqStartAppoint::_Internal::player_id(const ReqStartAppoint* msg) {
  return *msg->player_id_;
}
void ReqStartAppoint::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqStartAppoint::ReqStartAppoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqStartAppoint)
}
ReqStartAppoint::ReqStartAppoint(const ReqStartAppoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqStartAppoint)
}

void ReqStartAppoint::SharedCtor() {
player_id_ = nullptr;
}

ReqStartAppoint::~ReqStartAppoint() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqStartAppoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqStartAppoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqStartAppoint::ArenaDtor(void* object) {
  ReqStartAppoint* _this = reinterpret_cast< ReqStartAppoint* >(object);
  (void)_this;
}
void ReqStartAppoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqStartAppoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqStartAppoint::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqStartAppoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqStartAppoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqStartAppoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqStartAppoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqStartAppoint)
  return target;
}

size_t ReqStartAppoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqStartAppoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqStartAppoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqStartAppoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqStartAppoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqStartAppoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqStartAppoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqStartAppoint)
    MergeFrom(*source);
  }
}

void ReqStartAppoint::MergeFrom(const ReqStartAppoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqStartAppoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqStartAppoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqStartAppoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqStartAppoint::CopyFrom(const ReqStartAppoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqStartAppoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqStartAppoint::IsInitialized() const {
  return true;
}

void ReqStartAppoint::InternalSwap(ReqStartAppoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqStartAppoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[215]);
}

// ===================================================================

class AckStartAppoint::_Internal {
 public:
};

AckStartAppoint::AckStartAppoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckStartAppoint)
}
AckStartAppoint::AckStartAppoint(const AckStartAppoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckStartAppoint)
}

void AckStartAppoint::SharedCtor() {
event_code_ = 0;
}

AckStartAppoint::~AckStartAppoint() {
  // @@protoc_insertion_point(destructor:KWMsg.AckStartAppoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckStartAppoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckStartAppoint::ArenaDtor(void* object) {
  AckStartAppoint* _this = reinterpret_cast< AckStartAppoint* >(object);
  (void)_this;
}
void AckStartAppoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckStartAppoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckStartAppoint::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckStartAppoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckStartAppoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckStartAppoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckStartAppoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckStartAppoint)
  return target;
}

size_t AckStartAppoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckStartAppoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckStartAppoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckStartAppoint)
  GOOGLE_DCHECK_NE(&from, this);
  const AckStartAppoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckStartAppoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckStartAppoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckStartAppoint)
    MergeFrom(*source);
  }
}

void AckStartAppoint::MergeFrom(const AckStartAppoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckStartAppoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckStartAppoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckStartAppoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckStartAppoint::CopyFrom(const AckStartAppoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckStartAppoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckStartAppoint::IsInitialized() const {
  return true;
}

void AckStartAppoint::InternalSwap(AckStartAppoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckStartAppoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[216]);
}

// ===================================================================

class ReqSetHouseKeeper::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqSetHouseKeeper* msg);
};

const ::KWMsg::Ident&
ReqSetHouseKeeper::_Internal::player_id(const ReqSetHouseKeeper* msg) {
  return *msg->player_id_;
}
void ReqSetHouseKeeper::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqSetHouseKeeper::ReqSetHouseKeeper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqSetHouseKeeper)
}
ReqSetHouseKeeper::ReqSetHouseKeeper(const ReqSetHouseKeeper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqSetHouseKeeper)
}

void ReqSetHouseKeeper::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqSetHouseKeeper::~ReqSetHouseKeeper() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqSetHouseKeeper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqSetHouseKeeper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqSetHouseKeeper::ArenaDtor(void* object) {
  ReqSetHouseKeeper* _this = reinterpret_cast< ReqSetHouseKeeper* >(object);
  (void)_this;
}
void ReqSetHouseKeeper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqSetHouseKeeper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSetHouseKeeper::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqSetHouseKeeper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSetHouseKeeper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSetHouseKeeper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqSetHouseKeeper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqSetHouseKeeper)
  return target;
}

size_t ReqSetHouseKeeper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqSetHouseKeeper)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSetHouseKeeper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqSetHouseKeeper)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSetHouseKeeper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSetHouseKeeper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqSetHouseKeeper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqSetHouseKeeper)
    MergeFrom(*source);
  }
}

void ReqSetHouseKeeper::MergeFrom(const ReqSetHouseKeeper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqSetHouseKeeper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqSetHouseKeeper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqSetHouseKeeper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSetHouseKeeper::CopyFrom(const ReqSetHouseKeeper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqSetHouseKeeper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSetHouseKeeper::IsInitialized() const {
  return true;
}

void ReqSetHouseKeeper::InternalSwap(ReqSetHouseKeeper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSetHouseKeeper::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[217]);
}

// ===================================================================

class AckSetHouseKeeper::_Internal {
 public:
};

AckSetHouseKeeper::AckSetHouseKeeper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckSetHouseKeeper)
}
AckSetHouseKeeper::AckSetHouseKeeper(const AckSetHouseKeeper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckSetHouseKeeper)
}

void AckSetHouseKeeper::SharedCtor() {
event_code_ = 0;
}

AckSetHouseKeeper::~AckSetHouseKeeper() {
  // @@protoc_insertion_point(destructor:KWMsg.AckSetHouseKeeper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckSetHouseKeeper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckSetHouseKeeper::ArenaDtor(void* object) {
  AckSetHouseKeeper* _this = reinterpret_cast< AckSetHouseKeeper* >(object);
  (void)_this;
}
void AckSetHouseKeeper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckSetHouseKeeper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckSetHouseKeeper::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckSetHouseKeeper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckSetHouseKeeper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSetHouseKeeper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckSetHouseKeeper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckSetHouseKeeper)
  return target;
}

size_t AckSetHouseKeeper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckSetHouseKeeper)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSetHouseKeeper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckSetHouseKeeper)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSetHouseKeeper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSetHouseKeeper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckSetHouseKeeper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckSetHouseKeeper)
    MergeFrom(*source);
  }
}

void AckSetHouseKeeper::MergeFrom(const AckSetHouseKeeper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckSetHouseKeeper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckSetHouseKeeper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckSetHouseKeeper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSetHouseKeeper::CopyFrom(const AckSetHouseKeeper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckSetHouseKeeper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSetHouseKeeper::IsInitialized() const {
  return true;
}

void AckSetHouseKeeper::InternalSwap(AckSetHouseKeeper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSetHouseKeeper::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[218]);
}

// ===================================================================

class ReqSetHouseKeeperSkinId::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqSetHouseKeeperSkinId* msg);
};

const ::KWMsg::Ident&
ReqSetHouseKeeperSkinId::_Internal::player_id(const ReqSetHouseKeeperSkinId* msg) {
  return *msg->player_id_;
}
void ReqSetHouseKeeperSkinId::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqSetHouseKeeperSkinId::ReqSetHouseKeeperSkinId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqSetHouseKeeperSkinId)
}
ReqSetHouseKeeperSkinId::ReqSetHouseKeeperSkinId(const ReqSetHouseKeeperSkinId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  witch_skin_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_skin_id().empty()) {
    witch_skin_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_skin_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqSetHouseKeeperSkinId)
}

void ReqSetHouseKeeperSkinId::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
witch_skin_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqSetHouseKeeperSkinId::~ReqSetHouseKeeperSkinId() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqSetHouseKeeperSkinId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqSetHouseKeeperSkinId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witch_skin_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqSetHouseKeeperSkinId::ArenaDtor(void* object) {
  ReqSetHouseKeeperSkinId* _this = reinterpret_cast< ReqSetHouseKeeperSkinId* >(object);
  (void)_this;
}
void ReqSetHouseKeeperSkinId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqSetHouseKeeperSkinId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSetHouseKeeperSkinId::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqSetHouseKeeperSkinId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  witch_skin_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSetHouseKeeperSkinId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_skin_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_witch_skin_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSetHouseKeeperSkinId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqSetHouseKeeperSkinId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_id(), target);
  }

  // bytes witch_skin_id = 3;
  if (!this->witch_skin_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_witch_skin_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqSetHouseKeeperSkinId)
  return target;
}

size_t ReqSetHouseKeeperSkinId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqSetHouseKeeperSkinId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // bytes witch_skin_id = 3;
  if (!this->witch_skin_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_skin_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSetHouseKeeperSkinId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqSetHouseKeeperSkinId)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSetHouseKeeperSkinId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSetHouseKeeperSkinId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqSetHouseKeeperSkinId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqSetHouseKeeperSkinId)
    MergeFrom(*source);
  }
}

void ReqSetHouseKeeperSkinId::MergeFrom(const ReqSetHouseKeeperSkinId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqSetHouseKeeperSkinId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (!from.witch_skin_id().empty()) {
    _internal_set_witch_skin_id(from._internal_witch_skin_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqSetHouseKeeperSkinId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqSetHouseKeeperSkinId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSetHouseKeeperSkinId::CopyFrom(const ReqSetHouseKeeperSkinId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqSetHouseKeeperSkinId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSetHouseKeeperSkinId::IsInitialized() const {
  return true;
}

void ReqSetHouseKeeperSkinId::InternalSwap(ReqSetHouseKeeperSkinId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_skin_id_, GetArenaForAllocation(),
      &other->witch_skin_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSetHouseKeeperSkinId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[219]);
}

// ===================================================================

class AckSetHouseKeeperSkinId::_Internal {
 public:
};

AckSetHouseKeeperSkinId::AckSetHouseKeeperSkinId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckSetHouseKeeperSkinId)
}
AckSetHouseKeeperSkinId::AckSetHouseKeeperSkinId(const AckSetHouseKeeperSkinId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckSetHouseKeeperSkinId)
}

void AckSetHouseKeeperSkinId::SharedCtor() {
event_code_ = 0;
}

AckSetHouseKeeperSkinId::~AckSetHouseKeeperSkinId() {
  // @@protoc_insertion_point(destructor:KWMsg.AckSetHouseKeeperSkinId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckSetHouseKeeperSkinId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckSetHouseKeeperSkinId::ArenaDtor(void* object) {
  AckSetHouseKeeperSkinId* _this = reinterpret_cast< AckSetHouseKeeperSkinId* >(object);
  (void)_this;
}
void AckSetHouseKeeperSkinId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckSetHouseKeeperSkinId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckSetHouseKeeperSkinId::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckSetHouseKeeperSkinId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckSetHouseKeeperSkinId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSetHouseKeeperSkinId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckSetHouseKeeperSkinId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckSetHouseKeeperSkinId)
  return target;
}

size_t AckSetHouseKeeperSkinId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckSetHouseKeeperSkinId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSetHouseKeeperSkinId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckSetHouseKeeperSkinId)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSetHouseKeeperSkinId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSetHouseKeeperSkinId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckSetHouseKeeperSkinId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckSetHouseKeeperSkinId)
    MergeFrom(*source);
  }
}

void AckSetHouseKeeperSkinId::MergeFrom(const AckSetHouseKeeperSkinId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckSetHouseKeeperSkinId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckSetHouseKeeperSkinId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckSetHouseKeeperSkinId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSetHouseKeeperSkinId::CopyFrom(const AckSetHouseKeeperSkinId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckSetHouseKeeperSkinId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSetHouseKeeperSkinId::IsInitialized() const {
  return true;
}

void AckSetHouseKeeperSkinId::InternalSwap(AckSetHouseKeeperSkinId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSetHouseKeeperSkinId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[220]);
}

// ===================================================================

class ReqHousekeeperInitSignin::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqHousekeeperInitSignin* msg);
};

const ::KWMsg::Ident&
ReqHousekeeperInitSignin::_Internal::player_id(const ReqHousekeeperInitSignin* msg) {
  return *msg->player_id_;
}
void ReqHousekeeperInitSignin::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqHousekeeperInitSignin::ReqHousekeeperInitSignin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqHousekeeperInitSignin)
}
ReqHousekeeperInitSignin::ReqHousekeeperInitSignin(const ReqHousekeeperInitSignin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqHousekeeperInitSignin)
}

void ReqHousekeeperInitSignin::SharedCtor() {
player_id_ = nullptr;
}

ReqHousekeeperInitSignin::~ReqHousekeeperInitSignin() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqHousekeeperInitSignin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqHousekeeperInitSignin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqHousekeeperInitSignin::ArenaDtor(void* object) {
  ReqHousekeeperInitSignin* _this = reinterpret_cast< ReqHousekeeperInitSignin* >(object);
  (void)_this;
}
void ReqHousekeeperInitSignin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqHousekeeperInitSignin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqHousekeeperInitSignin::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqHousekeeperInitSignin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqHousekeeperInitSignin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqHousekeeperInitSignin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqHousekeeperInitSignin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqHousekeeperInitSignin)
  return target;
}

size_t ReqHousekeeperInitSignin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqHousekeeperInitSignin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqHousekeeperInitSignin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqHousekeeperInitSignin)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqHousekeeperInitSignin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqHousekeeperInitSignin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqHousekeeperInitSignin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqHousekeeperInitSignin)
    MergeFrom(*source);
  }
}

void ReqHousekeeperInitSignin::MergeFrom(const ReqHousekeeperInitSignin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqHousekeeperInitSignin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqHousekeeperInitSignin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqHousekeeperInitSignin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHousekeeperInitSignin::CopyFrom(const ReqHousekeeperInitSignin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqHousekeeperInitSignin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHousekeeperInitSignin::IsInitialized() const {
  return true;
}

void ReqHousekeeperInitSignin::InternalSwap(ReqHousekeeperInitSignin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqHousekeeperInitSignin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[221]);
}

// ===================================================================

class AckHousekeeperInitSignin::_Internal {
 public:
};

AckHousekeeperInitSignin::AckHousekeeperInitSignin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckHousekeeperInitSignin)
}
AckHousekeeperInitSignin::AckHousekeeperInitSignin(const AckHousekeeperInitSignin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckHousekeeperInitSignin)
}

void AckHousekeeperInitSignin::SharedCtor() {
event_code_ = 0;
}

AckHousekeeperInitSignin::~AckHousekeeperInitSignin() {
  // @@protoc_insertion_point(destructor:KWMsg.AckHousekeeperInitSignin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckHousekeeperInitSignin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckHousekeeperInitSignin::ArenaDtor(void* object) {
  AckHousekeeperInitSignin* _this = reinterpret_cast< AckHousekeeperInitSignin* >(object);
  (void)_this;
}
void AckHousekeeperInitSignin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckHousekeeperInitSignin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckHousekeeperInitSignin::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckHousekeeperInitSignin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckHousekeeperInitSignin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckHousekeeperInitSignin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckHousekeeperInitSignin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckHousekeeperInitSignin)
  return target;
}

size_t AckHousekeeperInitSignin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckHousekeeperInitSignin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckHousekeeperInitSignin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckHousekeeperInitSignin)
  GOOGLE_DCHECK_NE(&from, this);
  const AckHousekeeperInitSignin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckHousekeeperInitSignin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckHousekeeperInitSignin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckHousekeeperInitSignin)
    MergeFrom(*source);
  }
}

void AckHousekeeperInitSignin::MergeFrom(const AckHousekeeperInitSignin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckHousekeeperInitSignin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckHousekeeperInitSignin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckHousekeeperInitSignin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHousekeeperInitSignin::CopyFrom(const AckHousekeeperInitSignin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckHousekeeperInitSignin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHousekeeperInitSignin::IsInitialized() const {
  return true;
}

void AckHousekeeperInitSignin::InternalSwap(AckHousekeeperInitSignin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckHousekeeperInitSignin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[222]);
}

// ===================================================================

class ReqHousekeeperFinishedSignin::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqHousekeeperFinishedSignin* msg);
};

const ::KWMsg::Ident&
ReqHousekeeperFinishedSignin::_Internal::player_id(const ReqHousekeeperFinishedSignin* msg) {
  return *msg->player_id_;
}
void ReqHousekeeperFinishedSignin::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqHousekeeperFinishedSignin::ReqHousekeeperFinishedSignin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqHousekeeperFinishedSignin)
}
ReqHousekeeperFinishedSignin::ReqHousekeeperFinishedSignin(const ReqHousekeeperFinishedSignin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqHousekeeperFinishedSignin)
}

void ReqHousekeeperFinishedSignin::SharedCtor() {
player_id_ = nullptr;
}

ReqHousekeeperFinishedSignin::~ReqHousekeeperFinishedSignin() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqHousekeeperFinishedSignin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqHousekeeperFinishedSignin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqHousekeeperFinishedSignin::ArenaDtor(void* object) {
  ReqHousekeeperFinishedSignin* _this = reinterpret_cast< ReqHousekeeperFinishedSignin* >(object);
  (void)_this;
}
void ReqHousekeeperFinishedSignin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqHousekeeperFinishedSignin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqHousekeeperFinishedSignin::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqHousekeeperFinishedSignin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqHousekeeperFinishedSignin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqHousekeeperFinishedSignin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqHousekeeperFinishedSignin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqHousekeeperFinishedSignin)
  return target;
}

size_t ReqHousekeeperFinishedSignin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqHousekeeperFinishedSignin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqHousekeeperFinishedSignin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqHousekeeperFinishedSignin)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqHousekeeperFinishedSignin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqHousekeeperFinishedSignin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqHousekeeperFinishedSignin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqHousekeeperFinishedSignin)
    MergeFrom(*source);
  }
}

void ReqHousekeeperFinishedSignin::MergeFrom(const ReqHousekeeperFinishedSignin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqHousekeeperFinishedSignin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqHousekeeperFinishedSignin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqHousekeeperFinishedSignin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHousekeeperFinishedSignin::CopyFrom(const ReqHousekeeperFinishedSignin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqHousekeeperFinishedSignin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHousekeeperFinishedSignin::IsInitialized() const {
  return true;
}

void ReqHousekeeperFinishedSignin::InternalSwap(ReqHousekeeperFinishedSignin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqHousekeeperFinishedSignin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[223]);
}

// ===================================================================

class AckHousekeeperFinishedSignin::_Internal {
 public:
};

AckHousekeeperFinishedSignin::AckHousekeeperFinishedSignin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckHousekeeperFinishedSignin)
}
AckHousekeeperFinishedSignin::AckHousekeeperFinishedSignin(const AckHousekeeperFinishedSignin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckHousekeeperFinishedSignin)
}

void AckHousekeeperFinishedSignin::SharedCtor() {
event_code_ = 0;
}

AckHousekeeperFinishedSignin::~AckHousekeeperFinishedSignin() {
  // @@protoc_insertion_point(destructor:KWMsg.AckHousekeeperFinishedSignin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckHousekeeperFinishedSignin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckHousekeeperFinishedSignin::ArenaDtor(void* object) {
  AckHousekeeperFinishedSignin* _this = reinterpret_cast< AckHousekeeperFinishedSignin* >(object);
  (void)_this;
}
void AckHousekeeperFinishedSignin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckHousekeeperFinishedSignin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckHousekeeperFinishedSignin::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckHousekeeperFinishedSignin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckHousekeeperFinishedSignin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckHousekeeperFinishedSignin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckHousekeeperFinishedSignin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckHousekeeperFinishedSignin)
  return target;
}

size_t AckHousekeeperFinishedSignin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckHousekeeperFinishedSignin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckHousekeeperFinishedSignin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckHousekeeperFinishedSignin)
  GOOGLE_DCHECK_NE(&from, this);
  const AckHousekeeperFinishedSignin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckHousekeeperFinishedSignin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckHousekeeperFinishedSignin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckHousekeeperFinishedSignin)
    MergeFrom(*source);
  }
}

void AckHousekeeperFinishedSignin::MergeFrom(const AckHousekeeperFinishedSignin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckHousekeeperFinishedSignin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckHousekeeperFinishedSignin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckHousekeeperFinishedSignin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHousekeeperFinishedSignin::CopyFrom(const AckHousekeeperFinishedSignin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckHousekeeperFinishedSignin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHousekeeperFinishedSignin::IsInitialized() const {
  return true;
}

void AckHousekeeperFinishedSignin::InternalSwap(AckHousekeeperFinishedSignin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckHousekeeperFinishedSignin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[224]);
}

// ===================================================================

class ReqGetPneumaIslandStarReward::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqGetPneumaIslandStarReward* msg);
};

const ::KWMsg::Ident&
ReqGetPneumaIslandStarReward::_Internal::player_id(const ReqGetPneumaIslandStarReward* msg) {
  return *msg->player_id_;
}
void ReqGetPneumaIslandStarReward::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqGetPneumaIslandStarReward::ReqGetPneumaIslandStarReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqGetPneumaIslandStarReward)
}
ReqGetPneumaIslandStarReward::ReqGetPneumaIslandStarReward(const ReqGetPneumaIslandStarReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  boss_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boss_id().empty()) {
    boss_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_boss_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  reward_idx_ = from.reward_idx_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqGetPneumaIslandStarReward)
}

void ReqGetPneumaIslandStarReward::SharedCtor() {
boss_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reward_idx_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(reward_idx_));
}

ReqGetPneumaIslandStarReward::~ReqGetPneumaIslandStarReward() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqGetPneumaIslandStarReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqGetPneumaIslandStarReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  boss_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqGetPneumaIslandStarReward::ArenaDtor(void* object) {
  ReqGetPneumaIslandStarReward* _this = reinterpret_cast< ReqGetPneumaIslandStarReward* >(object);
  (void)_this;
}
void ReqGetPneumaIslandStarReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetPneumaIslandStarReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetPneumaIslandStarReward::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqGetPneumaIslandStarReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boss_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  reward_idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetPneumaIslandStarReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes boss_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_boss_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reward_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetPneumaIslandStarReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqGetPneumaIslandStarReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes boss_id = 2;
  if (!this->boss_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_boss_id(), target);
  }

  // int32 reward_idx = 3;
  if (this->reward_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reward_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqGetPneumaIslandStarReward)
  return target;
}

size_t ReqGetPneumaIslandStarReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqGetPneumaIslandStarReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes boss_id = 2;
  if (!this->boss_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_boss_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 reward_idx = 3;
  if (this->reward_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetPneumaIslandStarReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqGetPneumaIslandStarReward)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetPneumaIslandStarReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetPneumaIslandStarReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqGetPneumaIslandStarReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqGetPneumaIslandStarReward)
    MergeFrom(*source);
  }
}

void ReqGetPneumaIslandStarReward::MergeFrom(const ReqGetPneumaIslandStarReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqGetPneumaIslandStarReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.boss_id().empty()) {
    _internal_set_boss_id(from._internal_boss_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.reward_idx() != 0) {
    _internal_set_reward_idx(from._internal_reward_idx());
  }
}

void ReqGetPneumaIslandStarReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqGetPneumaIslandStarReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetPneumaIslandStarReward::CopyFrom(const ReqGetPneumaIslandStarReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqGetPneumaIslandStarReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetPneumaIslandStarReward::IsInitialized() const {
  return true;
}

void ReqGetPneumaIslandStarReward::InternalSwap(ReqGetPneumaIslandStarReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &boss_id_, GetArenaForAllocation(),
      &other->boss_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqGetPneumaIslandStarReward, reward_idx_)
      + sizeof(ReqGetPneumaIslandStarReward::reward_idx_)
      - PROTOBUF_FIELD_OFFSET(ReqGetPneumaIslandStarReward, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetPneumaIslandStarReward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[225]);
}

// ===================================================================

class AckGetPneumaIslandStarReward::_Internal {
 public:
};

AckGetPneumaIslandStarReward::AckGetPneumaIslandStarReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rewards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckGetPneumaIslandStarReward)
}
AckGetPneumaIslandStarReward::AckGetPneumaIslandStarReward(const AckGetPneumaIslandStarReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rewards_(from.rewards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  boss_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boss_id().empty()) {
    boss_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_boss_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_idx_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(reward_idx_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckGetPneumaIslandStarReward)
}

void AckGetPneumaIslandStarReward::SharedCtor() {
boss_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reward_idx_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(reward_idx_));
}

AckGetPneumaIslandStarReward::~AckGetPneumaIslandStarReward() {
  // @@protoc_insertion_point(destructor:KWMsg.AckGetPneumaIslandStarReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckGetPneumaIslandStarReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  boss_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckGetPneumaIslandStarReward::ArenaDtor(void* object) {
  AckGetPneumaIslandStarReward* _this = reinterpret_cast< AckGetPneumaIslandStarReward* >(object);
  (void)_this;
}
void AckGetPneumaIslandStarReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckGetPneumaIslandStarReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckGetPneumaIslandStarReward::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckGetPneumaIslandStarReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewards_.Clear();
  boss_id_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_idx_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(reward_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckGetPneumaIslandStarReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes boss_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_boss_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reward_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RewardInfo rewards = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckGetPneumaIslandStarReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckGetPneumaIslandStarReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes boss_id = 2;
  if (!this->boss_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_boss_id(), target);
  }

  // int32 reward_idx = 3;
  if (this->reward_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reward_idx(), target);
  }

  // repeated .KWMsg.RewardInfo rewards = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_rewards(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckGetPneumaIslandStarReward)
  return target;
}

size_t AckGetPneumaIslandStarReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckGetPneumaIslandStarReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo rewards = 4;
  total_size += 1UL * this->_internal_rewards_size();
  for (const auto& msg : this->rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes boss_id = 2;
  if (!this->boss_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_boss_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 reward_idx = 3;
  if (this->reward_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckGetPneumaIslandStarReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckGetPneumaIslandStarReward)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetPneumaIslandStarReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckGetPneumaIslandStarReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckGetPneumaIslandStarReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckGetPneumaIslandStarReward)
    MergeFrom(*source);
  }
}

void AckGetPneumaIslandStarReward::MergeFrom(const AckGetPneumaIslandStarReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckGetPneumaIslandStarReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewards_.MergeFrom(from.rewards_);
  if (!from.boss_id().empty()) {
    _internal_set_boss_id(from._internal_boss_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.reward_idx() != 0) {
    _internal_set_reward_idx(from._internal_reward_idx());
  }
}

void AckGetPneumaIslandStarReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckGetPneumaIslandStarReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetPneumaIslandStarReward::CopyFrom(const AckGetPneumaIslandStarReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckGetPneumaIslandStarReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetPneumaIslandStarReward::IsInitialized() const {
  return true;
}

void AckGetPneumaIslandStarReward::InternalSwap(AckGetPneumaIslandStarReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rewards_.InternalSwap(&other->rewards_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &boss_id_, GetArenaForAllocation(),
      &other->boss_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckGetPneumaIslandStarReward, reward_idx_)
      + sizeof(AckGetPneumaIslandStarReward::reward_idx_)
      - PROTOBUF_FIELD_OFFSET(AckGetPneumaIslandStarReward, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckGetPneumaIslandStarReward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[226]);
}

// ===================================================================

class ReqUpdatePneumaIslandShowState::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqUpdatePneumaIslandShowState* msg);
};

const ::KWMsg::Ident&
ReqUpdatePneumaIslandShowState::_Internal::player_id(const ReqUpdatePneumaIslandShowState* msg) {
  return *msg->player_id_;
}
void ReqUpdatePneumaIslandShowState::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqUpdatePneumaIslandShowState::ReqUpdatePneumaIslandShowState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqUpdatePneumaIslandShowState)
}
ReqUpdatePneumaIslandShowState::ReqUpdatePneumaIslandShowState(const ReqUpdatePneumaIslandShowState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  boss_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boss_group_id().empty()) {
    boss_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_boss_group_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqUpdatePneumaIslandShowState)
}

void ReqUpdatePneumaIslandShowState::SharedCtor() {
boss_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqUpdatePneumaIslandShowState::~ReqUpdatePneumaIslandShowState() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqUpdatePneumaIslandShowState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqUpdatePneumaIslandShowState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  boss_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqUpdatePneumaIslandShowState::ArenaDtor(void* object) {
  ReqUpdatePneumaIslandShowState* _this = reinterpret_cast< ReqUpdatePneumaIslandShowState* >(object);
  (void)_this;
}
void ReqUpdatePneumaIslandShowState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqUpdatePneumaIslandShowState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqUpdatePneumaIslandShowState::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqUpdatePneumaIslandShowState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boss_group_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqUpdatePneumaIslandShowState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes boss_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_boss_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUpdatePneumaIslandShowState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqUpdatePneumaIslandShowState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes boss_group_id = 2;
  if (!this->boss_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_boss_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqUpdatePneumaIslandShowState)
  return target;
}

size_t ReqUpdatePneumaIslandShowState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqUpdatePneumaIslandShowState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes boss_group_id = 2;
  if (!this->boss_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_boss_group_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUpdatePneumaIslandShowState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqUpdatePneumaIslandShowState)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUpdatePneumaIslandShowState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUpdatePneumaIslandShowState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqUpdatePneumaIslandShowState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqUpdatePneumaIslandShowState)
    MergeFrom(*source);
  }
}

void ReqUpdatePneumaIslandShowState::MergeFrom(const ReqUpdatePneumaIslandShowState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqUpdatePneumaIslandShowState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.boss_group_id().empty()) {
    _internal_set_boss_group_id(from._internal_boss_group_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqUpdatePneumaIslandShowState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqUpdatePneumaIslandShowState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpdatePneumaIslandShowState::CopyFrom(const ReqUpdatePneumaIslandShowState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqUpdatePneumaIslandShowState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdatePneumaIslandShowState::IsInitialized() const {
  return true;
}

void ReqUpdatePneumaIslandShowState::InternalSwap(ReqUpdatePneumaIslandShowState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &boss_group_id_, GetArenaForAllocation(),
      &other->boss_group_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUpdatePneumaIslandShowState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[227]);
}

// ===================================================================

class AckUpdatePneumaIslandShowState::_Internal {
 public:
};

AckUpdatePneumaIslandShowState::AckUpdatePneumaIslandShowState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckUpdatePneumaIslandShowState)
}
AckUpdatePneumaIslandShowState::AckUpdatePneumaIslandShowState(const AckUpdatePneumaIslandShowState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  boss_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boss_group_id().empty()) {
    boss_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_boss_group_id(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckUpdatePneumaIslandShowState)
}

void AckUpdatePneumaIslandShowState::SharedCtor() {
boss_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckUpdatePneumaIslandShowState::~AckUpdatePneumaIslandShowState() {
  // @@protoc_insertion_point(destructor:KWMsg.AckUpdatePneumaIslandShowState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckUpdatePneumaIslandShowState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  boss_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckUpdatePneumaIslandShowState::ArenaDtor(void* object) {
  AckUpdatePneumaIslandShowState* _this = reinterpret_cast< AckUpdatePneumaIslandShowState* >(object);
  (void)_this;
}
void AckUpdatePneumaIslandShowState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckUpdatePneumaIslandShowState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckUpdatePneumaIslandShowState::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckUpdatePneumaIslandShowState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boss_group_id_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckUpdatePneumaIslandShowState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes boss_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_boss_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckUpdatePneumaIslandShowState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckUpdatePneumaIslandShowState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes boss_group_id = 2;
  if (!this->boss_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_boss_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckUpdatePneumaIslandShowState)
  return target;
}

size_t AckUpdatePneumaIslandShowState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckUpdatePneumaIslandShowState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes boss_group_id = 2;
  if (!this->boss_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_boss_group_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckUpdatePneumaIslandShowState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckUpdatePneumaIslandShowState)
  GOOGLE_DCHECK_NE(&from, this);
  const AckUpdatePneumaIslandShowState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckUpdatePneumaIslandShowState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckUpdatePneumaIslandShowState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckUpdatePneumaIslandShowState)
    MergeFrom(*source);
  }
}

void AckUpdatePneumaIslandShowState::MergeFrom(const AckUpdatePneumaIslandShowState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckUpdatePneumaIslandShowState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.boss_group_id().empty()) {
    _internal_set_boss_group_id(from._internal_boss_group_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckUpdatePneumaIslandShowState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckUpdatePneumaIslandShowState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdatePneumaIslandShowState::CopyFrom(const AckUpdatePneumaIslandShowState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckUpdatePneumaIslandShowState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdatePneumaIslandShowState::IsInitialized() const {
  return true;
}

void AckUpdatePneumaIslandShowState::InternalSwap(AckUpdatePneumaIslandShowState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &boss_group_id_, GetArenaForAllocation(),
      &other->boss_group_id_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckUpdatePneumaIslandShowState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[228]);
}

// ===================================================================

class ReqUpdatePneumaAutoDecomposeState::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqUpdatePneumaAutoDecomposeState* msg);
};

const ::KWMsg::Ident&
ReqUpdatePneumaAutoDecomposeState::_Internal::player_id(const ReqUpdatePneumaAutoDecomposeState* msg) {
  return *msg->player_id_;
}
void ReqUpdatePneumaAutoDecomposeState::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqUpdatePneumaAutoDecomposeState::ReqUpdatePneumaAutoDecomposeState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqUpdatePneumaAutoDecomposeState)
}
ReqUpdatePneumaAutoDecomposeState::ReqUpdatePneumaAutoDecomposeState(const ReqUpdatePneumaAutoDecomposeState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqUpdatePneumaAutoDecomposeState)
}

void ReqUpdatePneumaAutoDecomposeState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(enable_));
}

ReqUpdatePneumaAutoDecomposeState::~ReqUpdatePneumaAutoDecomposeState() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqUpdatePneumaAutoDecomposeState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqUpdatePneumaAutoDecomposeState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqUpdatePneumaAutoDecomposeState::ArenaDtor(void* object) {
  ReqUpdatePneumaAutoDecomposeState* _this = reinterpret_cast< ReqUpdatePneumaAutoDecomposeState* >(object);
  (void)_this;
}
void ReqUpdatePneumaAutoDecomposeState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqUpdatePneumaAutoDecomposeState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqUpdatePneumaAutoDecomposeState::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqUpdatePneumaAutoDecomposeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  enable_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqUpdatePneumaAutoDecomposeState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUpdatePneumaAutoDecomposeState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqUpdatePneumaAutoDecomposeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 enable = 2;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqUpdatePneumaAutoDecomposeState)
  return target;
}

size_t ReqUpdatePneumaAutoDecomposeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqUpdatePneumaAutoDecomposeState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 enable = 2;
  if (this->enable() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enable());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUpdatePneumaAutoDecomposeState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqUpdatePneumaAutoDecomposeState)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUpdatePneumaAutoDecomposeState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUpdatePneumaAutoDecomposeState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqUpdatePneumaAutoDecomposeState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqUpdatePneumaAutoDecomposeState)
    MergeFrom(*source);
  }
}

void ReqUpdatePneumaAutoDecomposeState::MergeFrom(const ReqUpdatePneumaAutoDecomposeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqUpdatePneumaAutoDecomposeState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void ReqUpdatePneumaAutoDecomposeState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqUpdatePneumaAutoDecomposeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpdatePneumaAutoDecomposeState::CopyFrom(const ReqUpdatePneumaAutoDecomposeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqUpdatePneumaAutoDecomposeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdatePneumaAutoDecomposeState::IsInitialized() const {
  return true;
}

void ReqUpdatePneumaAutoDecomposeState::InternalSwap(ReqUpdatePneumaAutoDecomposeState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqUpdatePneumaAutoDecomposeState, enable_)
      + sizeof(ReqUpdatePneumaAutoDecomposeState::enable_)
      - PROTOBUF_FIELD_OFFSET(ReqUpdatePneumaAutoDecomposeState, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUpdatePneumaAutoDecomposeState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[229]);
}

// ===================================================================

class AckUpdatePneumaAutoDecomposeState::_Internal {
 public:
};

AckUpdatePneumaAutoDecomposeState::AckUpdatePneumaAutoDecomposeState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckUpdatePneumaAutoDecomposeState)
}
AckUpdatePneumaAutoDecomposeState::AckUpdatePneumaAutoDecomposeState(const AckUpdatePneumaAutoDecomposeState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(enable_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckUpdatePneumaAutoDecomposeState)
}

void AckUpdatePneumaAutoDecomposeState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(enable_));
}

AckUpdatePneumaAutoDecomposeState::~AckUpdatePneumaAutoDecomposeState() {
  // @@protoc_insertion_point(destructor:KWMsg.AckUpdatePneumaAutoDecomposeState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckUpdatePneumaAutoDecomposeState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckUpdatePneumaAutoDecomposeState::ArenaDtor(void* object) {
  AckUpdatePneumaAutoDecomposeState* _this = reinterpret_cast< AckUpdatePneumaAutoDecomposeState* >(object);
  (void)_this;
}
void AckUpdatePneumaAutoDecomposeState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckUpdatePneumaAutoDecomposeState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckUpdatePneumaAutoDecomposeState::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckUpdatePneumaAutoDecomposeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(enable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckUpdatePneumaAutoDecomposeState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckUpdatePneumaAutoDecomposeState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckUpdatePneumaAutoDecomposeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // int32 enable = 2;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckUpdatePneumaAutoDecomposeState)
  return target;
}

size_t AckUpdatePneumaAutoDecomposeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckUpdatePneumaAutoDecomposeState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 enable = 2;
  if (this->enable() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enable());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckUpdatePneumaAutoDecomposeState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckUpdatePneumaAutoDecomposeState)
  GOOGLE_DCHECK_NE(&from, this);
  const AckUpdatePneumaAutoDecomposeState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckUpdatePneumaAutoDecomposeState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckUpdatePneumaAutoDecomposeState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckUpdatePneumaAutoDecomposeState)
    MergeFrom(*source);
  }
}

void AckUpdatePneumaAutoDecomposeState::MergeFrom(const AckUpdatePneumaAutoDecomposeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckUpdatePneumaAutoDecomposeState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
}

void AckUpdatePneumaAutoDecomposeState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckUpdatePneumaAutoDecomposeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdatePneumaAutoDecomposeState::CopyFrom(const AckUpdatePneumaAutoDecomposeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckUpdatePneumaAutoDecomposeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdatePneumaAutoDecomposeState::IsInitialized() const {
  return true;
}

void AckUpdatePneumaAutoDecomposeState::InternalSwap(AckUpdatePneumaAutoDecomposeState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckUpdatePneumaAutoDecomposeState, enable_)
      + sizeof(AckUpdatePneumaAutoDecomposeState::enable_)
      - PROTOBUF_FIELD_OFFSET(AckUpdatePneumaAutoDecomposeState, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckUpdatePneumaAutoDecomposeState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[230]);
}

// ===================================================================

class PneumaDecomposeScheme::_Internal {
 public:
};

PneumaDecomposeScheme::PneumaDecomposeScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PneumaDecomposeScheme)
}
PneumaDecomposeScheme::PneumaDecomposeScheme(const PneumaDecomposeScheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pneuma_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pneuma_type().empty()) {
    pneuma_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pneuma_type(), 
      GetArenaForAllocation());
  }
  decompose_scheme_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_decompose_scheme().empty()) {
    decompose_scheme_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_decompose_scheme(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.PneumaDecomposeScheme)
}

void PneumaDecomposeScheme::SharedCtor() {
pneuma_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
decompose_scheme_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PneumaDecomposeScheme::~PneumaDecomposeScheme() {
  // @@protoc_insertion_point(destructor:KWMsg.PneumaDecomposeScheme)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PneumaDecomposeScheme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pneuma_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  decompose_scheme_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PneumaDecomposeScheme::ArenaDtor(void* object) {
  PneumaDecomposeScheme* _this = reinterpret_cast< PneumaDecomposeScheme* >(object);
  (void)_this;
}
void PneumaDecomposeScheme::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PneumaDecomposeScheme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PneumaDecomposeScheme::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PneumaDecomposeScheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pneuma_type_.ClearToEmpty();
  decompose_scheme_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PneumaDecomposeScheme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pneuma_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pneuma_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes decompose_scheme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_decompose_scheme();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PneumaDecomposeScheme::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PneumaDecomposeScheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pneuma_type = 1;
  if (!this->pneuma_type().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pneuma_type(), target);
  }

  // bytes decompose_scheme = 2;
  if (!this->decompose_scheme().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_decompose_scheme(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PneumaDecomposeScheme)
  return target;
}

size_t PneumaDecomposeScheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PneumaDecomposeScheme)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pneuma_type = 1;
  if (!this->pneuma_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pneuma_type());
  }

  // bytes decompose_scheme = 2;
  if (!this->decompose_scheme().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_decompose_scheme());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PneumaDecomposeScheme::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PneumaDecomposeScheme)
  GOOGLE_DCHECK_NE(&from, this);
  const PneumaDecomposeScheme* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PneumaDecomposeScheme>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PneumaDecomposeScheme)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PneumaDecomposeScheme)
    MergeFrom(*source);
  }
}

void PneumaDecomposeScheme::MergeFrom(const PneumaDecomposeScheme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PneumaDecomposeScheme)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.pneuma_type().empty()) {
    _internal_set_pneuma_type(from._internal_pneuma_type());
  }
  if (!from.decompose_scheme().empty()) {
    _internal_set_decompose_scheme(from._internal_decompose_scheme());
  }
}

void PneumaDecomposeScheme::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PneumaDecomposeScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PneumaDecomposeScheme::CopyFrom(const PneumaDecomposeScheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PneumaDecomposeScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PneumaDecomposeScheme::IsInitialized() const {
  return true;
}

void PneumaDecomposeScheme::InternalSwap(PneumaDecomposeScheme* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pneuma_type_, GetArenaForAllocation(),
      &other->pneuma_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &decompose_scheme_, GetArenaForAllocation(),
      &other->decompose_scheme_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PneumaDecomposeScheme::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[231]);
}

// ===================================================================

class ReqUpdatePneumaDecomposeScheme::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqUpdatePneumaDecomposeScheme* msg);
};

const ::KWMsg::Ident&
ReqUpdatePneumaDecomposeScheme::_Internal::player_id(const ReqUpdatePneumaDecomposeScheme* msg) {
  return *msg->player_id_;
}
void ReqUpdatePneumaDecomposeScheme::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqUpdatePneumaDecomposeScheme::ReqUpdatePneumaDecomposeScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  scheme_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqUpdatePneumaDecomposeScheme)
}
ReqUpdatePneumaDecomposeScheme::ReqUpdatePneumaDecomposeScheme(const ReqUpdatePneumaDecomposeScheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scheme_list_(from.scheme_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  boss_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boss_id().empty()) {
    boss_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_boss_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqUpdatePneumaDecomposeScheme)
}

void ReqUpdatePneumaDecomposeScheme::SharedCtor() {
boss_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqUpdatePneumaDecomposeScheme::~ReqUpdatePneumaDecomposeScheme() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqUpdatePneumaDecomposeScheme)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqUpdatePneumaDecomposeScheme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  boss_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqUpdatePneumaDecomposeScheme::ArenaDtor(void* object) {
  ReqUpdatePneumaDecomposeScheme* _this = reinterpret_cast< ReqUpdatePneumaDecomposeScheme* >(object);
  (void)_this;
}
void ReqUpdatePneumaDecomposeScheme::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqUpdatePneumaDecomposeScheme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqUpdatePneumaDecomposeScheme::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqUpdatePneumaDecomposeScheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scheme_list_.Clear();
  boss_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqUpdatePneumaDecomposeScheme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes boss_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_boss_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.PneumaDecomposeScheme scheme_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scheme_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUpdatePneumaDecomposeScheme::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqUpdatePneumaDecomposeScheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes boss_id = 2;
  if (!this->boss_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_boss_id(), target);
  }

  // repeated .KWMsg.PneumaDecomposeScheme scheme_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scheme_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_scheme_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqUpdatePneumaDecomposeScheme)
  return target;
}

size_t ReqUpdatePneumaDecomposeScheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqUpdatePneumaDecomposeScheme)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.PneumaDecomposeScheme scheme_list = 3;
  total_size += 1UL * this->_internal_scheme_list_size();
  for (const auto& msg : this->scheme_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes boss_id = 2;
  if (!this->boss_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_boss_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUpdatePneumaDecomposeScheme::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqUpdatePneumaDecomposeScheme)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUpdatePneumaDecomposeScheme* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUpdatePneumaDecomposeScheme>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqUpdatePneumaDecomposeScheme)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqUpdatePneumaDecomposeScheme)
    MergeFrom(*source);
  }
}

void ReqUpdatePneumaDecomposeScheme::MergeFrom(const ReqUpdatePneumaDecomposeScheme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqUpdatePneumaDecomposeScheme)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scheme_list_.MergeFrom(from.scheme_list_);
  if (!from.boss_id().empty()) {
    _internal_set_boss_id(from._internal_boss_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqUpdatePneumaDecomposeScheme::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqUpdatePneumaDecomposeScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpdatePneumaDecomposeScheme::CopyFrom(const ReqUpdatePneumaDecomposeScheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqUpdatePneumaDecomposeScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdatePneumaDecomposeScheme::IsInitialized() const {
  return true;
}

void ReqUpdatePneumaDecomposeScheme::InternalSwap(ReqUpdatePneumaDecomposeScheme* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  scheme_list_.InternalSwap(&other->scheme_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &boss_id_, GetArenaForAllocation(),
      &other->boss_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUpdatePneumaDecomposeScheme::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[232]);
}

// ===================================================================

class AckUpdatePneumaDecomposeScheme::_Internal {
 public:
};

AckUpdatePneumaDecomposeScheme::AckUpdatePneumaDecomposeScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  scheme_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckUpdatePneumaDecomposeScheme)
}
AckUpdatePneumaDecomposeScheme::AckUpdatePneumaDecomposeScheme(const AckUpdatePneumaDecomposeScheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scheme_list_(from.scheme_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  boss_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_boss_id().empty()) {
    boss_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_boss_id(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckUpdatePneumaDecomposeScheme)
}

void AckUpdatePneumaDecomposeScheme::SharedCtor() {
boss_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckUpdatePneumaDecomposeScheme::~AckUpdatePneumaDecomposeScheme() {
  // @@protoc_insertion_point(destructor:KWMsg.AckUpdatePneumaDecomposeScheme)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckUpdatePneumaDecomposeScheme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  boss_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckUpdatePneumaDecomposeScheme::ArenaDtor(void* object) {
  AckUpdatePneumaDecomposeScheme* _this = reinterpret_cast< AckUpdatePneumaDecomposeScheme* >(object);
  (void)_this;
}
void AckUpdatePneumaDecomposeScheme::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckUpdatePneumaDecomposeScheme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckUpdatePneumaDecomposeScheme::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckUpdatePneumaDecomposeScheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scheme_list_.Clear();
  boss_id_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckUpdatePneumaDecomposeScheme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes boss_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_boss_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.PneumaDecomposeScheme scheme_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scheme_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckUpdatePneumaDecomposeScheme::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckUpdatePneumaDecomposeScheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes boss_id = 2;
  if (!this->boss_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_boss_id(), target);
  }

  // repeated .KWMsg.PneumaDecomposeScheme scheme_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scheme_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_scheme_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckUpdatePneumaDecomposeScheme)
  return target;
}

size_t AckUpdatePneumaDecomposeScheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckUpdatePneumaDecomposeScheme)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.PneumaDecomposeScheme scheme_list = 3;
  total_size += 1UL * this->_internal_scheme_list_size();
  for (const auto& msg : this->scheme_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes boss_id = 2;
  if (!this->boss_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_boss_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckUpdatePneumaDecomposeScheme::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckUpdatePneumaDecomposeScheme)
  GOOGLE_DCHECK_NE(&from, this);
  const AckUpdatePneumaDecomposeScheme* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckUpdatePneumaDecomposeScheme>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckUpdatePneumaDecomposeScheme)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckUpdatePneumaDecomposeScheme)
    MergeFrom(*source);
  }
}

void AckUpdatePneumaDecomposeScheme::MergeFrom(const AckUpdatePneumaDecomposeScheme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckUpdatePneumaDecomposeScheme)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scheme_list_.MergeFrom(from.scheme_list_);
  if (!from.boss_id().empty()) {
    _internal_set_boss_id(from._internal_boss_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckUpdatePneumaDecomposeScheme::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckUpdatePneumaDecomposeScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdatePneumaDecomposeScheme::CopyFrom(const AckUpdatePneumaDecomposeScheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckUpdatePneumaDecomposeScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdatePneumaDecomposeScheme::IsInitialized() const {
  return true;
}

void AckUpdatePneumaDecomposeScheme::InternalSwap(AckUpdatePneumaDecomposeScheme* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  scheme_list_.InternalSwap(&other->scheme_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &boss_id_, GetArenaForAllocation(),
      &other->boss_id_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckUpdatePneumaDecomposeScheme::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[233]);
}

// ===================================================================

class ReqCreateOrder::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqCreateOrder* msg);
};

const ::KWMsg::Ident&
ReqCreateOrder::_Internal::player_id(const ReqCreateOrder* msg) {
  return *msg->player_id_;
}
void ReqCreateOrder::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqCreateOrder::ReqCreateOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCreateOrder)
}
ReqCreateOrder::ReqCreateOrder(const ReqCreateOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_id().empty()) {
    product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCreateOrder)
}

void ReqCreateOrder::SharedCtor() {
product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqCreateOrder::~ReqCreateOrder() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCreateOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCreateOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  product_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqCreateOrder::ArenaDtor(void* object) {
  ReqCreateOrder* _this = reinterpret_cast< ReqCreateOrder* >(object);
  (void)_this;
}
void ReqCreateOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCreateOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCreateOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCreateOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCreateOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes product_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_product_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCreateOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCreateOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes product_id = 2;
  if (!this->product_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_product_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCreateOrder)
  return target;
}

size_t ReqCreateOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCreateOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes product_id = 2;
  if (!this->product_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_product_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCreateOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCreateOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCreateOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCreateOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCreateOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCreateOrder)
    MergeFrom(*source);
  }
}

void ReqCreateOrder::MergeFrom(const ReqCreateOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCreateOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.product_id().empty()) {
    _internal_set_product_id(from._internal_product_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqCreateOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCreateOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreateOrder::CopyFrom(const ReqCreateOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCreateOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreateOrder::IsInitialized() const {
  return true;
}

void ReqCreateOrder::InternalSwap(ReqCreateOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_id_, GetArenaForAllocation(),
      &other->product_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCreateOrder::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[234]);
}

// ===================================================================

class AckCreateOrder::_Internal {
 public:
};

AckCreateOrder::AckCreateOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCreateOrder)
}
AckCreateOrder::AckCreateOrder(const AckCreateOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_id().empty()) {
    product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_id(), 
      GetArenaForAllocation());
  }
  order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_id().empty()) {
    order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_ts_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(order_ts_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCreateOrder)
}

void AckCreateOrder::SharedCtor() {
product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&order_ts_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(order_ts_));
}

AckCreateOrder::~AckCreateOrder() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCreateOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCreateOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  product_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckCreateOrder::ArenaDtor(void* object) {
  AckCreateOrder* _this = reinterpret_cast< AckCreateOrder* >(object);
  (void)_this;
}
void AckCreateOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCreateOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCreateOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCreateOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_id_.ClearToEmpty();
  order_id_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_ts_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(order_ts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCreateOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes product_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_product_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes order_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 order_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          order_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCreateOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCreateOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes product_id = 2;
  if (!this->product_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_product_id(), target);
  }

  // bytes order_id = 3;
  if (!this->order_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_order_id(), target);
  }

  // int64 order_ts = 4;
  if (this->order_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_order_ts(), target);
  }

  // int32 server_id = 5;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCreateOrder)
  return target;
}

size_t AckCreateOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCreateOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes product_id = 2;
  if (!this->product_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_product_id());
  }

  // bytes order_id = 3;
  if (!this->order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_order_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 server_id = 5;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int64 order_ts = 4;
  if (this->order_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_order_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCreateOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCreateOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCreateOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCreateOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCreateOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCreateOrder)
    MergeFrom(*source);
  }
}

void AckCreateOrder::MergeFrom(const AckCreateOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCreateOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.product_id().empty()) {
    _internal_set_product_id(from._internal_product_id());
  }
  if (!from.order_id().empty()) {
    _internal_set_order_id(from._internal_order_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.order_ts() != 0) {
    _internal_set_order_ts(from._internal_order_ts());
  }
}

void AckCreateOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCreateOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCreateOrder::CopyFrom(const AckCreateOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCreateOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCreateOrder::IsInitialized() const {
  return true;
}

void AckCreateOrder::InternalSwap(AckCreateOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_id_, GetArenaForAllocation(),
      &other->product_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &order_id_, GetArenaForAllocation(),
      &other->order_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckCreateOrder, order_ts_)
      + sizeof(AckCreateOrder::order_ts_)
      - PROTOBUF_FIELD_OFFSET(AckCreateOrder, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCreateOrder::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[235]);
}

// ===================================================================

class ReqCallbackRecharge::_Internal {
 public:
};

ReqCallbackRecharge::ReqCallbackRecharge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCallbackRecharge)
}
ReqCallbackRecharge::ReqCallbackRecharge(const ReqCallbackRecharge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sdk_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sdk_uid().empty()) {
    sdk_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdk_uid(), 
      GetArenaForAllocation());
  }
  sdk_order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sdk_order_id().empty()) {
    sdk_order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdk_order_id(), 
      GetArenaForAllocation());
  }
  app_order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_order_id().empty()) {
    app_order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_order_id(), 
      GetArenaForAllocation());
  }
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_id().empty()) {
    product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_id(), 
      GetArenaForAllocation());
  }
  money_currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_money_currency().empty()) {
    money_currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_money_currency(), 
      GetArenaForAllocation());
  }
  order_currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_currency().empty()) {
    order_currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_currency(), 
      GetArenaForAllocation());
  }
  role_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role_id().empty()) {
    role_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role_id(), 
      GetArenaForAllocation());
  }
  ext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ext().empty()) {
    ext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ext(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_type_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(source_type_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCallbackRecharge)
}

void ReqCallbackRecharge::SharedCtor() {
sdk_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sdk_order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
app_order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
money_currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
order_currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
role_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_type_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(source_type_));
}

ReqCallbackRecharge::~ReqCallbackRecharge() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCallbackRecharge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCallbackRecharge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sdk_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdk_order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  money_currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqCallbackRecharge::ArenaDtor(void* object) {
  ReqCallbackRecharge* _this = reinterpret_cast< ReqCallbackRecharge* >(object);
  (void)_this;
}
void ReqCallbackRecharge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCallbackRecharge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCallbackRecharge::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCallbackRecharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sdk_uid_.ClearToEmpty();
  sdk_order_id_.ClearToEmpty();
  app_order_id_.ClearToEmpty();
  product_id_.ClearToEmpty();
  money_currency_.ClearToEmpty();
  order_currency_.ClearToEmpty();
  role_id_.ClearToEmpty();
  ext_.ClearToEmpty();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_type_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(source_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCallbackRecharge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sdk_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sdk_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sdk_order_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sdk_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes app_order_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_app_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes product_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_product_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 money_amount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          money_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes money_currency = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_money_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 order_amount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          order_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes order_currency = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_order_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pay_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          pay_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 platform_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sandbox = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          sandbox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 source_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          source_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes role_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_role_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ext = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_ext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCallbackRecharge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCallbackRecharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sdk_uid = 1;
  if (!this->sdk_uid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sdk_uid(), target);
  }

  // bytes sdk_order_id = 2;
  if (!this->sdk_order_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sdk_order_id(), target);
  }

  // bytes app_order_id = 3;
  if (!this->app_order_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_app_order_id(), target);
  }

  // bytes product_id = 4;
  if (!this->product_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_product_id(), target);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // int64 money_amount = 6;
  if (this->money_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_money_amount(), target);
  }

  // bytes money_currency = 7;
  if (!this->money_currency().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_money_currency(), target);
  }

  // int64 order_amount = 8;
  if (this->order_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_order_amount(), target);
  }

  // bytes order_currency = 9;
  if (!this->order_currency().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_order_currency(), target);
  }

  // int32 pay_type = 10;
  if (this->pay_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_pay_type(), target);
  }

  // int32 platform_id = 11;
  if (this->platform_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_platform_id(), target);
  }

  // int32 sandbox = 12;
  if (this->sandbox() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_sandbox(), target);
  }

  // int32 source_type = 13;
  if (this->source_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_source_type(), target);
  }

  // bytes role_id = 14;
  if (!this->role_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_role_id(), target);
  }

  // bytes ext = 15;
  if (!this->ext().empty()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_ext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCallbackRecharge)
  return target;
}

size_t ReqCallbackRecharge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCallbackRecharge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sdk_uid = 1;
  if (!this->sdk_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sdk_uid());
  }

  // bytes sdk_order_id = 2;
  if (!this->sdk_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sdk_order_id());
  }

  // bytes app_order_id = 3;
  if (!this->app_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_app_order_id());
  }

  // bytes product_id = 4;
  if (!this->product_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_product_id());
  }

  // bytes money_currency = 7;
  if (!this->money_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_money_currency());
  }

  // bytes order_currency = 9;
  if (!this->order_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_order_currency());
  }

  // bytes role_id = 14;
  if (!this->role_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_role_id());
  }

  // bytes ext = 15;
  if (!this->ext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ext());
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int64 money_amount = 6;
  if (this->money_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_money_amount());
  }

  // int64 order_amount = 8;
  if (this->order_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_order_amount());
  }

  // int32 pay_type = 10;
  if (this->pay_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pay_type());
  }

  // int32 platform_id = 11;
  if (this->platform_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_platform_id());
  }

  // int32 sandbox = 12;
  if (this->sandbox() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sandbox());
  }

  // int32 source_type = 13;
  if (this->source_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_source_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCallbackRecharge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCallbackRecharge)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCallbackRecharge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCallbackRecharge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCallbackRecharge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCallbackRecharge)
    MergeFrom(*source);
  }
}

void ReqCallbackRecharge::MergeFrom(const ReqCallbackRecharge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCallbackRecharge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.sdk_uid().empty()) {
    _internal_set_sdk_uid(from._internal_sdk_uid());
  }
  if (!from.sdk_order_id().empty()) {
    _internal_set_sdk_order_id(from._internal_sdk_order_id());
  }
  if (!from.app_order_id().empty()) {
    _internal_set_app_order_id(from._internal_app_order_id());
  }
  if (!from.product_id().empty()) {
    _internal_set_product_id(from._internal_product_id());
  }
  if (!from.money_currency().empty()) {
    _internal_set_money_currency(from._internal_money_currency());
  }
  if (!from.order_currency().empty()) {
    _internal_set_order_currency(from._internal_order_currency());
  }
  if (!from.role_id().empty()) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (!from.ext().empty()) {
    _internal_set_ext(from._internal_ext());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.money_amount() != 0) {
    _internal_set_money_amount(from._internal_money_amount());
  }
  if (from.order_amount() != 0) {
    _internal_set_order_amount(from._internal_order_amount());
  }
  if (from.pay_type() != 0) {
    _internal_set_pay_type(from._internal_pay_type());
  }
  if (from.platform_id() != 0) {
    _internal_set_platform_id(from._internal_platform_id());
  }
  if (from.sandbox() != 0) {
    _internal_set_sandbox(from._internal_sandbox());
  }
  if (from.source_type() != 0) {
    _internal_set_source_type(from._internal_source_type());
  }
}

void ReqCallbackRecharge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCallbackRecharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCallbackRecharge::CopyFrom(const ReqCallbackRecharge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCallbackRecharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCallbackRecharge::IsInitialized() const {
  return true;
}

void ReqCallbackRecharge::InternalSwap(ReqCallbackRecharge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sdk_uid_, GetArenaForAllocation(),
      &other->sdk_uid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sdk_order_id_, GetArenaForAllocation(),
      &other->sdk_order_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_order_id_, GetArenaForAllocation(),
      &other->app_order_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_id_, GetArenaForAllocation(),
      &other->product_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &money_currency_, GetArenaForAllocation(),
      &other->money_currency_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &order_currency_, GetArenaForAllocation(),
      &other->order_currency_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &role_id_, GetArenaForAllocation(),
      &other->role_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ext_, GetArenaForAllocation(),
      &other->ext_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqCallbackRecharge, source_type_)
      + sizeof(ReqCallbackRecharge::source_type_)
      - PROTOBUF_FIELD_OFFSET(ReqCallbackRecharge, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCallbackRecharge::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[236]);
}

// ===================================================================

class AckCallbackRecharge::_Internal {
 public:
};

AckCallbackRecharge::AckCallbackRecharge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCallbackRecharge)
}
AckCallbackRecharge::AckCallbackRecharge(const AckCallbackRecharge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_order_id().empty()) {
    app_order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_order_id(), 
      GetArenaForAllocation());
  }
  sdk_order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sdk_order_id().empty()) {
    sdk_order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdk_order_id(), 
      GetArenaForAllocation());
  }
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_id().empty()) {
    product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_id(), 
      GetArenaForAllocation());
  }
  money_currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_money_currency().empty()) {
    money_currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_money_currency(), 
      GetArenaForAllocation());
  }
  order_currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_order_currency().empty()) {
    order_currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_currency(), 
      GetArenaForAllocation());
  }
  extra_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra_param().empty()) {
    extra_param_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_param(), 
      GetArenaForAllocation());
  }
  ::memcpy(&money_amount_, &from.money_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&extra_param_type_) -
    reinterpret_cast<char*>(&money_amount_)) + sizeof(extra_param_type_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCallbackRecharge)
}

void AckCallbackRecharge::SharedCtor() {
app_order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sdk_order_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
money_currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
order_currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extra_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&money_amount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extra_param_type_) -
    reinterpret_cast<char*>(&money_amount_)) + sizeof(extra_param_type_));
}

AckCallbackRecharge::~AckCallbackRecharge() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCallbackRecharge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCallbackRecharge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdk_order_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  money_currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckCallbackRecharge::ArenaDtor(void* object) {
  AckCallbackRecharge* _this = reinterpret_cast< AckCallbackRecharge* >(object);
  (void)_this;
}
void AckCallbackRecharge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCallbackRecharge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCallbackRecharge::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCallbackRecharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_order_id_.ClearToEmpty();
  sdk_order_id_.ClearToEmpty();
  product_id_.ClearToEmpty();
  money_currency_.ClearToEmpty();
  order_currency_.ClearToEmpty();
  extra_param_.ClearToEmpty();
  ::memset(&money_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extra_param_type_) -
      reinterpret_cast<char*>(&money_amount_)) + sizeof(extra_param_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCallbackRecharge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes app_order_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sdk_order_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sdk_order_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes product_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_product_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 money_amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          money_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes money_currency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_money_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 order_amount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          order_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes order_currency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_order_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 basic_add_number = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          basic_add_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 extra_add_number = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          extra_add_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 extra_param_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          extra_param_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_param = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_extra_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCallbackRecharge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCallbackRecharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes app_order_id = 2;
  if (!this->app_order_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_app_order_id(), target);
  }

  // bytes sdk_order_id = 3;
  if (!this->sdk_order_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sdk_order_id(), target);
  }

  // bytes product_id = 4;
  if (!this->product_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_product_id(), target);
  }

  // int64 money_amount = 5;
  if (this->money_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_money_amount(), target);
  }

  // bytes money_currency = 6;
  if (!this->money_currency().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_money_currency(), target);
  }

  // int64 order_amount = 7;
  if (this->order_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_order_amount(), target);
  }

  // bytes order_currency = 8;
  if (!this->order_currency().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_order_currency(), target);
  }

  // int32 basic_add_number = 9;
  if (this->basic_add_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_basic_add_number(), target);
  }

  // int32 extra_add_number = 10;
  if (this->extra_add_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_extra_add_number(), target);
  }

  // int32 extra_param_type = 11;
  if (this->extra_param_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_extra_param_type(), target);
  }

  // bytes extra_param = 12;
  if (!this->extra_param().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_extra_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCallbackRecharge)
  return target;
}

size_t AckCallbackRecharge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCallbackRecharge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes app_order_id = 2;
  if (!this->app_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_app_order_id());
  }

  // bytes sdk_order_id = 3;
  if (!this->sdk_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sdk_order_id());
  }

  // bytes product_id = 4;
  if (!this->product_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_product_id());
  }

  // bytes money_currency = 6;
  if (!this->money_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_money_currency());
  }

  // bytes order_currency = 8;
  if (!this->order_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_order_currency());
  }

  // bytes extra_param = 12;
  if (!this->extra_param().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_param());
  }

  // int64 money_amount = 5;
  if (this->money_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_money_amount());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 basic_add_number = 9;
  if (this->basic_add_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_basic_add_number());
  }

  // int64 order_amount = 7;
  if (this->order_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_order_amount());
  }

  // int32 extra_add_number = 10;
  if (this->extra_add_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extra_add_number());
  }

  // int32 extra_param_type = 11;
  if (this->extra_param_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extra_param_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCallbackRecharge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCallbackRecharge)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCallbackRecharge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCallbackRecharge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCallbackRecharge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCallbackRecharge)
    MergeFrom(*source);
  }
}

void AckCallbackRecharge::MergeFrom(const AckCallbackRecharge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCallbackRecharge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.app_order_id().empty()) {
    _internal_set_app_order_id(from._internal_app_order_id());
  }
  if (!from.sdk_order_id().empty()) {
    _internal_set_sdk_order_id(from._internal_sdk_order_id());
  }
  if (!from.product_id().empty()) {
    _internal_set_product_id(from._internal_product_id());
  }
  if (!from.money_currency().empty()) {
    _internal_set_money_currency(from._internal_money_currency());
  }
  if (!from.order_currency().empty()) {
    _internal_set_order_currency(from._internal_order_currency());
  }
  if (!from.extra_param().empty()) {
    _internal_set_extra_param(from._internal_extra_param());
  }
  if (from.money_amount() != 0) {
    _internal_set_money_amount(from._internal_money_amount());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.basic_add_number() != 0) {
    _internal_set_basic_add_number(from._internal_basic_add_number());
  }
  if (from.order_amount() != 0) {
    _internal_set_order_amount(from._internal_order_amount());
  }
  if (from.extra_add_number() != 0) {
    _internal_set_extra_add_number(from._internal_extra_add_number());
  }
  if (from.extra_param_type() != 0) {
    _internal_set_extra_param_type(from._internal_extra_param_type());
  }
}

void AckCallbackRecharge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCallbackRecharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCallbackRecharge::CopyFrom(const AckCallbackRecharge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCallbackRecharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCallbackRecharge::IsInitialized() const {
  return true;
}

void AckCallbackRecharge::InternalSwap(AckCallbackRecharge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_order_id_, GetArenaForAllocation(),
      &other->app_order_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sdk_order_id_, GetArenaForAllocation(),
      &other->sdk_order_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_id_, GetArenaForAllocation(),
      &other->product_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &money_currency_, GetArenaForAllocation(),
      &other->money_currency_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &order_currency_, GetArenaForAllocation(),
      &other->order_currency_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_param_, GetArenaForAllocation(),
      &other->extra_param_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckCallbackRecharge, extra_param_type_)
      + sizeof(AckCallbackRecharge::extra_param_type_)
      - PROTOBUF_FIELD_OFFSET(AckCallbackRecharge, money_amount_)>(
          reinterpret_cast<char*>(&money_amount_),
          reinterpret_cast<char*>(&other->money_amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCallbackRecharge::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[237]);
}

// ===================================================================

class MailInfo::_Internal {
 public:
  static const ::KWMsg::Ident& mail_id(const MailInfo* msg);
};

const ::KWMsg::Ident&
MailInfo::_Internal::mail_id(const MailInfo* msg) {
  return *msg->mail_id_;
}
void MailInfo::clear_mail_id() {
  if (GetArenaForAllocation() == nullptr && mail_id_ != nullptr) {
    delete mail_id_;
  }
  mail_id_ = nullptr;
}
MailInfo::MailInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.MailInfo)
}
MailInfo::MailInfo(const MailInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prompt_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prompt_id().empty()) {
    prompt_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prompt_id(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_context().empty()) {
    context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_context(), 
      GetArenaForAllocation());
  }
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender().empty()) {
    sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender(), 
      GetArenaForAllocation());
  }
  parms_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parms().empty()) {
    parms_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parms(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mail_id()) {
    mail_id_ = new ::KWMsg::Ident(*from.mail_id_);
  } else {
    mail_id_ = nullptr;
  }
  ::memcpy(&create_ts_, &from.create_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&deadline_ts_) -
    reinterpret_cast<char*>(&create_ts_)) + sizeof(deadline_ts_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.MailInfo)
}

void MailInfo::SharedCtor() {
prompt_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parms_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mail_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deadline_ts_) -
    reinterpret_cast<char*>(&mail_id_)) + sizeof(deadline_ts_));
}

MailInfo::~MailInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.MailInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MailInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  prompt_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parms_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mail_id_;
}

void MailInfo::ArenaDtor(void* object) {
  MailInfo* _this = reinterpret_cast< MailInfo* >(object);
  (void)_this;
}
void MailInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MailInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.MailInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  prompt_id_.ClearToEmpty();
  title_.ClearToEmpty();
  context_.ClearToEmpty();
  sender_.ClearToEmpty();
  parms_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mail_id_ != nullptr) {
    delete mail_id_;
  }
  mail_id_ = nullptr;
  ::memset(&create_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deadline_ts_) -
      reinterpret_cast<char*>(&create_ts_)) + sizeof(deadline_ts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident mail_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mail_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes prompt_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_prompt_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes context = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_context();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sender = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes parms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_parms();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RewardInfo reward_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 create_ts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          create_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 deadline_ts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          deadline_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MailInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.MailInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident mail_id = 1;
  if (this->has_mail_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mail_id(this), target, stream);
  }

  // bytes prompt_id = 2;
  if (!this->prompt_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_prompt_id(), target);
  }

  // bytes title = 3;
  if (!this->title().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_title(), target);
  }

  // bytes context = 4;
  if (!this->context().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_context(), target);
  }

  // bytes sender = 5;
  if (!this->sender().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sender(), target);
  }

  // bytes parms = 6;
  if (!this->parms().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_parms(), target);
  }

  // repeated .KWMsg.RewardInfo reward_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_reward_list(i), target, stream);
  }

  // int64 create_ts = 8;
  if (this->create_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_create_ts(), target);
  }

  // int64 deadline_ts = 9;
  if (this->deadline_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_deadline_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.MailInfo)
  return target;
}

size_t MailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.MailInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo reward_list = 7;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes prompt_id = 2;
  if (!this->prompt_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prompt_id());
  }

  // bytes title = 3;
  if (!this->title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_title());
  }

  // bytes context = 4;
  if (!this->context().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_context());
  }

  // bytes sender = 5;
  if (!this->sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender());
  }

  // bytes parms = 6;
  if (!this->parms().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_parms());
  }

  // .KWMsg.Ident mail_id = 1;
  if (this->has_mail_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mail_id_);
  }

  // int64 create_ts = 8;
  if (this->create_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_create_ts());
  }

  // int64 deadline_ts = 9;
  if (this->deadline_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_deadline_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MailInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.MailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MailInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MailInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.MailInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.MailInfo)
    MergeFrom(*source);
  }
}

void MailInfo::MergeFrom(const MailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.MailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (!from.prompt_id().empty()) {
    _internal_set_prompt_id(from._internal_prompt_id());
  }
  if (!from.title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from.context().empty()) {
    _internal_set_context(from._internal_context());
  }
  if (!from.sender().empty()) {
    _internal_set_sender(from._internal_sender());
  }
  if (!from.parms().empty()) {
    _internal_set_parms(from._internal_parms());
  }
  if (from.has_mail_id()) {
    _internal_mutable_mail_id()->::KWMsg::Ident::MergeFrom(from._internal_mail_id());
  }
  if (from.create_ts() != 0) {
    _internal_set_create_ts(from._internal_create_ts());
  }
  if (from.deadline_ts() != 0) {
    _internal_set_deadline_ts(from._internal_deadline_ts());
  }
}

void MailInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.MailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailInfo::CopyFrom(const MailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.MailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailInfo::IsInitialized() const {
  return true;
}

void MailInfo::InternalSwap(MailInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prompt_id_, GetArenaForAllocation(),
      &other->prompt_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, GetArenaForAllocation(),
      &other->title_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &context_, GetArenaForAllocation(),
      &other->context_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sender_, GetArenaForAllocation(),
      &other->sender_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parms_, GetArenaForAllocation(),
      &other->parms_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MailInfo, deadline_ts_)
      + sizeof(MailInfo::deadline_ts_)
      - PROTOBUF_FIELD_OFFSET(MailInfo, mail_id_)>(
          reinterpret_cast<char*>(&mail_id_),
          reinterpret_cast<char*>(&other->mail_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MailInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[238]);
}

// ===================================================================

class MailInfos::_Internal {
 public:
};

MailInfos::MailInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.MailInfos)
}
MailInfos::MailInfos(const MailInfos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.MailInfos)
}

void MailInfos::SharedCtor() {
}

MailInfos::~MailInfos() {
  // @@protoc_insertion_point(destructor:KWMsg.MailInfos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MailInfos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MailInfos::ArenaDtor(void* object) {
  MailInfos* _this = reinterpret_cast< MailInfos* >(object);
  (void)_this;
}
void MailInfos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MailInfos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MailInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.MailInfos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailInfos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.MailInfo list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MailInfos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.MailInfos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.MailInfo list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.MailInfos)
  return target;
}

size_t MailInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.MailInfos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.MailInfo list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MailInfos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.MailInfos)
  GOOGLE_DCHECK_NE(&from, this);
  const MailInfos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MailInfos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.MailInfos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.MailInfos)
    MergeFrom(*source);
  }
}

void MailInfos::MergeFrom(const MailInfos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.MailInfos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void MailInfos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.MailInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailInfos::CopyFrom(const MailInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.MailInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailInfos::IsInitialized() const {
  return true;
}

void MailInfos::InternalSwap(MailInfos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MailInfos::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[239]);
}

// ===================================================================

class ReqDeleteReadedMails::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqDeleteReadedMails* msg);
};

const ::KWMsg::Ident&
ReqDeleteReadedMails::_Internal::player_id(const ReqDeleteReadedMails* msg) {
  return *msg->player_id_;
}
void ReqDeleteReadedMails::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqDeleteReadedMails::ReqDeleteReadedMails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mail_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqDeleteReadedMails)
}
ReqDeleteReadedMails::ReqDeleteReadedMails(const ReqDeleteReadedMails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mail_ids_(from.mail_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqDeleteReadedMails)
}

void ReqDeleteReadedMails::SharedCtor() {
player_id_ = nullptr;
}

ReqDeleteReadedMails::~ReqDeleteReadedMails() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqDeleteReadedMails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqDeleteReadedMails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqDeleteReadedMails::ArenaDtor(void* object) {
  ReqDeleteReadedMails* _this = reinterpret_cast< ReqDeleteReadedMails* >(object);
  (void)_this;
}
void ReqDeleteReadedMails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqDeleteReadedMails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDeleteReadedMails::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqDeleteReadedMails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mail_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDeleteReadedMails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes mail_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mail_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqDeleteReadedMails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqDeleteReadedMails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated bytes mail_ids = 2;
  for (int i = 0, n = this->_internal_mail_ids_size(); i < n; i++) {
    const auto& s = this->_internal_mail_ids(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqDeleteReadedMails)
  return target;
}

size_t ReqDeleteReadedMails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqDeleteReadedMails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes mail_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(mail_ids_.size());
  for (int i = 0, n = mail_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      mail_ids_.Get(i));
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqDeleteReadedMails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqDeleteReadedMails)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqDeleteReadedMails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqDeleteReadedMails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqDeleteReadedMails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqDeleteReadedMails)
    MergeFrom(*source);
  }
}

void ReqDeleteReadedMails::MergeFrom(const ReqDeleteReadedMails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqDeleteReadedMails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mail_ids_.MergeFrom(from.mail_ids_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqDeleteReadedMails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqDeleteReadedMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDeleteReadedMails::CopyFrom(const ReqDeleteReadedMails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqDeleteReadedMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDeleteReadedMails::IsInitialized() const {
  return true;
}

void ReqDeleteReadedMails::InternalSwap(ReqDeleteReadedMails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mail_ids_.InternalSwap(&other->mail_ids_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDeleteReadedMails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[240]);
}

// ===================================================================

class AckDeleteReadedMails::_Internal {
 public:
};

AckDeleteReadedMails::AckDeleteReadedMails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckDeleteReadedMails)
}
AckDeleteReadedMails::AckDeleteReadedMails(const AckDeleteReadedMails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckDeleteReadedMails)
}

void AckDeleteReadedMails::SharedCtor() {
event_code_ = 0;
}

AckDeleteReadedMails::~AckDeleteReadedMails() {
  // @@protoc_insertion_point(destructor:KWMsg.AckDeleteReadedMails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckDeleteReadedMails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckDeleteReadedMails::ArenaDtor(void* object) {
  AckDeleteReadedMails* _this = reinterpret_cast< AckDeleteReadedMails* >(object);
  (void)_this;
}
void AckDeleteReadedMails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckDeleteReadedMails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckDeleteReadedMails::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckDeleteReadedMails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckDeleteReadedMails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckDeleteReadedMails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckDeleteReadedMails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckDeleteReadedMails)
  return target;
}

size_t AckDeleteReadedMails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckDeleteReadedMails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckDeleteReadedMails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckDeleteReadedMails)
  GOOGLE_DCHECK_NE(&from, this);
  const AckDeleteReadedMails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckDeleteReadedMails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckDeleteReadedMails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckDeleteReadedMails)
    MergeFrom(*source);
  }
}

void AckDeleteReadedMails::MergeFrom(const AckDeleteReadedMails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckDeleteReadedMails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckDeleteReadedMails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckDeleteReadedMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDeleteReadedMails::CopyFrom(const AckDeleteReadedMails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckDeleteReadedMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDeleteReadedMails::IsInitialized() const {
  return true;
}

void AckDeleteReadedMails::InternalSwap(AckDeleteReadedMails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckDeleteReadedMails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[241]);
}

// ===================================================================

class ReqReadMails::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqReadMails* msg);
};

const ::KWMsg::Ident&
ReqReadMails::_Internal::player_id(const ReqReadMails* msg) {
  return *msg->player_id_;
}
void ReqReadMails::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqReadMails::ReqReadMails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mail_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqReadMails)
}
ReqReadMails::ReqReadMails(const ReqReadMails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mail_ids_(from.mail_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqReadMails)
}

void ReqReadMails::SharedCtor() {
player_id_ = nullptr;
}

ReqReadMails::~ReqReadMails() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqReadMails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqReadMails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqReadMails::ArenaDtor(void* object) {
  ReqReadMails* _this = reinterpret_cast< ReqReadMails* >(object);
  (void)_this;
}
void ReqReadMails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqReadMails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqReadMails::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqReadMails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mail_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqReadMails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes mail_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mail_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqReadMails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqReadMails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated bytes mail_ids = 2;
  for (int i = 0, n = this->_internal_mail_ids_size(); i < n; i++) {
    const auto& s = this->_internal_mail_ids(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqReadMails)
  return target;
}

size_t ReqReadMails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqReadMails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes mail_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(mail_ids_.size());
  for (int i = 0, n = mail_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      mail_ids_.Get(i));
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqReadMails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqReadMails)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqReadMails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqReadMails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqReadMails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqReadMails)
    MergeFrom(*source);
  }
}

void ReqReadMails::MergeFrom(const ReqReadMails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqReadMails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mail_ids_.MergeFrom(from.mail_ids_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqReadMails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqReadMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqReadMails::CopyFrom(const ReqReadMails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqReadMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqReadMails::IsInitialized() const {
  return true;
}

void ReqReadMails::InternalSwap(ReqReadMails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mail_ids_.InternalSwap(&other->mail_ids_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqReadMails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[242]);
}

// ===================================================================

class AckReadMails::_Internal {
 public:
};

AckReadMails::AckReadMails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckReadMails)
}
AckReadMails::AckReadMails(const AckReadMails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckReadMails)
}

void AckReadMails::SharedCtor() {
event_code_ = 0;
}

AckReadMails::~AckReadMails() {
  // @@protoc_insertion_point(destructor:KWMsg.AckReadMails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckReadMails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckReadMails::ArenaDtor(void* object) {
  AckReadMails* _this = reinterpret_cast< AckReadMails* >(object);
  (void)_this;
}
void AckReadMails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckReadMails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckReadMails::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckReadMails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckReadMails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RewardInfo reward_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckReadMails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckReadMails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated .KWMsg.RewardInfo reward_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reward_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckReadMails)
  return target;
}

size_t AckReadMails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckReadMails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo reward_list = 2;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckReadMails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckReadMails)
  GOOGLE_DCHECK_NE(&from, this);
  const AckReadMails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckReadMails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckReadMails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckReadMails)
    MergeFrom(*source);
  }
}

void AckReadMails::MergeFrom(const AckReadMails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckReadMails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckReadMails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckReadMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReadMails::CopyFrom(const AckReadMails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckReadMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReadMails::IsInitialized() const {
  return true;
}

void AckReadMails::InternalSwap(AckReadMails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckReadMails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[243]);
}

// ===================================================================

class ReqWorldSendMailToPlayer::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqWorldSendMailToPlayer* msg);
  static const ::KWMsg::MailInfo& mail_info(const ReqWorldSendMailToPlayer* msg);
};

const ::KWMsg::Ident&
ReqWorldSendMailToPlayer::_Internal::player_id(const ReqWorldSendMailToPlayer* msg) {
  return *msg->player_id_;
}
const ::KWMsg::MailInfo&
ReqWorldSendMailToPlayer::_Internal::mail_info(const ReqWorldSendMailToPlayer* msg) {
  return *msg->mail_info_;
}
void ReqWorldSendMailToPlayer::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqWorldSendMailToPlayer::ReqWorldSendMailToPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqWorldSendMailToPlayer)
}
ReqWorldSendMailToPlayer::ReqWorldSendMailToPlayer(const ReqWorldSendMailToPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_mail_info()) {
    mail_info_ = new ::KWMsg::MailInfo(*from.mail_info_);
  } else {
    mail_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqWorldSendMailToPlayer)
}

void ReqWorldSendMailToPlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mail_info_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(mail_info_));
}

ReqWorldSendMailToPlayer::~ReqWorldSendMailToPlayer() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqWorldSendMailToPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqWorldSendMailToPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete mail_info_;
}

void ReqWorldSendMailToPlayer::ArenaDtor(void* object) {
  ReqWorldSendMailToPlayer* _this = reinterpret_cast< ReqWorldSendMailToPlayer* >(object);
  (void)_this;
}
void ReqWorldSendMailToPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqWorldSendMailToPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqWorldSendMailToPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqWorldSendMailToPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mail_info_ != nullptr) {
    delete mail_info_;
  }
  mail_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqWorldSendMailToPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.MailInfo mail_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mail_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqWorldSendMailToPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqWorldSendMailToPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.MailInfo mail_info = 2;
  if (this->has_mail_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mail_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqWorldSendMailToPlayer)
  return target;
}

size_t ReqWorldSendMailToPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqWorldSendMailToPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.MailInfo mail_info = 2;
  if (this->has_mail_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mail_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqWorldSendMailToPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqWorldSendMailToPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqWorldSendMailToPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqWorldSendMailToPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqWorldSendMailToPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqWorldSendMailToPlayer)
    MergeFrom(*source);
  }
}

void ReqWorldSendMailToPlayer::MergeFrom(const ReqWorldSendMailToPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqWorldSendMailToPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_mail_info()) {
    _internal_mutable_mail_info()->::KWMsg::MailInfo::MergeFrom(from._internal_mail_info());
  }
}

void ReqWorldSendMailToPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqWorldSendMailToPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWorldSendMailToPlayer::CopyFrom(const ReqWorldSendMailToPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqWorldSendMailToPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWorldSendMailToPlayer::IsInitialized() const {
  return true;
}

void ReqWorldSendMailToPlayer::InternalSwap(ReqWorldSendMailToPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqWorldSendMailToPlayer, mail_info_)
      + sizeof(ReqWorldSendMailToPlayer::mail_info_)
      - PROTOBUF_FIELD_OFFSET(ReqWorldSendMailToPlayer, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqWorldSendMailToPlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[244]);
}

// ===================================================================

class AckWorldSendMailToPlayer::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AckWorldSendMailToPlayer* msg);
  static const ::KWMsg::MailInfo& mail_info(const AckWorldSendMailToPlayer* msg);
};

const ::KWMsg::Ident&
AckWorldSendMailToPlayer::_Internal::player_id(const AckWorldSendMailToPlayer* msg) {
  return *msg->player_id_;
}
const ::KWMsg::MailInfo&
AckWorldSendMailToPlayer::_Internal::mail_info(const AckWorldSendMailToPlayer* msg) {
  return *msg->mail_info_;
}
void AckWorldSendMailToPlayer::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AckWorldSendMailToPlayer::AckWorldSendMailToPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckWorldSendMailToPlayer)
}
AckWorldSendMailToPlayer::AckWorldSendMailToPlayer(const AckWorldSendMailToPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_mail_info()) {
    mail_info_ = new ::KWMsg::MailInfo(*from.mail_info_);
  } else {
    mail_info_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckWorldSendMailToPlayer)
}

void AckWorldSendMailToPlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(event_code_));
}

AckWorldSendMailToPlayer::~AckWorldSendMailToPlayer() {
  // @@protoc_insertion_point(destructor:KWMsg.AckWorldSendMailToPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckWorldSendMailToPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete mail_info_;
}

void AckWorldSendMailToPlayer::ArenaDtor(void* object) {
  AckWorldSendMailToPlayer* _this = reinterpret_cast< AckWorldSendMailToPlayer* >(object);
  (void)_this;
}
void AckWorldSendMailToPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckWorldSendMailToPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckWorldSendMailToPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckWorldSendMailToPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mail_info_ != nullptr) {
    delete mail_info_;
  }
  mail_info_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckWorldSendMailToPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.MailInfo mail_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mail_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckWorldSendMailToPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckWorldSendMailToPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.MailInfo mail_info = 3;
  if (this->has_mail_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mail_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckWorldSendMailToPlayer)
  return target;
}

size_t AckWorldSendMailToPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckWorldSendMailToPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.MailInfo mail_info = 3;
  if (this->has_mail_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mail_info_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckWorldSendMailToPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckWorldSendMailToPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const AckWorldSendMailToPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckWorldSendMailToPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckWorldSendMailToPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckWorldSendMailToPlayer)
    MergeFrom(*source);
  }
}

void AckWorldSendMailToPlayer::MergeFrom(const AckWorldSendMailToPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckWorldSendMailToPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_mail_info()) {
    _internal_mutable_mail_info()->::KWMsg::MailInfo::MergeFrom(from._internal_mail_info());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckWorldSendMailToPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckWorldSendMailToPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckWorldSendMailToPlayer::CopyFrom(const AckWorldSendMailToPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckWorldSendMailToPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckWorldSendMailToPlayer::IsInitialized() const {
  return true;
}

void AckWorldSendMailToPlayer::InternalSwap(AckWorldSendMailToPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckWorldSendMailToPlayer, event_code_)
      + sizeof(AckWorldSendMailToPlayer::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckWorldSendMailToPlayer, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckWorldSendMailToPlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[245]);
}

// ===================================================================

class SyncAddPreSendAllPlayersMails::_Internal {
 public:
  static const ::KWMsg::MailInfo& mail_info(const SyncAddPreSendAllPlayersMails* msg);
};

const ::KWMsg::MailInfo&
SyncAddPreSendAllPlayersMails::_Internal::mail_info(const SyncAddPreSendAllPlayersMails* msg) {
  return *msg->mail_info_;
}
SyncAddPreSendAllPlayersMails::SyncAddPreSendAllPlayersMails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncAddPreSendAllPlayersMails)
}
SyncAddPreSendAllPlayersMails::SyncAddPreSendAllPlayersMails(const SyncAddPreSendAllPlayersMails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mail_info()) {
    mail_info_ = new ::KWMsg::MailInfo(*from.mail_info_);
  } else {
    mail_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncAddPreSendAllPlayersMails)
}

void SyncAddPreSendAllPlayersMails::SharedCtor() {
mail_info_ = nullptr;
}

SyncAddPreSendAllPlayersMails::~SyncAddPreSendAllPlayersMails() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncAddPreSendAllPlayersMails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncAddPreSendAllPlayersMails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mail_info_;
}

void SyncAddPreSendAllPlayersMails::ArenaDtor(void* object) {
  SyncAddPreSendAllPlayersMails* _this = reinterpret_cast< SyncAddPreSendAllPlayersMails* >(object);
  (void)_this;
}
void SyncAddPreSendAllPlayersMails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncAddPreSendAllPlayersMails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncAddPreSendAllPlayersMails::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncAddPreSendAllPlayersMails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && mail_info_ != nullptr) {
    delete mail_info_;
  }
  mail_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncAddPreSendAllPlayersMails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.MailInfo mail_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mail_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncAddPreSendAllPlayersMails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncAddPreSendAllPlayersMails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.MailInfo mail_info = 1;
  if (this->has_mail_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mail_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncAddPreSendAllPlayersMails)
  return target;
}

size_t SyncAddPreSendAllPlayersMails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncAddPreSendAllPlayersMails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.MailInfo mail_info = 1;
  if (this->has_mail_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mail_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncAddPreSendAllPlayersMails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncAddPreSendAllPlayersMails)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncAddPreSendAllPlayersMails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncAddPreSendAllPlayersMails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncAddPreSendAllPlayersMails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncAddPreSendAllPlayersMails)
    MergeFrom(*source);
  }
}

void SyncAddPreSendAllPlayersMails::MergeFrom(const SyncAddPreSendAllPlayersMails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncAddPreSendAllPlayersMails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mail_info()) {
    _internal_mutable_mail_info()->::KWMsg::MailInfo::MergeFrom(from._internal_mail_info());
  }
}

void SyncAddPreSendAllPlayersMails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncAddPreSendAllPlayersMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncAddPreSendAllPlayersMails::CopyFrom(const SyncAddPreSendAllPlayersMails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncAddPreSendAllPlayersMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncAddPreSendAllPlayersMails::IsInitialized() const {
  return true;
}

void SyncAddPreSendAllPlayersMails::InternalSwap(SyncAddPreSendAllPlayersMails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mail_info_, other->mail_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncAddPreSendAllPlayersMails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[246]);
}

// ===================================================================

class SyncDelPreSendAllPlayersMails::_Internal {
 public:
  static const ::KWMsg::MailInfo& mail_info(const SyncDelPreSendAllPlayersMails* msg);
};

const ::KWMsg::MailInfo&
SyncDelPreSendAllPlayersMails::_Internal::mail_info(const SyncDelPreSendAllPlayersMails* msg) {
  return *msg->mail_info_;
}
SyncDelPreSendAllPlayersMails::SyncDelPreSendAllPlayersMails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncDelPreSendAllPlayersMails)
}
SyncDelPreSendAllPlayersMails::SyncDelPreSendAllPlayersMails(const SyncDelPreSendAllPlayersMails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mail_info()) {
    mail_info_ = new ::KWMsg::MailInfo(*from.mail_info_);
  } else {
    mail_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncDelPreSendAllPlayersMails)
}

void SyncDelPreSendAllPlayersMails::SharedCtor() {
mail_info_ = nullptr;
}

SyncDelPreSendAllPlayersMails::~SyncDelPreSendAllPlayersMails() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncDelPreSendAllPlayersMails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncDelPreSendAllPlayersMails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mail_info_;
}

void SyncDelPreSendAllPlayersMails::ArenaDtor(void* object) {
  SyncDelPreSendAllPlayersMails* _this = reinterpret_cast< SyncDelPreSendAllPlayersMails* >(object);
  (void)_this;
}
void SyncDelPreSendAllPlayersMails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncDelPreSendAllPlayersMails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncDelPreSendAllPlayersMails::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncDelPreSendAllPlayersMails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && mail_info_ != nullptr) {
    delete mail_info_;
  }
  mail_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncDelPreSendAllPlayersMails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.MailInfo mail_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mail_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncDelPreSendAllPlayersMails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncDelPreSendAllPlayersMails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.MailInfo mail_info = 1;
  if (this->has_mail_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mail_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncDelPreSendAllPlayersMails)
  return target;
}

size_t SyncDelPreSendAllPlayersMails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncDelPreSendAllPlayersMails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.MailInfo mail_info = 1;
  if (this->has_mail_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mail_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncDelPreSendAllPlayersMails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncDelPreSendAllPlayersMails)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncDelPreSendAllPlayersMails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncDelPreSendAllPlayersMails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncDelPreSendAllPlayersMails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncDelPreSendAllPlayersMails)
    MergeFrom(*source);
  }
}

void SyncDelPreSendAllPlayersMails::MergeFrom(const SyncDelPreSendAllPlayersMails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncDelPreSendAllPlayersMails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mail_info()) {
    _internal_mutable_mail_info()->::KWMsg::MailInfo::MergeFrom(from._internal_mail_info());
  }
}

void SyncDelPreSendAllPlayersMails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncDelPreSendAllPlayersMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncDelPreSendAllPlayersMails::CopyFrom(const SyncDelPreSendAllPlayersMails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncDelPreSendAllPlayersMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncDelPreSendAllPlayersMails::IsInitialized() const {
  return true;
}

void SyncDelPreSendAllPlayersMails::InternalSwap(SyncDelPreSendAllPlayersMails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mail_info_, other->mail_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncDelPreSendAllPlayersMails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[247]);
}

// ===================================================================

class SyncAddPreSendPlayerMails::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SyncAddPreSendPlayerMails* msg);
  static const ::KWMsg::MailInfo& mail_info(const SyncAddPreSendPlayerMails* msg);
};

const ::KWMsg::Ident&
SyncAddPreSendPlayerMails::_Internal::player_id(const SyncAddPreSendPlayerMails* msg) {
  return *msg->player_id_;
}
const ::KWMsg::MailInfo&
SyncAddPreSendPlayerMails::_Internal::mail_info(const SyncAddPreSendPlayerMails* msg) {
  return *msg->mail_info_;
}
void SyncAddPreSendPlayerMails::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
SyncAddPreSendPlayerMails::SyncAddPreSendPlayerMails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncAddPreSendPlayerMails)
}
SyncAddPreSendPlayerMails::SyncAddPreSendPlayerMails(const SyncAddPreSendPlayerMails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_mail_info()) {
    mail_info_ = new ::KWMsg::MailInfo(*from.mail_info_);
  } else {
    mail_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncAddPreSendPlayerMails)
}

void SyncAddPreSendPlayerMails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mail_info_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(mail_info_));
}

SyncAddPreSendPlayerMails::~SyncAddPreSendPlayerMails() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncAddPreSendPlayerMails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncAddPreSendPlayerMails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete mail_info_;
}

void SyncAddPreSendPlayerMails::ArenaDtor(void* object) {
  SyncAddPreSendPlayerMails* _this = reinterpret_cast< SyncAddPreSendPlayerMails* >(object);
  (void)_this;
}
void SyncAddPreSendPlayerMails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncAddPreSendPlayerMails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncAddPreSendPlayerMails::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncAddPreSendPlayerMails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mail_info_ != nullptr) {
    delete mail_info_;
  }
  mail_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncAddPreSendPlayerMails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.MailInfo mail_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mail_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncAddPreSendPlayerMails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncAddPreSendPlayerMails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.MailInfo mail_info = 2;
  if (this->has_mail_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mail_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncAddPreSendPlayerMails)
  return target;
}

size_t SyncAddPreSendPlayerMails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncAddPreSendPlayerMails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.MailInfo mail_info = 2;
  if (this->has_mail_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mail_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncAddPreSendPlayerMails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncAddPreSendPlayerMails)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncAddPreSendPlayerMails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncAddPreSendPlayerMails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncAddPreSendPlayerMails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncAddPreSendPlayerMails)
    MergeFrom(*source);
  }
}

void SyncAddPreSendPlayerMails::MergeFrom(const SyncAddPreSendPlayerMails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncAddPreSendPlayerMails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_mail_info()) {
    _internal_mutable_mail_info()->::KWMsg::MailInfo::MergeFrom(from._internal_mail_info());
  }
}

void SyncAddPreSendPlayerMails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncAddPreSendPlayerMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncAddPreSendPlayerMails::CopyFrom(const SyncAddPreSendPlayerMails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncAddPreSendPlayerMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncAddPreSendPlayerMails::IsInitialized() const {
  return true;
}

void SyncAddPreSendPlayerMails::InternalSwap(SyncAddPreSendPlayerMails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncAddPreSendPlayerMails, mail_info_)
      + sizeof(SyncAddPreSendPlayerMails::mail_info_)
      - PROTOBUF_FIELD_OFFSET(SyncAddPreSendPlayerMails, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncAddPreSendPlayerMails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[248]);
}

// ===================================================================

class SyncDelPreSendPlayerMails::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SyncDelPreSendPlayerMails* msg);
  static const ::KWMsg::MailInfo& mail_info(const SyncDelPreSendPlayerMails* msg);
};

const ::KWMsg::Ident&
SyncDelPreSendPlayerMails::_Internal::player_id(const SyncDelPreSendPlayerMails* msg) {
  return *msg->player_id_;
}
const ::KWMsg::MailInfo&
SyncDelPreSendPlayerMails::_Internal::mail_info(const SyncDelPreSendPlayerMails* msg) {
  return *msg->mail_info_;
}
void SyncDelPreSendPlayerMails::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
SyncDelPreSendPlayerMails::SyncDelPreSendPlayerMails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncDelPreSendPlayerMails)
}
SyncDelPreSendPlayerMails::SyncDelPreSendPlayerMails(const SyncDelPreSendPlayerMails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_mail_info()) {
    mail_info_ = new ::KWMsg::MailInfo(*from.mail_info_);
  } else {
    mail_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncDelPreSendPlayerMails)
}

void SyncDelPreSendPlayerMails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mail_info_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(mail_info_));
}

SyncDelPreSendPlayerMails::~SyncDelPreSendPlayerMails() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncDelPreSendPlayerMails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncDelPreSendPlayerMails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete mail_info_;
}

void SyncDelPreSendPlayerMails::ArenaDtor(void* object) {
  SyncDelPreSendPlayerMails* _this = reinterpret_cast< SyncDelPreSendPlayerMails* >(object);
  (void)_this;
}
void SyncDelPreSendPlayerMails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncDelPreSendPlayerMails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncDelPreSendPlayerMails::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncDelPreSendPlayerMails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mail_info_ != nullptr) {
    delete mail_info_;
  }
  mail_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncDelPreSendPlayerMails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.MailInfo mail_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mail_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncDelPreSendPlayerMails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncDelPreSendPlayerMails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.MailInfo mail_info = 2;
  if (this->has_mail_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mail_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncDelPreSendPlayerMails)
  return target;
}

size_t SyncDelPreSendPlayerMails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncDelPreSendPlayerMails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.MailInfo mail_info = 2;
  if (this->has_mail_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mail_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncDelPreSendPlayerMails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncDelPreSendPlayerMails)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncDelPreSendPlayerMails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncDelPreSendPlayerMails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncDelPreSendPlayerMails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncDelPreSendPlayerMails)
    MergeFrom(*source);
  }
}

void SyncDelPreSendPlayerMails::MergeFrom(const SyncDelPreSendPlayerMails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncDelPreSendPlayerMails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_mail_info()) {
    _internal_mutable_mail_info()->::KWMsg::MailInfo::MergeFrom(from._internal_mail_info());
  }
}

void SyncDelPreSendPlayerMails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncDelPreSendPlayerMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncDelPreSendPlayerMails::CopyFrom(const SyncDelPreSendPlayerMails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncDelPreSendPlayerMails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncDelPreSendPlayerMails::IsInitialized() const {
  return true;
}

void SyncDelPreSendPlayerMails::InternalSwap(SyncDelPreSendPlayerMails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncDelPreSendPlayerMails, mail_info_)
      + sizeof(SyncDelPreSendPlayerMails::mail_info_)
      - PROTOBUF_FIELD_OFFSET(SyncDelPreSendPlayerMails, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncDelPreSendPlayerMails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[249]);
}

// ===================================================================

class SyncPlayerMailSessions::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SyncPlayerMailSessions* msg);
};

const ::KWMsg::Ident&
SyncPlayerMailSessions::_Internal::player_id(const SyncPlayerMailSessions* msg) {
  return *msg->player_id_;
}
void SyncPlayerMailSessions::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
SyncPlayerMailSessions::SyncPlayerMailSessions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncPlayerMailSessions)
}
SyncPlayerMailSessions::SyncPlayerMailSessions(const SyncPlayerMailSessions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncPlayerMailSessions)
}

void SyncPlayerMailSessions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ts_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(ts_));
}

SyncPlayerMailSessions::~SyncPlayerMailSessions() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncPlayerMailSessions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncPlayerMailSessions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void SyncPlayerMailSessions::ArenaDtor(void* object) {
  SyncPlayerMailSessions* _this = reinterpret_cast< SyncPlayerMailSessions* >(object);
  (void)_this;
}
void SyncPlayerMailSessions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncPlayerMailSessions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncPlayerMailSessions::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncPlayerMailSessions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ts_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncPlayerMailSessions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPlayerMailSessions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncPlayerMailSessions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int64 ts = 2;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncPlayerMailSessions)
  return target;
}

size_t SyncPlayerMailSessions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncPlayerMailSessions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int64 ts = 2;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPlayerMailSessions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncPlayerMailSessions)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPlayerMailSessions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPlayerMailSessions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncPlayerMailSessions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncPlayerMailSessions)
    MergeFrom(*source);
  }
}

void SyncPlayerMailSessions::MergeFrom(const SyncPlayerMailSessions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncPlayerMailSessions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
}

void SyncPlayerMailSessions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncPlayerMailSessions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPlayerMailSessions::CopyFrom(const SyncPlayerMailSessions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncPlayerMailSessions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayerMailSessions::IsInitialized() const {
  return true;
}

void SyncPlayerMailSessions::InternalSwap(SyncPlayerMailSessions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncPlayerMailSessions, ts_)
      + sizeof(SyncPlayerMailSessions::ts_)
      - PROTOBUF_FIELD_OFFSET(SyncPlayerMailSessions, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayerMailSessions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[250]);
}

// ===================================================================

class ReqRegisterChatSdkAccount::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqRegisterChatSdkAccount* msg);
};

const ::KWMsg::Ident&
ReqRegisterChatSdkAccount::_Internal::player_id(const ReqRegisterChatSdkAccount* msg) {
  return *msg->player_id_;
}
void ReqRegisterChatSdkAccount::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqRegisterChatSdkAccount::ReqRegisterChatSdkAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqRegisterChatSdkAccount)
}
ReqRegisterChatSdkAccount::ReqRegisterChatSdkAccount(const ReqRegisterChatSdkAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_sdk_passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_sdk_passwd().empty()) {
    chat_sdk_passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_sdk_passwd(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  world_id_ = from.world_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqRegisterChatSdkAccount)
}

void ReqRegisterChatSdkAccount::SharedCtor() {
chat_sdk_passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(world_id_));
}

ReqRegisterChatSdkAccount::~ReqRegisterChatSdkAccount() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqRegisterChatSdkAccount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqRegisterChatSdkAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_sdk_passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqRegisterChatSdkAccount::ArenaDtor(void* object) {
  ReqRegisterChatSdkAccount* _this = reinterpret_cast< ReqRegisterChatSdkAccount* >(object);
  (void)_this;
}
void ReqRegisterChatSdkAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqRegisterChatSdkAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqRegisterChatSdkAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqRegisterChatSdkAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_sdk_passwd_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  world_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqRegisterChatSdkAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chat_sdk_passwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chat_sdk_passwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqRegisterChatSdkAccount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqRegisterChatSdkAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes chat_sdk_passwd = 2;
  if (!this->chat_sdk_passwd().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chat_sdk_passwd(), target);
  }

  // int32 world_id = 3;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_world_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqRegisterChatSdkAccount)
  return target;
}

size_t ReqRegisterChatSdkAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqRegisterChatSdkAccount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_sdk_passwd = 2;
  if (!this->chat_sdk_passwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_sdk_passwd());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 world_id = 3;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqRegisterChatSdkAccount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqRegisterChatSdkAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRegisterChatSdkAccount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqRegisterChatSdkAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqRegisterChatSdkAccount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqRegisterChatSdkAccount)
    MergeFrom(*source);
  }
}

void ReqRegisterChatSdkAccount::MergeFrom(const ReqRegisterChatSdkAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqRegisterChatSdkAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chat_sdk_passwd().empty()) {
    _internal_set_chat_sdk_passwd(from._internal_chat_sdk_passwd());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
}

void ReqRegisterChatSdkAccount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqRegisterChatSdkAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRegisterChatSdkAccount::CopyFrom(const ReqRegisterChatSdkAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqRegisterChatSdkAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRegisterChatSdkAccount::IsInitialized() const {
  return true;
}

void ReqRegisterChatSdkAccount::InternalSwap(ReqRegisterChatSdkAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_sdk_passwd_, GetArenaForAllocation(),
      &other->chat_sdk_passwd_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqRegisterChatSdkAccount, world_id_)
      + sizeof(ReqRegisterChatSdkAccount::world_id_)
      - PROTOBUF_FIELD_OFFSET(ReqRegisterChatSdkAccount, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqRegisterChatSdkAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[251]);
}

// ===================================================================

class AckRegisterChatSdkAccount::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AckRegisterChatSdkAccount* msg);
};

const ::KWMsg::Ident&
AckRegisterChatSdkAccount::_Internal::player_id(const AckRegisterChatSdkAccount* msg) {
  return *msg->player_id_;
}
void AckRegisterChatSdkAccount::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AckRegisterChatSdkAccount::AckRegisterChatSdkAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckRegisterChatSdkAccount)
}
AckRegisterChatSdkAccount::AckRegisterChatSdkAccount(const AckRegisterChatSdkAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_sdk_passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_sdk_passwd().empty()) {
    chat_sdk_passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_sdk_passwd(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckRegisterChatSdkAccount)
}

void AckRegisterChatSdkAccount::SharedCtor() {
chat_sdk_passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(world_id_));
}

AckRegisterChatSdkAccount::~AckRegisterChatSdkAccount() {
  // @@protoc_insertion_point(destructor:KWMsg.AckRegisterChatSdkAccount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckRegisterChatSdkAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_sdk_passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void AckRegisterChatSdkAccount::ArenaDtor(void* object) {
  AckRegisterChatSdkAccount* _this = reinterpret_cast< AckRegisterChatSdkAccount* >(object);
  (void)_this;
}
void AckRegisterChatSdkAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckRegisterChatSdkAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckRegisterChatSdkAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckRegisterChatSdkAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_sdk_passwd_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckRegisterChatSdkAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chat_sdk_passwd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_chat_sdk_passwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckRegisterChatSdkAccount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckRegisterChatSdkAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  // bytes chat_sdk_passwd = 3;
  if (!this->chat_sdk_passwd().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_chat_sdk_passwd(), target);
  }

  // int32 world_id = 4;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_world_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckRegisterChatSdkAccount)
  return target;
}

size_t AckRegisterChatSdkAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckRegisterChatSdkAccount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_sdk_passwd = 3;
  if (!this->chat_sdk_passwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_sdk_passwd());
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 world_id = 4;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckRegisterChatSdkAccount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckRegisterChatSdkAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const AckRegisterChatSdkAccount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckRegisterChatSdkAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckRegisterChatSdkAccount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckRegisterChatSdkAccount)
    MergeFrom(*source);
  }
}

void AckRegisterChatSdkAccount::MergeFrom(const AckRegisterChatSdkAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckRegisterChatSdkAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chat_sdk_passwd().empty()) {
    _internal_set_chat_sdk_passwd(from._internal_chat_sdk_passwd());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
}

void AckRegisterChatSdkAccount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckRegisterChatSdkAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRegisterChatSdkAccount::CopyFrom(const AckRegisterChatSdkAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckRegisterChatSdkAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRegisterChatSdkAccount::IsInitialized() const {
  return true;
}

void AckRegisterChatSdkAccount::InternalSwap(AckRegisterChatSdkAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_sdk_passwd_, GetArenaForAllocation(),
      &other->chat_sdk_passwd_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckRegisterChatSdkAccount, world_id_)
      + sizeof(AckRegisterChatSdkAccount::world_id_)
      - PROTOBUF_FIELD_OFFSET(AckRegisterChatSdkAccount, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckRegisterChatSdkAccount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[252]);
}

// ===================================================================

class ReqCreateChatroom::_Internal {
 public:
};

ReqCreateChatroom::ReqCreateChatroom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCreateChatroom)
}
ReqCreateChatroom::ReqCreateChatroom(const ReqCreateChatroom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chatroom_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chatroom_name().empty()) {
    chatroom_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chatroom_name(), 
      GetArenaForAllocation());
  }
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra_data().empty()) {
    extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chatroom_type_, &from.chatroom_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&chatroom_type_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCreateChatroom)
}

void ReqCreateChatroom::SharedCtor() {
chatroom_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chatroom_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&chatroom_type_)) + sizeof(world_id_));
}

ReqCreateChatroom::~ReqCreateChatroom() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCreateChatroom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCreateChatroom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chatroom_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqCreateChatroom::ArenaDtor(void* object) {
  ReqCreateChatroom* _this = reinterpret_cast< ReqCreateChatroom* >(object);
  (void)_this;
}
void ReqCreateChatroom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCreateChatroom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCreateChatroom::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCreateChatroom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chatroom_name_.ClearToEmpty();
  extra_data_.ClearToEmpty();
  ::memset(&chatroom_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&chatroom_type_)) + sizeof(world_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCreateChatroom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 chatroom_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chatroom_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chatroom_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chatroom_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCreateChatroom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCreateChatroom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chatroom_type = 1;
  if (this->chatroom_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chatroom_type(), target);
  }

  // bytes chatroom_name = 2;
  if (!this->chatroom_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chatroom_name(), target);
  }

  // int32 world_id = 3;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_world_id(), target);
  }

  // bytes extra_data = 4;
  if (!this->extra_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_extra_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCreateChatroom)
  return target;
}

size_t ReqCreateChatroom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCreateChatroom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chatroom_name = 2;
  if (!this->chatroom_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chatroom_name());
  }

  // bytes extra_data = 4;
  if (!this->extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_data());
  }

  // int32 chatroom_type = 1;
  if (this->chatroom_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chatroom_type());
  }

  // int32 world_id = 3;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCreateChatroom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCreateChatroom)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCreateChatroom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCreateChatroom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCreateChatroom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCreateChatroom)
    MergeFrom(*source);
  }
}

void ReqCreateChatroom::MergeFrom(const ReqCreateChatroom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCreateChatroom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chatroom_name().empty()) {
    _internal_set_chatroom_name(from._internal_chatroom_name());
  }
  if (!from.extra_data().empty()) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (from.chatroom_type() != 0) {
    _internal_set_chatroom_type(from._internal_chatroom_type());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
}

void ReqCreateChatroom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCreateChatroom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreateChatroom::CopyFrom(const ReqCreateChatroom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCreateChatroom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreateChatroom::IsInitialized() const {
  return true;
}

void ReqCreateChatroom::InternalSwap(ReqCreateChatroom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chatroom_name_, GetArenaForAllocation(),
      &other->chatroom_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_data_, GetArenaForAllocation(),
      &other->extra_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqCreateChatroom, world_id_)
      + sizeof(ReqCreateChatroom::world_id_)
      - PROTOBUF_FIELD_OFFSET(ReqCreateChatroom, chatroom_type_)>(
          reinterpret_cast<char*>(&chatroom_type_),
          reinterpret_cast<char*>(&other->chatroom_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCreateChatroom::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[253]);
}

// ===================================================================

class AckCreateChatroom::_Internal {
 public:
};

AckCreateChatroom::AckCreateChatroom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCreateChatroom)
}
AckCreateChatroom::AckCreateChatroom(const AckCreateChatroom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chatroom_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chatroom_name().empty()) {
    chatroom_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chatroom_name(), 
      GetArenaForAllocation());
  }
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra_data().empty()) {
    extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_data(), 
      GetArenaForAllocation());
  }
  chatroom_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chatroom_id().empty()) {
    chatroom_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chatroom_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCreateChatroom)
}

void AckCreateChatroom::SharedCtor() {
chatroom_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
chatroom_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
}

AckCreateChatroom::~AckCreateChatroom() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCreateChatroom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCreateChatroom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chatroom_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chatroom_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckCreateChatroom::ArenaDtor(void* object) {
  AckCreateChatroom* _this = reinterpret_cast< AckCreateChatroom* >(object);
  (void)_this;
}
void AckCreateChatroom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCreateChatroom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCreateChatroom::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCreateChatroom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chatroom_name_.ClearToEmpty();
  extra_data_.ClearToEmpty();
  chatroom_id_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCreateChatroom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 chatroom_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chatroom_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chatroom_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_chatroom_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chatroom_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_chatroom_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCreateChatroom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCreateChatroom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // int32 chatroom_type = 2;
  if (this->chatroom_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chatroom_type(), target);
  }

  // bytes chatroom_name = 3;
  if (!this->chatroom_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_chatroom_name(), target);
  }

  // int32 world_id = 4;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_world_id(), target);
  }

  // bytes extra_data = 5;
  if (!this->extra_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_extra_data(), target);
  }

  // bytes chatroom_id = 6;
  if (!this->chatroom_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_chatroom_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCreateChatroom)
  return target;
}

size_t AckCreateChatroom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCreateChatroom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chatroom_name = 3;
  if (!this->chatroom_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chatroom_name());
  }

  // bytes extra_data = 5;
  if (!this->extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_data());
  }

  // bytes chatroom_id = 6;
  if (!this->chatroom_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chatroom_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 chatroom_type = 2;
  if (this->chatroom_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chatroom_type());
  }

  // int32 world_id = 4;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCreateChatroom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCreateChatroom)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCreateChatroom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCreateChatroom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCreateChatroom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCreateChatroom)
    MergeFrom(*source);
  }
}

void AckCreateChatroom::MergeFrom(const AckCreateChatroom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCreateChatroom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chatroom_name().empty()) {
    _internal_set_chatroom_name(from._internal_chatroom_name());
  }
  if (!from.extra_data().empty()) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (!from.chatroom_id().empty()) {
    _internal_set_chatroom_id(from._internal_chatroom_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.chatroom_type() != 0) {
    _internal_set_chatroom_type(from._internal_chatroom_type());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
}

void AckCreateChatroom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCreateChatroom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCreateChatroom::CopyFrom(const AckCreateChatroom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCreateChatroom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCreateChatroom::IsInitialized() const {
  return true;
}

void AckCreateChatroom::InternalSwap(AckCreateChatroom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chatroom_name_, GetArenaForAllocation(),
      &other->chatroom_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_data_, GetArenaForAllocation(),
      &other->extra_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chatroom_id_, GetArenaForAllocation(),
      &other->chatroom_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckCreateChatroom, world_id_)
      + sizeof(AckCreateChatroom::world_id_)
      - PROTOBUF_FIELD_OFFSET(AckCreateChatroom, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCreateChatroom::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[254]);
}

// ===================================================================

class ReqSdkLoginInfoAndChatroom::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqSdkLoginInfoAndChatroom* msg);
};

const ::KWMsg::Ident&
ReqSdkLoginInfoAndChatroom::_Internal::player_id(const ReqSdkLoginInfoAndChatroom* msg) {
  return *msg->player_id_;
}
void ReqSdkLoginInfoAndChatroom::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqSdkLoginInfoAndChatroom::ReqSdkLoginInfoAndChatroom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqSdkLoginInfoAndChatroom)
}
ReqSdkLoginInfoAndChatroom::ReqSdkLoginInfoAndChatroom(const ReqSdkLoginInfoAndChatroom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  community_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_id().empty()) {
    community_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqSdkLoginInfoAndChatroom)
}

void ReqSdkLoginInfoAndChatroom::SharedCtor() {
community_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqSdkLoginInfoAndChatroom::~ReqSdkLoginInfoAndChatroom() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqSdkLoginInfoAndChatroom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqSdkLoginInfoAndChatroom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  community_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqSdkLoginInfoAndChatroom::ArenaDtor(void* object) {
  ReqSdkLoginInfoAndChatroom* _this = reinterpret_cast< ReqSdkLoginInfoAndChatroom* >(object);
  (void)_this;
}
void ReqSdkLoginInfoAndChatroom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqSdkLoginInfoAndChatroom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSdkLoginInfoAndChatroom::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqSdkLoginInfoAndChatroom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  community_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSdkLoginInfoAndChatroom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_community_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSdkLoginInfoAndChatroom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqSdkLoginInfoAndChatroom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes community_id = 2;
  if (!this->community_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_community_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqSdkLoginInfoAndChatroom)
  return target;
}

size_t ReqSdkLoginInfoAndChatroom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqSdkLoginInfoAndChatroom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes community_id = 2;
  if (!this->community_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSdkLoginInfoAndChatroom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqSdkLoginInfoAndChatroom)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSdkLoginInfoAndChatroom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSdkLoginInfoAndChatroom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqSdkLoginInfoAndChatroom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqSdkLoginInfoAndChatroom)
    MergeFrom(*source);
  }
}

void ReqSdkLoginInfoAndChatroom::MergeFrom(const ReqSdkLoginInfoAndChatroom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqSdkLoginInfoAndChatroom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.community_id().empty()) {
    _internal_set_community_id(from._internal_community_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqSdkLoginInfoAndChatroom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqSdkLoginInfoAndChatroom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSdkLoginInfoAndChatroom::CopyFrom(const ReqSdkLoginInfoAndChatroom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqSdkLoginInfoAndChatroom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSdkLoginInfoAndChatroom::IsInitialized() const {
  return true;
}

void ReqSdkLoginInfoAndChatroom::InternalSwap(ReqSdkLoginInfoAndChatroom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_id_, GetArenaForAllocation(),
      &other->community_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSdkLoginInfoAndChatroom::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[255]);
}

// ===================================================================

class AckSdkLoginInfoAndChatroom::_Internal {
 public:
};

AckSdkLoginInfoAndChatroom::AckSdkLoginInfoAndChatroom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckSdkLoginInfoAndChatroom)
}
AckSdkLoginInfoAndChatroom::AckSdkLoginInfoAndChatroom(const AckSdkLoginInfoAndChatroom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_sdk_passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_sdk_passwd().empty()) {
    chat_sdk_passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_sdk_passwd(), 
      GetArenaForAllocation());
  }
  public_chatroom_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_chatroom_id().empty()) {
    public_chatroom_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_chatroom_id(), 
      GetArenaForAllocation());
  }
  system_chatroom_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system_chatroom_id().empty()) {
    system_chatroom_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_system_chatroom_id(), 
      GetArenaForAllocation());
  }
  community_chatroom_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_community_chatroom_id().empty()) {
    community_chatroom_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_community_chatroom_id(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckSdkLoginInfoAndChatroom)
}

void AckSdkLoginInfoAndChatroom::SharedCtor() {
chat_sdk_passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
public_chatroom_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
system_chatroom_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
community_chatroom_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckSdkLoginInfoAndChatroom::~AckSdkLoginInfoAndChatroom() {
  // @@protoc_insertion_point(destructor:KWMsg.AckSdkLoginInfoAndChatroom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckSdkLoginInfoAndChatroom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_sdk_passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_chatroom_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_chatroom_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  community_chatroom_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckSdkLoginInfoAndChatroom::ArenaDtor(void* object) {
  AckSdkLoginInfoAndChatroom* _this = reinterpret_cast< AckSdkLoginInfoAndChatroom* >(object);
  (void)_this;
}
void AckSdkLoginInfoAndChatroom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckSdkLoginInfoAndChatroom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckSdkLoginInfoAndChatroom::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckSdkLoginInfoAndChatroom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_sdk_passwd_.ClearToEmpty();
  public_chatroom_id_.ClearToEmpty();
  system_chatroom_id_.ClearToEmpty();
  community_chatroom_id_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckSdkLoginInfoAndChatroom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes chat_sdk_passwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chat_sdk_passwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes public_chatroom_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_public_chatroom_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes system_chatroom_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_system_chatroom_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes community_chatroom_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_community_chatroom_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSdkLoginInfoAndChatroom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckSdkLoginInfoAndChatroom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes chat_sdk_passwd = 2;
  if (!this->chat_sdk_passwd().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chat_sdk_passwd(), target);
  }

  // bytes public_chatroom_id = 3;
  if (!this->public_chatroom_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_public_chatroom_id(), target);
  }

  // bytes system_chatroom_id = 4;
  if (!this->system_chatroom_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_system_chatroom_id(), target);
  }

  // bytes community_chatroom_id = 5;
  if (!this->community_chatroom_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_community_chatroom_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckSdkLoginInfoAndChatroom)
  return target;
}

size_t AckSdkLoginInfoAndChatroom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckSdkLoginInfoAndChatroom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_sdk_passwd = 2;
  if (!this->chat_sdk_passwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_sdk_passwd());
  }

  // bytes public_chatroom_id = 3;
  if (!this->public_chatroom_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_chatroom_id());
  }

  // bytes system_chatroom_id = 4;
  if (!this->system_chatroom_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_system_chatroom_id());
  }

  // bytes community_chatroom_id = 5;
  if (!this->community_chatroom_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_community_chatroom_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSdkLoginInfoAndChatroom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckSdkLoginInfoAndChatroom)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSdkLoginInfoAndChatroom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSdkLoginInfoAndChatroom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckSdkLoginInfoAndChatroom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckSdkLoginInfoAndChatroom)
    MergeFrom(*source);
  }
}

void AckSdkLoginInfoAndChatroom::MergeFrom(const AckSdkLoginInfoAndChatroom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckSdkLoginInfoAndChatroom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chat_sdk_passwd().empty()) {
    _internal_set_chat_sdk_passwd(from._internal_chat_sdk_passwd());
  }
  if (!from.public_chatroom_id().empty()) {
    _internal_set_public_chatroom_id(from._internal_public_chatroom_id());
  }
  if (!from.system_chatroom_id().empty()) {
    _internal_set_system_chatroom_id(from._internal_system_chatroom_id());
  }
  if (!from.community_chatroom_id().empty()) {
    _internal_set_community_chatroom_id(from._internal_community_chatroom_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckSdkLoginInfoAndChatroom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckSdkLoginInfoAndChatroom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSdkLoginInfoAndChatroom::CopyFrom(const AckSdkLoginInfoAndChatroom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckSdkLoginInfoAndChatroom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSdkLoginInfoAndChatroom::IsInitialized() const {
  return true;
}

void AckSdkLoginInfoAndChatroom::InternalSwap(AckSdkLoginInfoAndChatroom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_sdk_passwd_, GetArenaForAllocation(),
      &other->chat_sdk_passwd_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_chatroom_id_, GetArenaForAllocation(),
      &other->public_chatroom_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &system_chatroom_id_, GetArenaForAllocation(),
      &other->system_chatroom_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &community_chatroom_id_, GetArenaForAllocation(),
      &other->community_chatroom_id_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSdkLoginInfoAndChatroom::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[256]);
}

// ===================================================================

class ReqReportChatPlayer::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqReportChatPlayer* msg);
  static const ::KWMsg::Ident& chat_player_id(const ReqReportChatPlayer* msg);
};

const ::KWMsg::Ident&
ReqReportChatPlayer::_Internal::player_id(const ReqReportChatPlayer* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqReportChatPlayer::_Internal::chat_player_id(const ReqReportChatPlayer* msg) {
  return *msg->chat_player_id_;
}
void ReqReportChatPlayer::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqReportChatPlayer::clear_chat_player_id() {
  if (GetArenaForAllocation() == nullptr && chat_player_id_ != nullptr) {
    delete chat_player_id_;
  }
  chat_player_id_ = nullptr;
}
ReqReportChatPlayer::ReqReportChatPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqReportChatPlayer)
}
ReqReportChatPlayer::ReqReportChatPlayer(const ReqReportChatPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  report_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_report_content().empty()) {
    report_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_report_content(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_chat_player_id()) {
    chat_player_id_ = new ::KWMsg::Ident(*from.chat_player_id_);
  } else {
    chat_player_id_ = nullptr;
  }
  report_type_ = from.report_type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqReportChatPlayer)
}

void ReqReportChatPlayer::SharedCtor() {
report_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&report_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(report_type_));
}

ReqReportChatPlayer::~ReqReportChatPlayer() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqReportChatPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqReportChatPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  report_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete chat_player_id_;
}

void ReqReportChatPlayer::ArenaDtor(void* object) {
  ReqReportChatPlayer* _this = reinterpret_cast< ReqReportChatPlayer* >(object);
  (void)_this;
}
void ReqReportChatPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqReportChatPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqReportChatPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqReportChatPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  report_content_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && chat_player_id_ != nullptr) {
    delete chat_player_id_;
  }
  chat_player_id_ = nullptr;
  report_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqReportChatPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident chat_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 report_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          report_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes report_content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_report_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqReportChatPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqReportChatPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident chat_player_id = 2;
  if (this->has_chat_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chat_player_id(this), target, stream);
  }

  // int32 report_type = 3;
  if (this->report_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_report_type(), target);
  }

  // bytes report_content = 4;
  if (!this->report_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_report_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqReportChatPlayer)
  return target;
}

size_t ReqReportChatPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqReportChatPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes report_content = 4;
  if (!this->report_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_report_content());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident chat_player_id = 2;
  if (this->has_chat_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chat_player_id_);
  }

  // int32 report_type = 3;
  if (this->report_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_report_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqReportChatPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqReportChatPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqReportChatPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqReportChatPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqReportChatPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqReportChatPlayer)
    MergeFrom(*source);
  }
}

void ReqReportChatPlayer::MergeFrom(const ReqReportChatPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqReportChatPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.report_content().empty()) {
    _internal_set_report_content(from._internal_report_content());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_chat_player_id()) {
    _internal_mutable_chat_player_id()->::KWMsg::Ident::MergeFrom(from._internal_chat_player_id());
  }
  if (from.report_type() != 0) {
    _internal_set_report_type(from._internal_report_type());
  }
}

void ReqReportChatPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqReportChatPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqReportChatPlayer::CopyFrom(const ReqReportChatPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqReportChatPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqReportChatPlayer::IsInitialized() const {
  return true;
}

void ReqReportChatPlayer::InternalSwap(ReqReportChatPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &report_content_, GetArenaForAllocation(),
      &other->report_content_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqReportChatPlayer, report_type_)
      + sizeof(ReqReportChatPlayer::report_type_)
      - PROTOBUF_FIELD_OFFSET(ReqReportChatPlayer, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqReportChatPlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[257]);
}

// ===================================================================

class AckReportChatPlayer::_Internal {
 public:
  static const ::KWMsg::Ident& chat_player_id(const AckReportChatPlayer* msg);
};

const ::KWMsg::Ident&
AckReportChatPlayer::_Internal::chat_player_id(const AckReportChatPlayer* msg) {
  return *msg->chat_player_id_;
}
void AckReportChatPlayer::clear_chat_player_id() {
  if (GetArenaForAllocation() == nullptr && chat_player_id_ != nullptr) {
    delete chat_player_id_;
  }
  chat_player_id_ = nullptr;
}
AckReportChatPlayer::AckReportChatPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckReportChatPlayer)
}
AckReportChatPlayer::AckReportChatPlayer(const AckReportChatPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  report_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_report_content().empty()) {
    report_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_report_content(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_chat_player_id()) {
    chat_player_id_ = new ::KWMsg::Ident(*from.chat_player_id_);
  } else {
    chat_player_id_ = nullptr;
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&report_type_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(report_type_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckReportChatPlayer)
}

void AckReportChatPlayer::SharedCtor() {
report_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&report_type_) -
    reinterpret_cast<char*>(&chat_player_id_)) + sizeof(report_type_));
}

AckReportChatPlayer::~AckReportChatPlayer() {
  // @@protoc_insertion_point(destructor:KWMsg.AckReportChatPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckReportChatPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  report_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chat_player_id_;
}

void AckReportChatPlayer::ArenaDtor(void* object) {
  AckReportChatPlayer* _this = reinterpret_cast< AckReportChatPlayer* >(object);
  (void)_this;
}
void AckReportChatPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckReportChatPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckReportChatPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckReportChatPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  report_content_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && chat_player_id_ != nullptr) {
    delete chat_player_id_;
  }
  chat_player_id_ = nullptr;
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&report_type_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(report_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckReportChatPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident chat_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 report_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          report_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes report_content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_report_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckReportChatPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckReportChatPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident chat_player_id = 2;
  if (this->has_chat_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chat_player_id(this), target, stream);
  }

  // int32 report_type = 3;
  if (this->report_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_report_type(), target);
  }

  // bytes report_content = 4;
  if (!this->report_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_report_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckReportChatPlayer)
  return target;
}

size_t AckReportChatPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckReportChatPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes report_content = 4;
  if (!this->report_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_report_content());
  }

  // .KWMsg.Ident chat_player_id = 2;
  if (this->has_chat_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chat_player_id_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 report_type = 3;
  if (this->report_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_report_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckReportChatPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckReportChatPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const AckReportChatPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckReportChatPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckReportChatPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckReportChatPlayer)
    MergeFrom(*source);
  }
}

void AckReportChatPlayer::MergeFrom(const AckReportChatPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckReportChatPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.report_content().empty()) {
    _internal_set_report_content(from._internal_report_content());
  }
  if (from.has_chat_player_id()) {
    _internal_mutable_chat_player_id()->::KWMsg::Ident::MergeFrom(from._internal_chat_player_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.report_type() != 0) {
    _internal_set_report_type(from._internal_report_type());
  }
}

void AckReportChatPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckReportChatPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReportChatPlayer::CopyFrom(const AckReportChatPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckReportChatPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReportChatPlayer::IsInitialized() const {
  return true;
}

void AckReportChatPlayer::InternalSwap(AckReportChatPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &report_content_, GetArenaForAllocation(),
      &other->report_content_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckReportChatPlayer, report_type_)
      + sizeof(AckReportChatPlayer::report_type_)
      - PROTOBUF_FIELD_OFFSET(AckReportChatPlayer, chat_player_id_)>(
          reinterpret_cast<char*>(&chat_player_id_),
          reinterpret_cast<char*>(&other->chat_player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckReportChatPlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[258]);
}

// ===================================================================

class ReqSendChatroomMsg::_Internal {
 public:
};

ReqSendChatroomMsg::ReqSendChatroomMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqSendChatroomMsg)
}
ReqSendChatroomMsg::ReqSendChatroomMsg(const ReqSendChatroomMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chatroom_ids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chatroom_ids().empty()) {
    chatroom_ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chatroom_ids(), 
      GetArenaForAllocation());
  }
  chat_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_msg().empty()) {
    chat_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqSendChatroomMsg)
}

void ReqSendChatroomMsg::SharedCtor() {
chatroom_ids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
chat_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReqSendChatroomMsg::~ReqSendChatroomMsg() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqSendChatroomMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqSendChatroomMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chatroom_ids_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqSendChatroomMsg::ArenaDtor(void* object) {
  ReqSendChatroomMsg* _this = reinterpret_cast< ReqSendChatroomMsg* >(object);
  (void)_this;
}
void ReqSendChatroomMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqSendChatroomMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSendChatroomMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqSendChatroomMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chatroom_ids_.ClearToEmpty();
  chat_msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSendChatroomMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chatroom_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chatroom_ids();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chat_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chat_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSendChatroomMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqSendChatroomMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chatroom_ids = 1;
  if (!this->chatroom_ids().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chatroom_ids(), target);
  }

  // bytes chat_msg = 2;
  if (!this->chat_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chat_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqSendChatroomMsg)
  return target;
}

size_t ReqSendChatroomMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqSendChatroomMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chatroom_ids = 1;
  if (!this->chatroom_ids().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chatroom_ids());
  }

  // bytes chat_msg = 2;
  if (!this->chat_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSendChatroomMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqSendChatroomMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSendChatroomMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSendChatroomMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqSendChatroomMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqSendChatroomMsg)
    MergeFrom(*source);
  }
}

void ReqSendChatroomMsg::MergeFrom(const ReqSendChatroomMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqSendChatroomMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chatroom_ids().empty()) {
    _internal_set_chatroom_ids(from._internal_chatroom_ids());
  }
  if (!from.chat_msg().empty()) {
    _internal_set_chat_msg(from._internal_chat_msg());
  }
}

void ReqSendChatroomMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqSendChatroomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSendChatroomMsg::CopyFrom(const ReqSendChatroomMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqSendChatroomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSendChatroomMsg::IsInitialized() const {
  return true;
}

void ReqSendChatroomMsg::InternalSwap(ReqSendChatroomMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chatroom_ids_, GetArenaForAllocation(),
      &other->chatroom_ids_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_msg_, GetArenaForAllocation(),
      &other->chat_msg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSendChatroomMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[259]);
}

// ===================================================================

class AckSendChatroomMsg::_Internal {
 public:
};

AckSendChatroomMsg::AckSendChatroomMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckSendChatroomMsg)
}
AckSendChatroomMsg::AckSendChatroomMsg(const AckSendChatroomMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chatroom_ids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chatroom_ids().empty()) {
    chatroom_ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chatroom_ids(), 
      GetArenaForAllocation());
  }
  chat_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_msg().empty()) {
    chat_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckSendChatroomMsg)
}

void AckSendChatroomMsg::SharedCtor() {
chatroom_ids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
chat_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AckSendChatroomMsg::~AckSendChatroomMsg() {
  // @@protoc_insertion_point(destructor:KWMsg.AckSendChatroomMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckSendChatroomMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chatroom_ids_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckSendChatroomMsg::ArenaDtor(void* object) {
  AckSendChatroomMsg* _this = reinterpret_cast< AckSendChatroomMsg* >(object);
  (void)_this;
}
void AckSendChatroomMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckSendChatroomMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckSendChatroomMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckSendChatroomMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chatroom_ids_.ClearToEmpty();
  chat_msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckSendChatroomMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chatroom_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chatroom_ids();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chat_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chat_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSendChatroomMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckSendChatroomMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chatroom_ids = 1;
  if (!this->chatroom_ids().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chatroom_ids(), target);
  }

  // bytes chat_msg = 2;
  if (!this->chat_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chat_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckSendChatroomMsg)
  return target;
}

size_t AckSendChatroomMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckSendChatroomMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chatroom_ids = 1;
  if (!this->chatroom_ids().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chatroom_ids());
  }

  // bytes chat_msg = 2;
  if (!this->chat_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSendChatroomMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckSendChatroomMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSendChatroomMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSendChatroomMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckSendChatroomMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckSendChatroomMsg)
    MergeFrom(*source);
  }
}

void AckSendChatroomMsg::MergeFrom(const AckSendChatroomMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckSendChatroomMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chatroom_ids().empty()) {
    _internal_set_chatroom_ids(from._internal_chatroom_ids());
  }
  if (!from.chat_msg().empty()) {
    _internal_set_chat_msg(from._internal_chat_msg());
  }
}

void AckSendChatroomMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckSendChatroomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSendChatroomMsg::CopyFrom(const AckSendChatroomMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckSendChatroomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSendChatroomMsg::IsInitialized() const {
  return true;
}

void AckSendChatroomMsg::InternalSwap(AckSendChatroomMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chatroom_ids_, GetArenaForAllocation(),
      &other->chatroom_ids_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_msg_, GetArenaForAllocation(),
      &other->chat_msg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSendChatroomMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[260]);
}

// ===================================================================

class ReqUpdateChatroomAnnouncement::_Internal {
 public:
};

ReqUpdateChatroomAnnouncement::ReqUpdateChatroomAnnouncement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqUpdateChatroomAnnouncement)
}
ReqUpdateChatroomAnnouncement::ReqUpdateChatroomAnnouncement(const ReqUpdateChatroomAnnouncement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chatroom_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chatroom_id().empty()) {
    chatroom_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chatroom_id(), 
      GetArenaForAllocation());
  }
  announcement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_announcement().empty()) {
    announcement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_announcement(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqUpdateChatroomAnnouncement)
}

void ReqUpdateChatroomAnnouncement::SharedCtor() {
chatroom_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
announcement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReqUpdateChatroomAnnouncement::~ReqUpdateChatroomAnnouncement() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqUpdateChatroomAnnouncement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqUpdateChatroomAnnouncement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chatroom_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  announcement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqUpdateChatroomAnnouncement::ArenaDtor(void* object) {
  ReqUpdateChatroomAnnouncement* _this = reinterpret_cast< ReqUpdateChatroomAnnouncement* >(object);
  (void)_this;
}
void ReqUpdateChatroomAnnouncement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqUpdateChatroomAnnouncement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqUpdateChatroomAnnouncement::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqUpdateChatroomAnnouncement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chatroom_id_.ClearToEmpty();
  announcement_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqUpdateChatroomAnnouncement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chatroom_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chatroom_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes announcement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_announcement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUpdateChatroomAnnouncement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqUpdateChatroomAnnouncement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chatroom_id = 1;
  if (!this->chatroom_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chatroom_id(), target);
  }

  // bytes announcement = 2;
  if (!this->announcement().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_announcement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqUpdateChatroomAnnouncement)
  return target;
}

size_t ReqUpdateChatroomAnnouncement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqUpdateChatroomAnnouncement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chatroom_id = 1;
  if (!this->chatroom_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chatroom_id());
  }

  // bytes announcement = 2;
  if (!this->announcement().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_announcement());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUpdateChatroomAnnouncement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqUpdateChatroomAnnouncement)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUpdateChatroomAnnouncement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUpdateChatroomAnnouncement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqUpdateChatroomAnnouncement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqUpdateChatroomAnnouncement)
    MergeFrom(*source);
  }
}

void ReqUpdateChatroomAnnouncement::MergeFrom(const ReqUpdateChatroomAnnouncement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqUpdateChatroomAnnouncement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chatroom_id().empty()) {
    _internal_set_chatroom_id(from._internal_chatroom_id());
  }
  if (!from.announcement().empty()) {
    _internal_set_announcement(from._internal_announcement());
  }
}

void ReqUpdateChatroomAnnouncement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqUpdateChatroomAnnouncement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpdateChatroomAnnouncement::CopyFrom(const ReqUpdateChatroomAnnouncement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqUpdateChatroomAnnouncement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdateChatroomAnnouncement::IsInitialized() const {
  return true;
}

void ReqUpdateChatroomAnnouncement::InternalSwap(ReqUpdateChatroomAnnouncement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chatroom_id_, GetArenaForAllocation(),
      &other->chatroom_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &announcement_, GetArenaForAllocation(),
      &other->announcement_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUpdateChatroomAnnouncement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[261]);
}

// ===================================================================

class AckUpdateChatroomAnnouncement::_Internal {
 public:
};

AckUpdateChatroomAnnouncement::AckUpdateChatroomAnnouncement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckUpdateChatroomAnnouncement)
}
AckUpdateChatroomAnnouncement::AckUpdateChatroomAnnouncement(const AckUpdateChatroomAnnouncement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chatroom_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chatroom_id().empty()) {
    chatroom_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chatroom_id(), 
      GetArenaForAllocation());
  }
  announcement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_announcement().empty()) {
    announcement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_announcement(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckUpdateChatroomAnnouncement)
}

void AckUpdateChatroomAnnouncement::SharedCtor() {
chatroom_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
announcement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AckUpdateChatroomAnnouncement::~AckUpdateChatroomAnnouncement() {
  // @@protoc_insertion_point(destructor:KWMsg.AckUpdateChatroomAnnouncement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckUpdateChatroomAnnouncement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chatroom_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  announcement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckUpdateChatroomAnnouncement::ArenaDtor(void* object) {
  AckUpdateChatroomAnnouncement* _this = reinterpret_cast< AckUpdateChatroomAnnouncement* >(object);
  (void)_this;
}
void AckUpdateChatroomAnnouncement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckUpdateChatroomAnnouncement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckUpdateChatroomAnnouncement::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckUpdateChatroomAnnouncement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chatroom_id_.ClearToEmpty();
  announcement_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckUpdateChatroomAnnouncement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chatroom_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chatroom_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes announcement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_announcement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckUpdateChatroomAnnouncement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckUpdateChatroomAnnouncement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chatroom_id = 1;
  if (!this->chatroom_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chatroom_id(), target);
  }

  // bytes announcement = 2;
  if (!this->announcement().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_announcement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckUpdateChatroomAnnouncement)
  return target;
}

size_t AckUpdateChatroomAnnouncement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckUpdateChatroomAnnouncement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chatroom_id = 1;
  if (!this->chatroom_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chatroom_id());
  }

  // bytes announcement = 2;
  if (!this->announcement().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_announcement());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckUpdateChatroomAnnouncement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckUpdateChatroomAnnouncement)
  GOOGLE_DCHECK_NE(&from, this);
  const AckUpdateChatroomAnnouncement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckUpdateChatroomAnnouncement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckUpdateChatroomAnnouncement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckUpdateChatroomAnnouncement)
    MergeFrom(*source);
  }
}

void AckUpdateChatroomAnnouncement::MergeFrom(const AckUpdateChatroomAnnouncement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckUpdateChatroomAnnouncement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chatroom_id().empty()) {
    _internal_set_chatroom_id(from._internal_chatroom_id());
  }
  if (!from.announcement().empty()) {
    _internal_set_announcement(from._internal_announcement());
  }
}

void AckUpdateChatroomAnnouncement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckUpdateChatroomAnnouncement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateChatroomAnnouncement::CopyFrom(const AckUpdateChatroomAnnouncement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckUpdateChatroomAnnouncement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateChatroomAnnouncement::IsInitialized() const {
  return true;
}

void AckUpdateChatroomAnnouncement::InternalSwap(AckUpdateChatroomAnnouncement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chatroom_id_, GetArenaForAllocation(),
      &other->chatroom_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &announcement_, GetArenaForAllocation(),
      &other->announcement_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AckUpdateChatroomAnnouncement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[262]);
}

// ===================================================================

class ReqCheckChatText::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqCheckChatText* msg);
  static const ::KWMsg::Ident& other_player_id(const ReqCheckChatText* msg);
};

const ::KWMsg::Ident&
ReqCheckChatText::_Internal::player_id(const ReqCheckChatText* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqCheckChatText::_Internal::other_player_id(const ReqCheckChatText* msg) {
  return *msg->other_player_id_;
}
void ReqCheckChatText::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqCheckChatText::clear_other_player_id() {
  if (GetArenaForAllocation() == nullptr && other_player_id_ != nullptr) {
    delete other_player_id_;
  }
  other_player_id_ = nullptr;
}
ReqCheckChatText::ReqCheckChatText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCheckChatText)
}
ReqCheckChatText::ReqCheckChatText(const ReqCheckChatText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_text().empty()) {
    chat_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_text(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_other_player_id()) {
    other_player_id_ = new ::KWMsg::Ident(*from.other_player_id_);
  } else {
    other_player_id_ = nullptr;
  }
  ::memcpy(&world_id_, &from.world_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_type_) -
    reinterpret_cast<char*>(&world_id_)) + sizeof(chat_type_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCheckChatText)
}

void ReqCheckChatText::SharedCtor() {
chat_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(chat_type_));
}

ReqCheckChatText::~ReqCheckChatText() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCheckChatText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCheckChatText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete other_player_id_;
}

void ReqCheckChatText::ArenaDtor(void* object) {
  ReqCheckChatText* _this = reinterpret_cast< ReqCheckChatText* >(object);
  (void)_this;
}
void ReqCheckChatText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCheckChatText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCheckChatText::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCheckChatText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && other_player_id_ != nullptr) {
    delete other_player_id_;
  }
  other_player_id_ = nullptr;
  ::memset(&world_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_type_) -
      reinterpret_cast<char*>(&world_id_)) + sizeof(chat_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCheckChatText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chat_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chat_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.EChatType chat_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chat_type(static_cast<::KWMsg::EChatType>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident other_player_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_other_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCheckChatText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCheckChatText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes chat_text = 2;
  if (!this->chat_text().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chat_text(), target);
  }

  // int32 world_id = 3;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_world_id(), target);
  }

  // .KWMsg.EChatType chat_type = 4;
  if (this->chat_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_chat_type(), target);
  }

  // .KWMsg.Ident other_player_id = 5;
  if (this->has_other_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::other_player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCheckChatText)
  return target;
}

size_t ReqCheckChatText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCheckChatText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_text = 2;
  if (!this->chat_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_text());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident other_player_id = 5;
  if (this->has_other_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *other_player_id_);
  }

  // int32 world_id = 3;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  // .KWMsg.EChatType chat_type = 4;
  if (this->chat_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chat_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCheckChatText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCheckChatText)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCheckChatText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCheckChatText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCheckChatText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCheckChatText)
    MergeFrom(*source);
  }
}

void ReqCheckChatText::MergeFrom(const ReqCheckChatText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCheckChatText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chat_text().empty()) {
    _internal_set_chat_text(from._internal_chat_text());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_other_player_id()) {
    _internal_mutable_other_player_id()->::KWMsg::Ident::MergeFrom(from._internal_other_player_id());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
  if (from.chat_type() != 0) {
    _internal_set_chat_type(from._internal_chat_type());
  }
}

void ReqCheckChatText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCheckChatText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCheckChatText::CopyFrom(const ReqCheckChatText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCheckChatText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCheckChatText::IsInitialized() const {
  return true;
}

void ReqCheckChatText::InternalSwap(ReqCheckChatText* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_text_, GetArenaForAllocation(),
      &other->chat_text_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqCheckChatText, chat_type_)
      + sizeof(ReqCheckChatText::chat_type_)
      - PROTOBUF_FIELD_OFFSET(ReqCheckChatText, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCheckChatText::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[263]);
}

// ===================================================================

class AckCheckChatText::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AckCheckChatText* msg);
  static const ::KWMsg::Ident& other_player_id(const AckCheckChatText* msg);
};

const ::KWMsg::Ident&
AckCheckChatText::_Internal::player_id(const AckCheckChatText* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
AckCheckChatText::_Internal::other_player_id(const AckCheckChatText* msg) {
  return *msg->other_player_id_;
}
void AckCheckChatText::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void AckCheckChatText::clear_other_player_id() {
  if (GetArenaForAllocation() == nullptr && other_player_id_ != nullptr) {
    delete other_player_id_;
  }
  other_player_id_ = nullptr;
}
AckCheckChatText::AckCheckChatText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCheckChatText)
}
AckCheckChatText::AckCheckChatText(const AckCheckChatText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_text().empty()) {
    chat_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_text(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_other_player_id()) {
    other_player_id_ = new ::KWMsg::Ident(*from.other_player_id_);
  } else {
    other_player_id_ = nullptr;
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_type_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(chat_type_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCheckChatText)
}

void AckCheckChatText::SharedCtor() {
chat_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(chat_type_));
}

AckCheckChatText::~AckCheckChatText() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCheckChatText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCheckChatText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete other_player_id_;
}

void AckCheckChatText::ArenaDtor(void* object) {
  AckCheckChatText* _this = reinterpret_cast< AckCheckChatText* >(object);
  (void)_this;
}
void AckCheckChatText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCheckChatText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCheckChatText::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCheckChatText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_text_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && other_player_id_ != nullptr) {
    delete other_player_id_;
  }
  other_player_id_ = nullptr;
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_type_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(chat_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCheckChatText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chat_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_chat_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 suggestion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          suggestion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.EChatType chat_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chat_type(static_cast<::KWMsg::EChatType>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident other_player_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_other_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCheckChatText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCheckChatText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  // bytes chat_text = 3;
  if (!this->chat_text().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_chat_text(), target);
  }

  // int32 suggestion = 4;
  if (this->suggestion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_suggestion(), target);
  }

  // int32 world_id = 5;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_world_id(), target);
  }

  // .KWMsg.EChatType chat_type = 6;
  if (this->chat_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_chat_type(), target);
  }

  // .KWMsg.Ident other_player_id = 7;
  if (this->has_other_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::other_player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCheckChatText)
  return target;
}

size_t AckCheckChatText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCheckChatText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_text = 3;
  if (!this->chat_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_text());
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident other_player_id = 7;
  if (this->has_other_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *other_player_id_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 suggestion = 4;
  if (this->suggestion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_suggestion());
  }

  // int32 world_id = 5;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  // .KWMsg.EChatType chat_type = 6;
  if (this->chat_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chat_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCheckChatText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCheckChatText)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCheckChatText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCheckChatText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCheckChatText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCheckChatText)
    MergeFrom(*source);
  }
}

void AckCheckChatText::MergeFrom(const AckCheckChatText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCheckChatText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chat_text().empty()) {
    _internal_set_chat_text(from._internal_chat_text());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_other_player_id()) {
    _internal_mutable_other_player_id()->::KWMsg::Ident::MergeFrom(from._internal_other_player_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.suggestion() != 0) {
    _internal_set_suggestion(from._internal_suggestion());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
  if (from.chat_type() != 0) {
    _internal_set_chat_type(from._internal_chat_type());
  }
}

void AckCheckChatText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCheckChatText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCheckChatText::CopyFrom(const AckCheckChatText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCheckChatText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCheckChatText::IsInitialized() const {
  return true;
}

void AckCheckChatText::InternalSwap(AckCheckChatText* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_text_, GetArenaForAllocation(),
      &other->chat_text_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckCheckChatText, chat_type_)
      + sizeof(AckCheckChatText::chat_type_)
      - PROTOBUF_FIELD_OFFSET(AckCheckChatText, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCheckChatText::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[264]);
}

// ===================================================================

class ReqCreateChatGroup::_Internal {
 public:
};

ReqCreateChatGroup::ReqCreateChatGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCreateChatGroup)
}
ReqCreateChatGroup::ReqCreateChatGroup(const ReqCreateChatGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_group_name().empty()) {
    chat_group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_group_name(), 
      GetArenaForAllocation());
  }
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra_data().empty()) {
    extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_group_type_, &from.chat_group_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&chat_group_type_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCreateChatGroup)
}

void ReqCreateChatGroup::SharedCtor() {
chat_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&chat_group_type_)) + sizeof(world_id_));
}

ReqCreateChatGroup::~ReqCreateChatGroup() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCreateChatGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCreateChatGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqCreateChatGroup::ArenaDtor(void* object) {
  ReqCreateChatGroup* _this = reinterpret_cast< ReqCreateChatGroup* >(object);
  (void)_this;
}
void ReqCreateChatGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCreateChatGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCreateChatGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCreateChatGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_name_.ClearToEmpty();
  owner_.ClearToEmpty();
  extra_data_.ClearToEmpty();
  ::memset(&chat_group_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&chat_group_type_)) + sizeof(world_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCreateChatGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 chat_group_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chat_group_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chat_group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chat_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes owner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCreateChatGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCreateChatGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chat_group_type = 1;
  if (this->chat_group_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_chat_group_type(), target);
  }

  // bytes chat_group_name = 2;
  if (!this->chat_group_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chat_group_name(), target);
  }

  // bytes owner = 3;
  if (!this->owner().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_owner(), target);
  }

  // bytes extra_data = 4;
  if (!this->extra_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_extra_data(), target);
  }

  // int32 world_id = 5;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_world_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCreateChatGroup)
  return target;
}

size_t ReqCreateChatGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCreateChatGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_group_name = 2;
  if (!this->chat_group_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_group_name());
  }

  // bytes owner = 3;
  if (!this->owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner());
  }

  // bytes extra_data = 4;
  if (!this->extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_data());
  }

  // int32 chat_group_type = 1;
  if (this->chat_group_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chat_group_type());
  }

  // int32 world_id = 5;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCreateChatGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCreateChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCreateChatGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCreateChatGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCreateChatGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCreateChatGroup)
    MergeFrom(*source);
  }
}

void ReqCreateChatGroup::MergeFrom(const ReqCreateChatGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCreateChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chat_group_name().empty()) {
    _internal_set_chat_group_name(from._internal_chat_group_name());
  }
  if (!from.owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (!from.extra_data().empty()) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (from.chat_group_type() != 0) {
    _internal_set_chat_group_type(from._internal_chat_group_type());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
}

void ReqCreateChatGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCreateChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreateChatGroup::CopyFrom(const ReqCreateChatGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCreateChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreateChatGroup::IsInitialized() const {
  return true;
}

void ReqCreateChatGroup::InternalSwap(ReqCreateChatGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_group_name_, GetArenaForAllocation(),
      &other->chat_group_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, GetArenaForAllocation(),
      &other->owner_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_data_, GetArenaForAllocation(),
      &other->extra_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqCreateChatGroup, world_id_)
      + sizeof(ReqCreateChatGroup::world_id_)
      - PROTOBUF_FIELD_OFFSET(ReqCreateChatGroup, chat_group_type_)>(
          reinterpret_cast<char*>(&chat_group_type_),
          reinterpret_cast<char*>(&other->chat_group_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCreateChatGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[265]);
}

// ===================================================================

class AckCreateChatGroup::_Internal {
 public:
};

AckCreateChatGroup::AckCreateChatGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCreateChatGroup)
}
AckCreateChatGroup::AckCreateChatGroup(const AckCreateChatGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_group_name().empty()) {
    chat_group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_group_name(), 
      GetArenaForAllocation());
  }
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra_data().empty()) {
    extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_data(), 
      GetArenaForAllocation());
  }
  chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_group_id().empty()) {
    chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_group_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCreateChatGroup)
}

void AckCreateChatGroup::SharedCtor() {
chat_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
}

AckCreateChatGroup::~AckCreateChatGroup() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCreateChatGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCreateChatGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckCreateChatGroup::ArenaDtor(void* object) {
  AckCreateChatGroup* _this = reinterpret_cast< AckCreateChatGroup* >(object);
  (void)_this;
}
void AckCreateChatGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCreateChatGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCreateChatGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCreateChatGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_name_.ClearToEmpty();
  owner_.ClearToEmpty();
  extra_data_.ClearToEmpty();
  chat_group_id_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCreateChatGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 chat_group_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chat_group_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chat_group_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_chat_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes owner = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chat_group_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_chat_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCreateChatGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCreateChatGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // int32 chat_group_type = 2;
  if (this->chat_group_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chat_group_type(), target);
  }

  // bytes chat_group_name = 3;
  if (!this->chat_group_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_chat_group_name(), target);
  }

  // bytes owner = 4;
  if (!this->owner().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_owner(), target);
  }

  // bytes extra_data = 5;
  if (!this->extra_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_extra_data(), target);
  }

  // int32 world_id = 6;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_world_id(), target);
  }

  // bytes chat_group_id = 7;
  if (!this->chat_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_chat_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCreateChatGroup)
  return target;
}

size_t AckCreateChatGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCreateChatGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_group_name = 3;
  if (!this->chat_group_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_group_name());
  }

  // bytes owner = 4;
  if (!this->owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner());
  }

  // bytes extra_data = 5;
  if (!this->extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_data());
  }

  // bytes chat_group_id = 7;
  if (!this->chat_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_group_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 chat_group_type = 2;
  if (this->chat_group_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chat_group_type());
  }

  // int32 world_id = 6;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCreateChatGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCreateChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCreateChatGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCreateChatGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCreateChatGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCreateChatGroup)
    MergeFrom(*source);
  }
}

void AckCreateChatGroup::MergeFrom(const AckCreateChatGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCreateChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chat_group_name().empty()) {
    _internal_set_chat_group_name(from._internal_chat_group_name());
  }
  if (!from.owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (!from.extra_data().empty()) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (!from.chat_group_id().empty()) {
    _internal_set_chat_group_id(from._internal_chat_group_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.chat_group_type() != 0) {
    _internal_set_chat_group_type(from._internal_chat_group_type());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
}

void AckCreateChatGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCreateChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCreateChatGroup::CopyFrom(const AckCreateChatGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCreateChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCreateChatGroup::IsInitialized() const {
  return true;
}

void AckCreateChatGroup::InternalSwap(AckCreateChatGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_group_name_, GetArenaForAllocation(),
      &other->chat_group_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, GetArenaForAllocation(),
      &other->owner_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_data_, GetArenaForAllocation(),
      &other->extra_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_group_id_, GetArenaForAllocation(),
      &other->chat_group_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckCreateChatGroup, world_id_)
      + sizeof(AckCreateChatGroup::world_id_)
      - PROTOBUF_FIELD_OFFSET(AckCreateChatGroup, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCreateChatGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[266]);
}

// ===================================================================

class ReqDeleteChatGroup::_Internal {
 public:
};

ReqDeleteChatGroup::ReqDeleteChatGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqDeleteChatGroup)
}
ReqDeleteChatGroup::ReqDeleteChatGroup(const ReqDeleteChatGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_group_id().empty()) {
    chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_group_id(), 
      GetArenaForAllocation());
  }
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra_data().empty()) {
    extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_group_type_, &from.chat_group_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&chat_group_type_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqDeleteChatGroup)
}

void ReqDeleteChatGroup::SharedCtor() {
chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&chat_group_type_)) + sizeof(world_id_));
}

ReqDeleteChatGroup::~ReqDeleteChatGroup() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqDeleteChatGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqDeleteChatGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqDeleteChatGroup::ArenaDtor(void* object) {
  ReqDeleteChatGroup* _this = reinterpret_cast< ReqDeleteChatGroup* >(object);
  (void)_this;
}
void ReqDeleteChatGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqDeleteChatGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDeleteChatGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqDeleteChatGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_.ClearToEmpty();
  extra_data_.ClearToEmpty();
  ::memset(&chat_group_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&chat_group_type_)) + sizeof(world_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDeleteChatGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chat_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chat_group_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chat_group_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqDeleteChatGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqDeleteChatGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chat_group_id = 1;
  if (!this->chat_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chat_group_id(), target);
  }

  // int32 chat_group_type = 2;
  if (this->chat_group_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chat_group_type(), target);
  }

  // bytes extra_data = 3;
  if (!this->extra_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_extra_data(), target);
  }

  // int32 world_id = 4;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_world_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqDeleteChatGroup)
  return target;
}

size_t ReqDeleteChatGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqDeleteChatGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_group_id = 1;
  if (!this->chat_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_group_id());
  }

  // bytes extra_data = 3;
  if (!this->extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_data());
  }

  // int32 chat_group_type = 2;
  if (this->chat_group_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chat_group_type());
  }

  // int32 world_id = 4;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqDeleteChatGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqDeleteChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqDeleteChatGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqDeleteChatGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqDeleteChatGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqDeleteChatGroup)
    MergeFrom(*source);
  }
}

void ReqDeleteChatGroup::MergeFrom(const ReqDeleteChatGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqDeleteChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chat_group_id().empty()) {
    _internal_set_chat_group_id(from._internal_chat_group_id());
  }
  if (!from.extra_data().empty()) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (from.chat_group_type() != 0) {
    _internal_set_chat_group_type(from._internal_chat_group_type());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
}

void ReqDeleteChatGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqDeleteChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDeleteChatGroup::CopyFrom(const ReqDeleteChatGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqDeleteChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDeleteChatGroup::IsInitialized() const {
  return true;
}

void ReqDeleteChatGroup::InternalSwap(ReqDeleteChatGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_group_id_, GetArenaForAllocation(),
      &other->chat_group_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_data_, GetArenaForAllocation(),
      &other->extra_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqDeleteChatGroup, world_id_)
      + sizeof(ReqDeleteChatGroup::world_id_)
      - PROTOBUF_FIELD_OFFSET(ReqDeleteChatGroup, chat_group_type_)>(
          reinterpret_cast<char*>(&chat_group_type_),
          reinterpret_cast<char*>(&other->chat_group_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDeleteChatGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[267]);
}

// ===================================================================

class AckDeleteChatGroup::_Internal {
 public:
};

AckDeleteChatGroup::AckDeleteChatGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckDeleteChatGroup)
}
AckDeleteChatGroup::AckDeleteChatGroup(const AckDeleteChatGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_group_id().empty()) {
    chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_group_id(), 
      GetArenaForAllocation());
  }
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra_data().empty()) {
    extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckDeleteChatGroup)
}

void AckDeleteChatGroup::SharedCtor() {
chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
}

AckDeleteChatGroup::~AckDeleteChatGroup() {
  // @@protoc_insertion_point(destructor:KWMsg.AckDeleteChatGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckDeleteChatGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckDeleteChatGroup::ArenaDtor(void* object) {
  AckDeleteChatGroup* _this = reinterpret_cast< AckDeleteChatGroup* >(object);
  (void)_this;
}
void AckDeleteChatGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckDeleteChatGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckDeleteChatGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckDeleteChatGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_.ClearToEmpty();
  extra_data_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckDeleteChatGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes chat_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chat_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chat_group_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chat_group_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckDeleteChatGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckDeleteChatGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes chat_group_id = 2;
  if (!this->chat_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chat_group_id(), target);
  }

  // int32 chat_group_type = 3;
  if (this->chat_group_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chat_group_type(), target);
  }

  // bytes extra_data = 4;
  if (!this->extra_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_extra_data(), target);
  }

  // int32 world_id = 5;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_world_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckDeleteChatGroup)
  return target;
}

size_t AckDeleteChatGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckDeleteChatGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_group_id = 2;
  if (!this->chat_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_group_id());
  }

  // bytes extra_data = 4;
  if (!this->extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_data());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 chat_group_type = 3;
  if (this->chat_group_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chat_group_type());
  }

  // int32 world_id = 5;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckDeleteChatGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckDeleteChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const AckDeleteChatGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckDeleteChatGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckDeleteChatGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckDeleteChatGroup)
    MergeFrom(*source);
  }
}

void AckDeleteChatGroup::MergeFrom(const AckDeleteChatGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckDeleteChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chat_group_id().empty()) {
    _internal_set_chat_group_id(from._internal_chat_group_id());
  }
  if (!from.extra_data().empty()) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.chat_group_type() != 0) {
    _internal_set_chat_group_type(from._internal_chat_group_type());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
}

void AckDeleteChatGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckDeleteChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDeleteChatGroup::CopyFrom(const AckDeleteChatGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckDeleteChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDeleteChatGroup::IsInitialized() const {
  return true;
}

void AckDeleteChatGroup::InternalSwap(AckDeleteChatGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_group_id_, GetArenaForAllocation(),
      &other->chat_group_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_data_, GetArenaForAllocation(),
      &other->extra_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckDeleteChatGroup, world_id_)
      + sizeof(AckDeleteChatGroup::world_id_)
      - PROTOBUF_FIELD_OFFSET(AckDeleteChatGroup, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckDeleteChatGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[268]);
}

// ===================================================================

class ReqTransferChatGroup::_Internal {
 public:
};

ReqTransferChatGroup::ReqTransferChatGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqTransferChatGroup)
}
ReqTransferChatGroup::ReqTransferChatGroup(const ReqTransferChatGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_group_id().empty()) {
    chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_group_id(), 
      GetArenaForAllocation());
  }
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra_data().empty()) {
    extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_data(), 
      GetArenaForAllocation());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_group_type_, &from.chat_group_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&chat_group_type_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqTransferChatGroup)
}

void ReqTransferChatGroup::SharedCtor() {
chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&chat_group_type_)) + sizeof(world_id_));
}

ReqTransferChatGroup::~ReqTransferChatGroup() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqTransferChatGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqTransferChatGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqTransferChatGroup::ArenaDtor(void* object) {
  ReqTransferChatGroup* _this = reinterpret_cast< ReqTransferChatGroup* >(object);
  (void)_this;
}
void ReqTransferChatGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqTransferChatGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqTransferChatGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqTransferChatGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_.ClearToEmpty();
  extra_data_.ClearToEmpty();
  user_name_.ClearToEmpty();
  ::memset(&chat_group_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&chat_group_type_)) + sizeof(world_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqTransferChatGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chat_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chat_group_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chat_group_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes user_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqTransferChatGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqTransferChatGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chat_group_id = 1;
  if (!this->chat_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chat_group_id(), target);
  }

  // int32 chat_group_type = 2;
  if (this->chat_group_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chat_group_type(), target);
  }

  // bytes extra_data = 3;
  if (!this->extra_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_extra_data(), target);
  }

  // bytes user_name = 4;
  if (!this->user_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_user_name(), target);
  }

  // int32 world_id = 5;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_world_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqTransferChatGroup)
  return target;
}

size_t ReqTransferChatGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqTransferChatGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_group_id = 1;
  if (!this->chat_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_group_id());
  }

  // bytes extra_data = 3;
  if (!this->extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_data());
  }

  // bytes user_name = 4;
  if (!this->user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_name());
  }

  // int32 chat_group_type = 2;
  if (this->chat_group_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chat_group_type());
  }

  // int32 world_id = 5;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqTransferChatGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqTransferChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqTransferChatGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqTransferChatGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqTransferChatGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqTransferChatGroup)
    MergeFrom(*source);
  }
}

void ReqTransferChatGroup::MergeFrom(const ReqTransferChatGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqTransferChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chat_group_id().empty()) {
    _internal_set_chat_group_id(from._internal_chat_group_id());
  }
  if (!from.extra_data().empty()) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (!from.user_name().empty()) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (from.chat_group_type() != 0) {
    _internal_set_chat_group_type(from._internal_chat_group_type());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
}

void ReqTransferChatGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqTransferChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTransferChatGroup::CopyFrom(const ReqTransferChatGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqTransferChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTransferChatGroup::IsInitialized() const {
  return true;
}

void ReqTransferChatGroup::InternalSwap(ReqTransferChatGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_group_id_, GetArenaForAllocation(),
      &other->chat_group_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_data_, GetArenaForAllocation(),
      &other->extra_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_, GetArenaForAllocation(),
      &other->user_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqTransferChatGroup, world_id_)
      + sizeof(ReqTransferChatGroup::world_id_)
      - PROTOBUF_FIELD_OFFSET(ReqTransferChatGroup, chat_group_type_)>(
          reinterpret_cast<char*>(&chat_group_type_),
          reinterpret_cast<char*>(&other->chat_group_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqTransferChatGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[269]);
}

// ===================================================================

class AckTransferChatGroup::_Internal {
 public:
};

AckTransferChatGroup::AckTransferChatGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckTransferChatGroup)
}
AckTransferChatGroup::AckTransferChatGroup(const AckTransferChatGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_group_id().empty()) {
    chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_group_id(), 
      GetArenaForAllocation());
  }
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra_data().empty()) {
    extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_data(), 
      GetArenaForAllocation());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckTransferChatGroup)
}

void AckTransferChatGroup::SharedCtor() {
chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
}

AckTransferChatGroup::~AckTransferChatGroup() {
  // @@protoc_insertion_point(destructor:KWMsg.AckTransferChatGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckTransferChatGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckTransferChatGroup::ArenaDtor(void* object) {
  AckTransferChatGroup* _this = reinterpret_cast< AckTransferChatGroup* >(object);
  (void)_this;
}
void AckTransferChatGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckTransferChatGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckTransferChatGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckTransferChatGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_.ClearToEmpty();
  extra_data_.ClearToEmpty();
  user_name_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckTransferChatGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes chat_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chat_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chat_group_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chat_group_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes user_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckTransferChatGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckTransferChatGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes chat_group_id = 2;
  if (!this->chat_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chat_group_id(), target);
  }

  // int32 chat_group_type = 3;
  if (this->chat_group_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chat_group_type(), target);
  }

  // bytes extra_data = 4;
  if (!this->extra_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_extra_data(), target);
  }

  // bytes user_name = 5;
  if (!this->user_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_user_name(), target);
  }

  // int32 world_id = 6;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_world_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckTransferChatGroup)
  return target;
}

size_t AckTransferChatGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckTransferChatGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_group_id = 2;
  if (!this->chat_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_group_id());
  }

  // bytes extra_data = 4;
  if (!this->extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_data());
  }

  // bytes user_name = 5;
  if (!this->user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_name());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 chat_group_type = 3;
  if (this->chat_group_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chat_group_type());
  }

  // int32 world_id = 6;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckTransferChatGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckTransferChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const AckTransferChatGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckTransferChatGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckTransferChatGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckTransferChatGroup)
    MergeFrom(*source);
  }
}

void AckTransferChatGroup::MergeFrom(const AckTransferChatGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckTransferChatGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chat_group_id().empty()) {
    _internal_set_chat_group_id(from._internal_chat_group_id());
  }
  if (!from.extra_data().empty()) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (!from.user_name().empty()) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.chat_group_type() != 0) {
    _internal_set_chat_group_type(from._internal_chat_group_type());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
}

void AckTransferChatGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckTransferChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTransferChatGroup::CopyFrom(const AckTransferChatGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckTransferChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTransferChatGroup::IsInitialized() const {
  return true;
}

void AckTransferChatGroup::InternalSwap(AckTransferChatGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_group_id_, GetArenaForAllocation(),
      &other->chat_group_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_data_, GetArenaForAllocation(),
      &other->extra_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_, GetArenaForAllocation(),
      &other->user_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckTransferChatGroup, world_id_)
      + sizeof(AckTransferChatGroup::world_id_)
      - PROTOBUF_FIELD_OFFSET(AckTransferChatGroup, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckTransferChatGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[270]);
}

// ===================================================================

class ReqAddChatGroupUser::_Internal {
 public:
};

ReqAddChatGroupUser::ReqAddChatGroupUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAddChatGroupUser)
}
ReqAddChatGroupUser::ReqAddChatGroupUser(const ReqAddChatGroupUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_group_id().empty()) {
    chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_group_id(), 
      GetArenaForAllocation());
  }
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra_data().empty()) {
    extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_data(), 
      GetArenaForAllocation());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_group_type_, &from.chat_group_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&chat_group_type_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAddChatGroupUser)
}

void ReqAddChatGroupUser::SharedCtor() {
chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&chat_group_type_)) + sizeof(world_id_));
}

ReqAddChatGroupUser::~ReqAddChatGroupUser() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAddChatGroupUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAddChatGroupUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqAddChatGroupUser::ArenaDtor(void* object) {
  ReqAddChatGroupUser* _this = reinterpret_cast< ReqAddChatGroupUser* >(object);
  (void)_this;
}
void ReqAddChatGroupUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAddChatGroupUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAddChatGroupUser::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAddChatGroupUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_.ClearToEmpty();
  extra_data_.ClearToEmpty();
  user_name_.ClearToEmpty();
  ::memset(&chat_group_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&chat_group_type_)) + sizeof(world_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAddChatGroupUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chat_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chat_group_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chat_group_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes user_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAddChatGroupUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAddChatGroupUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chat_group_id = 1;
  if (!this->chat_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chat_group_id(), target);
  }

  // int32 chat_group_type = 2;
  if (this->chat_group_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chat_group_type(), target);
  }

  // bytes extra_data = 3;
  if (!this->extra_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_extra_data(), target);
  }

  // bytes user_name = 4;
  if (!this->user_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_user_name(), target);
  }

  // int32 world_id = 5;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_world_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAddChatGroupUser)
  return target;
}

size_t ReqAddChatGroupUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAddChatGroupUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_group_id = 1;
  if (!this->chat_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_group_id());
  }

  // bytes extra_data = 3;
  if (!this->extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_data());
  }

  // bytes user_name = 4;
  if (!this->user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_name());
  }

  // int32 chat_group_type = 2;
  if (this->chat_group_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chat_group_type());
  }

  // int32 world_id = 5;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAddChatGroupUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAddChatGroupUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAddChatGroupUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAddChatGroupUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAddChatGroupUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAddChatGroupUser)
    MergeFrom(*source);
  }
}

void ReqAddChatGroupUser::MergeFrom(const ReqAddChatGroupUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAddChatGroupUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chat_group_id().empty()) {
    _internal_set_chat_group_id(from._internal_chat_group_id());
  }
  if (!from.extra_data().empty()) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (!from.user_name().empty()) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (from.chat_group_type() != 0) {
    _internal_set_chat_group_type(from._internal_chat_group_type());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
}

void ReqAddChatGroupUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAddChatGroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAddChatGroupUser::CopyFrom(const ReqAddChatGroupUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAddChatGroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAddChatGroupUser::IsInitialized() const {
  return true;
}

void ReqAddChatGroupUser::InternalSwap(ReqAddChatGroupUser* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_group_id_, GetArenaForAllocation(),
      &other->chat_group_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_data_, GetArenaForAllocation(),
      &other->extra_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_, GetArenaForAllocation(),
      &other->user_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqAddChatGroupUser, world_id_)
      + sizeof(ReqAddChatGroupUser::world_id_)
      - PROTOBUF_FIELD_OFFSET(ReqAddChatGroupUser, chat_group_type_)>(
          reinterpret_cast<char*>(&chat_group_type_),
          reinterpret_cast<char*>(&other->chat_group_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAddChatGroupUser::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[271]);
}

// ===================================================================

class AckAddChatGroupUser::_Internal {
 public:
};

AckAddChatGroupUser::AckAddChatGroupUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckAddChatGroupUser)
}
AckAddChatGroupUser::AckAddChatGroupUser(const AckAddChatGroupUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_group_id().empty()) {
    chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_group_id(), 
      GetArenaForAllocation());
  }
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra_data().empty()) {
    extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_data(), 
      GetArenaForAllocation());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckAddChatGroupUser)
}

void AckAddChatGroupUser::SharedCtor() {
chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
}

AckAddChatGroupUser::~AckAddChatGroupUser() {
  // @@protoc_insertion_point(destructor:KWMsg.AckAddChatGroupUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckAddChatGroupUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckAddChatGroupUser::ArenaDtor(void* object) {
  AckAddChatGroupUser* _this = reinterpret_cast< AckAddChatGroupUser* >(object);
  (void)_this;
}
void AckAddChatGroupUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckAddChatGroupUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckAddChatGroupUser::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckAddChatGroupUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_.ClearToEmpty();
  extra_data_.ClearToEmpty();
  user_name_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckAddChatGroupUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes chat_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chat_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chat_group_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chat_group_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes user_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckAddChatGroupUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckAddChatGroupUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes chat_group_id = 2;
  if (!this->chat_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chat_group_id(), target);
  }

  // int32 chat_group_type = 3;
  if (this->chat_group_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chat_group_type(), target);
  }

  // bytes extra_data = 4;
  if (!this->extra_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_extra_data(), target);
  }

  // bytes user_name = 5;
  if (!this->user_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_user_name(), target);
  }

  // int32 world_id = 6;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_world_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckAddChatGroupUser)
  return target;
}

size_t AckAddChatGroupUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckAddChatGroupUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_group_id = 2;
  if (!this->chat_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_group_id());
  }

  // bytes extra_data = 4;
  if (!this->extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_data());
  }

  // bytes user_name = 5;
  if (!this->user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_name());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 chat_group_type = 3;
  if (this->chat_group_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chat_group_type());
  }

  // int32 world_id = 6;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckAddChatGroupUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckAddChatGroupUser)
  GOOGLE_DCHECK_NE(&from, this);
  const AckAddChatGroupUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckAddChatGroupUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckAddChatGroupUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckAddChatGroupUser)
    MergeFrom(*source);
  }
}

void AckAddChatGroupUser::MergeFrom(const AckAddChatGroupUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckAddChatGroupUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chat_group_id().empty()) {
    _internal_set_chat_group_id(from._internal_chat_group_id());
  }
  if (!from.extra_data().empty()) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (!from.user_name().empty()) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.chat_group_type() != 0) {
    _internal_set_chat_group_type(from._internal_chat_group_type());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
}

void AckAddChatGroupUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckAddChatGroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckAddChatGroupUser::CopyFrom(const AckAddChatGroupUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckAddChatGroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckAddChatGroupUser::IsInitialized() const {
  return true;
}

void AckAddChatGroupUser::InternalSwap(AckAddChatGroupUser* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_group_id_, GetArenaForAllocation(),
      &other->chat_group_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_data_, GetArenaForAllocation(),
      &other->extra_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_, GetArenaForAllocation(),
      &other->user_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckAddChatGroupUser, world_id_)
      + sizeof(AckAddChatGroupUser::world_id_)
      - PROTOBUF_FIELD_OFFSET(AckAddChatGroupUser, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckAddChatGroupUser::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[272]);
}

// ===================================================================

class ReqDeleteChatGroupUser::_Internal {
 public:
};

ReqDeleteChatGroupUser::ReqDeleteChatGroupUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqDeleteChatGroupUser)
}
ReqDeleteChatGroupUser::ReqDeleteChatGroupUser(const ReqDeleteChatGroupUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_group_id().empty()) {
    chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_group_id(), 
      GetArenaForAllocation());
  }
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra_data().empty()) {
    extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_data(), 
      GetArenaForAllocation());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chat_group_type_, &from.chat_group_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&chat_group_type_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqDeleteChatGroupUser)
}

void ReqDeleteChatGroupUser::SharedCtor() {
chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chat_group_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&chat_group_type_)) + sizeof(world_id_));
}

ReqDeleteChatGroupUser::~ReqDeleteChatGroupUser() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqDeleteChatGroupUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqDeleteChatGroupUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqDeleteChatGroupUser::ArenaDtor(void* object) {
  ReqDeleteChatGroupUser* _this = reinterpret_cast< ReqDeleteChatGroupUser* >(object);
  (void)_this;
}
void ReqDeleteChatGroupUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqDeleteChatGroupUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqDeleteChatGroupUser::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqDeleteChatGroupUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_.ClearToEmpty();
  extra_data_.ClearToEmpty();
  user_name_.ClearToEmpty();
  ::memset(&chat_group_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&chat_group_type_)) + sizeof(world_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqDeleteChatGroupUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chat_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chat_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chat_group_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chat_group_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes user_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqDeleteChatGroupUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqDeleteChatGroupUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chat_group_id = 1;
  if (!this->chat_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chat_group_id(), target);
  }

  // int32 chat_group_type = 2;
  if (this->chat_group_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chat_group_type(), target);
  }

  // bytes extra_data = 3;
  if (!this->extra_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_extra_data(), target);
  }

  // bytes user_name = 4;
  if (!this->user_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_user_name(), target);
  }

  // int32 world_id = 5;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_world_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqDeleteChatGroupUser)
  return target;
}

size_t ReqDeleteChatGroupUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqDeleteChatGroupUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_group_id = 1;
  if (!this->chat_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_group_id());
  }

  // bytes extra_data = 3;
  if (!this->extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_data());
  }

  // bytes user_name = 4;
  if (!this->user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_name());
  }

  // int32 chat_group_type = 2;
  if (this->chat_group_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chat_group_type());
  }

  // int32 world_id = 5;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqDeleteChatGroupUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqDeleteChatGroupUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqDeleteChatGroupUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqDeleteChatGroupUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqDeleteChatGroupUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqDeleteChatGroupUser)
    MergeFrom(*source);
  }
}

void ReqDeleteChatGroupUser::MergeFrom(const ReqDeleteChatGroupUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqDeleteChatGroupUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chat_group_id().empty()) {
    _internal_set_chat_group_id(from._internal_chat_group_id());
  }
  if (!from.extra_data().empty()) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (!from.user_name().empty()) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (from.chat_group_type() != 0) {
    _internal_set_chat_group_type(from._internal_chat_group_type());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
}

void ReqDeleteChatGroupUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqDeleteChatGroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDeleteChatGroupUser::CopyFrom(const ReqDeleteChatGroupUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqDeleteChatGroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDeleteChatGroupUser::IsInitialized() const {
  return true;
}

void ReqDeleteChatGroupUser::InternalSwap(ReqDeleteChatGroupUser* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_group_id_, GetArenaForAllocation(),
      &other->chat_group_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_data_, GetArenaForAllocation(),
      &other->extra_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_, GetArenaForAllocation(),
      &other->user_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqDeleteChatGroupUser, world_id_)
      + sizeof(ReqDeleteChatGroupUser::world_id_)
      - PROTOBUF_FIELD_OFFSET(ReqDeleteChatGroupUser, chat_group_type_)>(
          reinterpret_cast<char*>(&chat_group_type_),
          reinterpret_cast<char*>(&other->chat_group_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqDeleteChatGroupUser::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[273]);
}

// ===================================================================

class AckDeleteChatGroupUser::_Internal {
 public:
};

AckDeleteChatGroupUser::AckDeleteChatGroupUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckDeleteChatGroupUser)
}
AckDeleteChatGroupUser::AckDeleteChatGroupUser(const AckDeleteChatGroupUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_group_id().empty()) {
    chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_group_id(), 
      GetArenaForAllocation());
  }
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra_data().empty()) {
    extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_data(), 
      GetArenaForAllocation());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckDeleteChatGroupUser)
}

void AckDeleteChatGroupUser::SharedCtor() {
chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
}

AckDeleteChatGroupUser::~AckDeleteChatGroupUser() {
  // @@protoc_insertion_point(destructor:KWMsg.AckDeleteChatGroupUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckDeleteChatGroupUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckDeleteChatGroupUser::ArenaDtor(void* object) {
  AckDeleteChatGroupUser* _this = reinterpret_cast< AckDeleteChatGroupUser* >(object);
  (void)_this;
}
void AckDeleteChatGroupUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckDeleteChatGroupUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckDeleteChatGroupUser::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckDeleteChatGroupUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_group_id_.ClearToEmpty();
  extra_data_.ClearToEmpty();
  user_name_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_id_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(world_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckDeleteChatGroupUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes chat_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chat_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 chat_group_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chat_group_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes user_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckDeleteChatGroupUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckDeleteChatGroupUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes chat_group_id = 2;
  if (!this->chat_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chat_group_id(), target);
  }

  // int32 chat_group_type = 3;
  if (this->chat_group_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_chat_group_type(), target);
  }

  // bytes extra_data = 4;
  if (!this->extra_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_extra_data(), target);
  }

  // bytes user_name = 5;
  if (!this->user_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_user_name(), target);
  }

  // int32 world_id = 6;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_world_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckDeleteChatGroupUser)
  return target;
}

size_t AckDeleteChatGroupUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckDeleteChatGroupUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chat_group_id = 2;
  if (!this->chat_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_group_id());
  }

  // bytes extra_data = 4;
  if (!this->extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_data());
  }

  // bytes user_name = 5;
  if (!this->user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_name());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 chat_group_type = 3;
  if (this->chat_group_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chat_group_type());
  }

  // int32 world_id = 6;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckDeleteChatGroupUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckDeleteChatGroupUser)
  GOOGLE_DCHECK_NE(&from, this);
  const AckDeleteChatGroupUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckDeleteChatGroupUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckDeleteChatGroupUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckDeleteChatGroupUser)
    MergeFrom(*source);
  }
}

void AckDeleteChatGroupUser::MergeFrom(const AckDeleteChatGroupUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckDeleteChatGroupUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.chat_group_id().empty()) {
    _internal_set_chat_group_id(from._internal_chat_group_id());
  }
  if (!from.extra_data().empty()) {
    _internal_set_extra_data(from._internal_extra_data());
  }
  if (!from.user_name().empty()) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.chat_group_type() != 0) {
    _internal_set_chat_group_type(from._internal_chat_group_type());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
}

void AckDeleteChatGroupUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckDeleteChatGroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDeleteChatGroupUser::CopyFrom(const AckDeleteChatGroupUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckDeleteChatGroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDeleteChatGroupUser::IsInitialized() const {
  return true;
}

void AckDeleteChatGroupUser::InternalSwap(AckDeleteChatGroupUser* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_group_id_, GetArenaForAllocation(),
      &other->chat_group_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extra_data_, GetArenaForAllocation(),
      &other->extra_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_name_, GetArenaForAllocation(),
      &other->user_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckDeleteChatGroupUser, world_id_)
      + sizeof(AckDeleteChatGroupUser::world_id_)
      - PROTOBUF_FIELD_OFFSET(AckDeleteChatGroupUser, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckDeleteChatGroupUser::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[274]);
}

// ===================================================================

class ReqSwitchChatBubble::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqSwitchChatBubble* msg);
};

const ::KWMsg::Ident&
ReqSwitchChatBubble::_Internal::player_id(const ReqSwitchChatBubble* msg) {
  return *msg->player_id_;
}
void ReqSwitchChatBubble::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqSwitchChatBubble::ReqSwitchChatBubble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqSwitchChatBubble)
}
ReqSwitchChatBubble::ReqSwitchChatBubble(const ReqSwitchChatBubble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bubble_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bubble_id().empty()) {
    bubble_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bubble_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqSwitchChatBubble)
}

void ReqSwitchChatBubble::SharedCtor() {
bubble_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqSwitchChatBubble::~ReqSwitchChatBubble() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqSwitchChatBubble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqSwitchChatBubble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bubble_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqSwitchChatBubble::ArenaDtor(void* object) {
  ReqSwitchChatBubble* _this = reinterpret_cast< ReqSwitchChatBubble* >(object);
  (void)_this;
}
void ReqSwitchChatBubble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqSwitchChatBubble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSwitchChatBubble::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqSwitchChatBubble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bubble_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSwitchChatBubble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bubble_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bubble_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSwitchChatBubble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqSwitchChatBubble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes bubble_id = 2;
  if (!this->bubble_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bubble_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqSwitchChatBubble)
  return target;
}

size_t ReqSwitchChatBubble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqSwitchChatBubble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes bubble_id = 2;
  if (!this->bubble_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bubble_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSwitchChatBubble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqSwitchChatBubble)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSwitchChatBubble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSwitchChatBubble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqSwitchChatBubble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqSwitchChatBubble)
    MergeFrom(*source);
  }
}

void ReqSwitchChatBubble::MergeFrom(const ReqSwitchChatBubble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqSwitchChatBubble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.bubble_id().empty()) {
    _internal_set_bubble_id(from._internal_bubble_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqSwitchChatBubble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqSwitchChatBubble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSwitchChatBubble::CopyFrom(const ReqSwitchChatBubble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqSwitchChatBubble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSwitchChatBubble::IsInitialized() const {
  return true;
}

void ReqSwitchChatBubble::InternalSwap(ReqSwitchChatBubble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bubble_id_, GetArenaForAllocation(),
      &other->bubble_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSwitchChatBubble::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[275]);
}

// ===================================================================

class AckSwitchChatBubble::_Internal {
 public:
};

AckSwitchChatBubble::AckSwitchChatBubble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckSwitchChatBubble)
}
AckSwitchChatBubble::AckSwitchChatBubble(const AckSwitchChatBubble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bubble_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bubble_id().empty()) {
    bubble_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bubble_id(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckSwitchChatBubble)
}

void AckSwitchChatBubble::SharedCtor() {
bubble_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckSwitchChatBubble::~AckSwitchChatBubble() {
  // @@protoc_insertion_point(destructor:KWMsg.AckSwitchChatBubble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckSwitchChatBubble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bubble_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckSwitchChatBubble::ArenaDtor(void* object) {
  AckSwitchChatBubble* _this = reinterpret_cast< AckSwitchChatBubble* >(object);
  (void)_this;
}
void AckSwitchChatBubble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckSwitchChatBubble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckSwitchChatBubble::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckSwitchChatBubble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bubble_id_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckSwitchChatBubble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes bubble_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bubble_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSwitchChatBubble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckSwitchChatBubble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes bubble_id = 2;
  if (!this->bubble_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bubble_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckSwitchChatBubble)
  return target;
}

size_t AckSwitchChatBubble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckSwitchChatBubble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes bubble_id = 2;
  if (!this->bubble_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bubble_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSwitchChatBubble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckSwitchChatBubble)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSwitchChatBubble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSwitchChatBubble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckSwitchChatBubble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckSwitchChatBubble)
    MergeFrom(*source);
  }
}

void AckSwitchChatBubble::MergeFrom(const AckSwitchChatBubble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckSwitchChatBubble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.bubble_id().empty()) {
    _internal_set_bubble_id(from._internal_bubble_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckSwitchChatBubble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckSwitchChatBubble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSwitchChatBubble::CopyFrom(const AckSwitchChatBubble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckSwitchChatBubble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSwitchChatBubble::IsInitialized() const {
  return true;
}

void AckSwitchChatBubble::InternalSwap(AckSwitchChatBubble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bubble_id_, GetArenaForAllocation(),
      &other->bubble_id_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSwitchChatBubble::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[276]);
}

// ===================================================================

class ReqUnlockChatBubble::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqUnlockChatBubble* msg);
};

const ::KWMsg::Ident&
ReqUnlockChatBubble::_Internal::player_id(const ReqUnlockChatBubble* msg) {
  return *msg->player_id_;
}
void ReqUnlockChatBubble::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqUnlockChatBubble::ReqUnlockChatBubble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqUnlockChatBubble)
}
ReqUnlockChatBubble::ReqUnlockChatBubble(const ReqUnlockChatBubble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bubble_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bubble_id().empty()) {
    bubble_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bubble_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqUnlockChatBubble)
}

void ReqUnlockChatBubble::SharedCtor() {
bubble_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqUnlockChatBubble::~ReqUnlockChatBubble() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqUnlockChatBubble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqUnlockChatBubble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bubble_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqUnlockChatBubble::ArenaDtor(void* object) {
  ReqUnlockChatBubble* _this = reinterpret_cast< ReqUnlockChatBubble* >(object);
  (void)_this;
}
void ReqUnlockChatBubble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqUnlockChatBubble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqUnlockChatBubble::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqUnlockChatBubble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bubble_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqUnlockChatBubble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bubble_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bubble_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUnlockChatBubble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqUnlockChatBubble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes bubble_id = 2;
  if (!this->bubble_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bubble_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqUnlockChatBubble)
  return target;
}

size_t ReqUnlockChatBubble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqUnlockChatBubble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes bubble_id = 2;
  if (!this->bubble_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bubble_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUnlockChatBubble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqUnlockChatBubble)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUnlockChatBubble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUnlockChatBubble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqUnlockChatBubble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqUnlockChatBubble)
    MergeFrom(*source);
  }
}

void ReqUnlockChatBubble::MergeFrom(const ReqUnlockChatBubble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqUnlockChatBubble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.bubble_id().empty()) {
    _internal_set_bubble_id(from._internal_bubble_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqUnlockChatBubble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqUnlockChatBubble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUnlockChatBubble::CopyFrom(const ReqUnlockChatBubble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqUnlockChatBubble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUnlockChatBubble::IsInitialized() const {
  return true;
}

void ReqUnlockChatBubble::InternalSwap(ReqUnlockChatBubble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bubble_id_, GetArenaForAllocation(),
      &other->bubble_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUnlockChatBubble::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[277]);
}

// ===================================================================

class AckUnlockChatBubble::_Internal {
 public:
};

AckUnlockChatBubble::AckUnlockChatBubble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckUnlockChatBubble)
}
AckUnlockChatBubble::AckUnlockChatBubble(const AckUnlockChatBubble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bubble_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bubble_id().empty()) {
    bubble_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bubble_id(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckUnlockChatBubble)
}

void AckUnlockChatBubble::SharedCtor() {
bubble_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckUnlockChatBubble::~AckUnlockChatBubble() {
  // @@protoc_insertion_point(destructor:KWMsg.AckUnlockChatBubble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckUnlockChatBubble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bubble_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckUnlockChatBubble::ArenaDtor(void* object) {
  AckUnlockChatBubble* _this = reinterpret_cast< AckUnlockChatBubble* >(object);
  (void)_this;
}
void AckUnlockChatBubble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckUnlockChatBubble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckUnlockChatBubble::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckUnlockChatBubble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bubble_id_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckUnlockChatBubble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes bubble_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bubble_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckUnlockChatBubble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckUnlockChatBubble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes bubble_id = 2;
  if (!this->bubble_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bubble_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckUnlockChatBubble)
  return target;
}

size_t AckUnlockChatBubble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckUnlockChatBubble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes bubble_id = 2;
  if (!this->bubble_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bubble_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckUnlockChatBubble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckUnlockChatBubble)
  GOOGLE_DCHECK_NE(&from, this);
  const AckUnlockChatBubble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckUnlockChatBubble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckUnlockChatBubble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckUnlockChatBubble)
    MergeFrom(*source);
  }
}

void AckUnlockChatBubble::MergeFrom(const AckUnlockChatBubble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckUnlockChatBubble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.bubble_id().empty()) {
    _internal_set_bubble_id(from._internal_bubble_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckUnlockChatBubble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckUnlockChatBubble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUnlockChatBubble::CopyFrom(const AckUnlockChatBubble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckUnlockChatBubble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUnlockChatBubble::IsInitialized() const {
  return true;
}

void AckUnlockChatBubble::InternalSwap(AckUnlockChatBubble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bubble_id_, GetArenaForAllocation(),
      &other->bubble_id_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckUnlockChatBubble::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[278]);
}

// ===================================================================

class ReqUnlockChatMemeGroup::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqUnlockChatMemeGroup* msg);
};

const ::KWMsg::Ident&
ReqUnlockChatMemeGroup::_Internal::player_id(const ReqUnlockChatMemeGroup* msg) {
  return *msg->player_id_;
}
void ReqUnlockChatMemeGroup::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqUnlockChatMemeGroup::ReqUnlockChatMemeGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqUnlockChatMemeGroup)
}
ReqUnlockChatMemeGroup::ReqUnlockChatMemeGroup(const ReqUnlockChatMemeGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  meme_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_meme_group_id().empty()) {
    meme_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_meme_group_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqUnlockChatMemeGroup)
}

void ReqUnlockChatMemeGroup::SharedCtor() {
meme_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqUnlockChatMemeGroup::~ReqUnlockChatMemeGroup() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqUnlockChatMemeGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqUnlockChatMemeGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  meme_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqUnlockChatMemeGroup::ArenaDtor(void* object) {
  ReqUnlockChatMemeGroup* _this = reinterpret_cast< ReqUnlockChatMemeGroup* >(object);
  (void)_this;
}
void ReqUnlockChatMemeGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqUnlockChatMemeGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqUnlockChatMemeGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqUnlockChatMemeGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meme_group_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqUnlockChatMemeGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes meme_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_meme_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUnlockChatMemeGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqUnlockChatMemeGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes meme_group_id = 2;
  if (!this->meme_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_meme_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqUnlockChatMemeGroup)
  return target;
}

size_t ReqUnlockChatMemeGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqUnlockChatMemeGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes meme_group_id = 2;
  if (!this->meme_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_meme_group_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUnlockChatMemeGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqUnlockChatMemeGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUnlockChatMemeGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUnlockChatMemeGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqUnlockChatMemeGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqUnlockChatMemeGroup)
    MergeFrom(*source);
  }
}

void ReqUnlockChatMemeGroup::MergeFrom(const ReqUnlockChatMemeGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqUnlockChatMemeGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.meme_group_id().empty()) {
    _internal_set_meme_group_id(from._internal_meme_group_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqUnlockChatMemeGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqUnlockChatMemeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUnlockChatMemeGroup::CopyFrom(const ReqUnlockChatMemeGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqUnlockChatMemeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUnlockChatMemeGroup::IsInitialized() const {
  return true;
}

void ReqUnlockChatMemeGroup::InternalSwap(ReqUnlockChatMemeGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &meme_group_id_, GetArenaForAllocation(),
      &other->meme_group_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUnlockChatMemeGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[279]);
}

// ===================================================================

class AckUnlockChatMemeGroup::_Internal {
 public:
};

AckUnlockChatMemeGroup::AckUnlockChatMemeGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckUnlockChatMemeGroup)
}
AckUnlockChatMemeGroup::AckUnlockChatMemeGroup(const AckUnlockChatMemeGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  meme_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_meme_group_id().empty()) {
    meme_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_meme_group_id(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckUnlockChatMemeGroup)
}

void AckUnlockChatMemeGroup::SharedCtor() {
meme_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckUnlockChatMemeGroup::~AckUnlockChatMemeGroup() {
  // @@protoc_insertion_point(destructor:KWMsg.AckUnlockChatMemeGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckUnlockChatMemeGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  meme_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckUnlockChatMemeGroup::ArenaDtor(void* object) {
  AckUnlockChatMemeGroup* _this = reinterpret_cast< AckUnlockChatMemeGroup* >(object);
  (void)_this;
}
void AckUnlockChatMemeGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckUnlockChatMemeGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckUnlockChatMemeGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckUnlockChatMemeGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meme_group_id_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckUnlockChatMemeGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes meme_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_meme_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckUnlockChatMemeGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckUnlockChatMemeGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes meme_group_id = 2;
  if (!this->meme_group_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_meme_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckUnlockChatMemeGroup)
  return target;
}

size_t AckUnlockChatMemeGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckUnlockChatMemeGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes meme_group_id = 2;
  if (!this->meme_group_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_meme_group_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckUnlockChatMemeGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckUnlockChatMemeGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const AckUnlockChatMemeGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckUnlockChatMemeGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckUnlockChatMemeGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckUnlockChatMemeGroup)
    MergeFrom(*source);
  }
}

void AckUnlockChatMemeGroup::MergeFrom(const AckUnlockChatMemeGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckUnlockChatMemeGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.meme_group_id().empty()) {
    _internal_set_meme_group_id(from._internal_meme_group_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckUnlockChatMemeGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckUnlockChatMemeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUnlockChatMemeGroup::CopyFrom(const AckUnlockChatMemeGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckUnlockChatMemeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUnlockChatMemeGroup::IsInitialized() const {
  return true;
}

void AckUnlockChatMemeGroup::InternalSwap(AckUnlockChatMemeGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &meme_group_id_, GetArenaForAllocation(),
      &other->meme_group_id_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckUnlockChatMemeGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[280]);
}

// ===================================================================

class ReqUnlockChatMeme::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqUnlockChatMeme* msg);
};

const ::KWMsg::Ident&
ReqUnlockChatMeme::_Internal::player_id(const ReqUnlockChatMeme* msg) {
  return *msg->player_id_;
}
void ReqUnlockChatMeme::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqUnlockChatMeme::ReqUnlockChatMeme(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqUnlockChatMeme)
}
ReqUnlockChatMeme::ReqUnlockChatMeme(const ReqUnlockChatMeme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  meme_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_meme_id().empty()) {
    meme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_meme_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqUnlockChatMeme)
}

void ReqUnlockChatMeme::SharedCtor() {
meme_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqUnlockChatMeme::~ReqUnlockChatMeme() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqUnlockChatMeme)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqUnlockChatMeme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  meme_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqUnlockChatMeme::ArenaDtor(void* object) {
  ReqUnlockChatMeme* _this = reinterpret_cast< ReqUnlockChatMeme* >(object);
  (void)_this;
}
void ReqUnlockChatMeme::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqUnlockChatMeme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqUnlockChatMeme::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqUnlockChatMeme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meme_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqUnlockChatMeme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes meme_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_meme_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUnlockChatMeme::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqUnlockChatMeme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes meme_id = 2;
  if (!this->meme_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_meme_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqUnlockChatMeme)
  return target;
}

size_t ReqUnlockChatMeme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqUnlockChatMeme)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes meme_id = 2;
  if (!this->meme_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_meme_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUnlockChatMeme::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqUnlockChatMeme)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUnlockChatMeme* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUnlockChatMeme>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqUnlockChatMeme)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqUnlockChatMeme)
    MergeFrom(*source);
  }
}

void ReqUnlockChatMeme::MergeFrom(const ReqUnlockChatMeme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqUnlockChatMeme)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.meme_id().empty()) {
    _internal_set_meme_id(from._internal_meme_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqUnlockChatMeme::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqUnlockChatMeme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUnlockChatMeme::CopyFrom(const ReqUnlockChatMeme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqUnlockChatMeme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUnlockChatMeme::IsInitialized() const {
  return true;
}

void ReqUnlockChatMeme::InternalSwap(ReqUnlockChatMeme* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &meme_id_, GetArenaForAllocation(),
      &other->meme_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUnlockChatMeme::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[281]);
}

// ===================================================================

class AckUnlockChatMeme::_Internal {
 public:
};

AckUnlockChatMeme::AckUnlockChatMeme(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckUnlockChatMeme)
}
AckUnlockChatMeme::AckUnlockChatMeme(const AckUnlockChatMeme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  meme_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_meme_id().empty()) {
    meme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_meme_id(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckUnlockChatMeme)
}

void AckUnlockChatMeme::SharedCtor() {
meme_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckUnlockChatMeme::~AckUnlockChatMeme() {
  // @@protoc_insertion_point(destructor:KWMsg.AckUnlockChatMeme)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckUnlockChatMeme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  meme_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckUnlockChatMeme::ArenaDtor(void* object) {
  AckUnlockChatMeme* _this = reinterpret_cast< AckUnlockChatMeme* >(object);
  (void)_this;
}
void AckUnlockChatMeme::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckUnlockChatMeme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckUnlockChatMeme::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckUnlockChatMeme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meme_id_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckUnlockChatMeme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes meme_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_meme_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckUnlockChatMeme::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckUnlockChatMeme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes meme_id = 2;
  if (!this->meme_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_meme_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckUnlockChatMeme)
  return target;
}

size_t AckUnlockChatMeme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckUnlockChatMeme)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes meme_id = 2;
  if (!this->meme_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_meme_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckUnlockChatMeme::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckUnlockChatMeme)
  GOOGLE_DCHECK_NE(&from, this);
  const AckUnlockChatMeme* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckUnlockChatMeme>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckUnlockChatMeme)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckUnlockChatMeme)
    MergeFrom(*source);
  }
}

void AckUnlockChatMeme::MergeFrom(const AckUnlockChatMeme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckUnlockChatMeme)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.meme_id().empty()) {
    _internal_set_meme_id(from._internal_meme_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckUnlockChatMeme::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckUnlockChatMeme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUnlockChatMeme::CopyFrom(const AckUnlockChatMeme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckUnlockChatMeme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUnlockChatMeme::IsInitialized() const {
  return true;
}

void AckUnlockChatMeme::InternalSwap(AckUnlockChatMeme* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &meme_id_, GetArenaForAllocation(),
      &other->meme_id_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckUnlockChatMeme::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[282]);
}

// ===================================================================

class SyncPlayerHonorPointChanged::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SyncPlayerHonorPointChanged* msg);
};

const ::KWMsg::Ident&
SyncPlayerHonorPointChanged::_Internal::player_id(const SyncPlayerHonorPointChanged* msg) {
  return *msg->player_id_;
}
void SyncPlayerHonorPointChanged::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
SyncPlayerHonorPointChanged::SyncPlayerHonorPointChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncPlayerHonorPointChanged)
}
SyncPlayerHonorPointChanged::SyncPlayerHonorPointChanged(const SyncPlayerHonorPointChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  honor_point_ = from.honor_point_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncPlayerHonorPointChanged)
}

void SyncPlayerHonorPointChanged::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&honor_point_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(honor_point_));
}

SyncPlayerHonorPointChanged::~SyncPlayerHonorPointChanged() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncPlayerHonorPointChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncPlayerHonorPointChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void SyncPlayerHonorPointChanged::ArenaDtor(void* object) {
  SyncPlayerHonorPointChanged* _this = reinterpret_cast< SyncPlayerHonorPointChanged* >(object);
  (void)_this;
}
void SyncPlayerHonorPointChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncPlayerHonorPointChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncPlayerHonorPointChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncPlayerHonorPointChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  honor_point_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncPlayerHonorPointChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 honor_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          honor_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPlayerHonorPointChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncPlayerHonorPointChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 honor_point = 2;
  if (this->honor_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_honor_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncPlayerHonorPointChanged)
  return target;
}

size_t SyncPlayerHonorPointChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncPlayerHonorPointChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 honor_point = 2;
  if (this->honor_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_honor_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPlayerHonorPointChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncPlayerHonorPointChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPlayerHonorPointChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPlayerHonorPointChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncPlayerHonorPointChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncPlayerHonorPointChanged)
    MergeFrom(*source);
  }
}

void SyncPlayerHonorPointChanged::MergeFrom(const SyncPlayerHonorPointChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncPlayerHonorPointChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.honor_point() != 0) {
    _internal_set_honor_point(from._internal_honor_point());
  }
}

void SyncPlayerHonorPointChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncPlayerHonorPointChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPlayerHonorPointChanged::CopyFrom(const SyncPlayerHonorPointChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncPlayerHonorPointChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayerHonorPointChanged::IsInitialized() const {
  return true;
}

void SyncPlayerHonorPointChanged::InternalSwap(SyncPlayerHonorPointChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncPlayerHonorPointChanged, honor_point_)
      + sizeof(SyncPlayerHonorPointChanged::honor_point_)
      - PROTOBUF_FIELD_OFFSET(SyncPlayerHonorPointChanged, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayerHonorPointChanged::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[283]);
}

// ===================================================================

class SavePlayerHonorPointRanking::_Internal {
 public:
};

SavePlayerHonorPointRanking::SavePlayerHonorPointRanking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SavePlayerHonorPointRanking)
}
SavePlayerHonorPointRanking::SavePlayerHonorPointRanking(const SavePlayerHonorPointRanking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.SavePlayerHonorPointRanking)
}

void SavePlayerHonorPointRanking::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
score_ = int64_t{0};
}

SavePlayerHonorPointRanking::~SavePlayerHonorPointRanking() {
  // @@protoc_insertion_point(destructor:KWMsg.SavePlayerHonorPointRanking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SavePlayerHonorPointRanking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SavePlayerHonorPointRanking::ArenaDtor(void* object) {
  SavePlayerHonorPointRanking* _this = reinterpret_cast< SavePlayerHonorPointRanking* >(object);
  (void)_this;
}
void SavePlayerHonorPointRanking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavePlayerHonorPointRanking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SavePlayerHonorPointRanking::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SavePlayerHonorPointRanking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  score_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavePlayerHonorPointRanking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SavePlayerHonorPointRanking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SavePlayerHonorPointRanking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int64 score = 2;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SavePlayerHonorPointRanking)
  return target;
}

size_t SavePlayerHonorPointRanking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SavePlayerHonorPointRanking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // int64 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavePlayerHonorPointRanking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SavePlayerHonorPointRanking)
  GOOGLE_DCHECK_NE(&from, this);
  const SavePlayerHonorPointRanking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SavePlayerHonorPointRanking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SavePlayerHonorPointRanking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SavePlayerHonorPointRanking)
    MergeFrom(*source);
  }
}

void SavePlayerHonorPointRanking::MergeFrom(const SavePlayerHonorPointRanking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SavePlayerHonorPointRanking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void SavePlayerHonorPointRanking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SavePlayerHonorPointRanking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavePlayerHonorPointRanking::CopyFrom(const SavePlayerHonorPointRanking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SavePlayerHonorPointRanking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavePlayerHonorPointRanking::IsInitialized() const {
  return true;
}

void SavePlayerHonorPointRanking::InternalSwap(SavePlayerHonorPointRanking* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SavePlayerHonorPointRanking::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[284]);
}

// ===================================================================

class SyncPlayerStrategyPointChanged::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SyncPlayerStrategyPointChanged* msg);
};

const ::KWMsg::Ident&
SyncPlayerStrategyPointChanged::_Internal::player_id(const SyncPlayerStrategyPointChanged* msg) {
  return *msg->player_id_;
}
void SyncPlayerStrategyPointChanged::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
SyncPlayerStrategyPointChanged::SyncPlayerStrategyPointChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncPlayerStrategyPointChanged)
}
SyncPlayerStrategyPointChanged::SyncPlayerStrategyPointChanged(const SyncPlayerStrategyPointChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  strategy_point_ = from.strategy_point_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncPlayerStrategyPointChanged)
}

void SyncPlayerStrategyPointChanged::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&strategy_point_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(strategy_point_));
}

SyncPlayerStrategyPointChanged::~SyncPlayerStrategyPointChanged() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncPlayerStrategyPointChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncPlayerStrategyPointChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void SyncPlayerStrategyPointChanged::ArenaDtor(void* object) {
  SyncPlayerStrategyPointChanged* _this = reinterpret_cast< SyncPlayerStrategyPointChanged* >(object);
  (void)_this;
}
void SyncPlayerStrategyPointChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncPlayerStrategyPointChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncPlayerStrategyPointChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncPlayerStrategyPointChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  strategy_point_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncPlayerStrategyPointChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 strategy_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          strategy_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPlayerStrategyPointChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncPlayerStrategyPointChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 strategy_point = 2;
  if (this->strategy_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_strategy_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncPlayerStrategyPointChanged)
  return target;
}

size_t SyncPlayerStrategyPointChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncPlayerStrategyPointChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 strategy_point = 2;
  if (this->strategy_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_strategy_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPlayerStrategyPointChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncPlayerStrategyPointChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPlayerStrategyPointChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPlayerStrategyPointChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncPlayerStrategyPointChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncPlayerStrategyPointChanged)
    MergeFrom(*source);
  }
}

void SyncPlayerStrategyPointChanged::MergeFrom(const SyncPlayerStrategyPointChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncPlayerStrategyPointChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.strategy_point() != 0) {
    _internal_set_strategy_point(from._internal_strategy_point());
  }
}

void SyncPlayerStrategyPointChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncPlayerStrategyPointChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPlayerStrategyPointChanged::CopyFrom(const SyncPlayerStrategyPointChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncPlayerStrategyPointChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPlayerStrategyPointChanged::IsInitialized() const {
  return true;
}

void SyncPlayerStrategyPointChanged::InternalSwap(SyncPlayerStrategyPointChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncPlayerStrategyPointChanged, strategy_point_)
      + sizeof(SyncPlayerStrategyPointChanged::strategy_point_)
      - PROTOBUF_FIELD_OFFSET(SyncPlayerStrategyPointChanged, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPlayerStrategyPointChanged::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[285]);
}

// ===================================================================

class SavePlayerStrategyPointRanking::_Internal {
 public:
};

SavePlayerStrategyPointRanking::SavePlayerStrategyPointRanking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SavePlayerStrategyPointRanking)
}
SavePlayerStrategyPointRanking::SavePlayerStrategyPointRanking(const SavePlayerStrategyPointRanking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.SavePlayerStrategyPointRanking)
}

void SavePlayerStrategyPointRanking::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
score_ = int64_t{0};
}

SavePlayerStrategyPointRanking::~SavePlayerStrategyPointRanking() {
  // @@protoc_insertion_point(destructor:KWMsg.SavePlayerStrategyPointRanking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SavePlayerStrategyPointRanking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SavePlayerStrategyPointRanking::ArenaDtor(void* object) {
  SavePlayerStrategyPointRanking* _this = reinterpret_cast< SavePlayerStrategyPointRanking* >(object);
  (void)_this;
}
void SavePlayerStrategyPointRanking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavePlayerStrategyPointRanking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SavePlayerStrategyPointRanking::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SavePlayerStrategyPointRanking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  score_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavePlayerStrategyPointRanking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SavePlayerStrategyPointRanking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SavePlayerStrategyPointRanking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int64 score = 2;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SavePlayerStrategyPointRanking)
  return target;
}

size_t SavePlayerStrategyPointRanking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SavePlayerStrategyPointRanking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // int64 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavePlayerStrategyPointRanking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SavePlayerStrategyPointRanking)
  GOOGLE_DCHECK_NE(&from, this);
  const SavePlayerStrategyPointRanking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SavePlayerStrategyPointRanking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SavePlayerStrategyPointRanking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SavePlayerStrategyPointRanking)
    MergeFrom(*source);
  }
}

void SavePlayerStrategyPointRanking::MergeFrom(const SavePlayerStrategyPointRanking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SavePlayerStrategyPointRanking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void SavePlayerStrategyPointRanking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SavePlayerStrategyPointRanking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavePlayerStrategyPointRanking::CopyFrom(const SavePlayerStrategyPointRanking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SavePlayerStrategyPointRanking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavePlayerStrategyPointRanking::IsInitialized() const {
  return true;
}

void SavePlayerStrategyPointRanking::InternalSwap(SavePlayerStrategyPointRanking* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SavePlayerStrategyPointRanking::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[286]);
}

// ===================================================================

class SyncBotArenaState::_Internal {
 public:
};

SyncBotArenaState::SyncBotArenaState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncBotArenaState)
}
SyncBotArenaState::SyncBotArenaState(const SyncBotArenaState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncBotArenaState)
}

void SyncBotArenaState::SharedCtor() {
state_ = 0;
}

SyncBotArenaState::~SyncBotArenaState() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncBotArenaState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncBotArenaState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncBotArenaState::ArenaDtor(void* object) {
  SyncBotArenaState* _this = reinterpret_cast< SyncBotArenaState* >(object);
  (void)_this;
}
void SyncBotArenaState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncBotArenaState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncBotArenaState::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncBotArenaState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncBotArenaState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncBotArenaState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncBotArenaState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncBotArenaState)
  return target;
}

size_t SyncBotArenaState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncBotArenaState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncBotArenaState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncBotArenaState)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncBotArenaState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncBotArenaState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncBotArenaState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncBotArenaState)
    MergeFrom(*source);
  }
}

void SyncBotArenaState::MergeFrom(const SyncBotArenaState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncBotArenaState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SyncBotArenaState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncBotArenaState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncBotArenaState::CopyFrom(const SyncBotArenaState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncBotArenaState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncBotArenaState::IsInitialized() const {
  return true;
}

void SyncBotArenaState::InternalSwap(SyncBotArenaState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncBotArenaState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[287]);
}

// ===================================================================

class SyncBotArenaStageSession::_Internal {
 public:
};

SyncBotArenaStageSession::SyncBotArenaStageSession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncBotArenaStageSession)
}
SyncBotArenaStageSession::SyncBotArenaStageSession(const SyncBotArenaStageSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stage_, &from.stage_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_) -
    reinterpret_cast<char*>(&stage_)) + sizeof(session_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncBotArenaStageSession)
}

void SyncBotArenaStageSession::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_) -
    reinterpret_cast<char*>(&stage_)) + sizeof(session_));
}

SyncBotArenaStageSession::~SyncBotArenaStageSession() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncBotArenaStageSession)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncBotArenaStageSession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncBotArenaStageSession::ArenaDtor(void* object) {
  SyncBotArenaStageSession* _this = reinterpret_cast< SyncBotArenaStageSession* >(object);
  (void)_this;
}
void SyncBotArenaStageSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncBotArenaStageSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncBotArenaStageSession::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncBotArenaStageSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_) -
      reinterpret_cast<char*>(&stage_)) + sizeof(session_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncBotArenaStageSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 session = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncBotArenaStageSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncBotArenaStageSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stage = 1;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stage(), target);
  }

  // int32 session = 2;
  if (this->session() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_session(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncBotArenaStageSession)
  return target;
}

size_t SyncBotArenaStageSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncBotArenaStageSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stage = 1;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage());
  }

  // int32 session = 2;
  if (this->session() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncBotArenaStageSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncBotArenaStageSession)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncBotArenaStageSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncBotArenaStageSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncBotArenaStageSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncBotArenaStageSession)
    MergeFrom(*source);
  }
}

void SyncBotArenaStageSession::MergeFrom(const SyncBotArenaStageSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncBotArenaStageSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
  if (from.session() != 0) {
    _internal_set_session(from._internal_session());
  }
}

void SyncBotArenaStageSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncBotArenaStageSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncBotArenaStageSession::CopyFrom(const SyncBotArenaStageSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncBotArenaStageSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncBotArenaStageSession::IsInitialized() const {
  return true;
}

void SyncBotArenaStageSession::InternalSwap(SyncBotArenaStageSession* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncBotArenaStageSession, session_)
      + sizeof(SyncBotArenaStageSession::session_)
      - PROTOBUF_FIELD_OFFSET(SyncBotArenaStageSession, stage_)>(
          reinterpret_cast<char*>(&stage_),
          reinterpret_cast<char*>(&other->stage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncBotArenaStageSession::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[288]);
}

// ===================================================================

class SavePlayerChallengeList::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SavePlayerChallengeList* msg);
  static const ::KWMsg::BotArenaChallengeList& list(const SavePlayerChallengeList* msg);
};

const ::KWMsg::Ident&
SavePlayerChallengeList::_Internal::player_id(const SavePlayerChallengeList* msg) {
  return *msg->player_id_;
}
const ::KWMsg::BotArenaChallengeList&
SavePlayerChallengeList::_Internal::list(const SavePlayerChallengeList* msg) {
  return *msg->list_;
}
void SavePlayerChallengeList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
SavePlayerChallengeList::SavePlayerChallengeList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SavePlayerChallengeList)
}
SavePlayerChallengeList::SavePlayerChallengeList(const SavePlayerChallengeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_list()) {
    list_ = new ::KWMsg::BotArenaChallengeList(*from.list_);
  } else {
    list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.SavePlayerChallengeList)
}

void SavePlayerChallengeList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&list_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(list_));
}

SavePlayerChallengeList::~SavePlayerChallengeList() {
  // @@protoc_insertion_point(destructor:KWMsg.SavePlayerChallengeList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SavePlayerChallengeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete list_;
}

void SavePlayerChallengeList::ArenaDtor(void* object) {
  SavePlayerChallengeList* _this = reinterpret_cast< SavePlayerChallengeList* >(object);
  (void)_this;
}
void SavePlayerChallengeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavePlayerChallengeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SavePlayerChallengeList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SavePlayerChallengeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && list_ != nullptr) {
    delete list_;
  }
  list_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavePlayerChallengeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BotArenaChallengeList list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SavePlayerChallengeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SavePlayerChallengeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.BotArenaChallengeList list = 2;
  if (this->has_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SavePlayerChallengeList)
  return target;
}

size_t SavePlayerChallengeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SavePlayerChallengeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.BotArenaChallengeList list = 2;
  if (this->has_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavePlayerChallengeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SavePlayerChallengeList)
  GOOGLE_DCHECK_NE(&from, this);
  const SavePlayerChallengeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SavePlayerChallengeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SavePlayerChallengeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SavePlayerChallengeList)
    MergeFrom(*source);
  }
}

void SavePlayerChallengeList::MergeFrom(const SavePlayerChallengeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SavePlayerChallengeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_list()) {
    _internal_mutable_list()->::KWMsg::BotArenaChallengeList::MergeFrom(from._internal_list());
  }
}

void SavePlayerChallengeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SavePlayerChallengeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavePlayerChallengeList::CopyFrom(const SavePlayerChallengeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SavePlayerChallengeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavePlayerChallengeList::IsInitialized() const {
  return true;
}

void SavePlayerChallengeList::InternalSwap(SavePlayerChallengeList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SavePlayerChallengeList, list_)
      + sizeof(SavePlayerChallengeList::list_)
      - PROTOBUF_FIELD_OFFSET(SavePlayerChallengeList, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SavePlayerChallengeList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[289]);
}

// ===================================================================

class UpdatePlayerChallengeItem::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const UpdatePlayerChallengeItem* msg);
  static const ::KWMsg::BotArenaChallengeItem& item(const UpdatePlayerChallengeItem* msg);
};

const ::KWMsg::Ident&
UpdatePlayerChallengeItem::_Internal::player_id(const UpdatePlayerChallengeItem* msg) {
  return *msg->player_id_;
}
const ::KWMsg::BotArenaChallengeItem&
UpdatePlayerChallengeItem::_Internal::item(const UpdatePlayerChallengeItem* msg) {
  return *msg->item_;
}
void UpdatePlayerChallengeItem::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
UpdatePlayerChallengeItem::UpdatePlayerChallengeItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.UpdatePlayerChallengeItem)
}
UpdatePlayerChallengeItem::UpdatePlayerChallengeItem(const UpdatePlayerChallengeItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_item()) {
    item_ = new ::KWMsg::BotArenaChallengeItem(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.UpdatePlayerChallengeItem)
}

void UpdatePlayerChallengeItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(item_));
}

UpdatePlayerChallengeItem::~UpdatePlayerChallengeItem() {
  // @@protoc_insertion_point(destructor:KWMsg.UpdatePlayerChallengeItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdatePlayerChallengeItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete item_;
}

void UpdatePlayerChallengeItem::ArenaDtor(void* object) {
  UpdatePlayerChallengeItem* _this = reinterpret_cast< UpdatePlayerChallengeItem* >(object);
  (void)_this;
}
void UpdatePlayerChallengeItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePlayerChallengeItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdatePlayerChallengeItem::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.UpdatePlayerChallengeItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePlayerChallengeItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BotArenaChallengeItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePlayerChallengeItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.UpdatePlayerChallengeItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.BotArenaChallengeItem item = 2;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.UpdatePlayerChallengeItem)
  return target;
}

size_t UpdatePlayerChallengeItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.UpdatePlayerChallengeItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.BotArenaChallengeItem item = 2;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePlayerChallengeItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.UpdatePlayerChallengeItem)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePlayerChallengeItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePlayerChallengeItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.UpdatePlayerChallengeItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.UpdatePlayerChallengeItem)
    MergeFrom(*source);
  }
}

void UpdatePlayerChallengeItem::MergeFrom(const UpdatePlayerChallengeItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.UpdatePlayerChallengeItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_item()) {
    _internal_mutable_item()->::KWMsg::BotArenaChallengeItem::MergeFrom(from._internal_item());
  }
}

void UpdatePlayerChallengeItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.UpdatePlayerChallengeItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlayerChallengeItem::CopyFrom(const UpdatePlayerChallengeItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.UpdatePlayerChallengeItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerChallengeItem::IsInitialized() const {
  return true;
}

void UpdatePlayerChallengeItem::InternalSwap(UpdatePlayerChallengeItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdatePlayerChallengeItem, item_)
      + sizeof(UpdatePlayerChallengeItem::item_)
      - PROTOBUF_FIELD_OFFSET(UpdatePlayerChallengeItem, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayerChallengeItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[290]);
}

// ===================================================================

class UpdatePlayerReplayItem::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const UpdatePlayerReplayItem* msg);
  static const ::KWMsg::BotArenaReplayItem& item(const UpdatePlayerReplayItem* msg);
};

const ::KWMsg::Ident&
UpdatePlayerReplayItem::_Internal::player_id(const UpdatePlayerReplayItem* msg) {
  return *msg->player_id_;
}
const ::KWMsg::BotArenaReplayItem&
UpdatePlayerReplayItem::_Internal::item(const UpdatePlayerReplayItem* msg) {
  return *msg->item_;
}
void UpdatePlayerReplayItem::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
UpdatePlayerReplayItem::UpdatePlayerReplayItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.UpdatePlayerReplayItem)
}
UpdatePlayerReplayItem::UpdatePlayerReplayItem(const UpdatePlayerReplayItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_item()) {
    item_ = new ::KWMsg::BotArenaReplayItem(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.UpdatePlayerReplayItem)
}

void UpdatePlayerReplayItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(item_));
}

UpdatePlayerReplayItem::~UpdatePlayerReplayItem() {
  // @@protoc_insertion_point(destructor:KWMsg.UpdatePlayerReplayItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdatePlayerReplayItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete item_;
}

void UpdatePlayerReplayItem::ArenaDtor(void* object) {
  UpdatePlayerReplayItem* _this = reinterpret_cast< UpdatePlayerReplayItem* >(object);
  (void)_this;
}
void UpdatePlayerReplayItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePlayerReplayItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdatePlayerReplayItem::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.UpdatePlayerReplayItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePlayerReplayItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BotArenaReplayItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePlayerReplayItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.UpdatePlayerReplayItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.BotArenaReplayItem item = 2;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.UpdatePlayerReplayItem)
  return target;
}

size_t UpdatePlayerReplayItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.UpdatePlayerReplayItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.BotArenaReplayItem item = 2;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePlayerReplayItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.UpdatePlayerReplayItem)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePlayerReplayItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePlayerReplayItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.UpdatePlayerReplayItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.UpdatePlayerReplayItem)
    MergeFrom(*source);
  }
}

void UpdatePlayerReplayItem::MergeFrom(const UpdatePlayerReplayItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.UpdatePlayerReplayItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_item()) {
    _internal_mutable_item()->::KWMsg::BotArenaReplayItem::MergeFrom(from._internal_item());
  }
}

void UpdatePlayerReplayItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.UpdatePlayerReplayItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlayerReplayItem::CopyFrom(const UpdatePlayerReplayItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.UpdatePlayerReplayItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerReplayItem::IsInitialized() const {
  return true;
}

void UpdatePlayerReplayItem::InternalSwap(UpdatePlayerReplayItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdatePlayerReplayItem, item_)
      + sizeof(UpdatePlayerReplayItem::item_)
      - PROTOBUF_FIELD_OFFSET(UpdatePlayerReplayItem, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayerReplayItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[291]);
}

// ===================================================================

class AddPlayerReplayItem::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AddPlayerReplayItem* msg);
  static const ::KWMsg::BotArenaReplayItem& item(const AddPlayerReplayItem* msg);
};

const ::KWMsg::Ident&
AddPlayerReplayItem::_Internal::player_id(const AddPlayerReplayItem* msg) {
  return *msg->player_id_;
}
const ::KWMsg::BotArenaReplayItem&
AddPlayerReplayItem::_Internal::item(const AddPlayerReplayItem* msg) {
  return *msg->item_;
}
void AddPlayerReplayItem::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AddPlayerReplayItem::AddPlayerReplayItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AddPlayerReplayItem)
}
AddPlayerReplayItem::AddPlayerReplayItem(const AddPlayerReplayItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_item()) {
    item_ = new ::KWMsg::BotArenaReplayItem(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.AddPlayerReplayItem)
}

void AddPlayerReplayItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(item_));
}

AddPlayerReplayItem::~AddPlayerReplayItem() {
  // @@protoc_insertion_point(destructor:KWMsg.AddPlayerReplayItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPlayerReplayItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete item_;
}

void AddPlayerReplayItem::ArenaDtor(void* object) {
  AddPlayerReplayItem* _this = reinterpret_cast< AddPlayerReplayItem* >(object);
  (void)_this;
}
void AddPlayerReplayItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPlayerReplayItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddPlayerReplayItem::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AddPlayerReplayItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPlayerReplayItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BotArenaReplayItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPlayerReplayItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AddPlayerReplayItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.BotArenaReplayItem item = 2;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AddPlayerReplayItem)
  return target;
}

size_t AddPlayerReplayItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AddPlayerReplayItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.BotArenaReplayItem item = 2;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPlayerReplayItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AddPlayerReplayItem)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPlayerReplayItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPlayerReplayItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AddPlayerReplayItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AddPlayerReplayItem)
    MergeFrom(*source);
  }
}

void AddPlayerReplayItem::MergeFrom(const AddPlayerReplayItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AddPlayerReplayItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_item()) {
    _internal_mutable_item()->::KWMsg::BotArenaReplayItem::MergeFrom(from._internal_item());
  }
}

void AddPlayerReplayItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AddPlayerReplayItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPlayerReplayItem::CopyFrom(const AddPlayerReplayItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AddPlayerReplayItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPlayerReplayItem::IsInitialized() const {
  return true;
}

void AddPlayerReplayItem::InternalSwap(AddPlayerReplayItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddPlayerReplayItem, item_)
      + sizeof(AddPlayerReplayItem::item_)
      - PROTOBUF_FIELD_OFFSET(AddPlayerReplayItem, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPlayerReplayItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[292]);
}

// ===================================================================

class DelPlayerReplayItem::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const DelPlayerReplayItem* msg);
  static const ::KWMsg::BotArenaReplayItem& item(const DelPlayerReplayItem* msg);
};

const ::KWMsg::Ident&
DelPlayerReplayItem::_Internal::player_id(const DelPlayerReplayItem* msg) {
  return *msg->player_id_;
}
const ::KWMsg::BotArenaReplayItem&
DelPlayerReplayItem::_Internal::item(const DelPlayerReplayItem* msg) {
  return *msg->item_;
}
void DelPlayerReplayItem::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
DelPlayerReplayItem::DelPlayerReplayItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.DelPlayerReplayItem)
}
DelPlayerReplayItem::DelPlayerReplayItem(const DelPlayerReplayItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_item()) {
    item_ = new ::KWMsg::BotArenaReplayItem(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.DelPlayerReplayItem)
}

void DelPlayerReplayItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(item_));
}

DelPlayerReplayItem::~DelPlayerReplayItem() {
  // @@protoc_insertion_point(destructor:KWMsg.DelPlayerReplayItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelPlayerReplayItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete item_;
}

void DelPlayerReplayItem::ArenaDtor(void* object) {
  DelPlayerReplayItem* _this = reinterpret_cast< DelPlayerReplayItem* >(object);
  (void)_this;
}
void DelPlayerReplayItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelPlayerReplayItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelPlayerReplayItem::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.DelPlayerReplayItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelPlayerReplayItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BotArenaReplayItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelPlayerReplayItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.DelPlayerReplayItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.BotArenaReplayItem item = 2;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.DelPlayerReplayItem)
  return target;
}

size_t DelPlayerReplayItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.DelPlayerReplayItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.BotArenaReplayItem item = 2;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelPlayerReplayItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.DelPlayerReplayItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DelPlayerReplayItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelPlayerReplayItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.DelPlayerReplayItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.DelPlayerReplayItem)
    MergeFrom(*source);
  }
}

void DelPlayerReplayItem::MergeFrom(const DelPlayerReplayItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.DelPlayerReplayItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_item()) {
    _internal_mutable_item()->::KWMsg::BotArenaReplayItem::MergeFrom(from._internal_item());
  }
}

void DelPlayerReplayItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.DelPlayerReplayItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelPlayerReplayItem::CopyFrom(const DelPlayerReplayItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.DelPlayerReplayItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelPlayerReplayItem::IsInitialized() const {
  return true;
}

void DelPlayerReplayItem::InternalSwap(DelPlayerReplayItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelPlayerReplayItem, item_)
      + sizeof(DelPlayerReplayItem::item_)
      - PROTOBUF_FIELD_OFFSET(DelPlayerReplayItem, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DelPlayerReplayItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[293]);
}

// ===================================================================

class SyncBotArenaBattleIsReady::_Internal {
 public:
  static const ::KWMsg::Ident& challenge_id(const SyncBotArenaBattleIsReady* msg);
  static const ::KWMsg::Ident& replay_id(const SyncBotArenaBattleIsReady* msg);
  static const ::KWMsg::PlayerInfo& player_info(const SyncBotArenaBattleIsReady* msg);
};

const ::KWMsg::Ident&
SyncBotArenaBattleIsReady::_Internal::challenge_id(const SyncBotArenaBattleIsReady* msg) {
  return *msg->challenge_item_.challenge_id_;
}
const ::KWMsg::Ident&
SyncBotArenaBattleIsReady::_Internal::replay_id(const SyncBotArenaBattleIsReady* msg) {
  return *msg->challenge_item_.replay_id_;
}
const ::KWMsg::PlayerInfo&
SyncBotArenaBattleIsReady::_Internal::player_info(const SyncBotArenaBattleIsReady* msg) {
  return *msg->entity_.player_info_;
}
void SyncBotArenaBattleIsReady::set_allocated_challenge_id(::KWMsg::Ident* challenge_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_challenge_item();
  if (challenge_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(challenge_id));
    if (message_arena != submessage_arena) {
      challenge_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, challenge_id, submessage_arena);
    }
    set_has_challenge_id();
    challenge_item_.challenge_id_ = challenge_id;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncBotArenaBattleIsReady.challenge_id)
}
void SyncBotArenaBattleIsReady::clear_challenge_id() {
  if (_internal_has_challenge_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete challenge_item_.challenge_id_;
    }
    clear_has_challenge_item();
  }
}
void SyncBotArenaBattleIsReady::set_allocated_replay_id(::KWMsg::Ident* replay_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_challenge_item();
  if (replay_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id));
    if (message_arena != submessage_arena) {
      replay_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_id, submessage_arena);
    }
    set_has_replay_id();
    challenge_item_.replay_id_ = replay_id;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncBotArenaBattleIsReady.replay_id)
}
void SyncBotArenaBattleIsReady::clear_replay_id() {
  if (_internal_has_replay_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete challenge_item_.replay_id_;
    }
    clear_has_challenge_item();
  }
}
void SyncBotArenaBattleIsReady::set_allocated_player_info(::KWMsg::PlayerInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::PlayerInfo>::GetOwningArena(player_info);
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    set_has_player_info();
    entity_.player_info_ = player_info;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncBotArenaBattleIsReady.player_info)
}
SyncBotArenaBattleIsReady::SyncBotArenaBattleIsReady(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncBotArenaBattleIsReady)
}
SyncBotArenaBattleIsReady::SyncBotArenaBattleIsReady(const SyncBotArenaBattleIsReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_play_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_play_id().empty()) {
    game_play_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_play_id(), 
      GetArenaForAllocation());
  }
  team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_team_id().empty()) {
    team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_result_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(challenge_result_));
  clear_has_challenge_item();
  switch (from.challenge_item_case()) {
    case kChallengeId: {
      _internal_mutable_challenge_id()->::KWMsg::Ident::MergeFrom(from._internal_challenge_id());
      break;
    }
    case kReplayId: {
      _internal_mutable_replay_id()->::KWMsg::Ident::MergeFrom(from._internal_replay_id());
      break;
    }
    case CHALLENGE_ITEM_NOT_SET: {
      break;
    }
  }
  clear_has_entity();
  switch (from.entity_case()) {
    case kPlayerInfo: {
      _internal_mutable_player_info()->::KWMsg::PlayerInfo::MergeFrom(from._internal_player_info());
      break;
    }
    case kRobotId: {
      _internal_set_robot_id(from._internal_robot_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncBotArenaBattleIsReady)
}

void SyncBotArenaBattleIsReady::SharedCtor() {
game_play_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&challenge_result_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(challenge_result_));
clear_has_challenge_item();
clear_has_entity();
}

SyncBotArenaBattleIsReady::~SyncBotArenaBattleIsReady() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncBotArenaBattleIsReady)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncBotArenaBattleIsReady::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  game_play_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_challenge_item()) {
    clear_challenge_item();
  }
  if (has_entity()) {
    clear_entity();
  }
}

void SyncBotArenaBattleIsReady::ArenaDtor(void* object) {
  SyncBotArenaBattleIsReady* _this = reinterpret_cast< SyncBotArenaBattleIsReady* >(object);
  (void)_this;
}
void SyncBotArenaBattleIsReady::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncBotArenaBattleIsReady::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncBotArenaBattleIsReady::clear_challenge_item() {
// @@protoc_insertion_point(one_of_clear_start:KWMsg.SyncBotArenaBattleIsReady)
  switch (challenge_item_case()) {
    case kChallengeId: {
      if (GetArenaForAllocation() == nullptr) {
        delete challenge_item_.challenge_id_;
      }
      break;
    }
    case kReplayId: {
      if (GetArenaForAllocation() == nullptr) {
        delete challenge_item_.replay_id_;
      }
      break;
    }
    case CHALLENGE_ITEM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHALLENGE_ITEM_NOT_SET;
}

void SyncBotArenaBattleIsReady::clear_entity() {
// @@protoc_insertion_point(one_of_clear_start:KWMsg.SyncBotArenaBattleIsReady)
  switch (entity_case()) {
    case kPlayerInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.player_info_;
      }
      break;
    }
    case kRobotId: {
      entity_.robot_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ENTITY_NOT_SET;
}


void SyncBotArenaBattleIsReady::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncBotArenaBattleIsReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_play_id_.ClearToEmpty();
  team_id_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenge_result_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(challenge_result_));
  clear_challenge_item();
  clear_entity();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncBotArenaBattleIsReady::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes game_play_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_game_play_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes team_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 continuous_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          continuous_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 auto_buy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          auto_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident challenge_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_challenge_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident replay_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 challenge_result = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          challenge_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.PlayerInfo player_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes robot_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncBotArenaBattleIsReady::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncBotArenaBattleIsReady)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes game_play_id = 2;
  if (!this->game_play_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_game_play_id(), target);
  }

  // bytes team_id = 3;
  if (!this->team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_team_id(), target);
  }

  // int32 continuous_count = 4;
  if (this->continuous_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_continuous_count(), target);
  }

  // int32 auto_buy = 5;
  if (this->auto_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_auto_buy(), target);
  }

  // .KWMsg.Ident challenge_id = 6;
  if (_internal_has_challenge_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::challenge_id(this), target, stream);
  }

  // .KWMsg.Ident replay_id = 7;
  if (_internal_has_replay_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::replay_id(this), target, stream);
  }

  // int32 challenge_result = 8;
  if (this->challenge_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_challenge_result(), target);
  }

  // .KWMsg.PlayerInfo player_info = 9;
  if (_internal_has_player_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::player_info(this), target, stream);
  }

  // bytes robot_id = 10;
  if (_internal_has_robot_id()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_robot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncBotArenaBattleIsReady)
  return target;
}

size_t SyncBotArenaBattleIsReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncBotArenaBattleIsReady)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes game_play_id = 2;
  if (!this->game_play_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_game_play_id());
  }

  // bytes team_id = 3;
  if (!this->team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_team_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 continuous_count = 4;
  if (this->continuous_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_continuous_count());
  }

  // int32 auto_buy = 5;
  if (this->auto_buy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_auto_buy());
  }

  // int32 challenge_result = 8;
  if (this->challenge_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_challenge_result());
  }

  switch (challenge_item_case()) {
    // .KWMsg.Ident challenge_id = 6;
    case kChallengeId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *challenge_item_.challenge_id_);
      break;
    }
    // .KWMsg.Ident replay_id = 7;
    case kReplayId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *challenge_item_.replay_id_);
      break;
    }
    case CHALLENGE_ITEM_NOT_SET: {
      break;
    }
  }
  switch (entity_case()) {
    // .KWMsg.PlayerInfo player_info = 9;
    case kPlayerInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.player_info_);
      break;
    }
    // bytes robot_id = 10;
    case kRobotId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_robot_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncBotArenaBattleIsReady::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncBotArenaBattleIsReady)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncBotArenaBattleIsReady* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncBotArenaBattleIsReady>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncBotArenaBattleIsReady)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncBotArenaBattleIsReady)
    MergeFrom(*source);
  }
}

void SyncBotArenaBattleIsReady::MergeFrom(const SyncBotArenaBattleIsReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncBotArenaBattleIsReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.game_play_id().empty()) {
    _internal_set_game_play_id(from._internal_game_play_id());
  }
  if (!from.team_id().empty()) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.continuous_count() != 0) {
    _internal_set_continuous_count(from._internal_continuous_count());
  }
  if (from.auto_buy() != 0) {
    _internal_set_auto_buy(from._internal_auto_buy());
  }
  if (from.challenge_result() != 0) {
    _internal_set_challenge_result(from._internal_challenge_result());
  }
  switch (from.challenge_item_case()) {
    case kChallengeId: {
      _internal_mutable_challenge_id()->::KWMsg::Ident::MergeFrom(from._internal_challenge_id());
      break;
    }
    case kReplayId: {
      _internal_mutable_replay_id()->::KWMsg::Ident::MergeFrom(from._internal_replay_id());
      break;
    }
    case CHALLENGE_ITEM_NOT_SET: {
      break;
    }
  }
  switch (from.entity_case()) {
    case kPlayerInfo: {
      _internal_mutable_player_info()->::KWMsg::PlayerInfo::MergeFrom(from._internal_player_info());
      break;
    }
    case kRobotId: {
      _internal_set_robot_id(from._internal_robot_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
}

void SyncBotArenaBattleIsReady::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncBotArenaBattleIsReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncBotArenaBattleIsReady::CopyFrom(const SyncBotArenaBattleIsReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncBotArenaBattleIsReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncBotArenaBattleIsReady::IsInitialized() const {
  return true;
}

void SyncBotArenaBattleIsReady::InternalSwap(SyncBotArenaBattleIsReady* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_play_id_, GetArenaForAllocation(),
      &other->game_play_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &team_id_, GetArenaForAllocation(),
      &other->team_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncBotArenaBattleIsReady, challenge_result_)
      + sizeof(SyncBotArenaBattleIsReady::challenge_result_)
      - PROTOBUF_FIELD_OFFSET(SyncBotArenaBattleIsReady, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
  swap(challenge_item_, other->challenge_item_);
  swap(entity_, other->entity_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncBotArenaBattleIsReady::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[294]);
}

// ===================================================================

class SyncBotArenaBattleReplayDatas::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SyncBotArenaBattleReplayDatas* msg);
  static const ::KWMsg::BotArenaReplayItem& replay_item(const SyncBotArenaBattleReplayDatas* msg);
};

const ::KWMsg::Ident&
SyncBotArenaBattleReplayDatas::_Internal::player_id(const SyncBotArenaBattleReplayDatas* msg) {
  return *msg->player_id_;
}
const ::KWMsg::BotArenaReplayItem&
SyncBotArenaBattleReplayDatas::_Internal::replay_item(const SyncBotArenaBattleReplayDatas* msg) {
  return *msg->replay_item_;
}
void SyncBotArenaBattleReplayDatas::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
SyncBotArenaBattleReplayDatas::SyncBotArenaBattleReplayDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncBotArenaBattleReplayDatas)
}
SyncBotArenaBattleReplayDatas::SyncBotArenaBattleReplayDatas(const SyncBotArenaBattleReplayDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msgs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msgs().empty()) {
    msgs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msgs(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_replay_item()) {
    replay_item_ = new ::KWMsg::BotArenaReplayItem(*from.replay_item_);
  } else {
    replay_item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncBotArenaBattleReplayDatas)
}

void SyncBotArenaBattleReplayDatas::SharedCtor() {
msgs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replay_item_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(replay_item_));
}

SyncBotArenaBattleReplayDatas::~SyncBotArenaBattleReplayDatas() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncBotArenaBattleReplayDatas)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncBotArenaBattleReplayDatas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msgs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete replay_item_;
}

void SyncBotArenaBattleReplayDatas::ArenaDtor(void* object) {
  SyncBotArenaBattleReplayDatas* _this = reinterpret_cast< SyncBotArenaBattleReplayDatas* >(object);
  (void)_this;
}
void SyncBotArenaBattleReplayDatas::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncBotArenaBattleReplayDatas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncBotArenaBattleReplayDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncBotArenaBattleReplayDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && replay_item_ != nullptr) {
    delete replay_item_;
  }
  replay_item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncBotArenaBattleReplayDatas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BotArenaReplayItem replay_item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msgs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msgs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncBotArenaBattleReplayDatas::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncBotArenaBattleReplayDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.BotArenaReplayItem replay_item = 2;
  if (this->has_replay_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::replay_item(this), target, stream);
  }

  // bytes msgs = 3;
  if (!this->msgs().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msgs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncBotArenaBattleReplayDatas)
  return target;
}

size_t SyncBotArenaBattleReplayDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncBotArenaBattleReplayDatas)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msgs = 3;
  if (!this->msgs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msgs());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.BotArenaReplayItem replay_item = 2;
  if (this->has_replay_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replay_item_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncBotArenaBattleReplayDatas::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncBotArenaBattleReplayDatas)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncBotArenaBattleReplayDatas* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncBotArenaBattleReplayDatas>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncBotArenaBattleReplayDatas)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncBotArenaBattleReplayDatas)
    MergeFrom(*source);
  }
}

void SyncBotArenaBattleReplayDatas::MergeFrom(const SyncBotArenaBattleReplayDatas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncBotArenaBattleReplayDatas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.msgs().empty()) {
    _internal_set_msgs(from._internal_msgs());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_replay_item()) {
    _internal_mutable_replay_item()->::KWMsg::BotArenaReplayItem::MergeFrom(from._internal_replay_item());
  }
}

void SyncBotArenaBattleReplayDatas::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncBotArenaBattleReplayDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncBotArenaBattleReplayDatas::CopyFrom(const SyncBotArenaBattleReplayDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncBotArenaBattleReplayDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncBotArenaBattleReplayDatas::IsInitialized() const {
  return true;
}

void SyncBotArenaBattleReplayDatas::InternalSwap(SyncBotArenaBattleReplayDatas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msgs_, GetArenaForAllocation(),
      &other->msgs_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncBotArenaBattleReplayDatas, replay_item_)
      + sizeof(SyncBotArenaBattleReplayDatas::replay_item_)
      - PROTOBUF_FIELD_OFFSET(SyncBotArenaBattleReplayDatas, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncBotArenaBattleReplayDatas::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[295]);
}

// ===================================================================

class SaveBotArenaBattleReplayDatas::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SaveBotArenaBattleReplayDatas* msg);
  static const ::KWMsg::Ident& replay_id(const SaveBotArenaBattleReplayDatas* msg);
};

const ::KWMsg::Ident&
SaveBotArenaBattleReplayDatas::_Internal::player_id(const SaveBotArenaBattleReplayDatas* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
SaveBotArenaBattleReplayDatas::_Internal::replay_id(const SaveBotArenaBattleReplayDatas* msg) {
  return *msg->replay_id_;
}
void SaveBotArenaBattleReplayDatas::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void SaveBotArenaBattleReplayDatas::clear_replay_id() {
  if (GetArenaForAllocation() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
}
SaveBotArenaBattleReplayDatas::SaveBotArenaBattleReplayDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SaveBotArenaBattleReplayDatas)
}
SaveBotArenaBattleReplayDatas::SaveBotArenaBattleReplayDatas(const SaveBotArenaBattleReplayDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msgs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msgs().empty()) {
    msgs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msgs(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_replay_id()) {
    replay_id_ = new ::KWMsg::Ident(*from.replay_id_);
  } else {
    replay_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.SaveBotArenaBattleReplayDatas)
}

void SaveBotArenaBattleReplayDatas::SharedCtor() {
msgs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replay_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(replay_id_));
}

SaveBotArenaBattleReplayDatas::~SaveBotArenaBattleReplayDatas() {
  // @@protoc_insertion_point(destructor:KWMsg.SaveBotArenaBattleReplayDatas)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SaveBotArenaBattleReplayDatas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msgs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete replay_id_;
}

void SaveBotArenaBattleReplayDatas::ArenaDtor(void* object) {
  SaveBotArenaBattleReplayDatas* _this = reinterpret_cast< SaveBotArenaBattleReplayDatas* >(object);
  (void)_this;
}
void SaveBotArenaBattleReplayDatas::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveBotArenaBattleReplayDatas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SaveBotArenaBattleReplayDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SaveBotArenaBattleReplayDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveBotArenaBattleReplayDatas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident replay_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msgs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msgs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveBotArenaBattleReplayDatas::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SaveBotArenaBattleReplayDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident replay_id = 2;
  if (this->has_replay_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::replay_id(this), target, stream);
  }

  // bytes msgs = 3;
  if (!this->msgs().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msgs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SaveBotArenaBattleReplayDatas)
  return target;
}

size_t SaveBotArenaBattleReplayDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SaveBotArenaBattleReplayDatas)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msgs = 3;
  if (!this->msgs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msgs());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident replay_id = 2;
  if (this->has_replay_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replay_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveBotArenaBattleReplayDatas::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SaveBotArenaBattleReplayDatas)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveBotArenaBattleReplayDatas* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveBotArenaBattleReplayDatas>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SaveBotArenaBattleReplayDatas)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SaveBotArenaBattleReplayDatas)
    MergeFrom(*source);
  }
}

void SaveBotArenaBattleReplayDatas::MergeFrom(const SaveBotArenaBattleReplayDatas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SaveBotArenaBattleReplayDatas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.msgs().empty()) {
    _internal_set_msgs(from._internal_msgs());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_replay_id()) {
    _internal_mutable_replay_id()->::KWMsg::Ident::MergeFrom(from._internal_replay_id());
  }
}

void SaveBotArenaBattleReplayDatas::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SaveBotArenaBattleReplayDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveBotArenaBattleReplayDatas::CopyFrom(const SaveBotArenaBattleReplayDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SaveBotArenaBattleReplayDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveBotArenaBattleReplayDatas::IsInitialized() const {
  return true;
}

void SaveBotArenaBattleReplayDatas::InternalSwap(SaveBotArenaBattleReplayDatas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msgs_, GetArenaForAllocation(),
      &other->msgs_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaveBotArenaBattleReplayDatas, replay_id_)
      + sizeof(SaveBotArenaBattleReplayDatas::replay_id_)
      - PROTOBUF_FIELD_OFFSET(SaveBotArenaBattleReplayDatas, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveBotArenaBattleReplayDatas::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[296]);
}

// ===================================================================

class DelBotArenaBattleReplayDatas::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const DelBotArenaBattleReplayDatas* msg);
  static const ::KWMsg::Ident& replay_id(const DelBotArenaBattleReplayDatas* msg);
};

const ::KWMsg::Ident&
DelBotArenaBattleReplayDatas::_Internal::player_id(const DelBotArenaBattleReplayDatas* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
DelBotArenaBattleReplayDatas::_Internal::replay_id(const DelBotArenaBattleReplayDatas* msg) {
  return *msg->replay_id_;
}
void DelBotArenaBattleReplayDatas::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void DelBotArenaBattleReplayDatas::clear_replay_id() {
  if (GetArenaForAllocation() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
}
DelBotArenaBattleReplayDatas::DelBotArenaBattleReplayDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.DelBotArenaBattleReplayDatas)
}
DelBotArenaBattleReplayDatas::DelBotArenaBattleReplayDatas(const DelBotArenaBattleReplayDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_replay_id()) {
    replay_id_ = new ::KWMsg::Ident(*from.replay_id_);
  } else {
    replay_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.DelBotArenaBattleReplayDatas)
}

void DelBotArenaBattleReplayDatas::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replay_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(replay_id_));
}

DelBotArenaBattleReplayDatas::~DelBotArenaBattleReplayDatas() {
  // @@protoc_insertion_point(destructor:KWMsg.DelBotArenaBattleReplayDatas)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelBotArenaBattleReplayDatas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete replay_id_;
}

void DelBotArenaBattleReplayDatas::ArenaDtor(void* object) {
  DelBotArenaBattleReplayDatas* _this = reinterpret_cast< DelBotArenaBattleReplayDatas* >(object);
  (void)_this;
}
void DelBotArenaBattleReplayDatas::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelBotArenaBattleReplayDatas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelBotArenaBattleReplayDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.DelBotArenaBattleReplayDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelBotArenaBattleReplayDatas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident replay_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelBotArenaBattleReplayDatas::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.DelBotArenaBattleReplayDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident replay_id = 2;
  if (this->has_replay_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::replay_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.DelBotArenaBattleReplayDatas)
  return target;
}

size_t DelBotArenaBattleReplayDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.DelBotArenaBattleReplayDatas)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident replay_id = 2;
  if (this->has_replay_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replay_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelBotArenaBattleReplayDatas::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.DelBotArenaBattleReplayDatas)
  GOOGLE_DCHECK_NE(&from, this);
  const DelBotArenaBattleReplayDatas* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelBotArenaBattleReplayDatas>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.DelBotArenaBattleReplayDatas)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.DelBotArenaBattleReplayDatas)
    MergeFrom(*source);
  }
}

void DelBotArenaBattleReplayDatas::MergeFrom(const DelBotArenaBattleReplayDatas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.DelBotArenaBattleReplayDatas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_replay_id()) {
    _internal_mutable_replay_id()->::KWMsg::Ident::MergeFrom(from._internal_replay_id());
  }
}

void DelBotArenaBattleReplayDatas::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.DelBotArenaBattleReplayDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelBotArenaBattleReplayDatas::CopyFrom(const DelBotArenaBattleReplayDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.DelBotArenaBattleReplayDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelBotArenaBattleReplayDatas::IsInitialized() const {
  return true;
}

void DelBotArenaBattleReplayDatas::InternalSwap(DelBotArenaBattleReplayDatas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelBotArenaBattleReplayDatas, replay_id_)
      + sizeof(DelBotArenaBattleReplayDatas::replay_id_)
      - PROTOBUF_FIELD_OFFSET(DelBotArenaBattleReplayDatas, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DelBotArenaBattleReplayDatas::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[297]);
}

// ===================================================================

class SyncDefensivePlayerBattleReward::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SyncDefensivePlayerBattleReward* msg);
};

const ::KWMsg::Ident&
SyncDefensivePlayerBattleReward::_Internal::player_id(const SyncDefensivePlayerBattleReward* msg) {
  return *msg->player_id_;
}
void SyncDefensivePlayerBattleReward::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
SyncDefensivePlayerBattleReward::SyncDefensivePlayerBattleReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncDefensivePlayerBattleReward)
}
SyncDefensivePlayerBattleReward::SyncDefensivePlayerBattleReward(const SyncDefensivePlayerBattleReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncDefensivePlayerBattleReward)
}

void SyncDefensivePlayerBattleReward::SharedCtor() {
player_id_ = nullptr;
}

SyncDefensivePlayerBattleReward::~SyncDefensivePlayerBattleReward() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncDefensivePlayerBattleReward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncDefensivePlayerBattleReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void SyncDefensivePlayerBattleReward::ArenaDtor(void* object) {
  SyncDefensivePlayerBattleReward* _this = reinterpret_cast< SyncDefensivePlayerBattleReward* >(object);
  (void)_this;
}
void SyncDefensivePlayerBattleReward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncDefensivePlayerBattleReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncDefensivePlayerBattleReward::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncDefensivePlayerBattleReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncDefensivePlayerBattleReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RewardInfo reward_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncDefensivePlayerBattleReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncDefensivePlayerBattleReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .KWMsg.RewardInfo reward_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_reward_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncDefensivePlayerBattleReward)
  return target;
}

size_t SyncDefensivePlayerBattleReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncDefensivePlayerBattleReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RewardInfo reward_list = 2;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncDefensivePlayerBattleReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncDefensivePlayerBattleReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncDefensivePlayerBattleReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncDefensivePlayerBattleReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncDefensivePlayerBattleReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncDefensivePlayerBattleReward)
    MergeFrom(*source);
  }
}

void SyncDefensivePlayerBattleReward::MergeFrom(const SyncDefensivePlayerBattleReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncDefensivePlayerBattleReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void SyncDefensivePlayerBattleReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncDefensivePlayerBattleReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncDefensivePlayerBattleReward::CopyFrom(const SyncDefensivePlayerBattleReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncDefensivePlayerBattleReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncDefensivePlayerBattleReward::IsInitialized() const {
  return true;
}

void SyncDefensivePlayerBattleReward::InternalSwap(SyncDefensivePlayerBattleReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncDefensivePlayerBattleReward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[298]);
}

// ===================================================================

class SyncBotArenaBattleSettleData::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const SyncBotArenaBattleSettleData* msg);
  static const ::KWMsg::Ident& challenge_id(const SyncBotArenaBattleSettleData* msg);
  static const ::KWMsg::Ident& replay_id(const SyncBotArenaBattleSettleData* msg);
};

const ::KWMsg::Ident&
SyncBotArenaBattleSettleData::_Internal::player_id(const SyncBotArenaBattleSettleData* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
SyncBotArenaBattleSettleData::_Internal::challenge_id(const SyncBotArenaBattleSettleData* msg) {
  return *msg->challenge_id_;
}
const ::KWMsg::Ident&
SyncBotArenaBattleSettleData::_Internal::replay_id(const SyncBotArenaBattleSettleData* msg) {
  return *msg->replay_id_;
}
void SyncBotArenaBattleSettleData::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void SyncBotArenaBattleSettleData::clear_challenge_id() {
  if (GetArenaForAllocation() == nullptr && challenge_id_ != nullptr) {
    delete challenge_id_;
  }
  challenge_id_ = nullptr;
}
void SyncBotArenaBattleSettleData::clear_replay_id() {
  if (GetArenaForAllocation() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
}
SyncBotArenaBattleSettleData::SyncBotArenaBattleSettleData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncBotArenaBattleSettleData)
}
SyncBotArenaBattleSettleData::SyncBotArenaBattleSettleData(const SyncBotArenaBattleSettleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_challenge_id()) {
    challenge_id_ = new ::KWMsg::Ident(*from.challenge_id_);
  } else {
    challenge_id_ = nullptr;
  }
  if (from._internal_has_replay_id()) {
    replay_id_ = new ::KWMsg::Ident(*from.replay_id_);
  } else {
    replay_id_ = nullptr;
  }
  is_win_ = from.is_win_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncBotArenaBattleSettleData)
}

void SyncBotArenaBattleSettleData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_win_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(is_win_));
}

SyncBotArenaBattleSettleData::~SyncBotArenaBattleSettleData() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncBotArenaBattleSettleData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncBotArenaBattleSettleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete challenge_id_;
  if (this != internal_default_instance()) delete replay_id_;
}

void SyncBotArenaBattleSettleData::ArenaDtor(void* object) {
  SyncBotArenaBattleSettleData* _this = reinterpret_cast< SyncBotArenaBattleSettleData* >(object);
  (void)_this;
}
void SyncBotArenaBattleSettleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncBotArenaBattleSettleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncBotArenaBattleSettleData::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncBotArenaBattleSettleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && challenge_id_ != nullptr) {
    delete challenge_id_;
  }
  challenge_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
  is_win_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncBotArenaBattleSettleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident challenge_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_challenge_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident replay_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_win = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncBotArenaBattleSettleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncBotArenaBattleSettleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident challenge_id = 2;
  if (this->has_challenge_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::challenge_id(this), target, stream);
  }

  // .KWMsg.Ident replay_id = 3;
  if (this->has_replay_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::replay_id(this), target, stream);
  }

  // bool is_win = 4;
  if (this->is_win() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_win(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncBotArenaBattleSettleData)
  return target;
}

size_t SyncBotArenaBattleSettleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncBotArenaBattleSettleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident challenge_id = 2;
  if (this->has_challenge_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *challenge_id_);
  }

  // .KWMsg.Ident replay_id = 3;
  if (this->has_replay_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replay_id_);
  }

  // bool is_win = 4;
  if (this->is_win() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncBotArenaBattleSettleData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncBotArenaBattleSettleData)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncBotArenaBattleSettleData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncBotArenaBattleSettleData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncBotArenaBattleSettleData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncBotArenaBattleSettleData)
    MergeFrom(*source);
  }
}

void SyncBotArenaBattleSettleData::MergeFrom(const SyncBotArenaBattleSettleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncBotArenaBattleSettleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_challenge_id()) {
    _internal_mutable_challenge_id()->::KWMsg::Ident::MergeFrom(from._internal_challenge_id());
  }
  if (from.has_replay_id()) {
    _internal_mutable_replay_id()->::KWMsg::Ident::MergeFrom(from._internal_replay_id());
  }
  if (from.is_win() != 0) {
    _internal_set_is_win(from._internal_is_win());
  }
}

void SyncBotArenaBattleSettleData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncBotArenaBattleSettleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncBotArenaBattleSettleData::CopyFrom(const SyncBotArenaBattleSettleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncBotArenaBattleSettleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncBotArenaBattleSettleData::IsInitialized() const {
  return true;
}

void SyncBotArenaBattleSettleData::InternalSwap(SyncBotArenaBattleSettleData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncBotArenaBattleSettleData, is_win_)
      + sizeof(SyncBotArenaBattleSettleData::is_win_)
      - PROTOBUF_FIELD_OFFSET(SyncBotArenaBattleSettleData, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncBotArenaBattleSettleData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[299]);
}

// ===================================================================

class ReqClickBotarenaPromptForm::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqClickBotarenaPromptForm* msg);
};

const ::KWMsg::Ident&
ReqClickBotarenaPromptForm::_Internal::player_id(const ReqClickBotarenaPromptForm* msg) {
  return *msg->player_id_;
}
void ReqClickBotarenaPromptForm::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqClickBotarenaPromptForm::ReqClickBotarenaPromptForm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqClickBotarenaPromptForm)
}
ReqClickBotarenaPromptForm::ReqClickBotarenaPromptForm(const ReqClickBotarenaPromptForm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqClickBotarenaPromptForm)
}

void ReqClickBotarenaPromptForm::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(type_));
}

ReqClickBotarenaPromptForm::~ReqClickBotarenaPromptForm() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqClickBotarenaPromptForm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqClickBotarenaPromptForm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqClickBotarenaPromptForm::ArenaDtor(void* object) {
  ReqClickBotarenaPromptForm* _this = reinterpret_cast< ReqClickBotarenaPromptForm* >(object);
  (void)_this;
}
void ReqClickBotarenaPromptForm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqClickBotarenaPromptForm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqClickBotarenaPromptForm::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqClickBotarenaPromptForm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqClickBotarenaPromptForm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BotarenaPromptType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::KWMsg::BotarenaPromptType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqClickBotarenaPromptForm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqClickBotarenaPromptForm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.BotarenaPromptType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqClickBotarenaPromptForm)
  return target;
}

size_t ReqClickBotarenaPromptForm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqClickBotarenaPromptForm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.BotarenaPromptType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqClickBotarenaPromptForm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqClickBotarenaPromptForm)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqClickBotarenaPromptForm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqClickBotarenaPromptForm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqClickBotarenaPromptForm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqClickBotarenaPromptForm)
    MergeFrom(*source);
  }
}

void ReqClickBotarenaPromptForm::MergeFrom(const ReqClickBotarenaPromptForm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqClickBotarenaPromptForm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ReqClickBotarenaPromptForm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqClickBotarenaPromptForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqClickBotarenaPromptForm::CopyFrom(const ReqClickBotarenaPromptForm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqClickBotarenaPromptForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqClickBotarenaPromptForm::IsInitialized() const {
  return true;
}

void ReqClickBotarenaPromptForm::InternalSwap(ReqClickBotarenaPromptForm* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqClickBotarenaPromptForm, type_)
      + sizeof(ReqClickBotarenaPromptForm::type_)
      - PROTOBUF_FIELD_OFFSET(ReqClickBotarenaPromptForm, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqClickBotarenaPromptForm::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[300]);
}

// ===================================================================

class AckClickBotarenaPromptForm::_Internal {
 public:
};

AckClickBotarenaPromptForm::AckClickBotarenaPromptForm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckClickBotarenaPromptForm)
}
AckClickBotarenaPromptForm::AckClickBotarenaPromptForm(const AckClickBotarenaPromptForm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckClickBotarenaPromptForm)
}

void AckClickBotarenaPromptForm::SharedCtor() {
event_code_ = 0;
}

AckClickBotarenaPromptForm::~AckClickBotarenaPromptForm() {
  // @@protoc_insertion_point(destructor:KWMsg.AckClickBotarenaPromptForm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckClickBotarenaPromptForm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckClickBotarenaPromptForm::ArenaDtor(void* object) {
  AckClickBotarenaPromptForm* _this = reinterpret_cast< AckClickBotarenaPromptForm* >(object);
  (void)_this;
}
void AckClickBotarenaPromptForm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckClickBotarenaPromptForm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckClickBotarenaPromptForm::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckClickBotarenaPromptForm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckClickBotarenaPromptForm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckClickBotarenaPromptForm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckClickBotarenaPromptForm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckClickBotarenaPromptForm)
  return target;
}

size_t AckClickBotarenaPromptForm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckClickBotarenaPromptForm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckClickBotarenaPromptForm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckClickBotarenaPromptForm)
  GOOGLE_DCHECK_NE(&from, this);
  const AckClickBotarenaPromptForm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckClickBotarenaPromptForm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckClickBotarenaPromptForm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckClickBotarenaPromptForm)
    MergeFrom(*source);
  }
}

void AckClickBotarenaPromptForm::MergeFrom(const AckClickBotarenaPromptForm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckClickBotarenaPromptForm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckClickBotarenaPromptForm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckClickBotarenaPromptForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClickBotarenaPromptForm::CopyFrom(const AckClickBotarenaPromptForm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckClickBotarenaPromptForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClickBotarenaPromptForm::IsInitialized() const {
  return true;
}

void AckClickBotarenaPromptForm::InternalSwap(AckClickBotarenaPromptForm* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckClickBotarenaPromptForm::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[301]);
}

// ===================================================================

class HonorPointRankingItem::_Internal {
 public:
  static const ::KWMsg::PlayerInfo& player_info(const HonorPointRankingItem* msg);
};

const ::KWMsg::PlayerInfo&
HonorPointRankingItem::_Internal::player_info(const HonorPointRankingItem* msg) {
  return *msg->player_info_;
}
HonorPointRankingItem::HonorPointRankingItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.HonorPointRankingItem)
}
HonorPointRankingItem::HonorPointRankingItem(const HonorPointRankingItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_info()) {
    player_info_ = new ::KWMsg::PlayerInfo(*from.player_info_);
  } else {
    player_info_ = nullptr;
  }
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.HonorPointRankingItem)
}

void HonorPointRankingItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&player_info_)) + sizeof(rank_));
}

HonorPointRankingItem::~HonorPointRankingItem() {
  // @@protoc_insertion_point(destructor:KWMsg.HonorPointRankingItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HonorPointRankingItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_info_;
}

void HonorPointRankingItem::ArenaDtor(void* object) {
  HonorPointRankingItem* _this = reinterpret_cast< HonorPointRankingItem* >(object);
  (void)_this;
}
void HonorPointRankingItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HonorPointRankingItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HonorPointRankingItem::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.HonorPointRankingItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_info_ != nullptr) {
    delete player_info_;
  }
  player_info_ = nullptr;
  rank_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HonorPointRankingItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.PlayerInfo player_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HonorPointRankingItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.HonorPointRankingItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // .KWMsg.PlayerInfo player_info = 2;
  if (this->has_player_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.HonorPointRankingItem)
  return target;
}

size_t HonorPointRankingItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.HonorPointRankingItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.PlayerInfo player_info = 2;
  if (this->has_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_info_);
  }

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HonorPointRankingItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.HonorPointRankingItem)
  GOOGLE_DCHECK_NE(&from, this);
  const HonorPointRankingItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HonorPointRankingItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.HonorPointRankingItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.HonorPointRankingItem)
    MergeFrom(*source);
  }
}

void HonorPointRankingItem::MergeFrom(const HonorPointRankingItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.HonorPointRankingItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_info()) {
    _internal_mutable_player_info()->::KWMsg::PlayerInfo::MergeFrom(from._internal_player_info());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
}

void HonorPointRankingItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.HonorPointRankingItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HonorPointRankingItem::CopyFrom(const HonorPointRankingItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.HonorPointRankingItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HonorPointRankingItem::IsInitialized() const {
  return true;
}

void HonorPointRankingItem::InternalSwap(HonorPointRankingItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HonorPointRankingItem, rank_)
      + sizeof(HonorPointRankingItem::rank_)
      - PROTOBUF_FIELD_OFFSET(HonorPointRankingItem, player_info_)>(
          reinterpret_cast<char*>(&player_info_),
          reinterpret_cast<char*>(&other->player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HonorPointRankingItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[302]);
}

// ===================================================================

class ReqGetPlayerHonorPointRanking::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqGetPlayerHonorPointRanking* msg);
};

const ::KWMsg::Ident&
ReqGetPlayerHonorPointRanking::_Internal::player_id(const ReqGetPlayerHonorPointRanking* msg) {
  return *msg->player_id_;
}
void ReqGetPlayerHonorPointRanking::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqGetPlayerHonorPointRanking::ReqGetPlayerHonorPointRanking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqGetPlayerHonorPointRanking)
}
ReqGetPlayerHonorPointRanking::ReqGetPlayerHonorPointRanking(const ReqGetPlayerHonorPointRanking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqGetPlayerHonorPointRanking)
}

void ReqGetPlayerHonorPointRanking::SharedCtor() {
player_id_ = nullptr;
}

ReqGetPlayerHonorPointRanking::~ReqGetPlayerHonorPointRanking() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqGetPlayerHonorPointRanking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqGetPlayerHonorPointRanking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqGetPlayerHonorPointRanking::ArenaDtor(void* object) {
  ReqGetPlayerHonorPointRanking* _this = reinterpret_cast< ReqGetPlayerHonorPointRanking* >(object);
  (void)_this;
}
void ReqGetPlayerHonorPointRanking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetPlayerHonorPointRanking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetPlayerHonorPointRanking::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqGetPlayerHonorPointRanking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetPlayerHonorPointRanking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetPlayerHonorPointRanking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqGetPlayerHonorPointRanking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqGetPlayerHonorPointRanking)
  return target;
}

size_t ReqGetPlayerHonorPointRanking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqGetPlayerHonorPointRanking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetPlayerHonorPointRanking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqGetPlayerHonorPointRanking)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetPlayerHonorPointRanking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetPlayerHonorPointRanking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqGetPlayerHonorPointRanking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqGetPlayerHonorPointRanking)
    MergeFrom(*source);
  }
}

void ReqGetPlayerHonorPointRanking::MergeFrom(const ReqGetPlayerHonorPointRanking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqGetPlayerHonorPointRanking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqGetPlayerHonorPointRanking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqGetPlayerHonorPointRanking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetPlayerHonorPointRanking::CopyFrom(const ReqGetPlayerHonorPointRanking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqGetPlayerHonorPointRanking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetPlayerHonorPointRanking::IsInitialized() const {
  return true;
}

void ReqGetPlayerHonorPointRanking::InternalSwap(ReqGetPlayerHonorPointRanking* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetPlayerHonorPointRanking::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[303]);
}

// ===================================================================

class AckGetPlayerHonorPointRanking::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AckGetPlayerHonorPointRanking* msg);
  static const ::KWMsg::HonorPointRankingItem& cur_rank(const AckGetPlayerHonorPointRanking* msg);
};

const ::KWMsg::Ident&
AckGetPlayerHonorPointRanking::_Internal::player_id(const AckGetPlayerHonorPointRanking* msg) {
  return *msg->player_id_;
}
const ::KWMsg::HonorPointRankingItem&
AckGetPlayerHonorPointRanking::_Internal::cur_rank(const AckGetPlayerHonorPointRanking* msg) {
  return *msg->cur_rank_;
}
void AckGetPlayerHonorPointRanking::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AckGetPlayerHonorPointRanking::AckGetPlayerHonorPointRanking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ranking_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckGetPlayerHonorPointRanking)
}
AckGetPlayerHonorPointRanking::AckGetPlayerHonorPointRanking(const AckGetPlayerHonorPointRanking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ranking_(from.ranking_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_cur_rank()) {
    cur_rank_ = new ::KWMsg::HonorPointRankingItem(*from.cur_rank_);
  } else {
    cur_rank_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckGetPlayerHonorPointRanking)
}

void AckGetPlayerHonorPointRanking::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(event_code_));
}

AckGetPlayerHonorPointRanking::~AckGetPlayerHonorPointRanking() {
  // @@protoc_insertion_point(destructor:KWMsg.AckGetPlayerHonorPointRanking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckGetPlayerHonorPointRanking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete cur_rank_;
}

void AckGetPlayerHonorPointRanking::ArenaDtor(void* object) {
  AckGetPlayerHonorPointRanking* _this = reinterpret_cast< AckGetPlayerHonorPointRanking* >(object);
  (void)_this;
}
void AckGetPlayerHonorPointRanking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckGetPlayerHonorPointRanking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckGetPlayerHonorPointRanking::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckGetPlayerHonorPointRanking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranking_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cur_rank_ != nullptr) {
    delete cur_rank_;
  }
  cur_rank_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckGetPlayerHonorPointRanking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.HonorPointRankingItem ranking = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranking(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .KWMsg.HonorPointRankingItem cur_rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_rank(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckGetPlayerHonorPointRanking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckGetPlayerHonorPointRanking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  // repeated .KWMsg.HonorPointRankingItem ranking = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranking_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ranking(i), target, stream);
  }

  // .KWMsg.HonorPointRankingItem cur_rank = 4;
  if (this->has_cur_rank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cur_rank(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckGetPlayerHonorPointRanking)
  return target;
}

size_t AckGetPlayerHonorPointRanking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckGetPlayerHonorPointRanking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.HonorPointRankingItem ranking = 3;
  total_size += 1UL * this->_internal_ranking_size();
  for (const auto& msg : this->ranking_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.HonorPointRankingItem cur_rank = 4;
  if (this->has_cur_rank()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cur_rank_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckGetPlayerHonorPointRanking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckGetPlayerHonorPointRanking)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetPlayerHonorPointRanking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckGetPlayerHonorPointRanking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckGetPlayerHonorPointRanking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckGetPlayerHonorPointRanking)
    MergeFrom(*source);
  }
}

void AckGetPlayerHonorPointRanking::MergeFrom(const AckGetPlayerHonorPointRanking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckGetPlayerHonorPointRanking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranking_.MergeFrom(from.ranking_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_cur_rank()) {
    _internal_mutable_cur_rank()->::KWMsg::HonorPointRankingItem::MergeFrom(from._internal_cur_rank());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckGetPlayerHonorPointRanking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckGetPlayerHonorPointRanking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetPlayerHonorPointRanking::CopyFrom(const AckGetPlayerHonorPointRanking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckGetPlayerHonorPointRanking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetPlayerHonorPointRanking::IsInitialized() const {
  return true;
}

void AckGetPlayerHonorPointRanking::InternalSwap(AckGetPlayerHonorPointRanking* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ranking_.InternalSwap(&other->ranking_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckGetPlayerHonorPointRanking, event_code_)
      + sizeof(AckGetPlayerHonorPointRanking::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckGetPlayerHonorPointRanking, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckGetPlayerHonorPointRanking::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[304]);
}

// ===================================================================

class ReqGetBotArenaMainPageData::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqGetBotArenaMainPageData* msg);
};

const ::KWMsg::Ident&
ReqGetBotArenaMainPageData::_Internal::player_id(const ReqGetBotArenaMainPageData* msg) {
  return *msg->player_id_;
}
void ReqGetBotArenaMainPageData::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqGetBotArenaMainPageData::ReqGetBotArenaMainPageData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqGetBotArenaMainPageData)
}
ReqGetBotArenaMainPageData::ReqGetBotArenaMainPageData(const ReqGetBotArenaMainPageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqGetBotArenaMainPageData)
}

void ReqGetBotArenaMainPageData::SharedCtor() {
player_id_ = nullptr;
}

ReqGetBotArenaMainPageData::~ReqGetBotArenaMainPageData() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqGetBotArenaMainPageData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqGetBotArenaMainPageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqGetBotArenaMainPageData::ArenaDtor(void* object) {
  ReqGetBotArenaMainPageData* _this = reinterpret_cast< ReqGetBotArenaMainPageData* >(object);
  (void)_this;
}
void ReqGetBotArenaMainPageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetBotArenaMainPageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetBotArenaMainPageData::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqGetBotArenaMainPageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetBotArenaMainPageData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetBotArenaMainPageData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqGetBotArenaMainPageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqGetBotArenaMainPageData)
  return target;
}

size_t ReqGetBotArenaMainPageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqGetBotArenaMainPageData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetBotArenaMainPageData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqGetBotArenaMainPageData)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetBotArenaMainPageData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetBotArenaMainPageData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqGetBotArenaMainPageData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqGetBotArenaMainPageData)
    MergeFrom(*source);
  }
}

void ReqGetBotArenaMainPageData::MergeFrom(const ReqGetBotArenaMainPageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqGetBotArenaMainPageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqGetBotArenaMainPageData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqGetBotArenaMainPageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetBotArenaMainPageData::CopyFrom(const ReqGetBotArenaMainPageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqGetBotArenaMainPageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetBotArenaMainPageData::IsInitialized() const {
  return true;
}

void ReqGetBotArenaMainPageData::InternalSwap(ReqGetBotArenaMainPageData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetBotArenaMainPageData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[305]);
}

// ===================================================================

class AckGetBotArenaMainPageData::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AckGetBotArenaMainPageData* msg);
};

const ::KWMsg::Ident&
AckGetBotArenaMainPageData::_Internal::player_id(const AckGetBotArenaMainPageData* msg) {
  return *msg->player_id_;
}
void AckGetBotArenaMainPageData::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AckGetBotArenaMainPageData::AckGetBotArenaMainPageData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckGetBotArenaMainPageData)
}
AckGetBotArenaMainPageData::AckGetBotArenaMainPageData(const AckGetBotArenaMainPageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pre_botarena_grade_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pre_botarena_grade_id().empty()) {
    pre_botarena_grade_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pre_botarena_grade_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_settle_ts_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(session_settle_ts_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckGetBotArenaMainPageData)
}

void AckGetBotArenaMainPageData::SharedCtor() {
pre_botarena_grade_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_settle_ts_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(session_settle_ts_));
}

AckGetBotArenaMainPageData::~AckGetBotArenaMainPageData() {
  // @@protoc_insertion_point(destructor:KWMsg.AckGetBotArenaMainPageData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckGetBotArenaMainPageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pre_botarena_grade_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void AckGetBotArenaMainPageData::ArenaDtor(void* object) {
  AckGetBotArenaMainPageData* _this = reinterpret_cast< AckGetBotArenaMainPageData* >(object);
  (void)_this;
}
void AckGetBotArenaMainPageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckGetBotArenaMainPageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckGetBotArenaMainPageData::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckGetBotArenaMainPageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pre_botarena_grade_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_settle_ts_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(session_settle_ts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckGetBotArenaMainPageData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 session = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BotarenaPromptType prompt_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_prompt_type(static_cast<::KWMsg::BotarenaPromptType>(val));
        } else goto handle_unusual;
        continue;
      // bytes pre_botarena_grade_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_pre_botarena_grade_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pre_strategy_point = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pre_strategy_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stage_begin_ts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          stage_begin_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stage_end_ts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          stage_end_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stage_settle_ts = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          stage_settle_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 session_begin_ts = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          session_begin_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 session_end_ts = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          session_end_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 session_settle_ts = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          session_settle_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckGetBotArenaMainPageData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckGetBotArenaMainPageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  // int32 rank = 3;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rank(), target);
  }

  // int32 stage = 4;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_stage(), target);
  }

  // int32 session = 5;
  if (this->session() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_session(), target);
  }

  // .KWMsg.BotarenaPromptType prompt_type = 6;
  if (this->prompt_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_prompt_type(), target);
  }

  // bytes pre_botarena_grade_id = 7;
  if (!this->pre_botarena_grade_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_pre_botarena_grade_id(), target);
  }

  // int64 pre_strategy_point = 8;
  if (this->pre_strategy_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_pre_strategy_point(), target);
  }

  // int32 stage_begin_ts = 9;
  if (this->stage_begin_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_stage_begin_ts(), target);
  }

  // int32 stage_end_ts = 10;
  if (this->stage_end_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_stage_end_ts(), target);
  }

  // int32 stage_settle_ts = 11;
  if (this->stage_settle_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_stage_settle_ts(), target);
  }

  // int32 session_begin_ts = 12;
  if (this->session_begin_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_session_begin_ts(), target);
  }

  // int32 session_end_ts = 13;
  if (this->session_end_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_session_end_ts(), target);
  }

  // int32 session_settle_ts = 14;
  if (this->session_settle_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_session_settle_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckGetBotArenaMainPageData)
  return target;
}

size_t AckGetBotArenaMainPageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckGetBotArenaMainPageData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pre_botarena_grade_id = 7;
  if (!this->pre_botarena_grade_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pre_botarena_grade_id());
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 rank = 3;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  // int32 stage = 4;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage());
  }

  // int32 session = 5;
  if (this->session() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session());
  }

  // .KWMsg.BotarenaPromptType prompt_type = 6;
  if (this->prompt_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_prompt_type());
  }

  // int32 stage_begin_ts = 9;
  if (this->stage_begin_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage_begin_ts());
  }

  // int64 pre_strategy_point = 8;
  if (this->pre_strategy_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pre_strategy_point());
  }

  // int32 stage_end_ts = 10;
  if (this->stage_end_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage_end_ts());
  }

  // int32 stage_settle_ts = 11;
  if (this->stage_settle_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stage_settle_ts());
  }

  // int32 session_begin_ts = 12;
  if (this->session_begin_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session_begin_ts());
  }

  // int32 session_end_ts = 13;
  if (this->session_end_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session_end_ts());
  }

  // int32 session_settle_ts = 14;
  if (this->session_settle_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session_settle_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckGetBotArenaMainPageData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckGetBotArenaMainPageData)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetBotArenaMainPageData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckGetBotArenaMainPageData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckGetBotArenaMainPageData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckGetBotArenaMainPageData)
    MergeFrom(*source);
  }
}

void AckGetBotArenaMainPageData::MergeFrom(const AckGetBotArenaMainPageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckGetBotArenaMainPageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.pre_botarena_grade_id().empty()) {
    _internal_set_pre_botarena_grade_id(from._internal_pre_botarena_grade_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
  if (from.session() != 0) {
    _internal_set_session(from._internal_session());
  }
  if (from.prompt_type() != 0) {
    _internal_set_prompt_type(from._internal_prompt_type());
  }
  if (from.stage_begin_ts() != 0) {
    _internal_set_stage_begin_ts(from._internal_stage_begin_ts());
  }
  if (from.pre_strategy_point() != 0) {
    _internal_set_pre_strategy_point(from._internal_pre_strategy_point());
  }
  if (from.stage_end_ts() != 0) {
    _internal_set_stage_end_ts(from._internal_stage_end_ts());
  }
  if (from.stage_settle_ts() != 0) {
    _internal_set_stage_settle_ts(from._internal_stage_settle_ts());
  }
  if (from.session_begin_ts() != 0) {
    _internal_set_session_begin_ts(from._internal_session_begin_ts());
  }
  if (from.session_end_ts() != 0) {
    _internal_set_session_end_ts(from._internal_session_end_ts());
  }
  if (from.session_settle_ts() != 0) {
    _internal_set_session_settle_ts(from._internal_session_settle_ts());
  }
}

void AckGetBotArenaMainPageData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckGetBotArenaMainPageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetBotArenaMainPageData::CopyFrom(const AckGetBotArenaMainPageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckGetBotArenaMainPageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetBotArenaMainPageData::IsInitialized() const {
  return true;
}

void AckGetBotArenaMainPageData::InternalSwap(AckGetBotArenaMainPageData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pre_botarena_grade_id_, GetArenaForAllocation(),
      &other->pre_botarena_grade_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckGetBotArenaMainPageData, session_settle_ts_)
      + sizeof(AckGetBotArenaMainPageData::session_settle_ts_)
      - PROTOBUF_FIELD_OFFSET(AckGetBotArenaMainPageData, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckGetBotArenaMainPageData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[306]);
}

// ===================================================================

class StrategyPointRankingItem::_Internal {
 public:
  static const ::KWMsg::PlayerInfo& player_info(const StrategyPointRankingItem* msg);
};

const ::KWMsg::PlayerInfo&
StrategyPointRankingItem::_Internal::player_info(const StrategyPointRankingItem* msg) {
  return *msg->player_info_;
}
StrategyPointRankingItem::StrategyPointRankingItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.StrategyPointRankingItem)
}
StrategyPointRankingItem::StrategyPointRankingItem(const StrategyPointRankingItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_info()) {
    player_info_ = new ::KWMsg::PlayerInfo(*from.player_info_);
  } else {
    player_info_ = nullptr;
  }
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.StrategyPointRankingItem)
}

void StrategyPointRankingItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&player_info_)) + sizeof(rank_));
}

StrategyPointRankingItem::~StrategyPointRankingItem() {
  // @@protoc_insertion_point(destructor:KWMsg.StrategyPointRankingItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StrategyPointRankingItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_info_;
}

void StrategyPointRankingItem::ArenaDtor(void* object) {
  StrategyPointRankingItem* _this = reinterpret_cast< StrategyPointRankingItem* >(object);
  (void)_this;
}
void StrategyPointRankingItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StrategyPointRankingItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StrategyPointRankingItem::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.StrategyPointRankingItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_info_ != nullptr) {
    delete player_info_;
  }
  player_info_ = nullptr;
  rank_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrategyPointRankingItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.PlayerInfo player_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StrategyPointRankingItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.StrategyPointRankingItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // .KWMsg.PlayerInfo player_info = 2;
  if (this->has_player_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.StrategyPointRankingItem)
  return target;
}

size_t StrategyPointRankingItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.StrategyPointRankingItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.PlayerInfo player_info = 2;
  if (this->has_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_info_);
  }

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StrategyPointRankingItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.StrategyPointRankingItem)
  GOOGLE_DCHECK_NE(&from, this);
  const StrategyPointRankingItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StrategyPointRankingItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.StrategyPointRankingItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.StrategyPointRankingItem)
    MergeFrom(*source);
  }
}

void StrategyPointRankingItem::MergeFrom(const StrategyPointRankingItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.StrategyPointRankingItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_info()) {
    _internal_mutable_player_info()->::KWMsg::PlayerInfo::MergeFrom(from._internal_player_info());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
}

void StrategyPointRankingItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.StrategyPointRankingItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrategyPointRankingItem::CopyFrom(const StrategyPointRankingItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.StrategyPointRankingItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrategyPointRankingItem::IsInitialized() const {
  return true;
}

void StrategyPointRankingItem::InternalSwap(StrategyPointRankingItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StrategyPointRankingItem, rank_)
      + sizeof(StrategyPointRankingItem::rank_)
      - PROTOBUF_FIELD_OFFSET(StrategyPointRankingItem, player_info_)>(
          reinterpret_cast<char*>(&player_info_),
          reinterpret_cast<char*>(&other->player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StrategyPointRankingItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[307]);
}

// ===================================================================

class ReqGetPlayerStrategyPointRanking::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqGetPlayerStrategyPointRanking* msg);
};

const ::KWMsg::Ident&
ReqGetPlayerStrategyPointRanking::_Internal::player_id(const ReqGetPlayerStrategyPointRanking* msg) {
  return *msg->player_id_;
}
void ReqGetPlayerStrategyPointRanking::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqGetPlayerStrategyPointRanking::ReqGetPlayerStrategyPointRanking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqGetPlayerStrategyPointRanking)
}
ReqGetPlayerStrategyPointRanking::ReqGetPlayerStrategyPointRanking(const ReqGetPlayerStrategyPointRanking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqGetPlayerStrategyPointRanking)
}

void ReqGetPlayerStrategyPointRanking::SharedCtor() {
player_id_ = nullptr;
}

ReqGetPlayerStrategyPointRanking::~ReqGetPlayerStrategyPointRanking() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqGetPlayerStrategyPointRanking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqGetPlayerStrategyPointRanking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqGetPlayerStrategyPointRanking::ArenaDtor(void* object) {
  ReqGetPlayerStrategyPointRanking* _this = reinterpret_cast< ReqGetPlayerStrategyPointRanking* >(object);
  (void)_this;
}
void ReqGetPlayerStrategyPointRanking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetPlayerStrategyPointRanking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetPlayerStrategyPointRanking::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqGetPlayerStrategyPointRanking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetPlayerStrategyPointRanking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetPlayerStrategyPointRanking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqGetPlayerStrategyPointRanking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqGetPlayerStrategyPointRanking)
  return target;
}

size_t ReqGetPlayerStrategyPointRanking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqGetPlayerStrategyPointRanking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetPlayerStrategyPointRanking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqGetPlayerStrategyPointRanking)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetPlayerStrategyPointRanking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetPlayerStrategyPointRanking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqGetPlayerStrategyPointRanking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqGetPlayerStrategyPointRanking)
    MergeFrom(*source);
  }
}

void ReqGetPlayerStrategyPointRanking::MergeFrom(const ReqGetPlayerStrategyPointRanking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqGetPlayerStrategyPointRanking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqGetPlayerStrategyPointRanking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqGetPlayerStrategyPointRanking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetPlayerStrategyPointRanking::CopyFrom(const ReqGetPlayerStrategyPointRanking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqGetPlayerStrategyPointRanking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetPlayerStrategyPointRanking::IsInitialized() const {
  return true;
}

void ReqGetPlayerStrategyPointRanking::InternalSwap(ReqGetPlayerStrategyPointRanking* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetPlayerStrategyPointRanking::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[308]);
}

// ===================================================================

class AckGetPlayerStrategyPointRanking::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AckGetPlayerStrategyPointRanking* msg);
  static const ::KWMsg::StrategyPointRankingItem& cur_rank(const AckGetPlayerStrategyPointRanking* msg);
};

const ::KWMsg::Ident&
AckGetPlayerStrategyPointRanking::_Internal::player_id(const AckGetPlayerStrategyPointRanking* msg) {
  return *msg->player_id_;
}
const ::KWMsg::StrategyPointRankingItem&
AckGetPlayerStrategyPointRanking::_Internal::cur_rank(const AckGetPlayerStrategyPointRanking* msg) {
  return *msg->cur_rank_;
}
void AckGetPlayerStrategyPointRanking::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AckGetPlayerStrategyPointRanking::AckGetPlayerStrategyPointRanking(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ranking_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckGetPlayerStrategyPointRanking)
}
AckGetPlayerStrategyPointRanking::AckGetPlayerStrategyPointRanking(const AckGetPlayerStrategyPointRanking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ranking_(from.ranking_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_cur_rank()) {
    cur_rank_ = new ::KWMsg::StrategyPointRankingItem(*from.cur_rank_);
  } else {
    cur_rank_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckGetPlayerStrategyPointRanking)
}

void AckGetPlayerStrategyPointRanking::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(event_code_));
}

AckGetPlayerStrategyPointRanking::~AckGetPlayerStrategyPointRanking() {
  // @@protoc_insertion_point(destructor:KWMsg.AckGetPlayerStrategyPointRanking)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckGetPlayerStrategyPointRanking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete cur_rank_;
}

void AckGetPlayerStrategyPointRanking::ArenaDtor(void* object) {
  AckGetPlayerStrategyPointRanking* _this = reinterpret_cast< AckGetPlayerStrategyPointRanking* >(object);
  (void)_this;
}
void AckGetPlayerStrategyPointRanking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckGetPlayerStrategyPointRanking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckGetPlayerStrategyPointRanking::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckGetPlayerStrategyPointRanking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranking_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cur_rank_ != nullptr) {
    delete cur_rank_;
  }
  cur_rank_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckGetPlayerStrategyPointRanking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.StrategyPointRankingItem ranking = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranking(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .KWMsg.StrategyPointRankingItem cur_rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_rank(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckGetPlayerStrategyPointRanking::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckGetPlayerStrategyPointRanking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  // repeated .KWMsg.StrategyPointRankingItem ranking = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranking_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ranking(i), target, stream);
  }

  // .KWMsg.StrategyPointRankingItem cur_rank = 4;
  if (this->has_cur_rank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cur_rank(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckGetPlayerStrategyPointRanking)
  return target;
}

size_t AckGetPlayerStrategyPointRanking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckGetPlayerStrategyPointRanking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.StrategyPointRankingItem ranking = 3;
  total_size += 1UL * this->_internal_ranking_size();
  for (const auto& msg : this->ranking_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.StrategyPointRankingItem cur_rank = 4;
  if (this->has_cur_rank()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cur_rank_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckGetPlayerStrategyPointRanking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckGetPlayerStrategyPointRanking)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetPlayerStrategyPointRanking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckGetPlayerStrategyPointRanking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckGetPlayerStrategyPointRanking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckGetPlayerStrategyPointRanking)
    MergeFrom(*source);
  }
}

void AckGetPlayerStrategyPointRanking::MergeFrom(const AckGetPlayerStrategyPointRanking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckGetPlayerStrategyPointRanking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranking_.MergeFrom(from.ranking_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_cur_rank()) {
    _internal_mutable_cur_rank()->::KWMsg::StrategyPointRankingItem::MergeFrom(from._internal_cur_rank());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckGetPlayerStrategyPointRanking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckGetPlayerStrategyPointRanking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetPlayerStrategyPointRanking::CopyFrom(const AckGetPlayerStrategyPointRanking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckGetPlayerStrategyPointRanking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetPlayerStrategyPointRanking::IsInitialized() const {
  return true;
}

void AckGetPlayerStrategyPointRanking::InternalSwap(AckGetPlayerStrategyPointRanking* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ranking_.InternalSwap(&other->ranking_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckGetPlayerStrategyPointRanking, event_code_)
      + sizeof(AckGetPlayerStrategyPointRanking::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckGetPlayerStrategyPointRanking, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckGetPlayerStrategyPointRanking::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[309]);
}

// ===================================================================

class BotArenaChallengeItem::_Internal {
 public:
  static const ::KWMsg::Ident& id(const BotArenaChallengeItem* msg);
  static const ::KWMsg::PlayerInfo& player_info(const BotArenaChallengeItem* msg);
};

const ::KWMsg::Ident&
BotArenaChallengeItem::_Internal::id(const BotArenaChallengeItem* msg) {
  return *msg->id_;
}
const ::KWMsg::PlayerInfo&
BotArenaChallengeItem::_Internal::player_info(const BotArenaChallengeItem* msg) {
  return *msg->entity_.player_info_;
}
void BotArenaChallengeItem::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void BotArenaChallengeItem::set_allocated_player_info(::KWMsg::PlayerInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::PlayerInfo>::GetOwningArena(player_info);
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    set_has_player_info();
    entity_.player_info_ = player_info;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BotArenaChallengeItem.player_info)
}
BotArenaChallengeItem::BotArenaChallengeItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BotArenaChallengeItem)
}
BotArenaChallengeItem::BotArenaChallengeItem(const BotArenaChallengeItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::KWMsg::Ident(*from.id_);
  } else {
    id_ = nullptr;
  }
  result_ = from.result_;
  clear_has_entity();
  switch (from.entity_case()) {
    case kPlayerInfo: {
      _internal_mutable_player_info()->::KWMsg::PlayerInfo::MergeFrom(from._internal_player_info());
      break;
    }
    case kRobotId: {
      _internal_set_robot_id(from._internal_robot_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.BotArenaChallengeItem)
}

void BotArenaChallengeItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&id_)) + sizeof(result_));
clear_has_entity();
}

BotArenaChallengeItem::~BotArenaChallengeItem() {
  // @@protoc_insertion_point(destructor:KWMsg.BotArenaChallengeItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BotArenaChallengeItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (has_entity()) {
    clear_entity();
  }
}

void BotArenaChallengeItem::ArenaDtor(void* object) {
  BotArenaChallengeItem* _this = reinterpret_cast< BotArenaChallengeItem* >(object);
  (void)_this;
}
void BotArenaChallengeItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BotArenaChallengeItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BotArenaChallengeItem::clear_entity() {
// @@protoc_insertion_point(one_of_clear_start:KWMsg.BotArenaChallengeItem)
  switch (entity_case()) {
    case kPlayerInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.player_info_;
      }
      break;
    }
    case kRobotId: {
      entity_.robot_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTITY_NOT_SET;
}


void BotArenaChallengeItem::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BotArenaChallengeItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  result_ = 0;
  clear_entity();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BotArenaChallengeItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.PlayerInfo player_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes robot_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BotArenaChallengeItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BotArenaChallengeItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .KWMsg.PlayerInfo player_info = 2;
  if (_internal_has_player_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_info(this), target, stream);
  }

  // bytes robot_id = 3;
  if (_internal_has_robot_id()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_robot_id(), target);
  }

  // int32 result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BotArenaChallengeItem)
  return target;
}

size_t BotArenaChallengeItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BotArenaChallengeItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  switch (entity_case()) {
    // .KWMsg.PlayerInfo player_info = 2;
    case kPlayerInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.player_info_);
      break;
    }
    // bytes robot_id = 3;
    case kRobotId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_robot_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BotArenaChallengeItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BotArenaChallengeItem)
  GOOGLE_DCHECK_NE(&from, this);
  const BotArenaChallengeItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BotArenaChallengeItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BotArenaChallengeItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BotArenaChallengeItem)
    MergeFrom(*source);
  }
}

void BotArenaChallengeItem::MergeFrom(const BotArenaChallengeItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BotArenaChallengeItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::KWMsg::Ident::MergeFrom(from._internal_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  switch (from.entity_case()) {
    case kPlayerInfo: {
      _internal_mutable_player_info()->::KWMsg::PlayerInfo::MergeFrom(from._internal_player_info());
      break;
    }
    case kRobotId: {
      _internal_set_robot_id(from._internal_robot_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
}

void BotArenaChallengeItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BotArenaChallengeItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotArenaChallengeItem::CopyFrom(const BotArenaChallengeItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BotArenaChallengeItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotArenaChallengeItem::IsInitialized() const {
  return true;
}

void BotArenaChallengeItem::InternalSwap(BotArenaChallengeItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BotArenaChallengeItem, result_)
      + sizeof(BotArenaChallengeItem::result_)
      - PROTOBUF_FIELD_OFFSET(BotArenaChallengeItem, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(entity_, other->entity_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BotArenaChallengeItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[310]);
}

// ===================================================================

class BotArenaChallengeList::_Internal {
 public:
};

BotArenaChallengeList::BotArenaChallengeList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BotArenaChallengeList)
}
BotArenaChallengeList::BotArenaChallengeList(const BotArenaChallengeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.BotArenaChallengeList)
}

void BotArenaChallengeList::SharedCtor() {
}

BotArenaChallengeList::~BotArenaChallengeList() {
  // @@protoc_insertion_point(destructor:KWMsg.BotArenaChallengeList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BotArenaChallengeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BotArenaChallengeList::ArenaDtor(void* object) {
  BotArenaChallengeList* _this = reinterpret_cast< BotArenaChallengeList* >(object);
  (void)_this;
}
void BotArenaChallengeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BotArenaChallengeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BotArenaChallengeList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BotArenaChallengeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BotArenaChallengeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.BotArenaChallengeItem list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BotArenaChallengeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BotArenaChallengeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.BotArenaChallengeItem list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BotArenaChallengeList)
  return target;
}

size_t BotArenaChallengeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BotArenaChallengeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BotArenaChallengeItem list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BotArenaChallengeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BotArenaChallengeList)
  GOOGLE_DCHECK_NE(&from, this);
  const BotArenaChallengeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BotArenaChallengeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BotArenaChallengeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BotArenaChallengeList)
    MergeFrom(*source);
  }
}

void BotArenaChallengeList::MergeFrom(const BotArenaChallengeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BotArenaChallengeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void BotArenaChallengeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BotArenaChallengeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotArenaChallengeList::CopyFrom(const BotArenaChallengeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BotArenaChallengeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotArenaChallengeList::IsInitialized() const {
  return true;
}

void BotArenaChallengeList::InternalSwap(BotArenaChallengeList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BotArenaChallengeList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[311]);
}

// ===================================================================

class ReqGetPlayerBotArenaChallengeList::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqGetPlayerBotArenaChallengeList* msg);
};

const ::KWMsg::Ident&
ReqGetPlayerBotArenaChallengeList::_Internal::player_id(const ReqGetPlayerBotArenaChallengeList* msg) {
  return *msg->player_id_;
}
void ReqGetPlayerBotArenaChallengeList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqGetPlayerBotArenaChallengeList::ReqGetPlayerBotArenaChallengeList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqGetPlayerBotArenaChallengeList)
}
ReqGetPlayerBotArenaChallengeList::ReqGetPlayerBotArenaChallengeList(const ReqGetPlayerBotArenaChallengeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqGetPlayerBotArenaChallengeList)
}

void ReqGetPlayerBotArenaChallengeList::SharedCtor() {
player_id_ = nullptr;
}

ReqGetPlayerBotArenaChallengeList::~ReqGetPlayerBotArenaChallengeList() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqGetPlayerBotArenaChallengeList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqGetPlayerBotArenaChallengeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqGetPlayerBotArenaChallengeList::ArenaDtor(void* object) {
  ReqGetPlayerBotArenaChallengeList* _this = reinterpret_cast< ReqGetPlayerBotArenaChallengeList* >(object);
  (void)_this;
}
void ReqGetPlayerBotArenaChallengeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetPlayerBotArenaChallengeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetPlayerBotArenaChallengeList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqGetPlayerBotArenaChallengeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetPlayerBotArenaChallengeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetPlayerBotArenaChallengeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqGetPlayerBotArenaChallengeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqGetPlayerBotArenaChallengeList)
  return target;
}

size_t ReqGetPlayerBotArenaChallengeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqGetPlayerBotArenaChallengeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetPlayerBotArenaChallengeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqGetPlayerBotArenaChallengeList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetPlayerBotArenaChallengeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetPlayerBotArenaChallengeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqGetPlayerBotArenaChallengeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqGetPlayerBotArenaChallengeList)
    MergeFrom(*source);
  }
}

void ReqGetPlayerBotArenaChallengeList::MergeFrom(const ReqGetPlayerBotArenaChallengeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqGetPlayerBotArenaChallengeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqGetPlayerBotArenaChallengeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqGetPlayerBotArenaChallengeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetPlayerBotArenaChallengeList::CopyFrom(const ReqGetPlayerBotArenaChallengeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqGetPlayerBotArenaChallengeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetPlayerBotArenaChallengeList::IsInitialized() const {
  return true;
}

void ReqGetPlayerBotArenaChallengeList::InternalSwap(ReqGetPlayerBotArenaChallengeList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetPlayerBotArenaChallengeList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[312]);
}

// ===================================================================

class AckGetPlayerBotArenaChallengeList::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AckGetPlayerBotArenaChallengeList* msg);
  static const ::KWMsg::BotArenaChallengeList& result(const AckGetPlayerBotArenaChallengeList* msg);
};

const ::KWMsg::Ident&
AckGetPlayerBotArenaChallengeList::_Internal::player_id(const AckGetPlayerBotArenaChallengeList* msg) {
  return *msg->player_id_;
}
const ::KWMsg::BotArenaChallengeList&
AckGetPlayerBotArenaChallengeList::_Internal::result(const AckGetPlayerBotArenaChallengeList* msg) {
  return *msg->result_;
}
void AckGetPlayerBotArenaChallengeList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AckGetPlayerBotArenaChallengeList::AckGetPlayerBotArenaChallengeList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckGetPlayerBotArenaChallengeList)
}
AckGetPlayerBotArenaChallengeList::AckGetPlayerBotArenaChallengeList(const AckGetPlayerBotArenaChallengeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_result()) {
    result_ = new ::KWMsg::BotArenaChallengeList(*from.result_);
  } else {
    result_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckGetPlayerBotArenaChallengeList)
}

void AckGetPlayerBotArenaChallengeList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(event_code_));
}

AckGetPlayerBotArenaChallengeList::~AckGetPlayerBotArenaChallengeList() {
  // @@protoc_insertion_point(destructor:KWMsg.AckGetPlayerBotArenaChallengeList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckGetPlayerBotArenaChallengeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete result_;
}

void AckGetPlayerBotArenaChallengeList::ArenaDtor(void* object) {
  AckGetPlayerBotArenaChallengeList* _this = reinterpret_cast< AckGetPlayerBotArenaChallengeList* >(object);
  (void)_this;
}
void AckGetPlayerBotArenaChallengeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckGetPlayerBotArenaChallengeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckGetPlayerBotArenaChallengeList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckGetPlayerBotArenaChallengeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckGetPlayerBotArenaChallengeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BotArenaChallengeList result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckGetPlayerBotArenaChallengeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckGetPlayerBotArenaChallengeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.BotArenaChallengeList result = 3;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckGetPlayerBotArenaChallengeList)
  return target;
}

size_t AckGetPlayerBotArenaChallengeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckGetPlayerBotArenaChallengeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.BotArenaChallengeList result = 3;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckGetPlayerBotArenaChallengeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckGetPlayerBotArenaChallengeList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetPlayerBotArenaChallengeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckGetPlayerBotArenaChallengeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckGetPlayerBotArenaChallengeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckGetPlayerBotArenaChallengeList)
    MergeFrom(*source);
  }
}

void AckGetPlayerBotArenaChallengeList::MergeFrom(const AckGetPlayerBotArenaChallengeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckGetPlayerBotArenaChallengeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_result()) {
    _internal_mutable_result()->::KWMsg::BotArenaChallengeList::MergeFrom(from._internal_result());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckGetPlayerBotArenaChallengeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckGetPlayerBotArenaChallengeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetPlayerBotArenaChallengeList::CopyFrom(const AckGetPlayerBotArenaChallengeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckGetPlayerBotArenaChallengeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetPlayerBotArenaChallengeList::IsInitialized() const {
  return true;
}

void AckGetPlayerBotArenaChallengeList::InternalSwap(AckGetPlayerBotArenaChallengeList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckGetPlayerBotArenaChallengeList, event_code_)
      + sizeof(AckGetPlayerBotArenaChallengeList::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckGetPlayerBotArenaChallengeList, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckGetPlayerBotArenaChallengeList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[313]);
}

// ===================================================================

class ReqRefreshPlayerBotArenaChallengeList::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqRefreshPlayerBotArenaChallengeList* msg);
};

const ::KWMsg::Ident&
ReqRefreshPlayerBotArenaChallengeList::_Internal::player_id(const ReqRefreshPlayerBotArenaChallengeList* msg) {
  return *msg->player_id_;
}
void ReqRefreshPlayerBotArenaChallengeList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqRefreshPlayerBotArenaChallengeList::ReqRefreshPlayerBotArenaChallengeList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqRefreshPlayerBotArenaChallengeList)
}
ReqRefreshPlayerBotArenaChallengeList::ReqRefreshPlayerBotArenaChallengeList(const ReqRefreshPlayerBotArenaChallengeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqRefreshPlayerBotArenaChallengeList)
}

void ReqRefreshPlayerBotArenaChallengeList::SharedCtor() {
player_id_ = nullptr;
}

ReqRefreshPlayerBotArenaChallengeList::~ReqRefreshPlayerBotArenaChallengeList() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqRefreshPlayerBotArenaChallengeList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqRefreshPlayerBotArenaChallengeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqRefreshPlayerBotArenaChallengeList::ArenaDtor(void* object) {
  ReqRefreshPlayerBotArenaChallengeList* _this = reinterpret_cast< ReqRefreshPlayerBotArenaChallengeList* >(object);
  (void)_this;
}
void ReqRefreshPlayerBotArenaChallengeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqRefreshPlayerBotArenaChallengeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqRefreshPlayerBotArenaChallengeList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqRefreshPlayerBotArenaChallengeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqRefreshPlayerBotArenaChallengeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqRefreshPlayerBotArenaChallengeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqRefreshPlayerBotArenaChallengeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqRefreshPlayerBotArenaChallengeList)
  return target;
}

size_t ReqRefreshPlayerBotArenaChallengeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqRefreshPlayerBotArenaChallengeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqRefreshPlayerBotArenaChallengeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqRefreshPlayerBotArenaChallengeList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRefreshPlayerBotArenaChallengeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqRefreshPlayerBotArenaChallengeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqRefreshPlayerBotArenaChallengeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqRefreshPlayerBotArenaChallengeList)
    MergeFrom(*source);
  }
}

void ReqRefreshPlayerBotArenaChallengeList::MergeFrom(const ReqRefreshPlayerBotArenaChallengeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqRefreshPlayerBotArenaChallengeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqRefreshPlayerBotArenaChallengeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqRefreshPlayerBotArenaChallengeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRefreshPlayerBotArenaChallengeList::CopyFrom(const ReqRefreshPlayerBotArenaChallengeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqRefreshPlayerBotArenaChallengeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRefreshPlayerBotArenaChallengeList::IsInitialized() const {
  return true;
}

void ReqRefreshPlayerBotArenaChallengeList::InternalSwap(ReqRefreshPlayerBotArenaChallengeList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqRefreshPlayerBotArenaChallengeList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[314]);
}

// ===================================================================

class AckRefreshPlayerBotArenaChallengeList::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AckRefreshPlayerBotArenaChallengeList* msg);
  static const ::KWMsg::BotArenaChallengeList& result(const AckRefreshPlayerBotArenaChallengeList* msg);
};

const ::KWMsg::Ident&
AckRefreshPlayerBotArenaChallengeList::_Internal::player_id(const AckRefreshPlayerBotArenaChallengeList* msg) {
  return *msg->player_id_;
}
const ::KWMsg::BotArenaChallengeList&
AckRefreshPlayerBotArenaChallengeList::_Internal::result(const AckRefreshPlayerBotArenaChallengeList* msg) {
  return *msg->result_;
}
void AckRefreshPlayerBotArenaChallengeList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AckRefreshPlayerBotArenaChallengeList::AckRefreshPlayerBotArenaChallengeList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckRefreshPlayerBotArenaChallengeList)
}
AckRefreshPlayerBotArenaChallengeList::AckRefreshPlayerBotArenaChallengeList(const AckRefreshPlayerBotArenaChallengeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_result()) {
    result_ = new ::KWMsg::BotArenaChallengeList(*from.result_);
  } else {
    result_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckRefreshPlayerBotArenaChallengeList)
}

void AckRefreshPlayerBotArenaChallengeList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(event_code_));
}

AckRefreshPlayerBotArenaChallengeList::~AckRefreshPlayerBotArenaChallengeList() {
  // @@protoc_insertion_point(destructor:KWMsg.AckRefreshPlayerBotArenaChallengeList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckRefreshPlayerBotArenaChallengeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete result_;
}

void AckRefreshPlayerBotArenaChallengeList::ArenaDtor(void* object) {
  AckRefreshPlayerBotArenaChallengeList* _this = reinterpret_cast< AckRefreshPlayerBotArenaChallengeList* >(object);
  (void)_this;
}
void AckRefreshPlayerBotArenaChallengeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckRefreshPlayerBotArenaChallengeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckRefreshPlayerBotArenaChallengeList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckRefreshPlayerBotArenaChallengeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckRefreshPlayerBotArenaChallengeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BotArenaChallengeList result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckRefreshPlayerBotArenaChallengeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckRefreshPlayerBotArenaChallengeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.BotArenaChallengeList result = 3;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckRefreshPlayerBotArenaChallengeList)
  return target;
}

size_t AckRefreshPlayerBotArenaChallengeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckRefreshPlayerBotArenaChallengeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.BotArenaChallengeList result = 3;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckRefreshPlayerBotArenaChallengeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckRefreshPlayerBotArenaChallengeList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckRefreshPlayerBotArenaChallengeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckRefreshPlayerBotArenaChallengeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckRefreshPlayerBotArenaChallengeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckRefreshPlayerBotArenaChallengeList)
    MergeFrom(*source);
  }
}

void AckRefreshPlayerBotArenaChallengeList::MergeFrom(const AckRefreshPlayerBotArenaChallengeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckRefreshPlayerBotArenaChallengeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_result()) {
    _internal_mutable_result()->::KWMsg::BotArenaChallengeList::MergeFrom(from._internal_result());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckRefreshPlayerBotArenaChallengeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckRefreshPlayerBotArenaChallengeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRefreshPlayerBotArenaChallengeList::CopyFrom(const AckRefreshPlayerBotArenaChallengeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckRefreshPlayerBotArenaChallengeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRefreshPlayerBotArenaChallengeList::IsInitialized() const {
  return true;
}

void AckRefreshPlayerBotArenaChallengeList::InternalSwap(AckRefreshPlayerBotArenaChallengeList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckRefreshPlayerBotArenaChallengeList, event_code_)
      + sizeof(AckRefreshPlayerBotArenaChallengeList::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckRefreshPlayerBotArenaChallengeList, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckRefreshPlayerBotArenaChallengeList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[315]);
}

// ===================================================================

class ReqAdjBotarenaDefensiveTeam::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqAdjBotarenaDefensiveTeam* msg);
};

const ::KWMsg::Ident&
ReqAdjBotarenaDefensiveTeam::_Internal::player_id(const ReqAdjBotarenaDefensiveTeam* msg) {
  return *msg->player_id_;
}
void ReqAdjBotarenaDefensiveTeam::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqAdjBotarenaDefensiveTeam::ReqAdjBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAdjBotarenaDefensiveTeam)
}
ReqAdjBotarenaDefensiveTeam::ReqAdjBotarenaDefensiveTeam(const ReqAdjBotarenaDefensiveTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  idx_ = from.idx_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAdjBotarenaDefensiveTeam)
}

void ReqAdjBotarenaDefensiveTeam::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(idx_));
}

ReqAdjBotarenaDefensiveTeam::~ReqAdjBotarenaDefensiveTeam() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAdjBotarenaDefensiveTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAdjBotarenaDefensiveTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqAdjBotarenaDefensiveTeam::ArenaDtor(void* object) {
  ReqAdjBotarenaDefensiveTeam* _this = reinterpret_cast< ReqAdjBotarenaDefensiveTeam* >(object);
  (void)_this;
}
void ReqAdjBotarenaDefensiveTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAdjBotarenaDefensiveTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAdjBotarenaDefensiveTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAdjBotarenaDefensiveTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAdjBotarenaDefensiveTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAdjBotarenaDefensiveTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAdjBotarenaDefensiveTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 idx = 2;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_idx(), target);
  }

  // bytes witch_id = 3;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_witch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAdjBotarenaDefensiveTeam)
  return target;
}

size_t ReqAdjBotarenaDefensiveTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAdjBotarenaDefensiveTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 3;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 idx = 2;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAdjBotarenaDefensiveTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAdjBotarenaDefensiveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAdjBotarenaDefensiveTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAdjBotarenaDefensiveTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAdjBotarenaDefensiveTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAdjBotarenaDefensiveTeam)
    MergeFrom(*source);
  }
}

void ReqAdjBotarenaDefensiveTeam::MergeFrom(const ReqAdjBotarenaDefensiveTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAdjBotarenaDefensiveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
}

void ReqAdjBotarenaDefensiveTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAdjBotarenaDefensiveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAdjBotarenaDefensiveTeam::CopyFrom(const ReqAdjBotarenaDefensiveTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAdjBotarenaDefensiveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAdjBotarenaDefensiveTeam::IsInitialized() const {
  return true;
}

void ReqAdjBotarenaDefensiveTeam::InternalSwap(ReqAdjBotarenaDefensiveTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqAdjBotarenaDefensiveTeam, idx_)
      + sizeof(ReqAdjBotarenaDefensiveTeam::idx_)
      - PROTOBUF_FIELD_OFFSET(ReqAdjBotarenaDefensiveTeam, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAdjBotarenaDefensiveTeam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[316]);
}

// ===================================================================

class AckAdjBotarenaDefensiveTeam::_Internal {
 public:
};

AckAdjBotarenaDefensiveTeam::AckAdjBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckAdjBotarenaDefensiveTeam)
}
AckAdjBotarenaDefensiveTeam::AckAdjBotarenaDefensiveTeam(const AckAdjBotarenaDefensiveTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckAdjBotarenaDefensiveTeam)
}

void AckAdjBotarenaDefensiveTeam::SharedCtor() {
event_code_ = 0;
}

AckAdjBotarenaDefensiveTeam::~AckAdjBotarenaDefensiveTeam() {
  // @@protoc_insertion_point(destructor:KWMsg.AckAdjBotarenaDefensiveTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckAdjBotarenaDefensiveTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckAdjBotarenaDefensiveTeam::ArenaDtor(void* object) {
  AckAdjBotarenaDefensiveTeam* _this = reinterpret_cast< AckAdjBotarenaDefensiveTeam* >(object);
  (void)_this;
}
void AckAdjBotarenaDefensiveTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckAdjBotarenaDefensiveTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckAdjBotarenaDefensiveTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckAdjBotarenaDefensiveTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckAdjBotarenaDefensiveTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckAdjBotarenaDefensiveTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckAdjBotarenaDefensiveTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckAdjBotarenaDefensiveTeam)
  return target;
}

size_t AckAdjBotarenaDefensiveTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckAdjBotarenaDefensiveTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckAdjBotarenaDefensiveTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckAdjBotarenaDefensiveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const AckAdjBotarenaDefensiveTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckAdjBotarenaDefensiveTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckAdjBotarenaDefensiveTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckAdjBotarenaDefensiveTeam)
    MergeFrom(*source);
  }
}

void AckAdjBotarenaDefensiveTeam::MergeFrom(const AckAdjBotarenaDefensiveTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckAdjBotarenaDefensiveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckAdjBotarenaDefensiveTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckAdjBotarenaDefensiveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckAdjBotarenaDefensiveTeam::CopyFrom(const AckAdjBotarenaDefensiveTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckAdjBotarenaDefensiveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckAdjBotarenaDefensiveTeam::IsInitialized() const {
  return true;
}

void AckAdjBotarenaDefensiveTeam::InternalSwap(AckAdjBotarenaDefensiveTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckAdjBotarenaDefensiveTeam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[317]);
}

// ===================================================================

class ReqResetBotarenaDefensiveTeam::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqResetBotarenaDefensiveTeam* msg);
};

const ::KWMsg::Ident&
ReqResetBotarenaDefensiveTeam::_Internal::player_id(const ReqResetBotarenaDefensiveTeam* msg) {
  return *msg->player_id_;
}
void ReqResetBotarenaDefensiveTeam::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqResetBotarenaDefensiveTeam::ReqResetBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqResetBotarenaDefensiveTeam)
}
ReqResetBotarenaDefensiveTeam::ReqResetBotarenaDefensiveTeam(const ReqResetBotarenaDefensiveTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqResetBotarenaDefensiveTeam)
}

void ReqResetBotarenaDefensiveTeam::SharedCtor() {
player_id_ = nullptr;
}

ReqResetBotarenaDefensiveTeam::~ReqResetBotarenaDefensiveTeam() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqResetBotarenaDefensiveTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqResetBotarenaDefensiveTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqResetBotarenaDefensiveTeam::ArenaDtor(void* object) {
  ReqResetBotarenaDefensiveTeam* _this = reinterpret_cast< ReqResetBotarenaDefensiveTeam* >(object);
  (void)_this;
}
void ReqResetBotarenaDefensiveTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqResetBotarenaDefensiveTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqResetBotarenaDefensiveTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqResetBotarenaDefensiveTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqResetBotarenaDefensiveTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqResetBotarenaDefensiveTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqResetBotarenaDefensiveTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqResetBotarenaDefensiveTeam)
  return target;
}

size_t ReqResetBotarenaDefensiveTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqResetBotarenaDefensiveTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqResetBotarenaDefensiveTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqResetBotarenaDefensiveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqResetBotarenaDefensiveTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqResetBotarenaDefensiveTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqResetBotarenaDefensiveTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqResetBotarenaDefensiveTeam)
    MergeFrom(*source);
  }
}

void ReqResetBotarenaDefensiveTeam::MergeFrom(const ReqResetBotarenaDefensiveTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqResetBotarenaDefensiveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqResetBotarenaDefensiveTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqResetBotarenaDefensiveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqResetBotarenaDefensiveTeam::CopyFrom(const ReqResetBotarenaDefensiveTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqResetBotarenaDefensiveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqResetBotarenaDefensiveTeam::IsInitialized() const {
  return true;
}

void ReqResetBotarenaDefensiveTeam::InternalSwap(ReqResetBotarenaDefensiveTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqResetBotarenaDefensiveTeam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[318]);
}

// ===================================================================

class AckResetBotarenaDefensiveTeam::_Internal {
 public:
};

AckResetBotarenaDefensiveTeam::AckResetBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckResetBotarenaDefensiveTeam)
}
AckResetBotarenaDefensiveTeam::AckResetBotarenaDefensiveTeam(const AckResetBotarenaDefensiveTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckResetBotarenaDefensiveTeam)
}

void AckResetBotarenaDefensiveTeam::SharedCtor() {
event_code_ = 0;
}

AckResetBotarenaDefensiveTeam::~AckResetBotarenaDefensiveTeam() {
  // @@protoc_insertion_point(destructor:KWMsg.AckResetBotarenaDefensiveTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckResetBotarenaDefensiveTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckResetBotarenaDefensiveTeam::ArenaDtor(void* object) {
  AckResetBotarenaDefensiveTeam* _this = reinterpret_cast< AckResetBotarenaDefensiveTeam* >(object);
  (void)_this;
}
void AckResetBotarenaDefensiveTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckResetBotarenaDefensiveTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckResetBotarenaDefensiveTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckResetBotarenaDefensiveTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckResetBotarenaDefensiveTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckResetBotarenaDefensiveTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckResetBotarenaDefensiveTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckResetBotarenaDefensiveTeam)
  return target;
}

size_t AckResetBotarenaDefensiveTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckResetBotarenaDefensiveTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckResetBotarenaDefensiveTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckResetBotarenaDefensiveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const AckResetBotarenaDefensiveTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckResetBotarenaDefensiveTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckResetBotarenaDefensiveTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckResetBotarenaDefensiveTeam)
    MergeFrom(*source);
  }
}

void AckResetBotarenaDefensiveTeam::MergeFrom(const AckResetBotarenaDefensiveTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckResetBotarenaDefensiveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckResetBotarenaDefensiveTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckResetBotarenaDefensiveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckResetBotarenaDefensiveTeam::CopyFrom(const AckResetBotarenaDefensiveTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckResetBotarenaDefensiveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckResetBotarenaDefensiveTeam::IsInitialized() const {
  return true;
}

void AckResetBotarenaDefensiveTeam::InternalSwap(AckResetBotarenaDefensiveTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckResetBotarenaDefensiveTeam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[319]);
}

// ===================================================================

class ReqQuickConfigBotarenaDefensiveTeam::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqQuickConfigBotarenaDefensiveTeam* msg);
};

const ::KWMsg::Ident&
ReqQuickConfigBotarenaDefensiveTeam::_Internal::player_id(const ReqQuickConfigBotarenaDefensiveTeam* msg) {
  return *msg->player_id_;
}
void ReqQuickConfigBotarenaDefensiveTeam::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqQuickConfigBotarenaDefensiveTeam::ReqQuickConfigBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  witch_id_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqQuickConfigBotarenaDefensiveTeam)
}
ReqQuickConfigBotarenaDefensiveTeam::ReqQuickConfigBotarenaDefensiveTeam(const ReqQuickConfigBotarenaDefensiveTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      witch_id_list_(from.witch_id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqQuickConfigBotarenaDefensiveTeam)
}

void ReqQuickConfigBotarenaDefensiveTeam::SharedCtor() {
player_id_ = nullptr;
}

ReqQuickConfigBotarenaDefensiveTeam::~ReqQuickConfigBotarenaDefensiveTeam() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqQuickConfigBotarenaDefensiveTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqQuickConfigBotarenaDefensiveTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqQuickConfigBotarenaDefensiveTeam::ArenaDtor(void* object) {
  ReqQuickConfigBotarenaDefensiveTeam* _this = reinterpret_cast< ReqQuickConfigBotarenaDefensiveTeam* >(object);
  (void)_this;
}
void ReqQuickConfigBotarenaDefensiveTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqQuickConfigBotarenaDefensiveTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqQuickConfigBotarenaDefensiveTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqQuickConfigBotarenaDefensiveTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_list_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqQuickConfigBotarenaDefensiveTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes witch_id_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_witch_id_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqQuickConfigBotarenaDefensiveTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqQuickConfigBotarenaDefensiveTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated bytes witch_id_list = 2;
  for (int i = 0, n = this->_internal_witch_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_witch_id_list(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqQuickConfigBotarenaDefensiveTeam)
  return target;
}

size_t ReqQuickConfigBotarenaDefensiveTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqQuickConfigBotarenaDefensiveTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes witch_id_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(witch_id_list_.size());
  for (int i = 0, n = witch_id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      witch_id_list_.Get(i));
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqQuickConfigBotarenaDefensiveTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqQuickConfigBotarenaDefensiveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqQuickConfigBotarenaDefensiveTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqQuickConfigBotarenaDefensiveTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqQuickConfigBotarenaDefensiveTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqQuickConfigBotarenaDefensiveTeam)
    MergeFrom(*source);
  }
}

void ReqQuickConfigBotarenaDefensiveTeam::MergeFrom(const ReqQuickConfigBotarenaDefensiveTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqQuickConfigBotarenaDefensiveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  witch_id_list_.MergeFrom(from.witch_id_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqQuickConfigBotarenaDefensiveTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqQuickConfigBotarenaDefensiveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqQuickConfigBotarenaDefensiveTeam::CopyFrom(const ReqQuickConfigBotarenaDefensiveTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqQuickConfigBotarenaDefensiveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqQuickConfigBotarenaDefensiveTeam::IsInitialized() const {
  return true;
}

void ReqQuickConfigBotarenaDefensiveTeam::InternalSwap(ReqQuickConfigBotarenaDefensiveTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  witch_id_list_.InternalSwap(&other->witch_id_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqQuickConfigBotarenaDefensiveTeam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[320]);
}

// ===================================================================

class AckQuickConfigBotarenaDefensiveTeam::_Internal {
 public:
};

AckQuickConfigBotarenaDefensiveTeam::AckQuickConfigBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  witch_id_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckQuickConfigBotarenaDefensiveTeam)
}
AckQuickConfigBotarenaDefensiveTeam::AckQuickConfigBotarenaDefensiveTeam(const AckQuickConfigBotarenaDefensiveTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      witch_id_list_(from.witch_id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckQuickConfigBotarenaDefensiveTeam)
}

void AckQuickConfigBotarenaDefensiveTeam::SharedCtor() {
event_code_ = 0;
}

AckQuickConfigBotarenaDefensiveTeam::~AckQuickConfigBotarenaDefensiveTeam() {
  // @@protoc_insertion_point(destructor:KWMsg.AckQuickConfigBotarenaDefensiveTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckQuickConfigBotarenaDefensiveTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckQuickConfigBotarenaDefensiveTeam::ArenaDtor(void* object) {
  AckQuickConfigBotarenaDefensiveTeam* _this = reinterpret_cast< AckQuickConfigBotarenaDefensiveTeam* >(object);
  (void)_this;
}
void AckQuickConfigBotarenaDefensiveTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckQuickConfigBotarenaDefensiveTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckQuickConfigBotarenaDefensiveTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckQuickConfigBotarenaDefensiveTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_list_.Clear();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckQuickConfigBotarenaDefensiveTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // repeated bytes witch_id_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_witch_id_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckQuickConfigBotarenaDefensiveTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckQuickConfigBotarenaDefensiveTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // repeated bytes witch_id_list = 2;
  for (int i = 0, n = this->_internal_witch_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_witch_id_list(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckQuickConfigBotarenaDefensiveTeam)
  return target;
}

size_t AckQuickConfigBotarenaDefensiveTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckQuickConfigBotarenaDefensiveTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes witch_id_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(witch_id_list_.size());
  for (int i = 0, n = witch_id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      witch_id_list_.Get(i));
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckQuickConfigBotarenaDefensiveTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckQuickConfigBotarenaDefensiveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const AckQuickConfigBotarenaDefensiveTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckQuickConfigBotarenaDefensiveTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckQuickConfigBotarenaDefensiveTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckQuickConfigBotarenaDefensiveTeam)
    MergeFrom(*source);
  }
}

void AckQuickConfigBotarenaDefensiveTeam::MergeFrom(const AckQuickConfigBotarenaDefensiveTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckQuickConfigBotarenaDefensiveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  witch_id_list_.MergeFrom(from.witch_id_list_);
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckQuickConfigBotarenaDefensiveTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckQuickConfigBotarenaDefensiveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckQuickConfigBotarenaDefensiveTeam::CopyFrom(const AckQuickConfigBotarenaDefensiveTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckQuickConfigBotarenaDefensiveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckQuickConfigBotarenaDefensiveTeam::IsInitialized() const {
  return true;
}

void AckQuickConfigBotarenaDefensiveTeam::InternalSwap(AckQuickConfigBotarenaDefensiveTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  witch_id_list_.InternalSwap(&other->witch_id_list_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckQuickConfigBotarenaDefensiveTeam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[321]);
}

// ===================================================================

class ReqBuyShabowToken::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBuyShabowToken* msg);
};

const ::KWMsg::Ident&
ReqBuyShabowToken::_Internal::player_id(const ReqBuyShabowToken* msg) {
  return *msg->player_id_;
}
void ReqBuyShabowToken::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqBuyShabowToken::ReqBuyShabowToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBuyShabowToken)
}
ReqBuyShabowToken::ReqBuyShabowToken(const ReqBuyShabowToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBuyShabowToken)
}

void ReqBuyShabowToken::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(count_));
}

ReqBuyShabowToken::~ReqBuyShabowToken() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBuyShabowToken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBuyShabowToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqBuyShabowToken::ArenaDtor(void* object) {
  ReqBuyShabowToken* _this = reinterpret_cast< ReqBuyShabowToken* >(object);
  (void)_this;
}
void ReqBuyShabowToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBuyShabowToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBuyShabowToken::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBuyShabowToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBuyShabowToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBuyShabowToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBuyShabowToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBuyShabowToken)
  return target;
}

size_t ReqBuyShabowToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBuyShabowToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBuyShabowToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBuyShabowToken)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBuyShabowToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBuyShabowToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBuyShabowToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBuyShabowToken)
    MergeFrom(*source);
  }
}

void ReqBuyShabowToken::MergeFrom(const ReqBuyShabowToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBuyShabowToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ReqBuyShabowToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBuyShabowToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuyShabowToken::CopyFrom(const ReqBuyShabowToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBuyShabowToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuyShabowToken::IsInitialized() const {
  return true;
}

void ReqBuyShabowToken::InternalSwap(ReqBuyShabowToken* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqBuyShabowToken, count_)
      + sizeof(ReqBuyShabowToken::count_)
      - PROTOBUF_FIELD_OFFSET(ReqBuyShabowToken, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBuyShabowToken::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[322]);
}

// ===================================================================

class AckBuyShabowToken::_Internal {
 public:
};

AckBuyShabowToken::AckBuyShabowToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBuyShabowToken)
}
AckBuyShabowToken::AckBuyShabowToken(const AckBuyShabowToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBuyShabowToken)
}

void AckBuyShabowToken::SharedCtor() {
event_code_ = 0;
}

AckBuyShabowToken::~AckBuyShabowToken() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBuyShabowToken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBuyShabowToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckBuyShabowToken::ArenaDtor(void* object) {
  AckBuyShabowToken* _this = reinterpret_cast< AckBuyShabowToken* >(object);
  (void)_this;
}
void AckBuyShabowToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBuyShabowToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBuyShabowToken::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBuyShabowToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBuyShabowToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBuyShabowToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBuyShabowToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBuyShabowToken)
  return target;
}

size_t AckBuyShabowToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBuyShabowToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBuyShabowToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBuyShabowToken)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBuyShabowToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBuyShabowToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBuyShabowToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBuyShabowToken)
    MergeFrom(*source);
  }
}

void AckBuyShabowToken::MergeFrom(const AckBuyShabowToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBuyShabowToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckBuyShabowToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBuyShabowToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBuyShabowToken::CopyFrom(const AckBuyShabowToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBuyShabowToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBuyShabowToken::IsInitialized() const {
  return true;
}

void AckBuyShabowToken::InternalSwap(AckBuyShabowToken* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBuyShabowToken::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[323]);
}

// ===================================================================

class BotArenaReplayItem::_Internal {
 public:
  static const ::KWMsg::Ident& id(const BotArenaReplayItem* msg);
  static const ::KWMsg::PlayerInfo& player_info(const BotArenaReplayItem* msg);
  static const ::KWMsg::RewardInfo& reward(const BotArenaReplayItem* msg);
};

const ::KWMsg::Ident&
BotArenaReplayItem::_Internal::id(const BotArenaReplayItem* msg) {
  return *msg->id_;
}
const ::KWMsg::PlayerInfo&
BotArenaReplayItem::_Internal::player_info(const BotArenaReplayItem* msg) {
  return *msg->entity_.player_info_;
}
const ::KWMsg::RewardInfo&
BotArenaReplayItem::_Internal::reward(const BotArenaReplayItem* msg) {
  return *msg->reward_;
}
void BotArenaReplayItem::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void BotArenaReplayItem::set_allocated_player_info(::KWMsg::PlayerInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_entity();
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::PlayerInfo>::GetOwningArena(player_info);
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    set_has_player_info();
    entity_.player_info_ = player_info;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BotArenaReplayItem.player_info)
}
BotArenaReplayItem::BotArenaReplayItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BotArenaReplayItem)
}
BotArenaReplayItem::BotArenaReplayItem(const BotArenaReplayItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::KWMsg::Ident(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_reward()) {
    reward_ = new ::KWMsg::RewardInfo(*from.reward_);
  } else {
    reward_ = nullptr;
  }
  ::memcpy(&create_ts_, &from.create_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_counter_attack_) -
    reinterpret_cast<char*>(&create_ts_)) + sizeof(is_counter_attack_));
  clear_has_entity();
  switch (from.entity_case()) {
    case kPlayerInfo: {
      _internal_mutable_player_info()->::KWMsg::PlayerInfo::MergeFrom(from._internal_player_info());
      break;
    }
    case kRobotId: {
      _internal_set_robot_id(from._internal_robot_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.BotArenaReplayItem)
}

void BotArenaReplayItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_counter_attack_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_counter_attack_));
clear_has_entity();
}

BotArenaReplayItem::~BotArenaReplayItem() {
  // @@protoc_insertion_point(destructor:KWMsg.BotArenaReplayItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BotArenaReplayItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete reward_;
  if (has_entity()) {
    clear_entity();
  }
}

void BotArenaReplayItem::ArenaDtor(void* object) {
  BotArenaReplayItem* _this = reinterpret_cast< BotArenaReplayItem* >(object);
  (void)_this;
}
void BotArenaReplayItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BotArenaReplayItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BotArenaReplayItem::clear_entity() {
// @@protoc_insertion_point(one_of_clear_start:KWMsg.BotArenaReplayItem)
  switch (entity_case()) {
    case kPlayerInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete entity_.player_info_;
      }
      break;
    }
    case kRobotId: {
      entity_.robot_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTITY_NOT_SET;
}


void BotArenaReplayItem::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BotArenaReplayItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
  ::memset(&create_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_counter_attack_) -
      reinterpret_cast<char*>(&create_ts_)) + sizeof(is_counter_attack_));
  clear_entity();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BotArenaReplayItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.PlayerInfo player_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes robot_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.RewardInfo reward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 create_ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          create_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BotarenaReplayResult result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::KWMsg::BotarenaReplayResult>(val));
        } else goto handle_unusual;
        continue;
      // bool is_counter_attack = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_counter_attack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BotArenaReplayItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BotArenaReplayItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .KWMsg.PlayerInfo player_info = 2;
  if (_internal_has_player_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_info(this), target, stream);
  }

  // bytes robot_id = 3;
  if (_internal_has_robot_id()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_robot_id(), target);
  }

  // .KWMsg.RewardInfo reward = 4;
  if (this->has_reward()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reward(this), target, stream);
  }

  // int32 create_ts = 5;
  if (this->create_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_create_ts(), target);
  }

  // .KWMsg.BotarenaReplayResult result = 6;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_result(), target);
  }

  // bool is_counter_attack = 7;
  if (this->is_counter_attack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_counter_attack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BotArenaReplayItem)
  return target;
}

size_t BotArenaReplayItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BotArenaReplayItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .KWMsg.RewardInfo reward = 4;
  if (this->has_reward()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reward_);
  }

  // int32 create_ts = 5;
  if (this->create_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_create_ts());
  }

  // .KWMsg.BotarenaReplayResult result = 6;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  // bool is_counter_attack = 7;
  if (this->is_counter_attack() != 0) {
    total_size += 1 + 1;
  }

  switch (entity_case()) {
    // .KWMsg.PlayerInfo player_info = 2;
    case kPlayerInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.player_info_);
      break;
    }
    // bytes robot_id = 3;
    case kRobotId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_robot_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BotArenaReplayItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BotArenaReplayItem)
  GOOGLE_DCHECK_NE(&from, this);
  const BotArenaReplayItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BotArenaReplayItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BotArenaReplayItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BotArenaReplayItem)
    MergeFrom(*source);
  }
}

void BotArenaReplayItem::MergeFrom(const BotArenaReplayItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BotArenaReplayItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::KWMsg::Ident::MergeFrom(from._internal_id());
  }
  if (from.has_reward()) {
    _internal_mutable_reward()->::KWMsg::RewardInfo::MergeFrom(from._internal_reward());
  }
  if (from.create_ts() != 0) {
    _internal_set_create_ts(from._internal_create_ts());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.is_counter_attack() != 0) {
    _internal_set_is_counter_attack(from._internal_is_counter_attack());
  }
  switch (from.entity_case()) {
    case kPlayerInfo: {
      _internal_mutable_player_info()->::KWMsg::PlayerInfo::MergeFrom(from._internal_player_info());
      break;
    }
    case kRobotId: {
      _internal_set_robot_id(from._internal_robot_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
}

void BotArenaReplayItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BotArenaReplayItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotArenaReplayItem::CopyFrom(const BotArenaReplayItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BotArenaReplayItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotArenaReplayItem::IsInitialized() const {
  return true;
}

void BotArenaReplayItem::InternalSwap(BotArenaReplayItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BotArenaReplayItem, is_counter_attack_)
      + sizeof(BotArenaReplayItem::is_counter_attack_)
      - PROTOBUF_FIELD_OFFSET(BotArenaReplayItem, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(entity_, other->entity_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BotArenaReplayItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[324]);
}

// ===================================================================

class BotArenaReplayList::_Internal {
 public:
};

BotArenaReplayList::BotArenaReplayList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BotArenaReplayList)
}
BotArenaReplayList::BotArenaReplayList(const BotArenaReplayList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.BotArenaReplayList)
}

void BotArenaReplayList::SharedCtor() {
}

BotArenaReplayList::~BotArenaReplayList() {
  // @@protoc_insertion_point(destructor:KWMsg.BotArenaReplayList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BotArenaReplayList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BotArenaReplayList::ArenaDtor(void* object) {
  BotArenaReplayList* _this = reinterpret_cast< BotArenaReplayList* >(object);
  (void)_this;
}
void BotArenaReplayList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BotArenaReplayList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BotArenaReplayList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BotArenaReplayList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BotArenaReplayList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.BotArenaReplayItem list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BotArenaReplayList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BotArenaReplayList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.BotArenaReplayItem list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BotArenaReplayList)
  return target;
}

size_t BotArenaReplayList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BotArenaReplayList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BotArenaReplayItem list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BotArenaReplayList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BotArenaReplayList)
  GOOGLE_DCHECK_NE(&from, this);
  const BotArenaReplayList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BotArenaReplayList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BotArenaReplayList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BotArenaReplayList)
    MergeFrom(*source);
  }
}

void BotArenaReplayList::MergeFrom(const BotArenaReplayList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BotArenaReplayList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void BotArenaReplayList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BotArenaReplayList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotArenaReplayList::CopyFrom(const BotArenaReplayList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BotArenaReplayList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotArenaReplayList::IsInitialized() const {
  return true;
}

void BotArenaReplayList::InternalSwap(BotArenaReplayList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BotArenaReplayList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[325]);
}

// ===================================================================

class ReqGetBotArenaReplayList::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqGetBotArenaReplayList* msg);
};

const ::KWMsg::Ident&
ReqGetBotArenaReplayList::_Internal::player_id(const ReqGetBotArenaReplayList* msg) {
  return *msg->player_id_;
}
void ReqGetBotArenaReplayList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqGetBotArenaReplayList::ReqGetBotArenaReplayList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqGetBotArenaReplayList)
}
ReqGetBotArenaReplayList::ReqGetBotArenaReplayList(const ReqGetBotArenaReplayList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqGetBotArenaReplayList)
}

void ReqGetBotArenaReplayList::SharedCtor() {
player_id_ = nullptr;
}

ReqGetBotArenaReplayList::~ReqGetBotArenaReplayList() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqGetBotArenaReplayList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqGetBotArenaReplayList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqGetBotArenaReplayList::ArenaDtor(void* object) {
  ReqGetBotArenaReplayList* _this = reinterpret_cast< ReqGetBotArenaReplayList* >(object);
  (void)_this;
}
void ReqGetBotArenaReplayList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetBotArenaReplayList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetBotArenaReplayList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqGetBotArenaReplayList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetBotArenaReplayList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetBotArenaReplayList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqGetBotArenaReplayList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqGetBotArenaReplayList)
  return target;
}

size_t ReqGetBotArenaReplayList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqGetBotArenaReplayList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetBotArenaReplayList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqGetBotArenaReplayList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetBotArenaReplayList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetBotArenaReplayList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqGetBotArenaReplayList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqGetBotArenaReplayList)
    MergeFrom(*source);
  }
}

void ReqGetBotArenaReplayList::MergeFrom(const ReqGetBotArenaReplayList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqGetBotArenaReplayList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqGetBotArenaReplayList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqGetBotArenaReplayList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetBotArenaReplayList::CopyFrom(const ReqGetBotArenaReplayList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqGetBotArenaReplayList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetBotArenaReplayList::IsInitialized() const {
  return true;
}

void ReqGetBotArenaReplayList::InternalSwap(ReqGetBotArenaReplayList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetBotArenaReplayList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[326]);
}

// ===================================================================

class AckGetBotArenaReplayList::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AckGetBotArenaReplayList* msg);
};

const ::KWMsg::Ident&
AckGetBotArenaReplayList::_Internal::player_id(const AckGetBotArenaReplayList* msg) {
  return *msg->player_id_;
}
void AckGetBotArenaReplayList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AckGetBotArenaReplayList::AckGetBotArenaReplayList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  replay_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckGetBotArenaReplayList)
}
AckGetBotArenaReplayList::AckGetBotArenaReplayList(const AckGetBotArenaReplayList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      replay_list_(from.replay_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckGetBotArenaReplayList)
}

void AckGetBotArenaReplayList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(event_code_));
}

AckGetBotArenaReplayList::~AckGetBotArenaReplayList() {
  // @@protoc_insertion_point(destructor:KWMsg.AckGetBotArenaReplayList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckGetBotArenaReplayList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void AckGetBotArenaReplayList::ArenaDtor(void* object) {
  AckGetBotArenaReplayList* _this = reinterpret_cast< AckGetBotArenaReplayList* >(object);
  (void)_this;
}
void AckGetBotArenaReplayList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckGetBotArenaReplayList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckGetBotArenaReplayList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckGetBotArenaReplayList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replay_list_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckGetBotArenaReplayList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BotArenaReplayItem replay_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replay_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckGetBotArenaReplayList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckGetBotArenaReplayList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  // repeated .KWMsg.BotArenaReplayItem replay_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_replay_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_replay_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckGetBotArenaReplayList)
  return target;
}

size_t AckGetBotArenaReplayList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckGetBotArenaReplayList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BotArenaReplayItem replay_list = 3;
  total_size += 1UL * this->_internal_replay_list_size();
  for (const auto& msg : this->replay_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckGetBotArenaReplayList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckGetBotArenaReplayList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetBotArenaReplayList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckGetBotArenaReplayList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckGetBotArenaReplayList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckGetBotArenaReplayList)
    MergeFrom(*source);
  }
}

void AckGetBotArenaReplayList::MergeFrom(const AckGetBotArenaReplayList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckGetBotArenaReplayList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replay_list_.MergeFrom(from.replay_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckGetBotArenaReplayList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckGetBotArenaReplayList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetBotArenaReplayList::CopyFrom(const AckGetBotArenaReplayList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckGetBotArenaReplayList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetBotArenaReplayList::IsInitialized() const {
  return true;
}

void AckGetBotArenaReplayList::InternalSwap(AckGetBotArenaReplayList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  replay_list_.InternalSwap(&other->replay_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckGetBotArenaReplayList, event_code_)
      + sizeof(AckGetBotArenaReplayList::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckGetBotArenaReplayList, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckGetBotArenaReplayList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[327]);
}

// ===================================================================

class ReqReplayBotArenaBattle::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqReplayBotArenaBattle* msg);
  static const ::KWMsg::Ident& replay_id(const ReqReplayBotArenaBattle* msg);
};

const ::KWMsg::Ident&
ReqReplayBotArenaBattle::_Internal::player_id(const ReqReplayBotArenaBattle* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqReplayBotArenaBattle::_Internal::replay_id(const ReqReplayBotArenaBattle* msg) {
  return *msg->replay_id_;
}
void ReqReplayBotArenaBattle::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqReplayBotArenaBattle::clear_replay_id() {
  if (GetArenaForAllocation() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
}
ReqReplayBotArenaBattle::ReqReplayBotArenaBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqReplayBotArenaBattle)
}
ReqReplayBotArenaBattle::ReqReplayBotArenaBattle(const ReqReplayBotArenaBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_replay_id()) {
    replay_id_ = new ::KWMsg::Ident(*from.replay_id_);
  } else {
    replay_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqReplayBotArenaBattle)
}

void ReqReplayBotArenaBattle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replay_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(replay_id_));
}

ReqReplayBotArenaBattle::~ReqReplayBotArenaBattle() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqReplayBotArenaBattle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqReplayBotArenaBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete replay_id_;
}

void ReqReplayBotArenaBattle::ArenaDtor(void* object) {
  ReqReplayBotArenaBattle* _this = reinterpret_cast< ReqReplayBotArenaBattle* >(object);
  (void)_this;
}
void ReqReplayBotArenaBattle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqReplayBotArenaBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqReplayBotArenaBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqReplayBotArenaBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqReplayBotArenaBattle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident replay_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqReplayBotArenaBattle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqReplayBotArenaBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident replay_id = 2;
  if (this->has_replay_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::replay_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqReplayBotArenaBattle)
  return target;
}

size_t ReqReplayBotArenaBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqReplayBotArenaBattle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident replay_id = 2;
  if (this->has_replay_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replay_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqReplayBotArenaBattle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqReplayBotArenaBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqReplayBotArenaBattle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqReplayBotArenaBattle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqReplayBotArenaBattle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqReplayBotArenaBattle)
    MergeFrom(*source);
  }
}

void ReqReplayBotArenaBattle::MergeFrom(const ReqReplayBotArenaBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqReplayBotArenaBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_replay_id()) {
    _internal_mutable_replay_id()->::KWMsg::Ident::MergeFrom(from._internal_replay_id());
  }
}

void ReqReplayBotArenaBattle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqReplayBotArenaBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqReplayBotArenaBattle::CopyFrom(const ReqReplayBotArenaBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqReplayBotArenaBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqReplayBotArenaBattle::IsInitialized() const {
  return true;
}

void ReqReplayBotArenaBattle::InternalSwap(ReqReplayBotArenaBattle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqReplayBotArenaBattle, replay_id_)
      + sizeof(ReqReplayBotArenaBattle::replay_id_)
      - PROTOBUF_FIELD_OFFSET(ReqReplayBotArenaBattle, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqReplayBotArenaBattle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[328]);
}

// ===================================================================

class AckReplayBotArenaBattle::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AckReplayBotArenaBattle* msg);
  static const ::KWMsg::Ident& replay_id(const AckReplayBotArenaBattle* msg);
};

const ::KWMsg::Ident&
AckReplayBotArenaBattle::_Internal::player_id(const AckReplayBotArenaBattle* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
AckReplayBotArenaBattle::_Internal::replay_id(const AckReplayBotArenaBattle* msg) {
  return *msg->replay_id_;
}
void AckReplayBotArenaBattle::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void AckReplayBotArenaBattle::clear_replay_id() {
  if (GetArenaForAllocation() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
}
AckReplayBotArenaBattle::AckReplayBotArenaBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckReplayBotArenaBattle)
}
AckReplayBotArenaBattle::AckReplayBotArenaBattle(const AckReplayBotArenaBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_replay_id()) {
    replay_id_ = new ::KWMsg::Ident(*from.replay_id_);
  } else {
    replay_id_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckReplayBotArenaBattle)
}

void AckReplayBotArenaBattle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(event_code_));
}

AckReplayBotArenaBattle::~AckReplayBotArenaBattle() {
  // @@protoc_insertion_point(destructor:KWMsg.AckReplayBotArenaBattle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckReplayBotArenaBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete replay_id_;
}

void AckReplayBotArenaBattle::ArenaDtor(void* object) {
  AckReplayBotArenaBattle* _this = reinterpret_cast< AckReplayBotArenaBattle* >(object);
  (void)_this;
}
void AckReplayBotArenaBattle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckReplayBotArenaBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckReplayBotArenaBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckReplayBotArenaBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckReplayBotArenaBattle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident replay_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckReplayBotArenaBattle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckReplayBotArenaBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident replay_id = 3;
  if (this->has_replay_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::replay_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckReplayBotArenaBattle)
  return target;
}

size_t AckReplayBotArenaBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckReplayBotArenaBattle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident replay_id = 3;
  if (this->has_replay_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replay_id_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckReplayBotArenaBattle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckReplayBotArenaBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const AckReplayBotArenaBattle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckReplayBotArenaBattle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckReplayBotArenaBattle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckReplayBotArenaBattle)
    MergeFrom(*source);
  }
}

void AckReplayBotArenaBattle::MergeFrom(const AckReplayBotArenaBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckReplayBotArenaBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_replay_id()) {
    _internal_mutable_replay_id()->::KWMsg::Ident::MergeFrom(from._internal_replay_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckReplayBotArenaBattle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckReplayBotArenaBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReplayBotArenaBattle::CopyFrom(const AckReplayBotArenaBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckReplayBotArenaBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReplayBotArenaBattle::IsInitialized() const {
  return true;
}

void AckReplayBotArenaBattle::InternalSwap(AckReplayBotArenaBattle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckReplayBotArenaBattle, event_code_)
      + sizeof(AckReplayBotArenaBattle::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckReplayBotArenaBattle, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckReplayBotArenaBattle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[329]);
}

// ===================================================================

class ShopReceipt::_Internal {
 public:
};

ShopReceipt::ShopReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ShopReceipt)
}
ShopReceipt::ShopReceipt(const ShopReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_id().empty()) {
    product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_id(), 
      GetArenaForAllocation());
  }
  shop_goods_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shop_goods_id().empty()) {
    shop_goods_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shop_goods_id(), 
      GetArenaForAllocation());
  }
  shop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shop_id().empty()) {
    shop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shop_id(), 
      GetArenaForAllocation());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ShopReceipt)
}

void ShopReceipt::SharedCtor() {
product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shop_goods_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
count_ = int64_t{0};
}

ShopReceipt::~ShopReceipt() {
  // @@protoc_insertion_point(destructor:KWMsg.ShopReceipt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShopReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  product_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shop_goods_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShopReceipt::ArenaDtor(void* object) {
  ShopReceipt* _this = reinterpret_cast< ShopReceipt* >(object);
  (void)_this;
}
void ShopReceipt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShopReceipt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShopReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ShopReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_id_.ClearToEmpty();
  shop_goods_id_.ClearToEmpty();
  shop_id_.ClearToEmpty();
  count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShopReceipt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes product_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_product_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shop_goods_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_shop_goods_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shop_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_shop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShopReceipt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ShopReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes product_id = 1;
  if (!this->product_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_product_id(), target);
  }

  // bytes shop_goods_id = 2;
  if (!this->shop_goods_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_shop_goods_id(), target);
  }

  // bytes shop_id = 3;
  if (!this->shop_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_shop_id(), target);
  }

  // int64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ShopReceipt)
  return target;
}

size_t ShopReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ShopReceipt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes product_id = 1;
  if (!this->product_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_product_id());
  }

  // bytes shop_goods_id = 2;
  if (!this->shop_goods_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shop_goods_id());
  }

  // bytes shop_id = 3;
  if (!this->shop_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shop_id());
  }

  // int64 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShopReceipt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ShopReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  const ShopReceipt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShopReceipt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ShopReceipt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ShopReceipt)
    MergeFrom(*source);
  }
}

void ShopReceipt::MergeFrom(const ShopReceipt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ShopReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.product_id().empty()) {
    _internal_set_product_id(from._internal_product_id());
  }
  if (!from.shop_goods_id().empty()) {
    _internal_set_shop_goods_id(from._internal_shop_goods_id());
  }
  if (!from.shop_id().empty()) {
    _internal_set_shop_id(from._internal_shop_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ShopReceipt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ShopReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopReceipt::CopyFrom(const ShopReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ShopReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopReceipt::IsInitialized() const {
  return true;
}

void ShopReceipt::InternalSwap(ShopReceipt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_id_, GetArenaForAllocation(),
      &other->product_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shop_goods_id_, GetArenaForAllocation(),
      &other->shop_goods_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shop_id_, GetArenaForAllocation(),
      &other->shop_id_, other->GetArenaForAllocation()
  );
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShopReceipt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[330]);
}

// ===================================================================

class DelPlayerShopReceipts::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const DelPlayerShopReceipts* msg);
};

const ::KWMsg::Ident&
DelPlayerShopReceipts::_Internal::player_id(const DelPlayerShopReceipts* msg) {
  return *msg->player_id_;
}
void DelPlayerShopReceipts::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
DelPlayerShopReceipts::DelPlayerShopReceipts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.DelPlayerShopReceipts)
}
DelPlayerShopReceipts::DelPlayerShopReceipts(const DelPlayerShopReceipts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shop_id().empty()) {
    shop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shop_id(), 
      GetArenaForAllocation());
  }
  shop_goods_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shop_goods_id().empty()) {
    shop_goods_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shop_goods_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.DelPlayerShopReceipts)
}

void DelPlayerShopReceipts::SharedCtor() {
shop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shop_goods_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

DelPlayerShopReceipts::~DelPlayerShopReceipts() {
  // @@protoc_insertion_point(destructor:KWMsg.DelPlayerShopReceipts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelPlayerShopReceipts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  shop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shop_goods_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void DelPlayerShopReceipts::ArenaDtor(void* object) {
  DelPlayerShopReceipts* _this = reinterpret_cast< DelPlayerShopReceipts* >(object);
  (void)_this;
}
void DelPlayerShopReceipts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelPlayerShopReceipts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelPlayerShopReceipts::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.DelPlayerShopReceipts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shop_id_.ClearToEmpty();
  shop_goods_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelPlayerShopReceipts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_shop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shop_goods_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_shop_goods_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelPlayerShopReceipts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.DelPlayerShopReceipts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes shop_id = 2;
  if (!this->shop_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_shop_id(), target);
  }

  // bytes shop_goods_id = 3;
  if (!this->shop_goods_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_shop_goods_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.DelPlayerShopReceipts)
  return target;
}

size_t DelPlayerShopReceipts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.DelPlayerShopReceipts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes shop_id = 2;
  if (!this->shop_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shop_id());
  }

  // bytes shop_goods_id = 3;
  if (!this->shop_goods_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shop_goods_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelPlayerShopReceipts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.DelPlayerShopReceipts)
  GOOGLE_DCHECK_NE(&from, this);
  const DelPlayerShopReceipts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelPlayerShopReceipts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.DelPlayerShopReceipts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.DelPlayerShopReceipts)
    MergeFrom(*source);
  }
}

void DelPlayerShopReceipts::MergeFrom(const DelPlayerShopReceipts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.DelPlayerShopReceipts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.shop_id().empty()) {
    _internal_set_shop_id(from._internal_shop_id());
  }
  if (!from.shop_goods_id().empty()) {
    _internal_set_shop_goods_id(from._internal_shop_goods_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void DelPlayerShopReceipts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.DelPlayerShopReceipts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelPlayerShopReceipts::CopyFrom(const DelPlayerShopReceipts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.DelPlayerShopReceipts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelPlayerShopReceipts::IsInitialized() const {
  return true;
}

void DelPlayerShopReceipts::InternalSwap(DelPlayerShopReceipts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shop_id_, GetArenaForAllocation(),
      &other->shop_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shop_goods_id_, GetArenaForAllocation(),
      &other->shop_goods_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelPlayerShopReceipts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[331]);
}

// ===================================================================

class UpdPlayerShopReceipt::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const UpdPlayerShopReceipt* msg);
  static const ::KWMsg::ShopReceipt& receipt(const UpdPlayerShopReceipt* msg);
};

const ::KWMsg::Ident&
UpdPlayerShopReceipt::_Internal::player_id(const UpdPlayerShopReceipt* msg) {
  return *msg->player_id_;
}
const ::KWMsg::ShopReceipt&
UpdPlayerShopReceipt::_Internal::receipt(const UpdPlayerShopReceipt* msg) {
  return *msg->receipt_;
}
void UpdPlayerShopReceipt::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
UpdPlayerShopReceipt::UpdPlayerShopReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.UpdPlayerShopReceipt)
}
UpdPlayerShopReceipt::UpdPlayerShopReceipt(const UpdPlayerShopReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shop_id().empty()) {
    shop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shop_id(), 
      GetArenaForAllocation());
  }
  shop_goods_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shop_goods_id().empty()) {
    shop_goods_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shop_goods_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_receipt()) {
    receipt_ = new ::KWMsg::ShopReceipt(*from.receipt_);
  } else {
    receipt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.UpdPlayerShopReceipt)
}

void UpdPlayerShopReceipt::SharedCtor() {
shop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shop_goods_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&receipt_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(receipt_));
}

UpdPlayerShopReceipt::~UpdPlayerShopReceipt() {
  // @@protoc_insertion_point(destructor:KWMsg.UpdPlayerShopReceipt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdPlayerShopReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  shop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shop_goods_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete receipt_;
}

void UpdPlayerShopReceipt::ArenaDtor(void* object) {
  UpdPlayerShopReceipt* _this = reinterpret_cast< UpdPlayerShopReceipt* >(object);
  (void)_this;
}
void UpdPlayerShopReceipt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdPlayerShopReceipt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdPlayerShopReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.UpdPlayerShopReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shop_id_.ClearToEmpty();
  shop_goods_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdPlayerShopReceipt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_shop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shop_goods_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_shop_goods_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ShopReceipt receipt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdPlayerShopReceipt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.UpdPlayerShopReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes shop_id = 2;
  if (!this->shop_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_shop_id(), target);
  }

  // bytes shop_goods_id = 3;
  if (!this->shop_goods_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_shop_goods_id(), target);
  }

  // .KWMsg.ShopReceipt receipt = 4;
  if (this->has_receipt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::receipt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.UpdPlayerShopReceipt)
  return target;
}

size_t UpdPlayerShopReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.UpdPlayerShopReceipt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes shop_id = 2;
  if (!this->shop_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shop_id());
  }

  // bytes shop_goods_id = 3;
  if (!this->shop_goods_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shop_goods_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.ShopReceipt receipt = 4;
  if (this->has_receipt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receipt_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdPlayerShopReceipt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.UpdPlayerShopReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdPlayerShopReceipt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdPlayerShopReceipt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.UpdPlayerShopReceipt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.UpdPlayerShopReceipt)
    MergeFrom(*source);
  }
}

void UpdPlayerShopReceipt::MergeFrom(const UpdPlayerShopReceipt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.UpdPlayerShopReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.shop_id().empty()) {
    _internal_set_shop_id(from._internal_shop_id());
  }
  if (!from.shop_goods_id().empty()) {
    _internal_set_shop_goods_id(from._internal_shop_goods_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_receipt()) {
    _internal_mutable_receipt()->::KWMsg::ShopReceipt::MergeFrom(from._internal_receipt());
  }
}

void UpdPlayerShopReceipt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.UpdPlayerShopReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdPlayerShopReceipt::CopyFrom(const UpdPlayerShopReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.UpdPlayerShopReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdPlayerShopReceipt::IsInitialized() const {
  return true;
}

void UpdPlayerShopReceipt::InternalSwap(UpdPlayerShopReceipt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shop_id_, GetArenaForAllocation(),
      &other->shop_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shop_goods_id_, GetArenaForAllocation(),
      &other->shop_goods_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdPlayerShopReceipt, receipt_)
      + sizeof(UpdPlayerShopReceipt::receipt_)
      - PROTOBUF_FIELD_OFFSET(UpdPlayerShopReceipt, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdPlayerShopReceipt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[332]);
}

// ===================================================================

class AddPlayerShopReceipt::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AddPlayerShopReceipt* msg);
  static const ::KWMsg::ShopReceipt& receipt(const AddPlayerShopReceipt* msg);
};

const ::KWMsg::Ident&
AddPlayerShopReceipt::_Internal::player_id(const AddPlayerShopReceipt* msg) {
  return *msg->player_id_;
}
const ::KWMsg::ShopReceipt&
AddPlayerShopReceipt::_Internal::receipt(const AddPlayerShopReceipt* msg) {
  return *msg->receipt_;
}
void AddPlayerShopReceipt::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AddPlayerShopReceipt::AddPlayerShopReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AddPlayerShopReceipt)
}
AddPlayerShopReceipt::AddPlayerShopReceipt(const AddPlayerShopReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shop_id().empty()) {
    shop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shop_id(), 
      GetArenaForAllocation());
  }
  shop_goods_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shop_goods_id().empty()) {
    shop_goods_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shop_goods_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_receipt()) {
    receipt_ = new ::KWMsg::ShopReceipt(*from.receipt_);
  } else {
    receipt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.AddPlayerShopReceipt)
}

void AddPlayerShopReceipt::SharedCtor() {
shop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shop_goods_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&receipt_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(receipt_));
}

AddPlayerShopReceipt::~AddPlayerShopReceipt() {
  // @@protoc_insertion_point(destructor:KWMsg.AddPlayerShopReceipt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPlayerShopReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  shop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shop_goods_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete receipt_;
}

void AddPlayerShopReceipt::ArenaDtor(void* object) {
  AddPlayerShopReceipt* _this = reinterpret_cast< AddPlayerShopReceipt* >(object);
  (void)_this;
}
void AddPlayerShopReceipt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPlayerShopReceipt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddPlayerShopReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AddPlayerShopReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shop_id_.ClearToEmpty();
  shop_goods_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPlayerShopReceipt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_shop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shop_goods_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_shop_goods_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ShopReceipt receipt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPlayerShopReceipt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AddPlayerShopReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes shop_id = 2;
  if (!this->shop_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_shop_id(), target);
  }

  // bytes shop_goods_id = 3;
  if (!this->shop_goods_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_shop_goods_id(), target);
  }

  // .KWMsg.ShopReceipt receipt = 4;
  if (this->has_receipt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::receipt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AddPlayerShopReceipt)
  return target;
}

size_t AddPlayerShopReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AddPlayerShopReceipt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes shop_id = 2;
  if (!this->shop_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shop_id());
  }

  // bytes shop_goods_id = 3;
  if (!this->shop_goods_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shop_goods_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.ShopReceipt receipt = 4;
  if (this->has_receipt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receipt_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPlayerShopReceipt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AddPlayerShopReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPlayerShopReceipt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPlayerShopReceipt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AddPlayerShopReceipt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AddPlayerShopReceipt)
    MergeFrom(*source);
  }
}

void AddPlayerShopReceipt::MergeFrom(const AddPlayerShopReceipt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AddPlayerShopReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.shop_id().empty()) {
    _internal_set_shop_id(from._internal_shop_id());
  }
  if (!from.shop_goods_id().empty()) {
    _internal_set_shop_goods_id(from._internal_shop_goods_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_receipt()) {
    _internal_mutable_receipt()->::KWMsg::ShopReceipt::MergeFrom(from._internal_receipt());
  }
}

void AddPlayerShopReceipt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AddPlayerShopReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPlayerShopReceipt::CopyFrom(const AddPlayerShopReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AddPlayerShopReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPlayerShopReceipt::IsInitialized() const {
  return true;
}

void AddPlayerShopReceipt::InternalSwap(AddPlayerShopReceipt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shop_id_, GetArenaForAllocation(),
      &other->shop_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shop_goods_id_, GetArenaForAllocation(),
      &other->shop_goods_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddPlayerShopReceipt, receipt_)
      + sizeof(AddPlayerShopReceipt::receipt_)
      - PROTOBUF_FIELD_OFFSET(AddPlayerShopReceipt, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPlayerShopReceipt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[333]);
}

// ===================================================================

class ReqGetShopProducts::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqGetShopProducts* msg);
};

const ::KWMsg::Ident&
ReqGetShopProducts::_Internal::player_id(const ReqGetShopProducts* msg) {
  return *msg->player_id_;
}
void ReqGetShopProducts::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqGetShopProducts::ReqGetShopProducts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqGetShopProducts)
}
ReqGetShopProducts::ReqGetShopProducts(const ReqGetShopProducts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shop_id().empty()) {
    shop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shop_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqGetShopProducts)
}

void ReqGetShopProducts::SharedCtor() {
shop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqGetShopProducts::~ReqGetShopProducts() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqGetShopProducts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqGetShopProducts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  shop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqGetShopProducts::ArenaDtor(void* object) {
  ReqGetShopProducts* _this = reinterpret_cast< ReqGetShopProducts* >(object);
  (void)_this;
}
void ReqGetShopProducts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetShopProducts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetShopProducts::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqGetShopProducts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shop_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetShopProducts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_shop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetShopProducts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqGetShopProducts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes shop_id = 2;
  if (!this->shop_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_shop_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqGetShopProducts)
  return target;
}

size_t ReqGetShopProducts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqGetShopProducts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes shop_id = 2;
  if (!this->shop_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shop_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetShopProducts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqGetShopProducts)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetShopProducts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetShopProducts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqGetShopProducts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqGetShopProducts)
    MergeFrom(*source);
  }
}

void ReqGetShopProducts::MergeFrom(const ReqGetShopProducts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqGetShopProducts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.shop_id().empty()) {
    _internal_set_shop_id(from._internal_shop_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqGetShopProducts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqGetShopProducts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetShopProducts::CopyFrom(const ReqGetShopProducts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqGetShopProducts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetShopProducts::IsInitialized() const {
  return true;
}

void ReqGetShopProducts::InternalSwap(ReqGetShopProducts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shop_id_, GetArenaForAllocation(),
      &other->shop_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetShopProducts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[334]);
}

// ===================================================================

class AckGetShopProducts::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AckGetShopProducts* msg);
};

const ::KWMsg::Ident&
AckGetShopProducts::_Internal::player_id(const AckGetShopProducts* msg) {
  return *msg->player_id_;
}
void AckGetShopProducts::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AckGetShopProducts::AckGetShopProducts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  products_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckGetShopProducts)
}
AckGetShopProducts::AckGetShopProducts(const AckGetShopProducts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      products_(from.products_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckGetShopProducts)
}

void AckGetShopProducts::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(event_code_));
}

AckGetShopProducts::~AckGetShopProducts() {
  // @@protoc_insertion_point(destructor:KWMsg.AckGetShopProducts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckGetShopProducts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void AckGetShopProducts::ArenaDtor(void* object) {
  AckGetShopProducts* _this = reinterpret_cast< AckGetShopProducts* >(object);
  (void)_this;
}
void AckGetShopProducts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckGetShopProducts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckGetShopProducts::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckGetShopProducts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  products_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckGetShopProducts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.ProductInfo products = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_products(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckGetShopProducts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckGetShopProducts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  // repeated .KWMsg.ProductInfo products = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_products_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_products(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckGetShopProducts)
  return target;
}

size_t AckGetShopProducts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckGetShopProducts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.ProductInfo products = 3;
  total_size += 1UL * this->_internal_products_size();
  for (const auto& msg : this->products_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckGetShopProducts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckGetShopProducts)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetShopProducts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckGetShopProducts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckGetShopProducts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckGetShopProducts)
    MergeFrom(*source);
  }
}

void AckGetShopProducts::MergeFrom(const AckGetShopProducts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckGetShopProducts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  products_.MergeFrom(from.products_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckGetShopProducts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckGetShopProducts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetShopProducts::CopyFrom(const AckGetShopProducts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckGetShopProducts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetShopProducts::IsInitialized() const {
  return true;
}

void AckGetShopProducts::InternalSwap(AckGetShopProducts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  products_.InternalSwap(&other->products_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckGetShopProducts, event_code_)
      + sizeof(AckGetShopProducts::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckGetShopProducts, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckGetShopProducts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[335]);
}

// ===================================================================

class ReqBuyProduct::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBuyProduct* msg);
};

const ::KWMsg::Ident&
ReqBuyProduct::_Internal::player_id(const ReqBuyProduct* msg) {
  return *msg->player_id_;
}
void ReqBuyProduct::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqBuyProduct::ReqBuyProduct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBuyProduct)
}
ReqBuyProduct::ReqBuyProduct(const ReqBuyProduct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_shop_id().empty()) {
    shop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shop_id(), 
      GetArenaForAllocation());
  }
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_id().empty()) {
    product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBuyProduct)
}

void ReqBuyProduct::SharedCtor() {
shop_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(count_));
}

ReqBuyProduct::~ReqBuyProduct() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBuyProduct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBuyProduct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  shop_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqBuyProduct::ArenaDtor(void* object) {
  ReqBuyProduct* _this = reinterpret_cast< ReqBuyProduct* >(object);
  (void)_this;
}
void ReqBuyProduct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBuyProduct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBuyProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBuyProduct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shop_id_.ClearToEmpty();
  product_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBuyProduct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_shop_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes product_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_product_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBuyProduct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBuyProduct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes shop_id = 2;
  if (!this->shop_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_shop_id(), target);
  }

  // bytes product_id = 3;
  if (!this->product_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_product_id(), target);
  }

  // int64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBuyProduct)
  return target;
}

size_t ReqBuyProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBuyProduct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes shop_id = 2;
  if (!this->shop_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_shop_id());
  }

  // bytes product_id = 3;
  if (!this->product_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_product_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int64 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBuyProduct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBuyProduct)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBuyProduct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBuyProduct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBuyProduct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBuyProduct)
    MergeFrom(*source);
  }
}

void ReqBuyProduct::MergeFrom(const ReqBuyProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBuyProduct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.shop_id().empty()) {
    _internal_set_shop_id(from._internal_shop_id());
  }
  if (!from.product_id().empty()) {
    _internal_set_product_id(from._internal_product_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ReqBuyProduct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBuyProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuyProduct::CopyFrom(const ReqBuyProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBuyProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuyProduct::IsInitialized() const {
  return true;
}

void ReqBuyProduct::InternalSwap(ReqBuyProduct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shop_id_, GetArenaForAllocation(),
      &other->shop_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_id_, GetArenaForAllocation(),
      &other->product_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqBuyProduct, count_)
      + sizeof(ReqBuyProduct::count_)
      - PROTOBUF_FIELD_OFFSET(ReqBuyProduct, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBuyProduct::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[336]);
}

// ===================================================================

class AckBuyProduct::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AckBuyProduct* msg);
  static const ::KWMsg::ProductInfo& product(const AckBuyProduct* msg);
};

const ::KWMsg::Ident&
AckBuyProduct::_Internal::player_id(const AckBuyProduct* msg) {
  return *msg->player_id_;
}
const ::KWMsg::ProductInfo&
AckBuyProduct::_Internal::product(const AckBuyProduct* msg) {
  return *msg->product_;
}
void AckBuyProduct::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AckBuyProduct::AckBuyProduct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBuyProduct)
}
AckBuyProduct::AckBuyProduct(const AckBuyProduct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_product()) {
    product_ = new ::KWMsg::ProductInfo(*from.product_);
  } else {
    product_ = nullptr;
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&count_)) + sizeof(event_code_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBuyProduct)
}

void AckBuyProduct::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(event_code_));
}

AckBuyProduct::~AckBuyProduct() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBuyProduct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBuyProduct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete product_;
}

void AckBuyProduct::ArenaDtor(void* object) {
  AckBuyProduct* _this = reinterpret_cast< AckBuyProduct* >(object);
  (void)_this;
}
void AckBuyProduct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBuyProduct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBuyProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBuyProduct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && product_ != nullptr) {
    delete product_;
  }
  product_ = nullptr;
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_code_) -
      reinterpret_cast<char*>(&count_)) + sizeof(event_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBuyProduct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ProductInfo product = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_product(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBuyProduct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBuyProduct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.ProductInfo product = 3;
  if (this->has_product()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::product(this), target, stream);
  }

  // int64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBuyProduct)
  return target;
}

size_t AckBuyProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBuyProduct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.ProductInfo product = 3;
  if (this->has_product()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *product_);
  }

  // int64 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBuyProduct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBuyProduct)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBuyProduct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBuyProduct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBuyProduct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBuyProduct)
    MergeFrom(*source);
  }
}

void AckBuyProduct::MergeFrom(const AckBuyProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBuyProduct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_product()) {
    _internal_mutable_product()->::KWMsg::ProductInfo::MergeFrom(from._internal_product());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckBuyProduct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBuyProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBuyProduct::CopyFrom(const AckBuyProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBuyProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBuyProduct::IsInitialized() const {
  return true;
}

void AckBuyProduct::InternalSwap(AckBuyProduct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckBuyProduct, event_code_)
      + sizeof(AckBuyProduct::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckBuyProduct, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBuyProduct::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[337]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace KWMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KWMsg::ProductPrice* Arena::CreateMaybeMessage< ::KWMsg::ProductPrice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ProductPrice >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ProductContent* Arena::CreateMaybeMessage< ::KWMsg::ProductContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ProductContent >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ProductInfo* Arena::CreateMaybeMessage< ::KWMsg::ProductInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ProductInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::RewardInfo* Arena::CreateMaybeMessage< ::KWMsg::RewardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::RewardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::WitchInfo* Arena::CreateMaybeMessage< ::KWMsg::WitchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::WitchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::GuildInfo* Arena::CreateMaybeMessage< ::KWMsg::GuildInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::GuildInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PlayerInfo* Arena::CreateMaybeMessage< ::KWMsg::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::DrawCardInfo* Arena::CreateMaybeMessage< ::KWMsg::DrawCardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::DrawCardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::RewardList* Arena::CreateMaybeMessage< ::KWMsg::RewardList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::RewardList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAckLagTest* Arena::CreateMaybeMessage< ::KWMsg::ReqAckLagTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAckLagTest >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAckHeartBeat* Arena::CreateMaybeMessage< ::KWMsg::ReqAckHeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAckHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqLeaveGameServer* Arena::CreateMaybeMessage< ::KWMsg::ReqLeaveGameServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqLeaveGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PlayerEntryInfo* Arena::CreateMaybeMessage< ::KWMsg::PlayerEntryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PlayerEntryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckPlayerEntryList* Arena::CreateMaybeMessage< ::KWMsg::AckPlayerEntryList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckPlayerEntryList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckPlayerLeaveList* Arena::CreateMaybeMessage< ::KWMsg::AckPlayerLeaveList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckPlayerLeaveList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckPlayerDataFinished* Arena::CreateMaybeMessage< ::KWMsg::AckPlayerDataFinished >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckPlayerDataFinished >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PosSyncUnit* Arena::CreateMaybeMessage< ::KWMsg::PosSyncUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PosSyncUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAckPlayerPosSync* Arena::CreateMaybeMessage< ::KWMsg::ReqAckPlayerPosSync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAckPlayerPosSync >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqSwapScene* Arena::CreateMaybeMessage< ::KWMsg::ReqSwapScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqSwapScene >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckSwapScene* Arena::CreateMaybeMessage< ::KWMsg::AckSwapScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckSwapScene >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckSwapSceneNotify* Arena::CreateMaybeMessage< ::KWMsg::AckSwapSceneNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckSwapSceneNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAckPlayerChat* Arena::CreateMaybeMessage< ::KWMsg::ReqAckPlayerChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAckPlayerChat >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCreateKcpObject* Arena::CreateMaybeMessage< ::KWMsg::ReqCreateKcpObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCreateKcpObject >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCreateKcpObject* Arena::CreateMaybeMessage< ::KWMsg::AckCreateKcpObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCreateKcpObject >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqEstablishKcpConnection* Arena::CreateMaybeMessage< ::KWMsg::ReqEstablishKcpConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqEstablishKcpConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckEstablishKcpConnection* Arena::CreateMaybeMessage< ::KWMsg::AckEstablishKcpConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckEstablishKcpConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqTryPushClientIntoQueueUp* Arena::CreateMaybeMessage< ::KWMsg::ReqTryPushClientIntoQueueUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqTryPushClientIntoQueueUp >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckPushClientIntoQueueUp* Arena::CreateMaybeMessage< ::KWMsg::AckPushClientIntoQueueUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckPushClientIntoQueueUp >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqQueueUpGetCurWorldSuitProxy* Arena::CreateMaybeMessage< ::KWMsg::ReqQueueUpGetCurWorldSuitProxy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqQueueUpGetCurWorldSuitProxy >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckQueueUpGetCurWorldSuitProxy* Arena::CreateMaybeMessage< ::KWMsg::AckQueueUpGetCurWorldSuitProxy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckQueueUpGetCurWorldSuitProxy >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqUpdatePlayerLastHeartbeatTS* Arena::CreateMaybeMessage< ::KWMsg::ReqUpdatePlayerLastHeartbeatTS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqUpdatePlayerLastHeartbeatTS >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncQueueUpUserCancelOperation* Arena::CreateMaybeMessage< ::KWMsg::SyncQueueUpUserCancelOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncQueueUpUserCancelOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncPlayerPropertiesCache* Arena::CreateMaybeMessage< ::KWMsg::SyncPlayerPropertiesCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncPlayerPropertiesCache >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::LoadPlayerPropertiesCache* Arena::CreateMaybeMessage< ::KWMsg::LoadPlayerPropertiesCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::LoadPlayerPropertiesCache >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::LoadPlayerRecordsCache* Arena::CreateMaybeMessage< ::KWMsg::LoadPlayerRecordsCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::LoadPlayerRecordsCache >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncPlayerRecordsCacheAdd* Arena::CreateMaybeMessage< ::KWMsg::SyncPlayerRecordsCacheAdd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncPlayerRecordsCacheAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncPlayerRecordsCacheUpdate* Arena::CreateMaybeMessage< ::KWMsg::SyncPlayerRecordsCacheUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncPlayerRecordsCacheUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncPlayerRecordsCacheDel* Arena::CreateMaybeMessage< ::KWMsg::SyncPlayerRecordsCacheDel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncPlayerRecordsCacheDel >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncPlayerRecordsCacheSwap* Arena::CreateMaybeMessage< ::KWMsg::SyncPlayerRecordsCacheSwap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncPlayerRecordsCacheSwap >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqTestBattle* Arena::CreateMaybeMessage< ::KWMsg::ReqTestBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqTestBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckTestBattle* Arena::CreateMaybeMessage< ::KWMsg::AckTestBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckTestBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCollectWitch* Arena::CreateMaybeMessage< ::KWMsg::ReqCollectWitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCollectWitch >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCollectWitch* Arena::CreateMaybeMessage< ::KWMsg::AckCollectWitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCollectWitch >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqInitPlayerName* Arena::CreateMaybeMessage< ::KWMsg::ReqInitPlayerName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqInitPlayerName >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckInitPlayerName* Arena::CreateMaybeMessage< ::KWMsg::AckInitPlayerName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckInitPlayerName >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqUpdateModule* Arena::CreateMaybeMessage< ::KWMsg::ReqUpdateModule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqUpdateModule >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckUpdateModule* Arena::CreateMaybeMessage< ::KWMsg::AckUpdateModule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckUpdateModule >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqChapterRewardTipOk* Arena::CreateMaybeMessage< ::KWMsg::ReqChapterRewardTipOk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqChapterRewardTipOk >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckChapterRewardTipOk* Arena::CreateMaybeMessage< ::KWMsg::AckChapterRewardTipOk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckChapterRewardTipOk >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCollegeDrama* Arena::CreateMaybeMessage< ::KWMsg::ReqCollegeDrama >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCollegeDrama >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCollegeDrama* Arena::CreateMaybeMessage< ::KWMsg::AckCollegeDrama >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCollegeDrama >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCollegeTaskAction* Arena::CreateMaybeMessage< ::KWMsg::ReqCollegeTaskAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCollegeTaskAction >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCollegeTaskAction* Arena::CreateMaybeMessage< ::KWMsg::AckCollegeTaskAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCollegeTaskAction >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCollegeTaskCountdown* Arena::CreateMaybeMessage< ::KWMsg::ReqCollegeTaskCountdown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCollegeTaskCountdown >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCollegeTaskCountdown* Arena::CreateMaybeMessage< ::KWMsg::AckCollegeTaskCountdown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCollegeTaskCountdown >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ExamQuestion* Arena::CreateMaybeMessage< ::KWMsg::ExamQuestion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ExamQuestion >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCollegeStartExam* Arena::CreateMaybeMessage< ::KWMsg::ReqCollegeStartExam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCollegeStartExam >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCollegeStartExam* Arena::CreateMaybeMessage< ::KWMsg::AckCollegeStartExam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCollegeStartExam >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCollegeAnswer* Arena::CreateMaybeMessage< ::KWMsg::ReqCollegeAnswer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCollegeAnswer >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCollegeAnswer* Arena::CreateMaybeMessage< ::KWMsg::AckCollegeAnswer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCollegeAnswer >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::CommonReward* Arena::CreateMaybeMessage< ::KWMsg::CommonReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::CommonReward >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCollegeReward* Arena::CreateMaybeMessage< ::KWMsg::ReqCollegeReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCollegeReward >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCollegeReward* Arena::CreateMaybeMessage< ::KWMsg::AckCollegeReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCollegeReward >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqTestSetCollegeExamStatus* Arena::CreateMaybeMessage< ::KWMsg::ReqTestSetCollegeExamStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqTestSetCollegeExamStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCollegeExamExit* Arena::CreateMaybeMessage< ::KWMsg::ReqCollegeExamExit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCollegeExamExit >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCollegeExamExit* Arena::CreateMaybeMessage< ::KWMsg::AckCollegeExamExit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCollegeExamExit >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqSetItem* Arena::CreateMaybeMessage< ::KWMsg::ReqSetItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqSetItem >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBattlePreparedInfo* Arena::CreateMaybeMessage< ::KWMsg::ReqBattlePreparedInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBattlePreparedInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BattleEntityInfo* Arena::CreateMaybeMessage< ::KWMsg::BattleEntityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BattleEntityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BattleWitchInfo* Arena::CreateMaybeMessage< ::KWMsg::BattleWitchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BattleWitchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBattlePreparedInfo* Arena::CreateMaybeMessage< ::KWMsg::AckBattlePreparedInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBattlePreparedInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBuyPower* Arena::CreateMaybeMessage< ::KWMsg::ReqBuyPower >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBuyPower >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBuyPower* Arena::CreateMaybeMessage< ::KWMsg::AckBuyPower >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBuyPower >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqTestSetResource* Arena::CreateMaybeMessage< ::KWMsg::ReqTestSetResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqTestSetResource >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBattleAdjWitchTeam* Arena::CreateMaybeMessage< ::KWMsg::ReqBattleAdjWitchTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBattleAdjWitchTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBattleAdjWitchTeam* Arena::CreateMaybeMessage< ::KWMsg::AckBattleAdjWitchTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBattleAdjWitchTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBattleChangeWitchTeamName* Arena::CreateMaybeMessage< ::KWMsg::ReqBattleChangeWitchTeamName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBattleChangeWitchTeamName >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBattleChangeWitchTeamName* Arena::CreateMaybeMessage< ::KWMsg::AckBattleChangeWitchTeamName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBattleChangeWitchTeamName >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBattleResetWitchTeam* Arena::CreateMaybeMessage< ::KWMsg::ReqBattleResetWitchTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBattleResetWitchTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBattleResetWitchTeam* Arena::CreateMaybeMessage< ::KWMsg::AckBattleResetWitchTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBattleResetWitchTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBattleQuickConfigWitchTeam* Arena::CreateMaybeMessage< ::KWMsg::ReqBattleQuickConfigWitchTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBattleQuickConfigWitchTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBattleQuickConfigWitchTeam* Arena::CreateMaybeMessage< ::KWMsg::AckBattleQuickConfigWitchTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBattleQuickConfigWitchTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBattleBuyWitchTeam* Arena::CreateMaybeMessage< ::KWMsg::ReqBattleBuyWitchTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBattleBuyWitchTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBattleBuyWitchTeam* Arena::CreateMaybeMessage< ::KWMsg::AckBattleBuyWitchTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBattleBuyWitchTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqTestRecruitWitch* Arena::CreateMaybeMessage< ::KWMsg::ReqTestRecruitWitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqTestRecruitWitch >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::CommonGetRewardInfo* Arena::CreateMaybeMessage< ::KWMsg::CommonGetRewardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::CommonGetRewardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqSetSystemFunctionFlag* Arena::CreateMaybeMessage< ::KWMsg::ReqSetSystemFunctionFlag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqSetSystemFunctionFlag >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckSetSystemFunctionFlag* Arena::CreateMaybeMessage< ::KWMsg::AckSetSystemFunctionFlag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckSetSystemFunctionFlag >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncSystemFunctionUnlock* Arena::CreateMaybeMessage< ::KWMsg::SyncSystemFunctionUnlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncSystemFunctionUnlock >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncPlayerLevelRanking* Arena::CreateMaybeMessage< ::KWMsg::SyncPlayerLevelRanking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncPlayerLevelRanking >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqSendGiftForWitch* Arena::CreateMaybeMessage< ::KWMsg::ReqSendGiftForWitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqSendGiftForWitch >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckSendGiftForWitch* Arena::CreateMaybeMessage< ::KWMsg::AckSendGiftForWitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckSendGiftForWitch >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqUseMagicalMedicine* Arena::CreateMaybeMessage< ::KWMsg::ReqUseMagicalMedicine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqUseMagicalMedicine >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckUseMagicalMedicine* Arena::CreateMaybeMessage< ::KWMsg::AckUseMagicalMedicine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckUseMagicalMedicine >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqUnlockWitchSkin* Arena::CreateMaybeMessage< ::KWMsg::ReqUnlockWitchSkin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqUnlockWitchSkin >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckUnlockWitchSkin* Arena::CreateMaybeMessage< ::KWMsg::AckUnlockWitchSkin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckUnlockWitchSkin >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqWitchStarLevelUp* Arena::CreateMaybeMessage< ::KWMsg::ReqWitchStarLevelUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqWitchStarLevelUp >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckWitchStarLevelUp* Arena::CreateMaybeMessage< ::KWMsg::AckWitchStarLevelUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckWitchStarLevelUp >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqWitchKnowledgeLevelUp* Arena::CreateMaybeMessage< ::KWMsg::ReqWitchKnowledgeLevelUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqWitchKnowledgeLevelUp >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckWitchKnowledgeLevelUp* Arena::CreateMaybeMessage< ::KWMsg::AckWitchKnowledgeLevelUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckWitchKnowledgeLevelUp >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqExpandWitchPneumaBagSize* Arena::CreateMaybeMessage< ::KWMsg::ReqExpandWitchPneumaBagSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqExpandWitchPneumaBagSize >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckExpandWitchPneumaBagSize* Arena::CreateMaybeMessage< ::KWMsg::AckExpandWitchPneumaBagSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckExpandWitchPneumaBagSize >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqWitchPneumaOpt* Arena::CreateMaybeMessage< ::KWMsg::ReqWitchPneumaOpt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqWitchPneumaOpt >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckWitchPneumaOpt* Arena::CreateMaybeMessage< ::KWMsg::AckWitchPneumaOpt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckWitchPneumaOpt >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqWitchPneumaEnhance* Arena::CreateMaybeMessage< ::KWMsg::ReqWitchPneumaEnhance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqWitchPneumaEnhance >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckWitchPneumaEnhance* Arena::CreateMaybeMessage< ::KWMsg::AckWitchPneumaEnhance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckWitchPneumaEnhance >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqWitchPneumaDecompose* Arena::CreateMaybeMessage< ::KWMsg::ReqWitchPneumaDecompose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqWitchPneumaDecompose >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckWitchPneumaDecompose* Arena::CreateMaybeMessage< ::KWMsg::AckWitchPneumaDecompose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckWitchPneumaDecompose >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqWitchSkillLevelUp* Arena::CreateMaybeMessage< ::KWMsg::ReqWitchSkillLevelUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqWitchSkillLevelUp >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckWitchSkillLevelUp* Arena::CreateMaybeMessage< ::KWMsg::AckWitchSkillLevelUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckWitchSkillLevelUp >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqSweepEndlessTower* Arena::CreateMaybeMessage< ::KWMsg::ReqSweepEndlessTower >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqSweepEndlessTower >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckSweepEndlessTower* Arena::CreateMaybeMessage< ::KWMsg::AckSweepEndlessTower >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckSweepEndlessTower >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBlackmartCommodityList* Arena::CreateMaybeMessage< ::KWMsg::ReqBlackmartCommodityList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBlackmartCommodityList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBlackmartCommodityList* Arena::CreateMaybeMessage< ::KWMsg::AckBlackmartCommodityList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBlackmartCommodityList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqRefreshBlackmartCommodityList* Arena::CreateMaybeMessage< ::KWMsg::ReqRefreshBlackmartCommodityList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqRefreshBlackmartCommodityList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckRefreshBlackmartCommodityList* Arena::CreateMaybeMessage< ::KWMsg::AckRefreshBlackmartCommodityList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckRefreshBlackmartCommodityList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBuyBlackmartCommodity* Arena::CreateMaybeMessage< ::KWMsg::ReqBuyBlackmartCommodity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBuyBlackmartCommodity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBuyBlackmartCommodity* Arena::CreateMaybeMessage< ::KWMsg::AckBuyBlackmartCommodity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBuyBlackmartCommodity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncBlackmartCommodityUpdated* Arena::CreateMaybeMessage< ::KWMsg::SyncBlackmartCommodityUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncBlackmartCommodityUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqActiveMissionOperation* Arena::CreateMaybeMessage< ::KWMsg::ReqActiveMissionOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqActiveMissionOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckActiveMissionOperation* Arena::CreateMaybeMessage< ::KWMsg::AckActiveMissionOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckActiveMissionOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqGetActiveMissionReward* Arena::CreateMaybeMessage< ::KWMsg::ReqGetActiveMissionReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqGetActiveMissionReward >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckGetActiveMissionReward* Arena::CreateMaybeMessage< ::KWMsg::AckGetActiveMissionReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckGetActiveMissionReward >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqDrawCard* Arena::CreateMaybeMessage< ::KWMsg::ReqDrawCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqDrawCard >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckDrawCard* Arena::CreateMaybeMessage< ::KWMsg::AckDrawCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckDrawCard >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::CommunityMemberInfo* Arena::CreateMaybeMessage< ::KWMsg::CommunityMemberInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::CommunityMemberInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::CommunityInfo* Arena::CreateMaybeMessage< ::KWMsg::CommunityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::CommunityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AppliedCommunityInfo* Arena::CreateMaybeMessage< ::KWMsg::AppliedCommunityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AppliedCommunityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AppliedPlayerInfo* Arena::CreateMaybeMessage< ::KWMsg::AppliedPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AppliedPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncPlayerCommunityInfo* Arena::CreateMaybeMessage< ::KWMsg::SyncPlayerCommunityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncPlayerCommunityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AddCommunityActiveValAndExp* Arena::CreateMaybeMessage< ::KWMsg::AddCommunityActiveValAndExp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AddCommunityActiveValAndExp >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::NotifyApplyJoinCommunityResult* Arena::CreateMaybeMessage< ::KWMsg::NotifyApplyJoinCommunityResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::NotifyApplyJoinCommunityResult >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::NotifyPlayerGetFiredFromCommunity* Arena::CreateMaybeMessage< ::KWMsg::NotifyPlayerGetFiredFromCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::NotifyPlayerGetFiredFromCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCreateCommunity* Arena::CreateMaybeMessage< ::KWMsg::ReqCreateCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCreateCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCreateCommunity* Arena::CreateMaybeMessage< ::KWMsg::AckCreateCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCreateCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqSearchCommunity* Arena::CreateMaybeMessage< ::KWMsg::ReqSearchCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqSearchCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckSearchCommunity* Arena::CreateMaybeMessage< ::KWMsg::AckSearchCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckSearchCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqQueryCommunity* Arena::CreateMaybeMessage< ::KWMsg::ReqQueryCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqQueryCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckQueryCommunity* Arena::CreateMaybeMessage< ::KWMsg::AckQueryCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckQueryCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqSpecifiedCommunityPage* Arena::CreateMaybeMessage< ::KWMsg::ReqSpecifiedCommunityPage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqSpecifiedCommunityPage >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckSpecifiedCommunityPage* Arena::CreateMaybeMessage< ::KWMsg::AckSpecifiedCommunityPage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckSpecifiedCommunityPage >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqQuickJoinCommunity* Arena::CreateMaybeMessage< ::KWMsg::ReqQuickJoinCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqQuickJoinCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckQuickJoinCommunity* Arena::CreateMaybeMessage< ::KWMsg::AckQuickJoinCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckQuickJoinCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqApplyJoinCommunity* Arena::CreateMaybeMessage< ::KWMsg::ReqApplyJoinCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqApplyJoinCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckApplyJoinCommunity* Arena::CreateMaybeMessage< ::KWMsg::AckApplyJoinCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckApplyJoinCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCancelJoinCommunity* Arena::CreateMaybeMessage< ::KWMsg::ReqCancelJoinCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCancelJoinCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCancelJoinCommunity* Arena::CreateMaybeMessage< ::KWMsg::AckCancelJoinCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCancelJoinCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAppliedCommunityList* Arena::CreateMaybeMessage< ::KWMsg::ReqAppliedCommunityList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAppliedCommunityList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckAppliedCommunityList* Arena::CreateMaybeMessage< ::KWMsg::AckAppliedCommunityList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckAppliedCommunityList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqModifyNameAndDeclaration* Arena::CreateMaybeMessage< ::KWMsg::ReqModifyNameAndDeclaration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqModifyNameAndDeclaration >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckModifyNameAndDeclaration* Arena::CreateMaybeMessage< ::KWMsg::AckModifyNameAndDeclaration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckModifyNameAndDeclaration >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqModifyFlagAndIcon* Arena::CreateMaybeMessage< ::KWMsg::ReqModifyFlagAndIcon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqModifyFlagAndIcon >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckModifyFlagAndIcon* Arena::CreateMaybeMessage< ::KWMsg::AckModifyFlagAndIcon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckModifyFlagAndIcon >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqModifyApprovedRules* Arena::CreateMaybeMessage< ::KWMsg::ReqModifyApprovedRules >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqModifyApprovedRules >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckModifyApprovedRules* Arena::CreateMaybeMessage< ::KWMsg::AckModifyApprovedRules >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckModifyApprovedRules >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqPromotionOrDemotionManager* Arena::CreateMaybeMessage< ::KWMsg::ReqPromotionOrDemotionManager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqPromotionOrDemotionManager >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckPromotionOrDemotionManager* Arena::CreateMaybeMessage< ::KWMsg::AckPromotionOrDemotionManager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckPromotionOrDemotionManager >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAppliedPlayerList* Arena::CreateMaybeMessage< ::KWMsg::ReqAppliedPlayerList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAppliedPlayerList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckAppliedPlayerList* Arena::CreateMaybeMessage< ::KWMsg::AckAppliedPlayerList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckAppliedPlayerList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqDealWithJoinCommunity* Arena::CreateMaybeMessage< ::KWMsg::ReqDealWithJoinCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqDealWithJoinCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckDealWithJoinCommunity* Arena::CreateMaybeMessage< ::KWMsg::AckDealWithJoinCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckDealWithJoinCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqQuitCommunity* Arena::CreateMaybeMessage< ::KWMsg::ReqQuitCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqQuitCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckQuitCommunity* Arena::CreateMaybeMessage< ::KWMsg::AckQuitCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckQuitCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqGetOutOfMyCommunity* Arena::CreateMaybeMessage< ::KWMsg::ReqGetOutOfMyCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqGetOutOfMyCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckGetOutOfMyCommunity* Arena::CreateMaybeMessage< ::KWMsg::AckGetOutOfMyCommunity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckGetOutOfMyCommunity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCommunitySignIn* Arena::CreateMaybeMessage< ::KWMsg::ReqCommunitySignIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCommunitySignIn >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCommunitySignIn* Arena::CreateMaybeMessage< ::KWMsg::AckCommunitySignIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCommunitySignIn >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PlayerBaseInfo* Arena::CreateMaybeMessage< ::KWMsg::PlayerBaseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PlayerBaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::FriendInfo* Arena::CreateMaybeMessage< ::KWMsg::FriendInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::FriendInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AppliedFriendInfo* Arena::CreateMaybeMessage< ::KWMsg::AppliedFriendInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AppliedFriendInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::RecommendedFriendInfo* Arena::CreateMaybeMessage< ::KWMsg::RecommendedFriendInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::RecommendedFriendInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqFriendList* Arena::CreateMaybeMessage< ::KWMsg::ReqFriendList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqFriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckFriendList* Arena::CreateMaybeMessage< ::KWMsg::AckFriendList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckFriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAppliedFriendList* Arena::CreateMaybeMessage< ::KWMsg::ReqAppliedFriendList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAppliedFriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckAppliedFriendList* Arena::CreateMaybeMessage< ::KWMsg::AckAppliedFriendList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckAppliedFriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAddFriend* Arena::CreateMaybeMessage< ::KWMsg::ReqAddFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAddFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckAddFriend* Arena::CreateMaybeMessage< ::KWMsg::AckAddFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckAddFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqDealWithAddFriend* Arena::CreateMaybeMessage< ::KWMsg::ReqDealWithAddFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqDealWithAddFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckDealWithAddFriend* Arena::CreateMaybeMessage< ::KWMsg::AckDealWithAddFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckDealWithAddFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqDelFriend* Arena::CreateMaybeMessage< ::KWMsg::ReqDelFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqDelFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckDelFriend* Arena::CreateMaybeMessage< ::KWMsg::AckDelFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckDelFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBlacklist* Arena::CreateMaybeMessage< ::KWMsg::ReqBlacklist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBlacklist >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBlacklist* Arena::CreateMaybeMessage< ::KWMsg::AckBlacklist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBlacklist >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBlacklistOpt* Arena::CreateMaybeMessage< ::KWMsg::ReqBlacklistOpt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBlacklistOpt >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBlacklistOpt* Arena::CreateMaybeMessage< ::KWMsg::AckBlacklistOpt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBlacklistOpt >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqRecommendedFriendList* Arena::CreateMaybeMessage< ::KWMsg::ReqRecommendedFriendList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqRecommendedFriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckRecommendedFriendList* Arena::CreateMaybeMessage< ::KWMsg::AckRecommendedFriendList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckRecommendedFriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqFriendCollectOpt* Arena::CreateMaybeMessage< ::KWMsg::ReqFriendCollectOpt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqFriendCollectOpt >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckFriendCollectOpt* Arena::CreateMaybeMessage< ::KWMsg::AckFriendCollectOpt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckFriendCollectOpt >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqFindPlayer* Arena::CreateMaybeMessage< ::KWMsg::ReqFindPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqFindPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckFindPlayer* Arena::CreateMaybeMessage< ::KWMsg::AckFindPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckFindPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqExploreUpdateNodePostion* Arena::CreateMaybeMessage< ::KWMsg::ReqExploreUpdateNodePostion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqExploreUpdateNodePostion >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckExploreUpdateNodePostion* Arena::CreateMaybeMessage< ::KWMsg::AckExploreUpdateNodePostion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckExploreUpdateNodePostion >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqGetExploreAreaProgressRewards* Arena::CreateMaybeMessage< ::KWMsg::ReqGetExploreAreaProgressRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqGetExploreAreaProgressRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckGetExploreAreaProgressRewards* Arena::CreateMaybeMessage< ::KWMsg::AckGetExploreAreaProgressRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckGetExploreAreaProgressRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqSweepExploreThreeStarNode* Arena::CreateMaybeMessage< ::KWMsg::ReqSweepExploreThreeStarNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqSweepExploreThreeStarNode >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckSweepExploreThreeStarNode* Arena::CreateMaybeMessage< ::KWMsg::AckSweepExploreThreeStarNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckSweepExploreThreeStarNode >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqGetExploreMapStarRewards* Arena::CreateMaybeMessage< ::KWMsg::ReqGetExploreMapStarRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqGetExploreMapStarRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckGetExploreMapStarRewards* Arena::CreateMaybeMessage< ::KWMsg::AckGetExploreMapStarRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckGetExploreMapStarRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqGetExploreMapBranchlineRewards* Arena::CreateMaybeMessage< ::KWMsg::ReqGetExploreMapBranchlineRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqGetExploreMapBranchlineRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckGetExploreMapBranchlineRewards* Arena::CreateMaybeMessage< ::KWMsg::AckGetExploreMapBranchlineRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckGetExploreMapBranchlineRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqUpgradeExploreGuiderFriendship* Arena::CreateMaybeMessage< ::KWMsg::ReqUpgradeExploreGuiderFriendship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqUpgradeExploreGuiderFriendship >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckUpgradeExploreGuiderFriendship* Arena::CreateMaybeMessage< ::KWMsg::AckUpgradeExploreGuiderFriendship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckUpgradeExploreGuiderFriendship >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqGetAppointReward* Arena::CreateMaybeMessage< ::KWMsg::ReqGetAppointReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqGetAppointReward >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckGetAppointReward* Arena::CreateMaybeMessage< ::KWMsg::AckGetAppointReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckGetAppointReward >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqSwitchAppointArea* Arena::CreateMaybeMessage< ::KWMsg::ReqSwitchAppointArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqSwitchAppointArea >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckSwitchAppointArea* Arena::CreateMaybeMessage< ::KWMsg::AckSwitchAppointArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckSwitchAppointArea >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqStartAffair* Arena::CreateMaybeMessage< ::KWMsg::ReqStartAffair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqStartAffair >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckStartAffair* Arena::CreateMaybeMessage< ::KWMsg::AckStartAffair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckStartAffair >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqTerminateAffair* Arena::CreateMaybeMessage< ::KWMsg::ReqTerminateAffair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqTerminateAffair >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckTerminateAffair* Arena::CreateMaybeMessage< ::KWMsg::AckTerminateAffair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckTerminateAffair >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqGetAffairReward* Arena::CreateMaybeMessage< ::KWMsg::ReqGetAffairReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqGetAffairReward >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckGetAffairReward* Arena::CreateMaybeMessage< ::KWMsg::AckGetAffairReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckGetAffairReward >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqDeleteAffair* Arena::CreateMaybeMessage< ::KWMsg::ReqDeleteAffair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqDeleteAffair >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckDeleteAffair* Arena::CreateMaybeMessage< ::KWMsg::AckDeleteAffair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckDeleteAffair >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqStartAppoint* Arena::CreateMaybeMessage< ::KWMsg::ReqStartAppoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqStartAppoint >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckStartAppoint* Arena::CreateMaybeMessage< ::KWMsg::AckStartAppoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckStartAppoint >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqSetHouseKeeper* Arena::CreateMaybeMessage< ::KWMsg::ReqSetHouseKeeper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqSetHouseKeeper >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckSetHouseKeeper* Arena::CreateMaybeMessage< ::KWMsg::AckSetHouseKeeper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckSetHouseKeeper >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqSetHouseKeeperSkinId* Arena::CreateMaybeMessage< ::KWMsg::ReqSetHouseKeeperSkinId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqSetHouseKeeperSkinId >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckSetHouseKeeperSkinId* Arena::CreateMaybeMessage< ::KWMsg::AckSetHouseKeeperSkinId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckSetHouseKeeperSkinId >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqHousekeeperInitSignin* Arena::CreateMaybeMessage< ::KWMsg::ReqHousekeeperInitSignin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqHousekeeperInitSignin >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckHousekeeperInitSignin* Arena::CreateMaybeMessage< ::KWMsg::AckHousekeeperInitSignin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckHousekeeperInitSignin >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqHousekeeperFinishedSignin* Arena::CreateMaybeMessage< ::KWMsg::ReqHousekeeperFinishedSignin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqHousekeeperFinishedSignin >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckHousekeeperFinishedSignin* Arena::CreateMaybeMessage< ::KWMsg::AckHousekeeperFinishedSignin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckHousekeeperFinishedSignin >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqGetPneumaIslandStarReward* Arena::CreateMaybeMessage< ::KWMsg::ReqGetPneumaIslandStarReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqGetPneumaIslandStarReward >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckGetPneumaIslandStarReward* Arena::CreateMaybeMessage< ::KWMsg::AckGetPneumaIslandStarReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckGetPneumaIslandStarReward >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqUpdatePneumaIslandShowState* Arena::CreateMaybeMessage< ::KWMsg::ReqUpdatePneumaIslandShowState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqUpdatePneumaIslandShowState >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckUpdatePneumaIslandShowState* Arena::CreateMaybeMessage< ::KWMsg::AckUpdatePneumaIslandShowState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckUpdatePneumaIslandShowState >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqUpdatePneumaAutoDecomposeState* Arena::CreateMaybeMessage< ::KWMsg::ReqUpdatePneumaAutoDecomposeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqUpdatePneumaAutoDecomposeState >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckUpdatePneumaAutoDecomposeState* Arena::CreateMaybeMessage< ::KWMsg::AckUpdatePneumaAutoDecomposeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckUpdatePneumaAutoDecomposeState >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PneumaDecomposeScheme* Arena::CreateMaybeMessage< ::KWMsg::PneumaDecomposeScheme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PneumaDecomposeScheme >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqUpdatePneumaDecomposeScheme* Arena::CreateMaybeMessage< ::KWMsg::ReqUpdatePneumaDecomposeScheme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqUpdatePneumaDecomposeScheme >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckUpdatePneumaDecomposeScheme* Arena::CreateMaybeMessage< ::KWMsg::AckUpdatePneumaDecomposeScheme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckUpdatePneumaDecomposeScheme >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCreateOrder* Arena::CreateMaybeMessage< ::KWMsg::ReqCreateOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCreateOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCreateOrder* Arena::CreateMaybeMessage< ::KWMsg::AckCreateOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCreateOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCallbackRecharge* Arena::CreateMaybeMessage< ::KWMsg::ReqCallbackRecharge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCallbackRecharge >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCallbackRecharge* Arena::CreateMaybeMessage< ::KWMsg::AckCallbackRecharge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCallbackRecharge >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::MailInfo* Arena::CreateMaybeMessage< ::KWMsg::MailInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::MailInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::MailInfos* Arena::CreateMaybeMessage< ::KWMsg::MailInfos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::MailInfos >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqDeleteReadedMails* Arena::CreateMaybeMessage< ::KWMsg::ReqDeleteReadedMails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqDeleteReadedMails >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckDeleteReadedMails* Arena::CreateMaybeMessage< ::KWMsg::AckDeleteReadedMails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckDeleteReadedMails >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqReadMails* Arena::CreateMaybeMessage< ::KWMsg::ReqReadMails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqReadMails >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckReadMails* Arena::CreateMaybeMessage< ::KWMsg::AckReadMails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckReadMails >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqWorldSendMailToPlayer* Arena::CreateMaybeMessage< ::KWMsg::ReqWorldSendMailToPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqWorldSendMailToPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckWorldSendMailToPlayer* Arena::CreateMaybeMessage< ::KWMsg::AckWorldSendMailToPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckWorldSendMailToPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncAddPreSendAllPlayersMails* Arena::CreateMaybeMessage< ::KWMsg::SyncAddPreSendAllPlayersMails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncAddPreSendAllPlayersMails >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncDelPreSendAllPlayersMails* Arena::CreateMaybeMessage< ::KWMsg::SyncDelPreSendAllPlayersMails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncDelPreSendAllPlayersMails >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncAddPreSendPlayerMails* Arena::CreateMaybeMessage< ::KWMsg::SyncAddPreSendPlayerMails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncAddPreSendPlayerMails >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncDelPreSendPlayerMails* Arena::CreateMaybeMessage< ::KWMsg::SyncDelPreSendPlayerMails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncDelPreSendPlayerMails >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncPlayerMailSessions* Arena::CreateMaybeMessage< ::KWMsg::SyncPlayerMailSessions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncPlayerMailSessions >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqRegisterChatSdkAccount* Arena::CreateMaybeMessage< ::KWMsg::ReqRegisterChatSdkAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqRegisterChatSdkAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckRegisterChatSdkAccount* Arena::CreateMaybeMessage< ::KWMsg::AckRegisterChatSdkAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckRegisterChatSdkAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCreateChatroom* Arena::CreateMaybeMessage< ::KWMsg::ReqCreateChatroom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCreateChatroom >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCreateChatroom* Arena::CreateMaybeMessage< ::KWMsg::AckCreateChatroom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCreateChatroom >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqSdkLoginInfoAndChatroom* Arena::CreateMaybeMessage< ::KWMsg::ReqSdkLoginInfoAndChatroom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqSdkLoginInfoAndChatroom >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckSdkLoginInfoAndChatroom* Arena::CreateMaybeMessage< ::KWMsg::AckSdkLoginInfoAndChatroom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckSdkLoginInfoAndChatroom >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqReportChatPlayer* Arena::CreateMaybeMessage< ::KWMsg::ReqReportChatPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqReportChatPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckReportChatPlayer* Arena::CreateMaybeMessage< ::KWMsg::AckReportChatPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckReportChatPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqSendChatroomMsg* Arena::CreateMaybeMessage< ::KWMsg::ReqSendChatroomMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqSendChatroomMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckSendChatroomMsg* Arena::CreateMaybeMessage< ::KWMsg::AckSendChatroomMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckSendChatroomMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqUpdateChatroomAnnouncement* Arena::CreateMaybeMessage< ::KWMsg::ReqUpdateChatroomAnnouncement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqUpdateChatroomAnnouncement >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckUpdateChatroomAnnouncement* Arena::CreateMaybeMessage< ::KWMsg::AckUpdateChatroomAnnouncement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckUpdateChatroomAnnouncement >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCheckChatText* Arena::CreateMaybeMessage< ::KWMsg::ReqCheckChatText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCheckChatText >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCheckChatText* Arena::CreateMaybeMessage< ::KWMsg::AckCheckChatText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCheckChatText >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCreateChatGroup* Arena::CreateMaybeMessage< ::KWMsg::ReqCreateChatGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCreateChatGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCreateChatGroup* Arena::CreateMaybeMessage< ::KWMsg::AckCreateChatGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCreateChatGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqDeleteChatGroup* Arena::CreateMaybeMessage< ::KWMsg::ReqDeleteChatGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqDeleteChatGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckDeleteChatGroup* Arena::CreateMaybeMessage< ::KWMsg::AckDeleteChatGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckDeleteChatGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqTransferChatGroup* Arena::CreateMaybeMessage< ::KWMsg::ReqTransferChatGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqTransferChatGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckTransferChatGroup* Arena::CreateMaybeMessage< ::KWMsg::AckTransferChatGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckTransferChatGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAddChatGroupUser* Arena::CreateMaybeMessage< ::KWMsg::ReqAddChatGroupUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAddChatGroupUser >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckAddChatGroupUser* Arena::CreateMaybeMessage< ::KWMsg::AckAddChatGroupUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckAddChatGroupUser >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqDeleteChatGroupUser* Arena::CreateMaybeMessage< ::KWMsg::ReqDeleteChatGroupUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqDeleteChatGroupUser >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckDeleteChatGroupUser* Arena::CreateMaybeMessage< ::KWMsg::AckDeleteChatGroupUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckDeleteChatGroupUser >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqSwitchChatBubble* Arena::CreateMaybeMessage< ::KWMsg::ReqSwitchChatBubble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqSwitchChatBubble >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckSwitchChatBubble* Arena::CreateMaybeMessage< ::KWMsg::AckSwitchChatBubble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckSwitchChatBubble >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqUnlockChatBubble* Arena::CreateMaybeMessage< ::KWMsg::ReqUnlockChatBubble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqUnlockChatBubble >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckUnlockChatBubble* Arena::CreateMaybeMessage< ::KWMsg::AckUnlockChatBubble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckUnlockChatBubble >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqUnlockChatMemeGroup* Arena::CreateMaybeMessage< ::KWMsg::ReqUnlockChatMemeGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqUnlockChatMemeGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckUnlockChatMemeGroup* Arena::CreateMaybeMessage< ::KWMsg::AckUnlockChatMemeGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckUnlockChatMemeGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqUnlockChatMeme* Arena::CreateMaybeMessage< ::KWMsg::ReqUnlockChatMeme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqUnlockChatMeme >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckUnlockChatMeme* Arena::CreateMaybeMessage< ::KWMsg::AckUnlockChatMeme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckUnlockChatMeme >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncPlayerHonorPointChanged* Arena::CreateMaybeMessage< ::KWMsg::SyncPlayerHonorPointChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncPlayerHonorPointChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SavePlayerHonorPointRanking* Arena::CreateMaybeMessage< ::KWMsg::SavePlayerHonorPointRanking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SavePlayerHonorPointRanking >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncPlayerStrategyPointChanged* Arena::CreateMaybeMessage< ::KWMsg::SyncPlayerStrategyPointChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncPlayerStrategyPointChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SavePlayerStrategyPointRanking* Arena::CreateMaybeMessage< ::KWMsg::SavePlayerStrategyPointRanking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SavePlayerStrategyPointRanking >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncBotArenaState* Arena::CreateMaybeMessage< ::KWMsg::SyncBotArenaState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncBotArenaState >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncBotArenaStageSession* Arena::CreateMaybeMessage< ::KWMsg::SyncBotArenaStageSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncBotArenaStageSession >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SavePlayerChallengeList* Arena::CreateMaybeMessage< ::KWMsg::SavePlayerChallengeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SavePlayerChallengeList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::UpdatePlayerChallengeItem* Arena::CreateMaybeMessage< ::KWMsg::UpdatePlayerChallengeItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::UpdatePlayerChallengeItem >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::UpdatePlayerReplayItem* Arena::CreateMaybeMessage< ::KWMsg::UpdatePlayerReplayItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::UpdatePlayerReplayItem >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AddPlayerReplayItem* Arena::CreateMaybeMessage< ::KWMsg::AddPlayerReplayItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AddPlayerReplayItem >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::DelPlayerReplayItem* Arena::CreateMaybeMessage< ::KWMsg::DelPlayerReplayItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::DelPlayerReplayItem >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncBotArenaBattleIsReady* Arena::CreateMaybeMessage< ::KWMsg::SyncBotArenaBattleIsReady >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncBotArenaBattleIsReady >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncBotArenaBattleReplayDatas* Arena::CreateMaybeMessage< ::KWMsg::SyncBotArenaBattleReplayDatas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncBotArenaBattleReplayDatas >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SaveBotArenaBattleReplayDatas* Arena::CreateMaybeMessage< ::KWMsg::SaveBotArenaBattleReplayDatas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SaveBotArenaBattleReplayDatas >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::DelBotArenaBattleReplayDatas* Arena::CreateMaybeMessage< ::KWMsg::DelBotArenaBattleReplayDatas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::DelBotArenaBattleReplayDatas >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncDefensivePlayerBattleReward* Arena::CreateMaybeMessage< ::KWMsg::SyncDefensivePlayerBattleReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncDefensivePlayerBattleReward >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncBotArenaBattleSettleData* Arena::CreateMaybeMessage< ::KWMsg::SyncBotArenaBattleSettleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncBotArenaBattleSettleData >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqClickBotarenaPromptForm* Arena::CreateMaybeMessage< ::KWMsg::ReqClickBotarenaPromptForm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqClickBotarenaPromptForm >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckClickBotarenaPromptForm* Arena::CreateMaybeMessage< ::KWMsg::AckClickBotarenaPromptForm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckClickBotarenaPromptForm >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::HonorPointRankingItem* Arena::CreateMaybeMessage< ::KWMsg::HonorPointRankingItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::HonorPointRankingItem >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqGetPlayerHonorPointRanking* Arena::CreateMaybeMessage< ::KWMsg::ReqGetPlayerHonorPointRanking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqGetPlayerHonorPointRanking >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckGetPlayerHonorPointRanking* Arena::CreateMaybeMessage< ::KWMsg::AckGetPlayerHonorPointRanking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckGetPlayerHonorPointRanking >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqGetBotArenaMainPageData* Arena::CreateMaybeMessage< ::KWMsg::ReqGetBotArenaMainPageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqGetBotArenaMainPageData >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckGetBotArenaMainPageData* Arena::CreateMaybeMessage< ::KWMsg::AckGetBotArenaMainPageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckGetBotArenaMainPageData >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::StrategyPointRankingItem* Arena::CreateMaybeMessage< ::KWMsg::StrategyPointRankingItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::StrategyPointRankingItem >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqGetPlayerStrategyPointRanking* Arena::CreateMaybeMessage< ::KWMsg::ReqGetPlayerStrategyPointRanking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqGetPlayerStrategyPointRanking >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckGetPlayerStrategyPointRanking* Arena::CreateMaybeMessage< ::KWMsg::AckGetPlayerStrategyPointRanking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckGetPlayerStrategyPointRanking >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BotArenaChallengeItem* Arena::CreateMaybeMessage< ::KWMsg::BotArenaChallengeItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BotArenaChallengeItem >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BotArenaChallengeList* Arena::CreateMaybeMessage< ::KWMsg::BotArenaChallengeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BotArenaChallengeList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqGetPlayerBotArenaChallengeList* Arena::CreateMaybeMessage< ::KWMsg::ReqGetPlayerBotArenaChallengeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqGetPlayerBotArenaChallengeList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckGetPlayerBotArenaChallengeList* Arena::CreateMaybeMessage< ::KWMsg::AckGetPlayerBotArenaChallengeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckGetPlayerBotArenaChallengeList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqRefreshPlayerBotArenaChallengeList* Arena::CreateMaybeMessage< ::KWMsg::ReqRefreshPlayerBotArenaChallengeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqRefreshPlayerBotArenaChallengeList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckRefreshPlayerBotArenaChallengeList* Arena::CreateMaybeMessage< ::KWMsg::AckRefreshPlayerBotArenaChallengeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckRefreshPlayerBotArenaChallengeList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAdjBotarenaDefensiveTeam* Arena::CreateMaybeMessage< ::KWMsg::ReqAdjBotarenaDefensiveTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAdjBotarenaDefensiveTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckAdjBotarenaDefensiveTeam* Arena::CreateMaybeMessage< ::KWMsg::AckAdjBotarenaDefensiveTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckAdjBotarenaDefensiveTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqResetBotarenaDefensiveTeam* Arena::CreateMaybeMessage< ::KWMsg::ReqResetBotarenaDefensiveTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqResetBotarenaDefensiveTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckResetBotarenaDefensiveTeam* Arena::CreateMaybeMessage< ::KWMsg::AckResetBotarenaDefensiveTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckResetBotarenaDefensiveTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqQuickConfigBotarenaDefensiveTeam* Arena::CreateMaybeMessage< ::KWMsg::ReqQuickConfigBotarenaDefensiveTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqQuickConfigBotarenaDefensiveTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckQuickConfigBotarenaDefensiveTeam* Arena::CreateMaybeMessage< ::KWMsg::AckQuickConfigBotarenaDefensiveTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckQuickConfigBotarenaDefensiveTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBuyShabowToken* Arena::CreateMaybeMessage< ::KWMsg::ReqBuyShabowToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBuyShabowToken >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBuyShabowToken* Arena::CreateMaybeMessage< ::KWMsg::AckBuyShabowToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBuyShabowToken >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BotArenaReplayItem* Arena::CreateMaybeMessage< ::KWMsg::BotArenaReplayItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BotArenaReplayItem >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BotArenaReplayList* Arena::CreateMaybeMessage< ::KWMsg::BotArenaReplayList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BotArenaReplayList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqGetBotArenaReplayList* Arena::CreateMaybeMessage< ::KWMsg::ReqGetBotArenaReplayList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqGetBotArenaReplayList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckGetBotArenaReplayList* Arena::CreateMaybeMessage< ::KWMsg::AckGetBotArenaReplayList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckGetBotArenaReplayList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqReplayBotArenaBattle* Arena::CreateMaybeMessage< ::KWMsg::ReqReplayBotArenaBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqReplayBotArenaBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckReplayBotArenaBattle* Arena::CreateMaybeMessage< ::KWMsg::AckReplayBotArenaBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckReplayBotArenaBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ShopReceipt* Arena::CreateMaybeMessage< ::KWMsg::ShopReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ShopReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::DelPlayerShopReceipts* Arena::CreateMaybeMessage< ::KWMsg::DelPlayerShopReceipts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::DelPlayerShopReceipts >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::UpdPlayerShopReceipt* Arena::CreateMaybeMessage< ::KWMsg::UpdPlayerShopReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::UpdPlayerShopReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AddPlayerShopReceipt* Arena::CreateMaybeMessage< ::KWMsg::AddPlayerShopReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AddPlayerShopReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqGetShopProducts* Arena::CreateMaybeMessage< ::KWMsg::ReqGetShopProducts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqGetShopProducts >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckGetShopProducts* Arena::CreateMaybeMessage< ::KWMsg::AckGetShopProducts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckGetShopProducts >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBuyProduct* Arena::CreateMaybeMessage< ::KWMsg::ReqBuyProduct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBuyProduct >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBuyProduct* Arena::CreateMaybeMessage< ::KWMsg::AckBuyProduct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBuyProduct >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
