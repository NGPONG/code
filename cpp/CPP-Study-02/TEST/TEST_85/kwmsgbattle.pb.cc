// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kwmsgbattle.proto

#include "kwmsgbattle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace KWMsg {
constexpr BTLMsgWrapper::BTLMsgWrapper(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_type_(0)
  , _oneof_case_{}{}
struct BTLMsgWrapperDefaultTypeInternal {
  constexpr BTLMsgWrapperDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLMsgWrapperDefaultTypeInternal() {}
  union {
    BTLMsgWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLMsgWrapperDefaultTypeInternal _BTLMsgWrapper_default_instance_;
constexpr BTLBattleReplay_BTLBattleReplayWrapper::BTLBattleReplay_BTLBattleReplayWrapper(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_type_(0){}
struct BTLBattleReplay_BTLBattleReplayWrapperDefaultTypeInternal {
  constexpr BTLBattleReplay_BTLBattleReplayWrapperDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLBattleReplay_BTLBattleReplayWrapperDefaultTypeInternal() {}
  union {
    BTLBattleReplay_BTLBattleReplayWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLBattleReplay_BTLBattleReplayWrapperDefaultTypeInternal _BTLBattleReplay_BTLBattleReplayWrapper_default_instance_;
constexpr BTLBattleReplay::BTLBattleReplay(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgs_(){}
struct BTLBattleReplayDefaultTypeInternal {
  constexpr BTLBattleReplayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLBattleReplayDefaultTypeInternal() {}
  union {
    BTLBattleReplay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLBattleReplayDefaultTypeInternal _BTLBattleReplay_default_instance_;
constexpr ReqEnterBattle::ReqEnterBattle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_play_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mercenary_unit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , challenge_id_(nullptr)
  , replay_id_(nullptr)
  , explore_dungeon_monster_id_(nullptr)
  , mercenary_player_(nullptr)
  , continuous_count_(0)
  , auto_buy_(0)
  , explore_dungeon_monster_idx_(0)
  , mercenary_idx_(0){}
struct ReqEnterBattleDefaultTypeInternal {
  constexpr ReqEnterBattleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqEnterBattleDefaultTypeInternal() {}
  union {
    ReqEnterBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqEnterBattleDefaultTypeInternal _ReqEnterBattle_default_instance_;
constexpr AckEnterBattle::AckEnterBattle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_play_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , scene_id_(0)
  , continuous_count_(0)
  , auto_buy_(0){}
struct AckEnterBattleDefaultTypeInternal {
  constexpr AckEnterBattleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckEnterBattleDefaultTypeInternal() {}
  union {
    AckEnterBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckEnterBattleDefaultTypeInternal _AckEnterBattle_default_instance_;
constexpr AckBTLInfo::AckBTLInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : battle_info_(nullptr)
  , unique_id_(0){}
struct AckBTLInfoDefaultTypeInternal {
  constexpr AckBTLInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBTLInfoDefaultTypeInternal() {}
  union {
    AckBTLInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBTLInfoDefaultTypeInternal _AckBTLInfo_default_instance_;
constexpr BTLInfo::BTLInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entities_()
  , destroyed_entity_ids_()
  , battle_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , battle_mid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_play_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , battle_settings_(nullptr)
  , team_id_(nullptr)
  , battle_type_(0)

  , remain_continuous_count_(0)
  , battle_mode_(0){}
struct BTLInfoDefaultTypeInternal {
  constexpr BTLInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLInfoDefaultTypeInternal() {}
  union {
    BTLInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLInfoDefaultTypeInternal _BTLInfo_default_instance_;
constexpr BTLSettings::BTLSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enable_auto_state_(0)
  , enable_speed_up_(0)
  , default_auto_state_(0)
  , default_speed_(0){}
struct BTLSettingsDefaultTypeInternal {
  constexpr BTLSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLSettingsDefaultTypeInternal() {}
  union {
    BTLSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLSettingsDefaultTypeInternal _BTLSettings_default_instance_;
constexpr BTLEntity::BTLEntity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_id_(nullptr)
  , property_(nullptr)
  , record_(nullptr){}
struct BTLEntityDefaultTypeInternal {
  constexpr BTLEntityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLEntityDefaultTypeInternal() {}
  union {
    BTLEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLEntityDefaultTypeInternal _BTLEntity_default_instance_;
constexpr AckBTLPk::AckBTLPk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pk_(nullptr)
  , unique_id_(0){}
struct AckBTLPkDefaultTypeInternal {
  constexpr AckBTLPkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBTLPkDefaultTypeInternal() {}
  union {
    AckBTLPk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBTLPkDefaultTypeInternal _AckBTLPk_default_instance_;
constexpr BTLEnergyInfo::BTLEnergyInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_id_(nullptr)
  , cristal_(0)
  , cristal_limit_(0)
  , magic_hue_(0)
  , cristal_extra_(0){}
struct BTLEnergyInfoDefaultTypeInternal {
  constexpr BTLEnergyInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLEnergyInfoDefaultTypeInternal() {}
  union {
    BTLEnergyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLEnergyInfoDefaultTypeInternal _BTLEnergyInfo_default_instance_;
constexpr BTLPkInfo::BTLPkInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elements_()
  , entities_()
  , energy_list_(){}
struct BTLPkInfoDefaultTypeInternal {
  constexpr BTLPkInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLPkInfoDefaultTypeInternal() {}
  union {
    BTLPkInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLPkInfoDefaultTypeInternal _BTLPkInfo_default_instance_;
constexpr BTLPkElement::BTLPkElement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entity_id_(nullptr)
  , team_id_(nullptr)
  , fight_(0)
  , reward_type_(0)
  , reward_count_(0){}
struct BTLPkElementDefaultTypeInternal {
  constexpr BTLPkElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLPkElementDefaultTypeInternal() {}
  union {
    BTLPkElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLPkElementDefaultTypeInternal _BTLPkElement_default_instance_;
constexpr ReqBTLAction::ReqBTLAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : op_(nullptr){}
struct ReqBTLActionDefaultTypeInternal {
  constexpr ReqBTLActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBTLActionDefaultTypeInternal() {}
  union {
    ReqBTLAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBTLActionDefaultTypeInternal _ReqBTLAction_default_instance_;
constexpr BTLOperation::BTLOperation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , _oneof_case_{}{}
struct BTLOperationDefaultTypeInternal {
  constexpr BTLOperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLOperationDefaultTypeInternal() {}
  union {
    BTLOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLOperationDefaultTypeInternal _BTLOperation_default_instance_;
constexpr BTLManualOperation::BTLManualOperation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : skill_mid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , caster_id_(nullptr)
  , selected_target_id_(nullptr){}
struct BTLManualOperationDefaultTypeInternal {
  constexpr BTLManualOperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLManualOperationDefaultTypeInternal() {}
  union {
    BTLManualOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLManualOperationDefaultTypeInternal _BTLManualOperation_default_instance_;
constexpr AckBTLAction::AckBTLAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(nullptr)
  , unique_id_(0){}
struct AckBTLActionDefaultTypeInternal {
  constexpr AckBTLActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBTLActionDefaultTypeInternal() {}
  union {
    AckBTLAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBTLActionDefaultTypeInternal _AckBTLAction_default_instance_;
constexpr BTLAction::BTLAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_queue_(nullptr)
  , stage_(0)

  , round_number_(0)
  , _oneof_case_{}{}
struct BTLActionDefaultTypeInternal {
  constexpr BTLActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLActionDefaultTypeInternal() {}
  union {
    BTLAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLActionDefaultTypeInternal _BTLAction_default_instance_;
constexpr BTLActionQueue::BTLActionQueue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elements_()
  , remain_reinforcements_(0){}
struct BTLActionQueueDefaultTypeInternal {
  constexpr BTLActionQueueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLActionQueueDefaultTypeInternal() {}
  union {
    BTLActionQueue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLActionQueueDefaultTypeInternal _BTLActionQueue_default_instance_;
constexpr BTLActionQueueElement::BTLActionQueueElement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_id_(nullptr)
  , queue_state_(0)

  , seq_(0)
  , flag_(0){}
struct BTLActionQueueElementDefaultTypeInternal {
  constexpr BTLActionQueueElementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLActionQueueElementDefaultTypeInternal() {}
  union {
    BTLActionQueueElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLActionQueueElementDefaultTypeInternal _BTLActionQueueElement_default_instance_;
constexpr BTLStartDetail::BTLStartDetail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : effects_(){}
struct BTLStartDetailDefaultTypeInternal {
  constexpr BTLStartDetailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLStartDetailDefaultTypeInternal() {}
  union {
    BTLStartDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLStartDetailDefaultTypeInternal _BTLStartDetail_default_instance_;
constexpr BTLInActionDetail::BTLInActionDetail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : effects_()
  , energy_list_()
  , active_skill_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , skill_result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entity_state_in_turn_(nullptr){}
struct BTLInActionDetailDefaultTypeInternal {
  constexpr BTLInActionDetailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLInActionDetailDefaultTypeInternal() {}
  union {
    BTLInActionDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLInActionDetailDefaultTypeInternal _BTLInActionDetail_default_instance_;
constexpr BTLPostPreActionDetail::BTLPostPreActionDetail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_entities_()
  , effects_()
  , energy_list_()
  , entity_state_in_turn_(nullptr){}
struct BTLPostPreActionDetailDefaultTypeInternal {
  constexpr BTLPostPreActionDetailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLPostPreActionDetailDefaultTypeInternal() {}
  union {
    BTLPostPreActionDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLPostPreActionDetailDefaultTypeInternal _BTLPostPreActionDetail_default_instance_;
constexpr BTLBeforeEndDetail::BTLBeforeEndDetail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : effects_(){}
struct BTLBeforeEndDetailDefaultTypeInternal {
  constexpr BTLBeforeEndDetailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLBeforeEndDetailDefaultTypeInternal() {}
  union {
    BTLBeforeEndDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLBeforeEndDetailDefaultTypeInternal _BTLBeforeEndDetail_default_instance_;
constexpr BTLEntityStateInTurn::BTLEntityStateInTurn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : skill_states_()
  , entity_id_(nullptr)
  , code_(0)
{}
struct BTLEntityStateInTurnDefaultTypeInternal {
  constexpr BTLEntityStateInTurnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLEntityStateInTurnDefaultTypeInternal() {}
  union {
    BTLEntityStateInTurn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLEntityStateInTurnDefaultTypeInternal _BTLEntityStateInTurn_default_instance_;
constexpr BTLEntitySkillState::BTLEntitySkillState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidate_targets_()
  , skill_mid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cur_cd_(0)
  , cost_(0)
  , skill_state_(0)
{}
struct BTLEntitySkillStateDefaultTypeInternal {
  constexpr BTLEntitySkillStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLEntitySkillStateDefaultTypeInternal() {}
  union {
    BTLEntitySkillState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLEntitySkillStateDefaultTypeInternal _BTLEntitySkillState_default_instance_;
constexpr BTLEffect::BTLEffect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entities_()
  , mid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , source_mid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , caster_id_(nullptr)
  , target_id_(nullptr)
  , guid_(nullptr)
  , type_(0)
  , effect_index_(0)
  , _oneof_case_{}{}
struct BTLEffectDefaultTypeInternal {
  constexpr BTLEffectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLEffectDefaultTypeInternal() {}
  union {
    BTLEffect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLEffectDefaultTypeInternal _BTLEffect_default_instance_;
constexpr BTLDamageInfo::BTLDamageInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shield_change_(nullptr)
  , display_val_(0)
  , hp_change_(0)
  , flags_(0){}
struct BTLDamageInfoDefaultTypeInternal {
  constexpr BTLDamageInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLDamageInfoDefaultTypeInternal() {}
  union {
    BTLDamageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLDamageInfoDefaultTypeInternal _BTLDamageInfo_default_instance_;
constexpr BTLHealInfo::BTLHealInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : display_val_(0)
  , hp_change_(0)
  , flags_(0){}
struct BTLHealInfoDefaultTypeInternal {
  constexpr BTLHealInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLHealInfoDefaultTypeInternal() {}
  union {
    BTLHealInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLHealInfoDefaultTypeInternal _BTLHealInfo_default_instance_;
constexpr BTLSummonInfo::BTLSummonInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entities_(){}
struct BTLSummonInfoDefaultTypeInternal {
  constexpr BTLSummonInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLSummonInfoDefaultTypeInternal() {}
  union {
    BTLSummonInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLSummonInfoDefaultTypeInternal _BTLSummonInfo_default_instance_;
constexpr BTLTransformInfo::BTLTransformInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : old_enemy_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , new_enemy_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BTLTransformInfoDefaultTypeInternal {
  constexpr BTLTransformInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLTransformInfoDefaultTypeInternal() {}
  union {
    BTLTransformInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLTransformInfoDefaultTypeInternal _BTLTransformInfo_default_instance_;
constexpr BTLTriggerInfo::BTLTriggerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trigger_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BTLTriggerInfoDefaultTypeInternal {
  constexpr BTLTriggerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLTriggerInfoDefaultTypeInternal() {}
  union {
    BTLTriggerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLTriggerInfoDefaultTypeInternal _BTLTriggerInfo_default_instance_;
constexpr BTLResistanceInfo::BTLResistanceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_add_(0){}
struct BTLResistanceInfoDefaultTypeInternal {
  constexpr BTLResistanceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLResistanceInfoDefaultTypeInternal() {}
  union {
    BTLResistanceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLResistanceInfoDefaultTypeInternal _BTLResistanceInfo_default_instance_;
constexpr BTLShowTextInfo::BTLShowTextInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , show_type_(0){}
struct BTLShowTextInfoDefaultTypeInternal {
  constexpr BTLShowTextInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLShowTextInfoDefaultTypeInternal() {}
  union {
    BTLShowTextInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLShowTextInfoDefaultTypeInternal _BTLShowTextInfo_default_instance_;
constexpr BTLReviveInfo::BTLReviveInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_id_(nullptr)
  , hp_change_(0){}
struct BTLReviveInfoDefaultTypeInternal {
  constexpr BTLReviveInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLReviveInfoDefaultTypeInternal() {}
  union {
    BTLReviveInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLReviveInfoDefaultTypeInternal _BTLReviveInfo_default_instance_;
constexpr BTLBuffInfo::BTLBuffInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct BTLBuffInfoDefaultTypeInternal {
  constexpr BTLBuffInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLBuffInfoDefaultTypeInternal() {}
  union {
    BTLBuffInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLBuffInfoDefaultTypeInternal _BTLBuffInfo_default_instance_;
constexpr BTLAddBuffInfo::BTLAddBuffInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buff_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buff_guid_(nullptr)
  , left_round_(0){}
struct BTLAddBuffInfoDefaultTypeInternal {
  constexpr BTLAddBuffInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLAddBuffInfoDefaultTypeInternal() {}
  union {
    BTLAddBuffInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLAddBuffInfoDefaultTypeInternal _BTLAddBuffInfo_default_instance_;
constexpr BTLRemoveBuffInfo::BTLRemoveBuffInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffs_(){}
struct BTLRemoveBuffInfoDefaultTypeInternal {
  constexpr BTLRemoveBuffInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLRemoveBuffInfoDefaultTypeInternal() {}
  union {
    BTLRemoveBuffInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLRemoveBuffInfoDefaultTypeInternal _BTLRemoveBuffInfo_default_instance_;
constexpr BTLRemoveBuffItem::BTLRemoveBuffItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buff_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buff_guid_(nullptr)
  , reason_(0)
{}
struct BTLRemoveBuffItemDefaultTypeInternal {
  constexpr BTLRemoveBuffItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLRemoveBuffItemDefaultTypeInternal() {}
  union {
    BTLRemoveBuffItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLRemoveBuffItemDefaultTypeInternal _BTLRemoveBuffItem_default_instance_;
constexpr BTLShieldChangeInfo::BTLShieldChangeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buff_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buff_guid_(nullptr)
  , shield_change_(0)
  , change_mode_(0){}
struct BTLShieldChangeInfoDefaultTypeInternal {
  constexpr BTLShieldChangeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLShieldChangeInfoDefaultTypeInternal() {}
  union {
    BTLShieldChangeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLShieldChangeInfoDefaultTypeInternal _BTLShieldChangeInfo_default_instance_;
constexpr BTLSealChangeInfo::BTLSealChangeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : skills_()
  , seal_mode_(0){}
struct BTLSealChangeInfoDefaultTypeInternal {
  constexpr BTLSealChangeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLSealChangeInfoDefaultTypeInternal() {}
  union {
    BTLSealChangeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLSealChangeInfoDefaultTypeInternal _BTLSealChangeInfo_default_instance_;
constexpr BTLStateChangeInfo::BTLStateChangeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buff_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buff_guid_(nullptr)
  , state_(0)
  , change_mode_(0){}
struct BTLStateChangeInfoDefaultTypeInternal {
  constexpr BTLStateChangeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLStateChangeInfoDefaultTypeInternal() {}
  union {
    BTLStateChangeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLStateChangeInfoDefaultTypeInternal _BTLStateChangeInfo_default_instance_;
constexpr BTLChangedEntity::BTLChangedEntity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entities_(){}
struct BTLChangedEntityDefaultTypeInternal {
  constexpr BTLChangedEntityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLChangedEntityDefaultTypeInternal() {}
  union {
    BTLChangedEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLChangedEntityDefaultTypeInternal _BTLChangedEntity_default_instance_;
constexpr ReqBTLPullMsg::ReqBTLPullMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , unique_id_(0){}
struct ReqBTLPullMsgDefaultTypeInternal {
  constexpr ReqBTLPullMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBTLPullMsgDefaultTypeInternal() {}
  union {
    ReqBTLPullMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBTLPullMsgDefaultTypeInternal _ReqBTLPullMsg_default_instance_;
constexpr AckBTLPullMsg_BTLAckMsgWrapper::AckBTLPullMsg_BTLAckMsgWrapper(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_type_(0)
  , _oneof_case_{}{}
struct AckBTLPullMsg_BTLAckMsgWrapperDefaultTypeInternal {
  constexpr AckBTLPullMsg_BTLAckMsgWrapperDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBTLPullMsg_BTLAckMsgWrapperDefaultTypeInternal() {}
  union {
    AckBTLPullMsg_BTLAckMsgWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBTLPullMsg_BTLAckMsgWrapperDefaultTypeInternal _AckBTLPullMsg_BTLAckMsgWrapper_default_instance_;
constexpr AckBTLPullMsg::AckBTLPullMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : battle_ack_msgs_(){}
struct AckBTLPullMsgDefaultTypeInternal {
  constexpr AckBTLPullMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBTLPullMsgDefaultTypeInternal() {}
  union {
    AckBTLPullMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBTLPullMsgDefaultTypeInternal _AckBTLPullMsg_default_instance_;
constexpr ReqBTLToggleAutoMode::ReqBTLToggleAutoMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , toggle_(0){}
struct ReqBTLToggleAutoModeDefaultTypeInternal {
  constexpr ReqBTLToggleAutoModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBTLToggleAutoModeDefaultTypeInternal() {}
  union {
    ReqBTLToggleAutoMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBTLToggleAutoModeDefaultTypeInternal _ReqBTLToggleAutoMode_default_instance_;
constexpr AckBTLToggleAutoMode::AckBTLToggleAutoMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auto_modes_()
  , code_(0)

  , toggle_(0){}
struct AckBTLToggleAutoModeDefaultTypeInternal {
  constexpr AckBTLToggleAutoModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBTLToggleAutoModeDefaultTypeInternal() {}
  union {
    AckBTLToggleAutoMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBTLToggleAutoModeDefaultTypeInternal _AckBTLToggleAutoMode_default_instance_;
constexpr BTLEntityAutoMode::BTLEntityAutoMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_id_(nullptr)
  , auto_mode_(0)
{}
struct BTLEntityAutoModeDefaultTypeInternal {
  constexpr BTLEntityAutoModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLEntityAutoModeDefaultTypeInternal() {}
  union {
    BTLEntityAutoMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLEntityAutoModeDefaultTypeInternal _BTLEntityAutoMode_default_instance_;
constexpr ReqBTLUpdateEntityAutoMode::ReqBTLUpdateEntityAutoMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , mode_(nullptr){}
struct ReqBTLUpdateEntityAutoModeDefaultTypeInternal {
  constexpr ReqBTLUpdateEntityAutoModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBTLUpdateEntityAutoModeDefaultTypeInternal() {}
  union {
    ReqBTLUpdateEntityAutoMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBTLUpdateEntityAutoModeDefaultTypeInternal _ReqBTLUpdateEntityAutoMode_default_instance_;
constexpr AckBTLUpdateEntityAutoMode::AckBTLUpdateEntityAutoMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_(nullptr)
  , code_(0)
{}
struct AckBTLUpdateEntityAutoModeDefaultTypeInternal {
  constexpr AckBTLUpdateEntityAutoModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBTLUpdateEntityAutoModeDefaultTypeInternal() {}
  union {
    AckBTLUpdateEntityAutoMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBTLUpdateEntityAutoModeDefaultTypeInternal _AckBTLUpdateEntityAutoMode_default_instance_;
constexpr ReqBTLSetPrioTarget::ReqBTLSetPrioTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , entity_id_(nullptr){}
struct ReqBTLSetPrioTargetDefaultTypeInternal {
  constexpr ReqBTLSetPrioTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqBTLSetPrioTargetDefaultTypeInternal() {}
  union {
    ReqBTLSetPrioTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqBTLSetPrioTargetDefaultTypeInternal _ReqBTLSetPrioTarget_default_instance_;
constexpr AckBTLSetPrioTarget::AckBTLSetPrioTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prio_opposite_target_(nullptr)
  , prio_teammate_target_(nullptr)
  , code_(0)
{}
struct AckBTLSetPrioTargetDefaultTypeInternal {
  constexpr AckBTLSetPrioTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBTLSetPrioTargetDefaultTypeInternal() {}
  union {
    AckBTLSetPrioTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBTLSetPrioTargetDefaultTypeInternal _AckBTLSetPrioTarget_default_instance_;
constexpr ReqLeaveBattle::ReqLeaveBattle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqLeaveBattleDefaultTypeInternal {
  constexpr ReqLeaveBattleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqLeaveBattleDefaultTypeInternal() {}
  union {
    ReqLeaveBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqLeaveBattleDefaultTypeInternal _ReqLeaveBattle_default_instance_;
constexpr AckLeaveBattle::AckLeaveBattle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckLeaveBattleDefaultTypeInternal {
  constexpr AckLeaveBattleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckLeaveBattleDefaultTypeInternal() {}
  union {
    AckLeaveBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckLeaveBattleDefaultTypeInternal _AckLeaveBattle_default_instance_;
constexpr ReqContinuousBattle::ReqContinuousBattle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqContinuousBattleDefaultTypeInternal {
  constexpr ReqContinuousBattleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqContinuousBattleDefaultTypeInternal() {}
  union {
    ReqContinuousBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqContinuousBattleDefaultTypeInternal _ReqContinuousBattle_default_instance_;
constexpr AckContinuousBattle::AckContinuousBattle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckContinuousBattleDefaultTypeInternal {
  constexpr AckContinuousBattleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckContinuousBattleDefaultTypeInternal() {}
  union {
    AckContinuousBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckContinuousBattleDefaultTypeInternal _AckContinuousBattle_default_instance_;
constexpr BTLRewardInfo::BTLRewardInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reward_guid_(nullptr)
  , reward_count_(0)
  , reward_flag_(0){}
struct BTLRewardInfoDefaultTypeInternal {
  constexpr BTLRewardInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLRewardInfoDefaultTypeInternal() {}
  union {
    BTLRewardInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLRewardInfoDefaultTypeInternal _BTLRewardInfo_default_instance_;
constexpr AckBTLEndInfo::AckBTLEndInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reward_list_()
  , extra_reward_list_()
  , player_id_(nullptr)
  , victory_entity_id_(nullptr)
  , is_victory_(0)
  , add_player_exp_(0)
  , add_witch_exp_(0)
  , star_state_(0)
  , end_by_kill_(0){}
struct AckBTLEndInfoDefaultTypeInternal {
  constexpr AckBTLEndInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBTLEndInfoDefaultTypeInternal() {}
  union {
    AckBTLEndInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBTLEndInfoDefaultTypeInternal _AckBTLEndInfo_default_instance_;
constexpr AckBTLResult::AckBTLResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(nullptr)
  , unique_id_(0){}
struct AckBTLResultDefaultTypeInternal {
  constexpr AckBTLResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckBTLResultDefaultTypeInternal() {}
  union {
    AckBTLResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckBTLResultDefaultTypeInternal _AckBTLResult_default_instance_;
constexpr BTLResult::BTLResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : won_players_()
  , lost_players_()
  , victory_entity_id_(nullptr){}
struct BTLResultDefaultTypeInternal {
  constexpr BTLResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BTLResultDefaultTypeInternal() {}
  union {
    BTLResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BTLResultDefaultTypeInternal _BTLResult_default_instance_;
constexpr ReqReplayData::ReqReplayData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , replay_id_(nullptr)
  , idx_(0){}
struct ReqReplayDataDefaultTypeInternal {
  constexpr ReqReplayDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqReplayDataDefaultTypeInternal() {}
  union {
    ReqReplayData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqReplayDataDefaultTypeInternal _ReqReplayData_default_instance_;
constexpr AckReplayData::AckReplayData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgs_()
  , player_id_(nullptr)
  , event_code_(0)

  , idx_(0){}
struct AckReplayDataDefaultTypeInternal {
  constexpr AckReplayDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckReplayDataDefaultTypeInternal() {}
  union {
    AckReplayData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckReplayDataDefaultTypeInternal _AckReplayData_default_instance_;
}  // namespace KWMsg
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kwmsgbattle_2eproto[63];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kwmsgbattle_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kwmsgbattle_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kwmsgbattle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLMsgWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLMsgWrapper, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLMsgWrapper, msg_type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLMsgWrapper, msg_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLBattleReplay_BTLBattleReplayWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLBattleReplay_BTLBattleReplayWrapper, msg_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLBattleReplay_BTLBattleReplayWrapper, msg_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLBattleReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLBattleReplay, msgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterBattle, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterBattle, game_play_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterBattle, team_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterBattle, continuous_count_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterBattle, auto_buy_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterBattle, challenge_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterBattle, replay_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterBattle, explore_dungeon_monster_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterBattle, explore_dungeon_monster_idx_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterBattle, mercenary_player_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterBattle, mercenary_unit_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterBattle, mercenary_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckEnterBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckEnterBattle, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckEnterBattle, scene_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckEnterBattle, game_play_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckEnterBattle, team_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckEnterBattle, continuous_count_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckEnterBattle, auto_buy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLInfo, unique_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLInfo, battle_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInfo, battle_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInfo, battle_mid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInfo, battle_settings_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInfo, entities_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInfo, destroyed_entity_ids_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInfo, battle_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInfo, remain_continuous_count_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInfo, game_play_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInfo, battle_mode_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInfo, team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLSettings, enable_auto_state_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLSettings, enable_speed_up_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLSettings, default_auto_state_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLSettings, default_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntity, entity_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntity, property_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntity, record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLPk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLPk, unique_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLPk, pk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEnergyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEnergyInfo, team_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEnergyInfo, cristal_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEnergyInfo, cristal_limit_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEnergyInfo, magic_hue_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEnergyInfo, cristal_extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLPkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLPkInfo, elements_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLPkInfo, entities_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLPkInfo, energy_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLPkElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLPkElement, entity_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLPkElement, fight_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLPkElement, team_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLPkElement, name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLPkElement, reward_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLPkElement, reward_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBTLAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBTLAction, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLOperation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLOperation, player_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLOperation, operation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLManualOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLManualOperation, skill_mid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLManualOperation, caster_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLManualOperation, selected_target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLAction, unique_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLAction, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLAction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLAction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLAction, stage_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLAction, round_number_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLAction, action_queue_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLAction, action_detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLActionQueue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLActionQueue, elements_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLActionQueue, remain_reinforcements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLActionQueueElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLActionQueueElement, entity_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLActionQueueElement, queue_state_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLActionQueueElement, seq_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLActionQueueElement, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLStartDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLStartDetail, effects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInActionDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInActionDetail, entity_state_in_turn_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInActionDetail, effects_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInActionDetail, energy_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInActionDetail, active_skill_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLInActionDetail, skill_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLPostPreActionDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLPostPreActionDetail, entity_state_in_turn_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLPostPreActionDetail, new_entities_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLPostPreActionDetail, effects_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLPostPreActionDetail, energy_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLBeforeEndDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLBeforeEndDetail, effects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntityStateInTurn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntityStateInTurn, code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntityStateInTurn, entity_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntityStateInTurn, skill_states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntitySkillState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntitySkillState, skill_mid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntitySkillState, cur_cd_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntitySkillState, cost_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntitySkillState, skill_state_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntitySkillState, candidate_targets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEffect, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEffect, mid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEffect, type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEffect, caster_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEffect, target_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEffect, source_mid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEffect, entities_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEffect, guid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEffect, effect_index_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEffect, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLDamageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLDamageInfo, display_val_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLDamageInfo, hp_change_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLDamageInfo, flags_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLDamageInfo, shield_change_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLHealInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLHealInfo, display_val_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLHealInfo, hp_change_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLHealInfo, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLSummonInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLSummonInfo, entities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLTransformInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLTransformInfo, old_enemy_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLTransformInfo, new_enemy_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLTriggerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLTriggerInfo, trigger_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLResistanceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLResistanceInfo, is_add_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLShowTextInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLShowTextInfo, show_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLShowTextInfo, config_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLReviveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLReviveInfo, hp_change_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLReviveInfo, entity_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLBuffInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLBuffInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLBuffInfo, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLAddBuffInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLAddBuffInfo, buff_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLAddBuffInfo, buff_guid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLAddBuffInfo, left_round_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLRemoveBuffInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLRemoveBuffInfo, buffs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLRemoveBuffItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLRemoveBuffItem, buff_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLRemoveBuffItem, buff_guid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLRemoveBuffItem, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLShieldChangeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLShieldChangeInfo, buff_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLShieldChangeInfo, buff_guid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLShieldChangeInfo, shield_change_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLShieldChangeInfo, change_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLSealChangeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLSealChangeInfo, skills_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLSealChangeInfo, seal_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLStateChangeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLStateChangeInfo, buff_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLStateChangeInfo, buff_guid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLStateChangeInfo, state_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLStateChangeInfo, change_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLChangedEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLChangedEntity, entities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBTLPullMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBTLPullMsg, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBTLPullMsg, unique_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper, msg_type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper, msg_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLPullMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLPullMsg, battle_ack_msgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBTLToggleAutoMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBTLToggleAutoMode, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBTLToggleAutoMode, toggle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLToggleAutoMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLToggleAutoMode, code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLToggleAutoMode, toggle_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLToggleAutoMode, auto_modes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntityAutoMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntityAutoMode, entity_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLEntityAutoMode, auto_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBTLUpdateEntityAutoMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBTLUpdateEntityAutoMode, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBTLUpdateEntityAutoMode, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLUpdateEntityAutoMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLUpdateEntityAutoMode, code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLUpdateEntityAutoMode, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBTLSetPrioTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBTLSetPrioTarget, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqBTLSetPrioTarget, entity_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLSetPrioTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLSetPrioTarget, code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLSetPrioTarget, prio_opposite_target_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLSetPrioTarget, prio_teammate_target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLeaveBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLeaveBattle, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLeaveBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLeaveBattle, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqContinuousBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqContinuousBattle, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckContinuousBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckContinuousBattle, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLRewardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLRewardInfo, reward_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLRewardInfo, reward_count_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLRewardInfo, reward_flag_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLRewardInfo, reward_guid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLEndInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLEndInfo, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLEndInfo, is_victory_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLEndInfo, victory_entity_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLEndInfo, add_player_exp_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLEndInfo, add_witch_exp_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLEndInfo, star_state_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLEndInfo, reward_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLEndInfo, extra_reward_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLEndInfo, end_by_kill_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLResult, unique_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckBTLResult, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLResult, victory_entity_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLResult, won_players_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::BTLResult, lost_players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReplayData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReplayData, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReplayData, replay_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReplayData, idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReplayData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReplayData, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReplayData, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReplayData, idx_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckReplayData, msgs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::KWMsg::BTLMsgWrapper)},
  { 13, -1, sizeof(::KWMsg::BTLBattleReplay_BTLBattleReplayWrapper)},
  { 20, -1, sizeof(::KWMsg::BTLBattleReplay)},
  { 26, -1, sizeof(::KWMsg::ReqEnterBattle)},
  { 43, -1, sizeof(::KWMsg::AckEnterBattle)},
  { 54, -1, sizeof(::KWMsg::AckBTLInfo)},
  { 61, -1, sizeof(::KWMsg::BTLInfo)},
  { 76, -1, sizeof(::KWMsg::BTLSettings)},
  { 85, -1, sizeof(::KWMsg::BTLEntity)},
  { 93, -1, sizeof(::KWMsg::AckBTLPk)},
  { 100, -1, sizeof(::KWMsg::BTLEnergyInfo)},
  { 110, -1, sizeof(::KWMsg::BTLPkInfo)},
  { 118, -1, sizeof(::KWMsg::BTLPkElement)},
  { 129, -1, sizeof(::KWMsg::ReqBTLAction)},
  { 135, -1, sizeof(::KWMsg::BTLOperation)},
  { 145, -1, sizeof(::KWMsg::BTLManualOperation)},
  { 153, -1, sizeof(::KWMsg::AckBTLAction)},
  { 160, -1, sizeof(::KWMsg::BTLAction)},
  { 173, -1, sizeof(::KWMsg::BTLActionQueue)},
  { 180, -1, sizeof(::KWMsg::BTLActionQueueElement)},
  { 189, -1, sizeof(::KWMsg::BTLStartDetail)},
  { 195, -1, sizeof(::KWMsg::BTLInActionDetail)},
  { 205, -1, sizeof(::KWMsg::BTLPostPreActionDetail)},
  { 214, -1, sizeof(::KWMsg::BTLBeforeEndDetail)},
  { 220, -1, sizeof(::KWMsg::BTLEntityStateInTurn)},
  { 228, -1, sizeof(::KWMsg::BTLEntitySkillState)},
  { 238, -1, sizeof(::KWMsg::BTLEffect)},
  { 261, -1, sizeof(::KWMsg::BTLDamageInfo)},
  { 270, -1, sizeof(::KWMsg::BTLHealInfo)},
  { 278, -1, sizeof(::KWMsg::BTLSummonInfo)},
  { 284, -1, sizeof(::KWMsg::BTLTransformInfo)},
  { 291, -1, sizeof(::KWMsg::BTLTriggerInfo)},
  { 297, -1, sizeof(::KWMsg::BTLResistanceInfo)},
  { 303, -1, sizeof(::KWMsg::BTLShowTextInfo)},
  { 310, -1, sizeof(::KWMsg::BTLReviveInfo)},
  { 317, -1, sizeof(::KWMsg::BTLBuffInfo)},
  { 328, -1, sizeof(::KWMsg::BTLAddBuffInfo)},
  { 336, -1, sizeof(::KWMsg::BTLRemoveBuffInfo)},
  { 342, -1, sizeof(::KWMsg::BTLRemoveBuffItem)},
  { 350, -1, sizeof(::KWMsg::BTLShieldChangeInfo)},
  { 359, -1, sizeof(::KWMsg::BTLSealChangeInfo)},
  { 366, -1, sizeof(::KWMsg::BTLStateChangeInfo)},
  { 375, -1, sizeof(::KWMsg::BTLChangedEntity)},
  { 381, -1, sizeof(::KWMsg::ReqBTLPullMsg)},
  { 388, -1, sizeof(::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper)},
  { 398, -1, sizeof(::KWMsg::AckBTLPullMsg)},
  { 404, -1, sizeof(::KWMsg::ReqBTLToggleAutoMode)},
  { 411, -1, sizeof(::KWMsg::AckBTLToggleAutoMode)},
  { 419, -1, sizeof(::KWMsg::BTLEntityAutoMode)},
  { 426, -1, sizeof(::KWMsg::ReqBTLUpdateEntityAutoMode)},
  { 433, -1, sizeof(::KWMsg::AckBTLUpdateEntityAutoMode)},
  { 440, -1, sizeof(::KWMsg::ReqBTLSetPrioTarget)},
  { 447, -1, sizeof(::KWMsg::AckBTLSetPrioTarget)},
  { 455, -1, sizeof(::KWMsg::ReqLeaveBattle)},
  { 461, -1, sizeof(::KWMsg::AckLeaveBattle)},
  { 467, -1, sizeof(::KWMsg::ReqContinuousBattle)},
  { 473, -1, sizeof(::KWMsg::AckContinuousBattle)},
  { 479, -1, sizeof(::KWMsg::BTLRewardInfo)},
  { 488, -1, sizeof(::KWMsg::AckBTLEndInfo)},
  { 502, -1, sizeof(::KWMsg::AckBTLResult)},
  { 509, -1, sizeof(::KWMsg::BTLResult)},
  { 517, -1, sizeof(::KWMsg::ReqReplayData)},
  { 525, -1, sizeof(::KWMsg::AckReplayData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLMsgWrapper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLBattleReplay_BTLBattleReplayWrapper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLBattleReplay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqEnterBattle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckEnterBattle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBTLInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBTLPk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLEnergyInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLPkInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLPkElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBTLAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLManualOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBTLAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLActionQueue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLActionQueueElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLStartDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLInActionDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLPostPreActionDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLBeforeEndDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLEntityStateInTurn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLEntitySkillState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLEffect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLDamageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLHealInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLSummonInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLTransformInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLTriggerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLResistanceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLShowTextInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLReviveInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLBuffInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLAddBuffInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLRemoveBuffInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLRemoveBuffItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLShieldChangeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLSealChangeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLStateChangeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLChangedEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBTLPullMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBTLPullMsg_BTLAckMsgWrapper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBTLPullMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBTLToggleAutoMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBTLToggleAutoMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLEntityAutoMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBTLUpdateEntityAutoMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBTLUpdateEntityAutoMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqBTLSetPrioTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBTLSetPrioTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqLeaveBattle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckLeaveBattle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqContinuousBattle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckContinuousBattle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLRewardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBTLEndInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckBTLResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_BTLResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqReplayData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckReplayData_default_instance_),
};

const char descriptor_table_protodef_kwmsgbattle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021kwmsgbattle.proto\022\005KWMsg\032\017kwmsgbase.pr"
  "oto\032\021kwmsgdefine.proto\"\230\002\n\rBTLMsgWrapper"
  "\022\020\n\010msg_type\030\001 \001(\005\022-\n\014begin_battle\030\002 \001(\013"
  "2\025.KWMsg.AckEnterBattleH\000\022!\n\004info\030\003 \001(\0132"
  "\021.KWMsg.AckBTLInfoH\000\022\035\n\002pk\030\004 \001(\0132\017.KWMsg"
  ".AckBTLPkH\000\022%\n\006action\030\005 \001(\0132\023.KWMsg.AckB"
  "TLActionH\000\022%\n\006result\030\006 \001(\0132\023.KWMsg.AckBT"
  "LResultH\000\022*\n\nend_battle\030\007 \001(\0132\024.KWMsg.Ac"
  "kBTLEndInfoH\000B\n\n\010msg_data\"\214\001\n\017BTLBattleR"
  "eplay\022;\n\004msgs\030\001 \003(\0132-.KWMsg.BTLBattleRep"
  "lay.BTLBattleReplayWrapper\032<\n\026BTLBattleR"
  "eplayWrapper\022\020\n\010msg_type\030\001 \001(\005\022\020\n\010msg_da"
  "ta\030\002 \001(\014\"\367\002\n\016ReqEnterBattle\022\037\n\tplayer_id"
  "\030\001 \001(\0132\014.KWMsg.Ident\022\024\n\014game_play_id\030\002 \001"
  "(\014\022\017\n\007team_id\030\003 \001(\014\022\030\n\020continuous_count\030"
  "\004 \001(\005\022\020\n\010auto_buy\030\005 \001(\005\022\"\n\014challenge_id\030"
  "\006 \001(\0132\014.KWMsg.Ident\022\037\n\treplay_id\030\007 \001(\0132\014"
  ".KWMsg.Ident\0220\n\032explore_dungeon_monster_"
  "id\030\010 \001(\0132\014.KWMsg.Ident\022#\n\033explore_dungeo"
  "n_monster_idx\030\t \001(\005\022&\n\020mercenary_player\030"
  "\n \001(\0132\014.KWMsg.Ident\022\026\n\016mercenary_unit\030\013 "
  "\001(\014\022\025\n\rmercenary_idx\030\014 \001(\005\"\240\001\n\016AckEnterB"
  "attle\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameE"
  "ventCode\022\020\n\010scene_id\030\002 \001(\005\022\024\n\014game_play_"
  "id\030\003 \001(\014\022\017\n\007team_id\030\004 \001(\014\022\030\n\020continuous_"
  "count\030\005 \001(\005\022\020\n\010auto_buy\030\006 \001(\005\"D\n\nAckBTLI"
  "nfo\022\021\n\tunique_id\030\001 \001(\005\022#\n\013battle_info\030\002 "
  "\001(\0132\016.KWMsg.BTLInfo\"\301\002\n\007BTLInfo\022\021\n\tbattl"
  "e_id\030\001 \001(\014\022\022\n\nbattle_mid\030\002 \001(\014\022+\n\017battle"
  "_settings\030\003 \001(\0132\022.KWMsg.BTLSettings\022\"\n\010e"
  "ntities\030\004 \003(\0132\020.KWMsg.BTLEntity\022*\n\024destr"
  "oyed_entity_ids\030\005 \003(\0132\014.KWMsg.Ident\022\'\n\013b"
  "attle_type\030\006 \001(\0162\022.KWMsg.EBattleType\022\037\n\027"
  "remain_continuous_count\030\007 \001(\005\022\024\n\014game_pl"
  "ay_id\030\010 \001(\014\022\023\n\013battle_mode\030\t \001(\005\022\035\n\007team"
  "_id\030\n \001(\0132\014.KWMsg.Ident\"t\n\013BTLSettings\022\031"
  "\n\021enable_auto_state\030\001 \001(\005\022\027\n\017enable_spee"
  "d_up\030\002 \001(\005\022\032\n\022default_auto_state\030\003 \001(\005\022\025"
  "\n\rdefault_speed\030\004 \001(\005\"\202\001\n\tBTLEntity\022\037\n\te"
  "ntity_id\030\001 \001(\0132\014.KWMsg.Ident\022+\n\010property"
  "\030\002 \001(\0132\031.KWMsg.ObjectPropertyList\022\'\n\006rec"
  "ord\030\003 \001(\0132\027.KWMsg.ObjectRecordList\";\n\010Ac"
  "kBTLPk\022\021\n\tunique_id\030\001 \001(\005\022\034\n\002pk\030\002 \001(\0132\020."
  "KWMsg.BTLPkInfo\"\200\001\n\rBTLEnergyInfo\022\035\n\007tea"
  "m_id\030\001 \001(\0132\014.KWMsg.Ident\022\017\n\007cristal\030\002 \001("
  "\005\022\025\n\rcristal_limit\030\003 \001(\005\022\021\n\tmagic_hue\030\004 "
  "\001(\005\022\025\n\rcristal_extra\030\005 \001(\005\"\201\001\n\tBTLPkInfo"
  "\022%\n\010elements\030\001 \003(\0132\023.KWMsg.BTLPkElement\022"
  "\"\n\010entities\030\002 \003(\0132\020.KWMsg.BTLEntity\022)\n\013e"
  "nergy_list\030\003 \003(\0132\024.KWMsg.BTLEnergyInfo\"\226"
  "\001\n\014BTLPkElement\022\037\n\tentity_id\030\001 \001(\0132\014.KWM"
  "sg.Ident\022\r\n\005fight\030\002 \001(\005\022\035\n\007team_id\030\003 \001(\013"
  "2\014.KWMsg.Ident\022\014\n\004name\030\004 \001(\014\022\023\n\013reward_t"
  "ype\030\005 \001(\005\022\024\n\014reward_count\030\006 \001(\005\"/\n\014ReqBT"
  "LAction\022\037\n\002op\030\001 \001(\0132\023.KWMsg.BTLOperation"
  "\"\222\001\n\014BTLOperation\022\037\n\tplayer_id\030\001 \001(\0132\014.K"
  "WMsg.Ident\022\021\n\007auto_op\030\002 \001(\005H\000\022.\n\tmanual_"
  "op\030\003 \001(\0132\031.KWMsg.BTLManualOperationH\000\022\021\n"
  "\007skip_op\030\004 \001(\005H\000B\013\n\toperation\"r\n\022BTLManu"
  "alOperation\022\021\n\tskill_mid\030\001 \001(\014\022\037\n\tcaster"
  "_id\030\002 \001(\0132\014.KWMsg.Ident\022(\n\022selected_targ"
  "et_id\030\003 \001(\0132\014.KWMsg.Ident\"C\n\014AckBTLActio"
  "n\022\021\n\tunique_id\030\001 \001(\005\022 \n\006action\030\002 \001(\0132\020.K"
  "WMsg.BTLAction\"\317\002\n\tBTLAction\022\036\n\005stage\030\001 "
  "\001(\0162\017.KWMsg.BTLStage\022\024\n\014round_number\030\002 \001"
  "(\005\022+\n\014action_queue\030\003 \001(\0132\025.KWMsg.BTLActi"
  "onQueue\022-\n\014start_action\030\004 \001(\0132\025.KWMsg.BT"
  "LStartDetailH\000\022-\n\tin_action\030\005 \001(\0132\030.KWMs"
  "g.BTLInActionDetailH\000\0228\n\017post_pre_action"
  "\030\006 \001(\0132\035.KWMsg.BTLPostPreActionDetailH\000\022"
  "6\n\021before_end_action\030\007 \001(\0132\031.KWMsg.BTLBe"
  "foreEndDetailH\000B\017\n\raction_detail\"_\n\016BTLA"
  "ctionQueue\022.\n\010elements\030\001 \003(\0132\034.KWMsg.BTL"
  "ActionQueueElement\022\035\n\025remain_reinforceme"
  "nts\030\002 \001(\005\"~\n\025BTLActionQueueElement\022\037\n\ten"
  "tity_id\030\001 \001(\0132\014.KWMsg.Ident\022)\n\013queue_sta"
  "te\030\002 \001(\0162\024.KWMsg.BTLQueueState\022\013\n\003seq\030\003 "
  "\001(\005\022\014\n\004flag\030\004 \001(\005\"3\n\016BTLStartDetail\022!\n\007e"
  "ffects\030\001 \003(\0132\020.KWMsg.BTLEffect\"\310\001\n\021BTLIn"
  "ActionDetail\0229\n\024entity_state_in_turn\030\001 \001"
  "(\0132\033.KWMsg.BTLEntityStateInTurn\022!\n\007effec"
  "ts\030\002 \003(\0132\020.KWMsg.BTLEffect\022)\n\013energy_lis"
  "t\030\003 \003(\0132\024.KWMsg.BTLEnergyInfo\022\024\n\014active_"
  "skill\030\004 \001(\014\022\024\n\014skill_result\030\005 \001(\014\"\311\001\n\026BT"
  "LPostPreActionDetail\0229\n\024entity_state_in_"
  "turn\030\001 \001(\0132\033.KWMsg.BTLEntityStateInTurn\022"
  "&\n\014new_entities\030\002 \003(\0132\020.KWMsg.BTLEntity\022"
  "!\n\007effects\030\003 \003(\0132\020.KWMsg.BTLEffect\022)\n\013en"
  "ergy_list\030\004 \003(\0132\024.KWMsg.BTLEnergyInfo\"7\n"
  "\022BTLBeforeEndDetail\022!\n\007effects\030\001 \003(\0132\020.K"
  "WMsg.BTLEffect\"\216\001\n\024BTLEntityStateInTurn\022"
  "#\n\004code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\037\n\t"
  "entity_id\030\002 \001(\0132\014.KWMsg.Ident\0220\n\014skill_s"
  "tates\030\003 \003(\0132\032.KWMsg.BTLEntitySkillState\""
  "\232\001\n\023BTLEntitySkillState\022\021\n\tskill_mid\030\001 \001"
  "(\014\022\016\n\006cur_cd\030\002 \001(\005\022\014\n\004cost\030\003 \001(\005\022)\n\013skil"
  "l_state\030\004 \001(\0162\024.KWMsg.BTLSkillState\022\'\n\021c"
  "andidate_targets\030\005 \003(\0132\014.KWMsg.Ident\"\317\004\n"
  "\tBTLEffect\022\013\n\003mid\030\001 \001(\014\022\014\n\004type\030\002 \001(\005\022\037\n"
  "\tcaster_id\030\003 \001(\0132\014.KWMsg.Ident\022\037\n\ttarget"
  "_id\030\004 \001(\0132\014.KWMsg.Ident\022\022\n\nsource_mid\030\005 "
  "\001(\014\022\"\n\010entities\030\006 \003(\0132\020.KWMsg.BTLEntity\022"
  "\032\n\004guid\030\007 \001(\0132\014.KWMsg.Ident\022\024\n\014effect_in"
  "dex\030\010 \001(\005\022&\n\006damage\030\t \001(\0132\024.KWMsg.BTLDam"
  "ageInfoH\000\022\"\n\004heal\030\n \001(\0132\022.KWMsg.BTLHealI"
  "nfoH\000\022&\n\006summon\030\013 \001(\0132\024.KWMsg.BTLSummonI"
  "nfoH\000\022\"\n\004buff\030\014 \001(\0132\022.KWMsg.BTLBuffInfoH"
  "\000\022,\n\ttransform\030\r \001(\0132\027.KWMsg.BTLTransfor"
  "mInfoH\000\022(\n\007trigger\030\016 \001(\0132\025.KWMsg.BTLTrig"
  "gerInfoH\000\022.\n\nresistance\030\017 \001(\0132\030.KWMsg.BT"
  "LResistanceInfoH\000\022+\n\tshow_text\030\020 \001(\0132\026.K"
  "WMsg.BTLShowTextInfoH\000\022&\n\006revive\030\021 \001(\0132\024"
  ".KWMsg.BTLReviveInfoH\000B\006\n\004data\"y\n\rBTLDam"
  "ageInfo\022\023\n\013display_val\030\001 \001(\005\022\021\n\thp_chang"
  "e\030\002 \001(\005\022\r\n\005flags\030\003 \001(\005\0221\n\rshield_change\030"
  "\004 \001(\0132\032.KWMsg.BTLShieldChangeInfo\"D\n\013BTL"
  "HealInfo\022\023\n\013display_val\030\001 \001(\005\022\021\n\thp_chan"
  "ge\030\002 \001(\005\022\r\n\005flags\030\003 \001(\005\"3\n\rBTLSummonInfo"
  "\022\"\n\010entities\030\001 \003(\0132\020.KWMsg.BTLEntity\">\n\020"
  "BTLTransformInfo\022\024\n\014old_enemy_id\030\001 \001(\014\022\024"
  "\n\014new_enemy_id\030\002 \001(\014\"$\n\016BTLTriggerInfo\022\022"
  "\n\ntrigger_id\030\001 \001(\014\"#\n\021BTLResistanceInfo\022"
  "\016\n\006is_add\030\001 \001(\005\"7\n\017BTLShowTextInfo\022\021\n\tsh"
  "ow_type\030\001 \001(\005\022\021\n\tconfig_id\030\002 \001(\014\"C\n\rBTLR"
  "eviveInfo\022\021\n\thp_change\030\001 \001(\005\022\037\n\tentity_i"
  "d\030\002 \001(\0132\014.KWMsg.Ident\"\212\002\n\013BTLBuffInfo\022)\n"
  "\010add_buff\030\001 \001(\0132\025.KWMsg.BTLAddBuffInfoH\000"
  "\022/\n\013remove_buff\030\002 \001(\0132\030.KWMsg.BTLRemoveB"
  "uffInfoH\000\0223\n\rshield_change\030\003 \001(\0132\032.KWMsg"
  ".BTLShieldChangeInfoH\000\022/\n\013seal_change\030\004 "
  "\001(\0132\030.KWMsg.BTLSealChangeInfoH\000\0221\n\014state"
  "_change\030\005 \001(\0132\031.KWMsg.BTLStateChangeInfo"
  "H\000B\006\n\004data\"V\n\016BTLAddBuffInfo\022\017\n\007buff_id\030"
  "\001 \001(\014\022\037\n\tbuff_guid\030\002 \001(\0132\014.KWMsg.Ident\022\022"
  "\n\nleft_round\030\003 \001(\005\"<\n\021BTLRemoveBuffInfo\022"
  "\'\n\005buffs\030\001 \003(\0132\030.KWMsg.BTLRemoveBuffItem"
  "\"q\n\021BTLRemoveBuffItem\022\017\n\007buff_id\030\001 \001(\014\022\037"
  "\n\tbuff_guid\030\002 \001(\0132\014.KWMsg.Ident\022*\n\006reaso"
  "n\030\003 \001(\0162\032.KWMsg.BTLBuffRemoveReason\"s\n\023B"
  "TLShieldChangeInfo\022\017\n\007buff_id\030\001 \001(\014\022\037\n\tb"
  "uff_guid\030\002 \001(\0132\014.KWMsg.Ident\022\025\n\rshield_c"
  "hange\030\003 \001(\005\022\023\n\013change_mode\030\004 \001(\005\"6\n\021BTLS"
  "ealChangeInfo\022\016\n\006skills\030\001 \003(\014\022\021\n\tseal_mo"
  "de\030\002 \001(\005\"j\n\022BTLStateChangeInfo\022\017\n\007buff_i"
  "d\030\001 \001(\014\022\037\n\tbuff_guid\030\002 \001(\0132\014.KWMsg.Ident"
  "\022\r\n\005state\030\003 \001(\005\022\023\n\013change_mode\030\004 \001(\005\"6\n\020"
  "BTLChangedEntity\022\"\n\010entities\030\001 \003(\0132\020.KWM"
  "sg.BTLEntity\"C\n\rReqBTLPullMsg\022\037\n\tplayer_"
  "id\030\001 \001(\0132\014.KWMsg.Ident\022\021\n\tunique_id\030\002 \001("
  "\005\"\353\001\n\rAckBTLPullMsg\022>\n\017battle_ack_msgs\030\001"
  " \003(\0132%.KWMsg.AckBTLPullMsg.BTLAckMsgWrap"
  "per\032\231\001\n\020BTLAckMsgWrapper\022\020\n\010msg_type\030\001 \001"
  "(\005\022!\n\004info\030\002 \001(\0132\021.KWMsg.AckBTLInfoH\000\022\035\n"
  "\002pk\030\003 \001(\0132\017.KWMsg.AckBTLPkH\000\022%\n\006action\030\004"
  " \001(\0132\023.KWMsg.AckBTLActionH\000B\n\n\010msg_data\""
  "G\n\024ReqBTLToggleAutoMode\022\037\n\tplayer_id\030\001 \001"
  "(\0132\014.KWMsg.Ident\022\016\n\006toggle\030\002 \001(\005\"y\n\024AckB"
  "TLToggleAutoMode\022#\n\004code\030\001 \001(\0162\025.KWMsg.E"
  "GameEventCode\022\016\n\006toggle\030\002 \001(\005\022,\n\nauto_mo"
  "des\030\003 \003(\0132\030.KWMsg.BTLEntityAutoMode\"[\n\021B"
  "TLEntityAutoMode\022\037\n\tentity_id\030\001 \001(\0132\014.KW"
  "Msg.Ident\022%\n\tauto_mode\030\002 \001(\0162\022.KWMsg.BTL"
  "AutoMode\"e\n\032ReqBTLUpdateEntityAutoMode\022\037"
  "\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022&\n\004mode\030"
  "\002 \001(\0132\030.KWMsg.BTLEntityAutoMode\"i\n\032AckBT"
  "LUpdateEntityAutoMode\022#\n\004code\030\001 \001(\0162\025.KW"
  "Msg.EGameEventCode\022&\n\004mode\030\002 \001(\0132\030.KWMsg"
  ".BTLEntityAutoMode\"W\n\023ReqBTLSetPrioTarge"
  "t\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\037\n\ten"
  "tity_id\030\002 \001(\0132\014.KWMsg.Ident\"\222\001\n\023AckBTLSe"
  "tPrioTarget\022#\n\004code\030\001 \001(\0162\025.KWMsg.EGameE"
  "ventCode\022*\n\024prio_opposite_target\030\002 \001(\0132\014"
  ".KWMsg.Ident\022*\n\024prio_teammate_target\030\003 \001"
  "(\0132\014.KWMsg.Ident\"1\n\016ReqLeaveBattle\022\037\n\tpl"
  "ayer_id\030\001 \001(\0132\014.KWMsg.Ident\";\n\016AckLeaveB"
  "attle\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameE"
  "ventCode\"6\n\023ReqContinuousBattle\022\037\n\tplaye"
  "r_id\030\001 \001(\0132\014.KWMsg.Ident\"@\n\023AckContinuou"
  "sBattle\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGam"
  "eEventCode\"p\n\rBTLRewardInfo\022\021\n\treward_id"
  "\030\001 \001(\014\022\024\n\014reward_count\030\002 \001(\005\022\023\n\013reward_f"
  "lag\030\003 \001(\005\022!\n\013reward_guid\030\004 \001(\0132\014.KWMsg.I"
  "dent\"\241\002\n\rAckBTLEndInfo\022\037\n\tplayer_id\030\001 \001("
  "\0132\014.KWMsg.Ident\022\022\n\nis_victory\030\002 \001(\005\022\'\n\021v"
  "ictory_entity_id\030\003 \001(\0132\014.KWMsg.Ident\022\026\n\016"
  "add_player_exp\030\004 \001(\005\022\025\n\radd_witch_exp\030\005 "
  "\001(\005\022\022\n\nstar_state\030\006 \001(\005\022)\n\013reward_list\030\007"
  " \003(\0132\024.KWMsg.BTLRewardInfo\022/\n\021extra_rewa"
  "rd_list\030\010 \003(\0132\024.KWMsg.BTLRewardInfo\022\023\n\013e"
  "nd_by_kill\030\t \001(\005\"C\n\014AckBTLResult\022\021\n\tuniq"
  "ue_id\030\001 \001(\005\022 \n\006result\030\002 \001(\0132\020.KWMsg.BTLR"
  "esult\"{\n\tBTLResult\022\'\n\021victory_entity_id\030"
  "\001 \001(\0132\014.KWMsg.Ident\022!\n\013won_players\030\002 \003(\013"
  "2\014.KWMsg.Ident\022\"\n\014lost_players\030\003 \003(\0132\014.K"
  "WMsg.Ident\"^\n\rReqReplayData\022\037\n\tplayer_id"
  "\030\001 \001(\0132\014.KWMsg.Ident\022\037\n\treplay_id\030\002 \001(\0132"
  "\014.KWMsg.Ident\022\013\n\003idx\030\003 \001(\005\"\214\001\n\rAckReplay"
  "Data\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEv"
  "entCode\022\037\n\tplayer_id\030\002 \001(\0132\014.KWMsg.Ident"
  "\022\013\n\003idx\030\003 \001(\005\022\"\n\004msgs\030\004 \003(\0132\024.KWMsg.BTLM"
  "sgWrapper*g\n\010BTLStage\022\013\n\007BS_NONE\020\000\022\014\n\010BS"
  "_START\020\001\022\026\n\022BS_ROLE_PRE_ACTION\020\002\022\025\n\021BS_R"
  "OLE_IN_ACTION\020\003\022\021\n\rBS_BEFORE_END\020\004*I\n\rBT"
  "LQueueState\022\022\n\016BQS_NOT_ACTION\020\000\022\022\n\016BQS_H"
  "AS_ACTION\020\001\022\020\n\014BQS_CHARGING\020\002*\271\001\n\rBTLSki"
  "llState\022\016\n\nBSS_NORMAL\020\000\022\016\n\nBSS_SEALED\020\001\022"
  "\031\n\025BSS_INSUFFICIENT_COST\020\002\022\n\n\006BSS_CD\020\003\022\033"
  "\n\027BSS_NO_CANDIDATE_TARGET\020\004\022\024\n\020BSS_NO_US"
  "E_TIMES\020\005\022\022\n\016BSS_CONTROLLED\020\006\022\032\n\026BSS_CON"
  "DITION_NOT_PASS\020\007*\244\001\n\rBTLEffectFlag\022\013\n\007B"
  "T_NONE\020\000\022\017\n\013BT_RESTRAIN\020\001\022\013\n\007BT_CRIT\020\002\022\013"
  "\n\007BT_MISS\020\004\022\025\n\021BT_SHIELD_ABOSORB\020\010\022\023\n\017BT"
  "_SHIELD_BREAK\020\020\022\016\n\nBT_UNDYING\020 \022\016\n\nBT_PR"
  "OTECT\020@\022\017\n\nBT_NO_CURE\020\200\001*\263\001\n\023BTLBuffRemo"
  "veReason\022\022\n\016BT_BRR_UNKNOWN\020\000\022\022\n\016BT_BRR_T"
  "IMEOUT\020\001\022\022\n\016BT_BRR_REPLACE\020\002\022\026\n\022BT_BRR_E"
  "NTITY_DEAD\020\003\022\025\n\021BT_BRR_BATTLE_END\020\004\022\027\n\023B"
  "T_BRR_SKILL_EFFECT\020\005\022\030\n\024BT_BRR_SHIELD_BR"
  "OKEN\020\006*\177\n\013BTLAutoMode\022\024\n\020BTAM_INTELLIGEN"
  "T\020\000\022\035\n\031BTAM_ULTIMATE_SKILL_FIRST\020\001\022\035\n\031BT"
  "AM_ADVANCED_SKILL_FIRST\020\002\022\034\n\030BTAM_NORMAL"
  "_ATTACK_FIRST\020\003B\nZ\010./;KWMsgb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kwmsgbattle_2eproto_deps[2] = {
  &::descriptor_table_kwmsgbase_2eproto,
  &::descriptor_table_kwmsgdefine_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kwmsgbattle_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kwmsgbattle_2eproto = {
  false, false, 8875, descriptor_table_protodef_kwmsgbattle_2eproto, "kwmsgbattle.proto", 
  &descriptor_table_kwmsgbattle_2eproto_once, descriptor_table_kwmsgbattle_2eproto_deps, 2, 63,
  schemas, file_default_instances, TableStruct_kwmsgbattle_2eproto::offsets,
  file_level_metadata_kwmsgbattle_2eproto, file_level_enum_descriptors_kwmsgbattle_2eproto, file_level_service_descriptors_kwmsgbattle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_kwmsgbattle_2eproto_getter() {
  return &descriptor_table_kwmsgbattle_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_kwmsgbattle_2eproto(&descriptor_table_kwmsgbattle_2eproto);
namespace KWMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BTLStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgbattle_2eproto);
  return file_level_enum_descriptors_kwmsgbattle_2eproto[0];
}
bool BTLStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BTLQueueState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgbattle_2eproto);
  return file_level_enum_descriptors_kwmsgbattle_2eproto[1];
}
bool BTLQueueState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BTLSkillState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgbattle_2eproto);
  return file_level_enum_descriptors_kwmsgbattle_2eproto[2];
}
bool BTLSkillState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BTLEffectFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgbattle_2eproto);
  return file_level_enum_descriptors_kwmsgbattle_2eproto[3];
}
bool BTLEffectFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BTLBuffRemoveReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgbattle_2eproto);
  return file_level_enum_descriptors_kwmsgbattle_2eproto[4];
}
bool BTLBuffRemoveReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BTLAutoMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgbattle_2eproto);
  return file_level_enum_descriptors_kwmsgbattle_2eproto[5];
}
bool BTLAutoMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BTLMsgWrapper::_Internal {
 public:
  static const ::KWMsg::AckEnterBattle& begin_battle(const BTLMsgWrapper* msg);
  static const ::KWMsg::AckBTLInfo& info(const BTLMsgWrapper* msg);
  static const ::KWMsg::AckBTLPk& pk(const BTLMsgWrapper* msg);
  static const ::KWMsg::AckBTLAction& action(const BTLMsgWrapper* msg);
  static const ::KWMsg::AckBTLResult& result(const BTLMsgWrapper* msg);
  static const ::KWMsg::AckBTLEndInfo& end_battle(const BTLMsgWrapper* msg);
};

const ::KWMsg::AckEnterBattle&
BTLMsgWrapper::_Internal::begin_battle(const BTLMsgWrapper* msg) {
  return *msg->msg_data_.begin_battle_;
}
const ::KWMsg::AckBTLInfo&
BTLMsgWrapper::_Internal::info(const BTLMsgWrapper* msg) {
  return *msg->msg_data_.info_;
}
const ::KWMsg::AckBTLPk&
BTLMsgWrapper::_Internal::pk(const BTLMsgWrapper* msg) {
  return *msg->msg_data_.pk_;
}
const ::KWMsg::AckBTLAction&
BTLMsgWrapper::_Internal::action(const BTLMsgWrapper* msg) {
  return *msg->msg_data_.action_;
}
const ::KWMsg::AckBTLResult&
BTLMsgWrapper::_Internal::result(const BTLMsgWrapper* msg) {
  return *msg->msg_data_.result_;
}
const ::KWMsg::AckBTLEndInfo&
BTLMsgWrapper::_Internal::end_battle(const BTLMsgWrapper* msg) {
  return *msg->msg_data_.end_battle_;
}
void BTLMsgWrapper::set_allocated_begin_battle(::KWMsg::AckEnterBattle* begin_battle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg_data();
  if (begin_battle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::AckEnterBattle>::GetOwningArena(begin_battle);
    if (message_arena != submessage_arena) {
      begin_battle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, begin_battle, submessage_arena);
    }
    set_has_begin_battle();
    msg_data_.begin_battle_ = begin_battle;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLMsgWrapper.begin_battle)
}
void BTLMsgWrapper::set_allocated_info(::KWMsg::AckBTLInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg_data();
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::AckBTLInfo>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
    msg_data_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLMsgWrapper.info)
}
void BTLMsgWrapper::set_allocated_pk(::KWMsg::AckBTLPk* pk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg_data();
  if (pk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::AckBTLPk>::GetOwningArena(pk);
    if (message_arena != submessage_arena) {
      pk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pk, submessage_arena);
    }
    set_has_pk();
    msg_data_.pk_ = pk;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLMsgWrapper.pk)
}
void BTLMsgWrapper::set_allocated_action(::KWMsg::AckBTLAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg_data();
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::AckBTLAction>::GetOwningArena(action);
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    set_has_action();
    msg_data_.action_ = action;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLMsgWrapper.action)
}
void BTLMsgWrapper::set_allocated_result(::KWMsg::AckBTLResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg_data();
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::AckBTLResult>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    set_has_result();
    msg_data_.result_ = result;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLMsgWrapper.result)
}
void BTLMsgWrapper::set_allocated_end_battle(::KWMsg::AckBTLEndInfo* end_battle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg_data();
  if (end_battle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::AckBTLEndInfo>::GetOwningArena(end_battle);
    if (message_arena != submessage_arena) {
      end_battle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_battle, submessage_arena);
    }
    set_has_end_battle();
    msg_data_.end_battle_ = end_battle;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLMsgWrapper.end_battle)
}
BTLMsgWrapper::BTLMsgWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLMsgWrapper)
}
BTLMsgWrapper::BTLMsgWrapper(const BTLMsgWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_type_ = from.msg_type_;
  clear_has_msg_data();
  switch (from.msg_data_case()) {
    case kBeginBattle: {
      _internal_mutable_begin_battle()->::KWMsg::AckEnterBattle::MergeFrom(from._internal_begin_battle());
      break;
    }
    case kInfo: {
      _internal_mutable_info()->::KWMsg::AckBTLInfo::MergeFrom(from._internal_info());
      break;
    }
    case kPk: {
      _internal_mutable_pk()->::KWMsg::AckBTLPk::MergeFrom(from._internal_pk());
      break;
    }
    case kAction: {
      _internal_mutable_action()->::KWMsg::AckBTLAction::MergeFrom(from._internal_action());
      break;
    }
    case kResult: {
      _internal_mutable_result()->::KWMsg::AckBTLResult::MergeFrom(from._internal_result());
      break;
    }
    case kEndBattle: {
      _internal_mutable_end_battle()->::KWMsg::AckBTLEndInfo::MergeFrom(from._internal_end_battle());
      break;
    }
    case MSG_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLMsgWrapper)
}

void BTLMsgWrapper::SharedCtor() {
msg_type_ = 0;
clear_has_msg_data();
}

BTLMsgWrapper::~BTLMsgWrapper() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLMsgWrapper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLMsgWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg_data()) {
    clear_msg_data();
  }
}

void BTLMsgWrapper::ArenaDtor(void* object) {
  BTLMsgWrapper* _this = reinterpret_cast< BTLMsgWrapper* >(object);
  (void)_this;
}
void BTLMsgWrapper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLMsgWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLMsgWrapper::clear_msg_data() {
// @@protoc_insertion_point(one_of_clear_start:KWMsg.BTLMsgWrapper)
  switch (msg_data_case()) {
    case kBeginBattle: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_data_.begin_battle_;
      }
      break;
    }
    case kInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_data_.info_;
      }
      break;
    }
    case kPk: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_data_.pk_;
      }
      break;
    }
    case kAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_data_.action_;
      }
      break;
    }
    case kResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_data_.result_;
      }
      break;
    }
    case kEndBattle: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_data_.end_battle_;
      }
      break;
    }
    case MSG_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_DATA_NOT_SET;
}


void BTLMsgWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLMsgWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_type_ = 0;
  clear_msg_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLMsgWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.AckEnterBattle begin_battle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_begin_battle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.AckBTLInfo info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.AckBTLPk pk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.AckBTLAction action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.AckBTLResult result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.AckBTLEndInfo end_battle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_battle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLMsgWrapper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLMsgWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg_type = 1;
  if (this->msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg_type(), target);
  }

  // .KWMsg.AckEnterBattle begin_battle = 2;
  if (_internal_has_begin_battle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::begin_battle(this), target, stream);
  }

  // .KWMsg.AckBTLInfo info = 3;
  if (_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::info(this), target, stream);
  }

  // .KWMsg.AckBTLPk pk = 4;
  if (_internal_has_pk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pk(this), target, stream);
  }

  // .KWMsg.AckBTLAction action = 5;
  if (_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::action(this), target, stream);
  }

  // .KWMsg.AckBTLResult result = 6;
  if (_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::result(this), target, stream);
  }

  // .KWMsg.AckBTLEndInfo end_battle = 7;
  if (_internal_has_end_battle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::end_battle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLMsgWrapper)
  return target;
}

size_t BTLMsgWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLMsgWrapper)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 msg_type = 1;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_type());
  }

  switch (msg_data_case()) {
    // .KWMsg.AckEnterBattle begin_battle = 2;
    case kBeginBattle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_data_.begin_battle_);
      break;
    }
    // .KWMsg.AckBTLInfo info = 3;
    case kInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_data_.info_);
      break;
    }
    // .KWMsg.AckBTLPk pk = 4;
    case kPk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_data_.pk_);
      break;
    }
    // .KWMsg.AckBTLAction action = 5;
    case kAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_data_.action_);
      break;
    }
    // .KWMsg.AckBTLResult result = 6;
    case kResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_data_.result_);
      break;
    }
    // .KWMsg.AckBTLEndInfo end_battle = 7;
    case kEndBattle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_data_.end_battle_);
      break;
    }
    case MSG_DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLMsgWrapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLMsgWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLMsgWrapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLMsgWrapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLMsgWrapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLMsgWrapper)
    MergeFrom(*source);
  }
}

void BTLMsgWrapper::MergeFrom(const BTLMsgWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLMsgWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  switch (from.msg_data_case()) {
    case kBeginBattle: {
      _internal_mutable_begin_battle()->::KWMsg::AckEnterBattle::MergeFrom(from._internal_begin_battle());
      break;
    }
    case kInfo: {
      _internal_mutable_info()->::KWMsg::AckBTLInfo::MergeFrom(from._internal_info());
      break;
    }
    case kPk: {
      _internal_mutable_pk()->::KWMsg::AckBTLPk::MergeFrom(from._internal_pk());
      break;
    }
    case kAction: {
      _internal_mutable_action()->::KWMsg::AckBTLAction::MergeFrom(from._internal_action());
      break;
    }
    case kResult: {
      _internal_mutable_result()->::KWMsg::AckBTLResult::MergeFrom(from._internal_result());
      break;
    }
    case kEndBattle: {
      _internal_mutable_end_battle()->::KWMsg::AckBTLEndInfo::MergeFrom(from._internal_end_battle());
      break;
    }
    case MSG_DATA_NOT_SET: {
      break;
    }
  }
}

void BTLMsgWrapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLMsgWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLMsgWrapper::CopyFrom(const BTLMsgWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLMsgWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLMsgWrapper::IsInitialized() const {
  return true;
}

void BTLMsgWrapper::InternalSwap(BTLMsgWrapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(msg_type_, other->msg_type_);
  swap(msg_data_, other->msg_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLMsgWrapper::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[0]);
}

// ===================================================================

class BTLBattleReplay_BTLBattleReplayWrapper::_Internal {
 public:
};

BTLBattleReplay_BTLBattleReplayWrapper::BTLBattleReplay_BTLBattleReplayWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLBattleReplay.BTLBattleReplayWrapper)
}
BTLBattleReplay_BTLBattleReplayWrapper::BTLBattleReplay_BTLBattleReplayWrapper(const BTLBattleReplay_BTLBattleReplayWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_data().empty()) {
    msg_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_data(), 
      GetArenaForAllocation());
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLBattleReplay.BTLBattleReplayWrapper)
}

void BTLBattleReplay_BTLBattleReplayWrapper::SharedCtor() {
msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msg_type_ = 0;
}

BTLBattleReplay_BTLBattleReplayWrapper::~BTLBattleReplay_BTLBattleReplayWrapper() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLBattleReplay.BTLBattleReplayWrapper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLBattleReplay_BTLBattleReplayWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BTLBattleReplay_BTLBattleReplayWrapper::ArenaDtor(void* object) {
  BTLBattleReplay_BTLBattleReplayWrapper* _this = reinterpret_cast< BTLBattleReplay_BTLBattleReplayWrapper* >(object);
  (void)_this;
}
void BTLBattleReplay_BTLBattleReplayWrapper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLBattleReplay_BTLBattleReplayWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLBattleReplay_BTLBattleReplayWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLBattleReplay.BTLBattleReplayWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_data_.ClearToEmpty();
  msg_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLBattleReplay_BTLBattleReplayWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLBattleReplay_BTLBattleReplayWrapper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLBattleReplay.BTLBattleReplayWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg_type = 1;
  if (this->msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg_type(), target);
  }

  // bytes msg_data = 2;
  if (!this->msg_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLBattleReplay.BTLBattleReplayWrapper)
  return target;
}

size_t BTLBattleReplay_BTLBattleReplayWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLBattleReplay.BTLBattleReplayWrapper)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_data = 2;
  if (!this->msg_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_data());
  }

  // int32 msg_type = 1;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLBattleReplay_BTLBattleReplayWrapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLBattleReplay.BTLBattleReplayWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLBattleReplay_BTLBattleReplayWrapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLBattleReplay_BTLBattleReplayWrapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLBattleReplay.BTLBattleReplayWrapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLBattleReplay.BTLBattleReplayWrapper)
    MergeFrom(*source);
  }
}

void BTLBattleReplay_BTLBattleReplayWrapper::MergeFrom(const BTLBattleReplay_BTLBattleReplayWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLBattleReplay.BTLBattleReplayWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.msg_data().empty()) {
    _internal_set_msg_data(from._internal_msg_data());
  }
  if (from.msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
}

void BTLBattleReplay_BTLBattleReplayWrapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLBattleReplay.BTLBattleReplayWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLBattleReplay_BTLBattleReplayWrapper::CopyFrom(const BTLBattleReplay_BTLBattleReplayWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLBattleReplay.BTLBattleReplayWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLBattleReplay_BTLBattleReplayWrapper::IsInitialized() const {
  return true;
}

void BTLBattleReplay_BTLBattleReplayWrapper::InternalSwap(BTLBattleReplay_BTLBattleReplayWrapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_data_, GetArenaForAllocation(),
      &other->msg_data_, other->GetArenaForAllocation()
  );
  swap(msg_type_, other->msg_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLBattleReplay_BTLBattleReplayWrapper::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[1]);
}

// ===================================================================

class BTLBattleReplay::_Internal {
 public:
};

BTLBattleReplay::BTLBattleReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  msgs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLBattleReplay)
}
BTLBattleReplay::BTLBattleReplay(const BTLBattleReplay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msgs_(from.msgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLBattleReplay)
}

void BTLBattleReplay::SharedCtor() {
}

BTLBattleReplay::~BTLBattleReplay() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLBattleReplay)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLBattleReplay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BTLBattleReplay::ArenaDtor(void* object) {
  BTLBattleReplay* _this = reinterpret_cast< BTLBattleReplay* >(object);
  (void)_this;
}
void BTLBattleReplay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLBattleReplay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLBattleReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLBattleReplay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLBattleReplay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.BTLBattleReplay.BTLBattleReplayWrapper msgs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLBattleReplay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLBattleReplay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.BTLBattleReplay.BTLBattleReplayWrapper msgs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_msgs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLBattleReplay)
  return target;
}

size_t BTLBattleReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLBattleReplay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BTLBattleReplay.BTLBattleReplayWrapper msgs = 1;
  total_size += 1UL * this->_internal_msgs_size();
  for (const auto& msg : this->msgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLBattleReplay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLBattleReplay)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLBattleReplay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLBattleReplay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLBattleReplay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLBattleReplay)
    MergeFrom(*source);
  }
}

void BTLBattleReplay::MergeFrom(const BTLBattleReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLBattleReplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
}

void BTLBattleReplay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLBattleReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLBattleReplay::CopyFrom(const BTLBattleReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLBattleReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLBattleReplay::IsInitialized() const {
  return true;
}

void BTLBattleReplay::InternalSwap(BTLBattleReplay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msgs_.InternalSwap(&other->msgs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLBattleReplay::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[2]);
}

// ===================================================================

class ReqEnterBattle::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqEnterBattle* msg);
  static const ::KWMsg::Ident& challenge_id(const ReqEnterBattle* msg);
  static const ::KWMsg::Ident& replay_id(const ReqEnterBattle* msg);
  static const ::KWMsg::Ident& explore_dungeon_monster_id(const ReqEnterBattle* msg);
  static const ::KWMsg::Ident& mercenary_player(const ReqEnterBattle* msg);
};

const ::KWMsg::Ident&
ReqEnterBattle::_Internal::player_id(const ReqEnterBattle* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqEnterBattle::_Internal::challenge_id(const ReqEnterBattle* msg) {
  return *msg->challenge_id_;
}
const ::KWMsg::Ident&
ReqEnterBattle::_Internal::replay_id(const ReqEnterBattle* msg) {
  return *msg->replay_id_;
}
const ::KWMsg::Ident&
ReqEnterBattle::_Internal::explore_dungeon_monster_id(const ReqEnterBattle* msg) {
  return *msg->explore_dungeon_monster_id_;
}
const ::KWMsg::Ident&
ReqEnterBattle::_Internal::mercenary_player(const ReqEnterBattle* msg) {
  return *msg->mercenary_player_;
}
void ReqEnterBattle::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqEnterBattle::clear_challenge_id() {
  if (GetArenaForAllocation() == nullptr && challenge_id_ != nullptr) {
    delete challenge_id_;
  }
  challenge_id_ = nullptr;
}
void ReqEnterBattle::clear_replay_id() {
  if (GetArenaForAllocation() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
}
void ReqEnterBattle::clear_explore_dungeon_monster_id() {
  if (GetArenaForAllocation() == nullptr && explore_dungeon_monster_id_ != nullptr) {
    delete explore_dungeon_monster_id_;
  }
  explore_dungeon_monster_id_ = nullptr;
}
void ReqEnterBattle::clear_mercenary_player() {
  if (GetArenaForAllocation() == nullptr && mercenary_player_ != nullptr) {
    delete mercenary_player_;
  }
  mercenary_player_ = nullptr;
}
ReqEnterBattle::ReqEnterBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqEnterBattle)
}
ReqEnterBattle::ReqEnterBattle(const ReqEnterBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_play_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_play_id().empty()) {
    game_play_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_play_id(), 
      GetArenaForAllocation());
  }
  team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_team_id().empty()) {
    team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_id(), 
      GetArenaForAllocation());
  }
  mercenary_unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mercenary_unit().empty()) {
    mercenary_unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mercenary_unit(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_challenge_id()) {
    challenge_id_ = new ::KWMsg::Ident(*from.challenge_id_);
  } else {
    challenge_id_ = nullptr;
  }
  if (from._internal_has_replay_id()) {
    replay_id_ = new ::KWMsg::Ident(*from.replay_id_);
  } else {
    replay_id_ = nullptr;
  }
  if (from._internal_has_explore_dungeon_monster_id()) {
    explore_dungeon_monster_id_ = new ::KWMsg::Ident(*from.explore_dungeon_monster_id_);
  } else {
    explore_dungeon_monster_id_ = nullptr;
  }
  if (from._internal_has_mercenary_player()) {
    mercenary_player_ = new ::KWMsg::Ident(*from.mercenary_player_);
  } else {
    mercenary_player_ = nullptr;
  }
  ::memcpy(&continuous_count_, &from.continuous_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&mercenary_idx_) -
    reinterpret_cast<char*>(&continuous_count_)) + sizeof(mercenary_idx_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqEnterBattle)
}

void ReqEnterBattle::SharedCtor() {
game_play_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mercenary_unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mercenary_idx_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(mercenary_idx_));
}

ReqEnterBattle::~ReqEnterBattle() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqEnterBattle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqEnterBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  game_play_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mercenary_unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete challenge_id_;
  if (this != internal_default_instance()) delete replay_id_;
  if (this != internal_default_instance()) delete explore_dungeon_monster_id_;
  if (this != internal_default_instance()) delete mercenary_player_;
}

void ReqEnterBattle::ArenaDtor(void* object) {
  ReqEnterBattle* _this = reinterpret_cast< ReqEnterBattle* >(object);
  (void)_this;
}
void ReqEnterBattle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqEnterBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqEnterBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqEnterBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_play_id_.ClearToEmpty();
  team_id_.ClearToEmpty();
  mercenary_unit_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && challenge_id_ != nullptr) {
    delete challenge_id_;
  }
  challenge_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && explore_dungeon_monster_id_ != nullptr) {
    delete explore_dungeon_monster_id_;
  }
  explore_dungeon_monster_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mercenary_player_ != nullptr) {
    delete mercenary_player_;
  }
  mercenary_player_ = nullptr;
  ::memset(&continuous_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mercenary_idx_) -
      reinterpret_cast<char*>(&continuous_count_)) + sizeof(mercenary_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqEnterBattle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes game_play_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_game_play_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes team_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 continuous_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          continuous_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 auto_buy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          auto_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident challenge_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_challenge_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident replay_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident explore_dungeon_monster_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_explore_dungeon_monster_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 explore_dungeon_monster_idx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          explore_dungeon_monster_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident mercenary_player = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mercenary_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes mercenary_unit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_mercenary_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mercenary_idx = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          mercenary_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqEnterBattle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqEnterBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes game_play_id = 2;
  if (!this->game_play_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_game_play_id(), target);
  }

  // bytes team_id = 3;
  if (!this->team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_team_id(), target);
  }

  // int32 continuous_count = 4;
  if (this->continuous_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_continuous_count(), target);
  }

  // int32 auto_buy = 5;
  if (this->auto_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_auto_buy(), target);
  }

  // .KWMsg.Ident challenge_id = 6;
  if (this->has_challenge_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::challenge_id(this), target, stream);
  }

  // .KWMsg.Ident replay_id = 7;
  if (this->has_replay_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::replay_id(this), target, stream);
  }

  // .KWMsg.Ident explore_dungeon_monster_id = 8;
  if (this->has_explore_dungeon_monster_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::explore_dungeon_monster_id(this), target, stream);
  }

  // int32 explore_dungeon_monster_idx = 9;
  if (this->explore_dungeon_monster_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_explore_dungeon_monster_idx(), target);
  }

  // .KWMsg.Ident mercenary_player = 10;
  if (this->has_mercenary_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::mercenary_player(this), target, stream);
  }

  // bytes mercenary_unit = 11;
  if (!this->mercenary_unit().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_mercenary_unit(), target);
  }

  // int32 mercenary_idx = 12;
  if (this->mercenary_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_mercenary_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqEnterBattle)
  return target;
}

size_t ReqEnterBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqEnterBattle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes game_play_id = 2;
  if (!this->game_play_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_game_play_id());
  }

  // bytes team_id = 3;
  if (!this->team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_team_id());
  }

  // bytes mercenary_unit = 11;
  if (!this->mercenary_unit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mercenary_unit());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident challenge_id = 6;
  if (this->has_challenge_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *challenge_id_);
  }

  // .KWMsg.Ident replay_id = 7;
  if (this->has_replay_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replay_id_);
  }

  // .KWMsg.Ident explore_dungeon_monster_id = 8;
  if (this->has_explore_dungeon_monster_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *explore_dungeon_monster_id_);
  }

  // .KWMsg.Ident mercenary_player = 10;
  if (this->has_mercenary_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mercenary_player_);
  }

  // int32 continuous_count = 4;
  if (this->continuous_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_continuous_count());
  }

  // int32 auto_buy = 5;
  if (this->auto_buy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_auto_buy());
  }

  // int32 explore_dungeon_monster_idx = 9;
  if (this->explore_dungeon_monster_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_explore_dungeon_monster_idx());
  }

  // int32 mercenary_idx = 12;
  if (this->mercenary_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mercenary_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqEnterBattle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqEnterBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEnterBattle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqEnterBattle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqEnterBattle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqEnterBattle)
    MergeFrom(*source);
  }
}

void ReqEnterBattle::MergeFrom(const ReqEnterBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqEnterBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.game_play_id().empty()) {
    _internal_set_game_play_id(from._internal_game_play_id());
  }
  if (!from.team_id().empty()) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (!from.mercenary_unit().empty()) {
    _internal_set_mercenary_unit(from._internal_mercenary_unit());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_challenge_id()) {
    _internal_mutable_challenge_id()->::KWMsg::Ident::MergeFrom(from._internal_challenge_id());
  }
  if (from.has_replay_id()) {
    _internal_mutable_replay_id()->::KWMsg::Ident::MergeFrom(from._internal_replay_id());
  }
  if (from.has_explore_dungeon_monster_id()) {
    _internal_mutable_explore_dungeon_monster_id()->::KWMsg::Ident::MergeFrom(from._internal_explore_dungeon_monster_id());
  }
  if (from.has_mercenary_player()) {
    _internal_mutable_mercenary_player()->::KWMsg::Ident::MergeFrom(from._internal_mercenary_player());
  }
  if (from.continuous_count() != 0) {
    _internal_set_continuous_count(from._internal_continuous_count());
  }
  if (from.auto_buy() != 0) {
    _internal_set_auto_buy(from._internal_auto_buy());
  }
  if (from.explore_dungeon_monster_idx() != 0) {
    _internal_set_explore_dungeon_monster_idx(from._internal_explore_dungeon_monster_idx());
  }
  if (from.mercenary_idx() != 0) {
    _internal_set_mercenary_idx(from._internal_mercenary_idx());
  }
}

void ReqEnterBattle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqEnterBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterBattle::CopyFrom(const ReqEnterBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqEnterBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterBattle::IsInitialized() const {
  return true;
}

void ReqEnterBattle::InternalSwap(ReqEnterBattle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_play_id_, GetArenaForAllocation(),
      &other->game_play_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &team_id_, GetArenaForAllocation(),
      &other->team_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mercenary_unit_, GetArenaForAllocation(),
      &other->mercenary_unit_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqEnterBattle, mercenary_idx_)
      + sizeof(ReqEnterBattle::mercenary_idx_)
      - PROTOBUF_FIELD_OFFSET(ReqEnterBattle, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqEnterBattle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[3]);
}

// ===================================================================

class AckEnterBattle::_Internal {
 public:
};

AckEnterBattle::AckEnterBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckEnterBattle)
}
AckEnterBattle::AckEnterBattle(const AckEnterBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_play_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_play_id().empty()) {
    game_play_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_play_id(), 
      GetArenaForAllocation());
  }
  team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_team_id().empty()) {
    team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_buy_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(auto_buy_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckEnterBattle)
}

void AckEnterBattle::SharedCtor() {
game_play_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auto_buy_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(auto_buy_));
}

AckEnterBattle::~AckEnterBattle() {
  // @@protoc_insertion_point(destructor:KWMsg.AckEnterBattle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckEnterBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  game_play_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckEnterBattle::ArenaDtor(void* object) {
  AckEnterBattle* _this = reinterpret_cast< AckEnterBattle* >(object);
  (void)_this;
}
void AckEnterBattle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckEnterBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckEnterBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckEnterBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_play_id_.ClearToEmpty();
  team_id_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_buy_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(auto_buy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckEnterBattle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes game_play_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_game_play_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes team_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 continuous_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          continuous_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 auto_buy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          auto_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckEnterBattle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckEnterBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene_id(), target);
  }

  // bytes game_play_id = 3;
  if (!this->game_play_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_game_play_id(), target);
  }

  // bytes team_id = 4;
  if (!this->team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_team_id(), target);
  }

  // int32 continuous_count = 5;
  if (this->continuous_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_continuous_count(), target);
  }

  // int32 auto_buy = 6;
  if (this->auto_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_auto_buy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckEnterBattle)
  return target;
}

size_t AckEnterBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckEnterBattle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes game_play_id = 3;
  if (!this->game_play_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_game_play_id());
  }

  // bytes team_id = 4;
  if (!this->team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_team_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_id());
  }

  // int32 continuous_count = 5;
  if (this->continuous_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_continuous_count());
  }

  // int32 auto_buy = 6;
  if (this->auto_buy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_auto_buy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckEnterBattle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckEnterBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const AckEnterBattle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckEnterBattle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckEnterBattle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckEnterBattle)
    MergeFrom(*source);
  }
}

void AckEnterBattle::MergeFrom(const AckEnterBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckEnterBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.game_play_id().empty()) {
    _internal_set_game_play_id(from._internal_game_play_id());
  }
  if (!from.team_id().empty()) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
  if (from.continuous_count() != 0) {
    _internal_set_continuous_count(from._internal_continuous_count());
  }
  if (from.auto_buy() != 0) {
    _internal_set_auto_buy(from._internal_auto_buy());
  }
}

void AckEnterBattle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckEnterBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEnterBattle::CopyFrom(const AckEnterBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckEnterBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEnterBattle::IsInitialized() const {
  return true;
}

void AckEnterBattle::InternalSwap(AckEnterBattle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_play_id_, GetArenaForAllocation(),
      &other->game_play_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &team_id_, GetArenaForAllocation(),
      &other->team_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckEnterBattle, auto_buy_)
      + sizeof(AckEnterBattle::auto_buy_)
      - PROTOBUF_FIELD_OFFSET(AckEnterBattle, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckEnterBattle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[4]);
}

// ===================================================================

class AckBTLInfo::_Internal {
 public:
  static const ::KWMsg::BTLInfo& battle_info(const AckBTLInfo* msg);
};

const ::KWMsg::BTLInfo&
AckBTLInfo::_Internal::battle_info(const AckBTLInfo* msg) {
  return *msg->battle_info_;
}
AckBTLInfo::AckBTLInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBTLInfo)
}
AckBTLInfo::AckBTLInfo(const AckBTLInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_battle_info()) {
    battle_info_ = new ::KWMsg::BTLInfo(*from.battle_info_);
  } else {
    battle_info_ = nullptr;
  }
  unique_id_ = from.unique_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBTLInfo)
}

void AckBTLInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&battle_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unique_id_) -
    reinterpret_cast<char*>(&battle_info_)) + sizeof(unique_id_));
}

AckBTLInfo::~AckBTLInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBTLInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBTLInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete battle_info_;
}

void AckBTLInfo::ArenaDtor(void* object) {
  AckBTLInfo* _this = reinterpret_cast< AckBTLInfo* >(object);
  (void)_this;
}
void AckBTLInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBTLInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBTLInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBTLInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && battle_info_ != nullptr) {
    delete battle_info_;
  }
  battle_info_ = nullptr;
  unique_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBTLInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLInfo battle_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_battle_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBTLInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBTLInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unique_id = 1;
  if (this->unique_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unique_id(), target);
  }

  // .KWMsg.BTLInfo battle_info = 2;
  if (this->has_battle_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::battle_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBTLInfo)
  return target;
}

size_t AckBTLInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBTLInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.BTLInfo battle_info = 2;
  if (this->has_battle_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *battle_info_);
  }

  // int32 unique_id = 1;
  if (this->unique_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unique_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBTLInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBTLInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBTLInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBTLInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBTLInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBTLInfo)
    MergeFrom(*source);
  }
}

void AckBTLInfo::MergeFrom(const AckBTLInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBTLInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_battle_info()) {
    _internal_mutable_battle_info()->::KWMsg::BTLInfo::MergeFrom(from._internal_battle_info());
  }
  if (from.unique_id() != 0) {
    _internal_set_unique_id(from._internal_unique_id());
  }
}

void AckBTLInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBTLInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBTLInfo::CopyFrom(const AckBTLInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBTLInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBTLInfo::IsInitialized() const {
  return true;
}

void AckBTLInfo::InternalSwap(AckBTLInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckBTLInfo, unique_id_)
      + sizeof(AckBTLInfo::unique_id_)
      - PROTOBUF_FIELD_OFFSET(AckBTLInfo, battle_info_)>(
          reinterpret_cast<char*>(&battle_info_),
          reinterpret_cast<char*>(&other->battle_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBTLInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[5]);
}

// ===================================================================

class BTLInfo::_Internal {
 public:
  static const ::KWMsg::BTLSettings& battle_settings(const BTLInfo* msg);
  static const ::KWMsg::Ident& team_id(const BTLInfo* msg);
};

const ::KWMsg::BTLSettings&
BTLInfo::_Internal::battle_settings(const BTLInfo* msg) {
  return *msg->battle_settings_;
}
const ::KWMsg::Ident&
BTLInfo::_Internal::team_id(const BTLInfo* msg) {
  return *msg->team_id_;
}
void BTLInfo::clear_destroyed_entity_ids() {
  destroyed_entity_ids_.Clear();
}
void BTLInfo::clear_team_id() {
  if (GetArenaForAllocation() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
}
BTLInfo::BTLInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entities_(arena),
  destroyed_entity_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLInfo)
}
BTLInfo::BTLInfo(const BTLInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entities_(from.entities_),
      destroyed_entity_ids_(from.destroyed_entity_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  battle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_battle_id().empty()) {
    battle_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_battle_id(), 
      GetArenaForAllocation());
  }
  battle_mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_battle_mid().empty()) {
    battle_mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_battle_mid(), 
      GetArenaForAllocation());
  }
  game_play_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_play_id().empty()) {
    game_play_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_play_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_battle_settings()) {
    battle_settings_ = new ::KWMsg::BTLSettings(*from.battle_settings_);
  } else {
    battle_settings_ = nullptr;
  }
  if (from._internal_has_team_id()) {
    team_id_ = new ::KWMsg::Ident(*from.team_id_);
  } else {
    team_id_ = nullptr;
  }
  ::memcpy(&battle_type_, &from.battle_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&battle_mode_) -
    reinterpret_cast<char*>(&battle_type_)) + sizeof(battle_mode_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLInfo)
}

void BTLInfo::SharedCtor() {
battle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
battle_mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_play_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&battle_settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&battle_mode_) -
    reinterpret_cast<char*>(&battle_settings_)) + sizeof(battle_mode_));
}

BTLInfo::~BTLInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  battle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  battle_mid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_play_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete battle_settings_;
  if (this != internal_default_instance()) delete team_id_;
}

void BTLInfo::ArenaDtor(void* object) {
  BTLInfo* _this = reinterpret_cast< BTLInfo* >(object);
  (void)_this;
}
void BTLInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  destroyed_entity_ids_.Clear();
  battle_id_.ClearToEmpty();
  battle_mid_.ClearToEmpty();
  game_play_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && battle_settings_ != nullptr) {
    delete battle_settings_;
  }
  battle_settings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
  ::memset(&battle_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battle_mode_) -
      reinterpret_cast<char*>(&battle_type_)) + sizeof(battle_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes battle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_battle_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes battle_mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_battle_mid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLSettings battle_settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_battle_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BTLEntity entities = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.Ident destroyed_entity_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_destroyed_entity_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .KWMsg.EBattleType battle_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_battle_type(static_cast<::KWMsg::EBattleType>(val));
        } else goto handle_unusual;
        continue;
      // int32 remain_continuous_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          remain_continuous_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes game_play_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_game_play_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 battle_mode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          battle_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident team_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes battle_id = 1;
  if (!this->battle_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_battle_id(), target);
  }

  // bytes battle_mid = 2;
  if (!this->battle_mid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_battle_mid(), target);
  }

  // .KWMsg.BTLSettings battle_settings = 3;
  if (this->has_battle_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::battle_settings(this), target, stream);
  }

  // repeated .KWMsg.BTLEntity entities = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_entities(i), target, stream);
  }

  // repeated .KWMsg.Ident destroyed_entity_ids = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_destroyed_entity_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_destroyed_entity_ids(i), target, stream);
  }

  // .KWMsg.EBattleType battle_type = 6;
  if (this->battle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_battle_type(), target);
  }

  // int32 remain_continuous_count = 7;
  if (this->remain_continuous_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_remain_continuous_count(), target);
  }

  // bytes game_play_id = 8;
  if (!this->game_play_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_game_play_id(), target);
  }

  // int32 battle_mode = 9;
  if (this->battle_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_battle_mode(), target);
  }

  // .KWMsg.Ident team_id = 10;
  if (this->has_team_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::team_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLInfo)
  return target;
}

size_t BTLInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BTLEntity entities = 4;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.Ident destroyed_entity_ids = 5;
  total_size += 1UL * this->_internal_destroyed_entity_ids_size();
  for (const auto& msg : this->destroyed_entity_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes battle_id = 1;
  if (!this->battle_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_battle_id());
  }

  // bytes battle_mid = 2;
  if (!this->battle_mid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_battle_mid());
  }

  // bytes game_play_id = 8;
  if (!this->game_play_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_game_play_id());
  }

  // .KWMsg.BTLSettings battle_settings = 3;
  if (this->has_battle_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *battle_settings_);
  }

  // .KWMsg.Ident team_id = 10;
  if (this->has_team_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .KWMsg.EBattleType battle_type = 6;
  if (this->battle_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_battle_type());
  }

  // int32 remain_continuous_count = 7;
  if (this->remain_continuous_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain_continuous_count());
  }

  // int32 battle_mode = 9;
  if (this->battle_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battle_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLInfo)
    MergeFrom(*source);
  }
}

void BTLInfo::MergeFrom(const BTLInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
  destroyed_entity_ids_.MergeFrom(from.destroyed_entity_ids_);
  if (!from.battle_id().empty()) {
    _internal_set_battle_id(from._internal_battle_id());
  }
  if (!from.battle_mid().empty()) {
    _internal_set_battle_mid(from._internal_battle_mid());
  }
  if (!from.game_play_id().empty()) {
    _internal_set_game_play_id(from._internal_game_play_id());
  }
  if (from.has_battle_settings()) {
    _internal_mutable_battle_settings()->::KWMsg::BTLSettings::MergeFrom(from._internal_battle_settings());
  }
  if (from.has_team_id()) {
    _internal_mutable_team_id()->::KWMsg::Ident::MergeFrom(from._internal_team_id());
  }
  if (from.battle_type() != 0) {
    _internal_set_battle_type(from._internal_battle_type());
  }
  if (from.remain_continuous_count() != 0) {
    _internal_set_remain_continuous_count(from._internal_remain_continuous_count());
  }
  if (from.battle_mode() != 0) {
    _internal_set_battle_mode(from._internal_battle_mode());
  }
}

void BTLInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLInfo::CopyFrom(const BTLInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLInfo::IsInitialized() const {
  return true;
}

void BTLInfo::InternalSwap(BTLInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entities_.InternalSwap(&other->entities_);
  destroyed_entity_ids_.InternalSwap(&other->destroyed_entity_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &battle_id_, GetArenaForAllocation(),
      &other->battle_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &battle_mid_, GetArenaForAllocation(),
      &other->battle_mid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_play_id_, GetArenaForAllocation(),
      &other->game_play_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLInfo, battle_mode_)
      + sizeof(BTLInfo::battle_mode_)
      - PROTOBUF_FIELD_OFFSET(BTLInfo, battle_settings_)>(
          reinterpret_cast<char*>(&battle_settings_),
          reinterpret_cast<char*>(&other->battle_settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[6]);
}

// ===================================================================

class BTLSettings::_Internal {
 public:
};

BTLSettings::BTLSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLSettings)
}
BTLSettings::BTLSettings(const BTLSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_auto_state_, &from.enable_auto_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_speed_) -
    reinterpret_cast<char*>(&enable_auto_state_)) + sizeof(default_speed_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLSettings)
}

void BTLSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_auto_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&default_speed_) -
    reinterpret_cast<char*>(&enable_auto_state_)) + sizeof(default_speed_));
}

BTLSettings::~BTLSettings() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BTLSettings::ArenaDtor(void* object) {
  BTLSettings* _this = reinterpret_cast< BTLSettings* >(object);
  (void)_this;
}
void BTLSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_auto_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_speed_) -
      reinterpret_cast<char*>(&enable_auto_state_)) + sizeof(default_speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 enable_auto_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_auto_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 enable_speed_up = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_speed_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 default_auto_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          default_auto_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 default_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          default_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 enable_auto_state = 1;
  if (this->enable_auto_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_enable_auto_state(), target);
  }

  // int32 enable_speed_up = 2;
  if (this->enable_speed_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_enable_speed_up(), target);
  }

  // int32 default_auto_state = 3;
  if (this->default_auto_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_default_auto_state(), target);
  }

  // int32 default_speed = 4;
  if (this->default_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_default_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLSettings)
  return target;
}

size_t BTLSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 enable_auto_state = 1;
  if (this->enable_auto_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enable_auto_state());
  }

  // int32 enable_speed_up = 2;
  if (this->enable_speed_up() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enable_speed_up());
  }

  // int32 default_auto_state = 3;
  if (this->default_auto_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_default_auto_state());
  }

  // int32 default_speed = 4;
  if (this->default_speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_default_speed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLSettings)
    MergeFrom(*source);
  }
}

void BTLSettings::MergeFrom(const BTLSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable_auto_state() != 0) {
    _internal_set_enable_auto_state(from._internal_enable_auto_state());
  }
  if (from.enable_speed_up() != 0) {
    _internal_set_enable_speed_up(from._internal_enable_speed_up());
  }
  if (from.default_auto_state() != 0) {
    _internal_set_default_auto_state(from._internal_default_auto_state());
  }
  if (from.default_speed() != 0) {
    _internal_set_default_speed(from._internal_default_speed());
  }
}

void BTLSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLSettings::CopyFrom(const BTLSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLSettings::IsInitialized() const {
  return true;
}

void BTLSettings::InternalSwap(BTLSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLSettings, default_speed_)
      + sizeof(BTLSettings::default_speed_)
      - PROTOBUF_FIELD_OFFSET(BTLSettings, enable_auto_state_)>(
          reinterpret_cast<char*>(&enable_auto_state_),
          reinterpret_cast<char*>(&other->enable_auto_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[7]);
}

// ===================================================================

class BTLEntity::_Internal {
 public:
  static const ::KWMsg::Ident& entity_id(const BTLEntity* msg);
  static const ::KWMsg::ObjectPropertyList& property(const BTLEntity* msg);
  static const ::KWMsg::ObjectRecordList& record(const BTLEntity* msg);
};

const ::KWMsg::Ident&
BTLEntity::_Internal::entity_id(const BTLEntity* msg) {
  return *msg->entity_id_;
}
const ::KWMsg::ObjectPropertyList&
BTLEntity::_Internal::property(const BTLEntity* msg) {
  return *msg->property_;
}
const ::KWMsg::ObjectRecordList&
BTLEntity::_Internal::record(const BTLEntity* msg) {
  return *msg->record_;
}
void BTLEntity::clear_entity_id() {
  if (GetArenaForAllocation() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
}
void BTLEntity::clear_property() {
  if (GetArenaForAllocation() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
}
void BTLEntity::clear_record() {
  if (GetArenaForAllocation() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
}
BTLEntity::BTLEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLEntity)
}
BTLEntity::BTLEntity(const BTLEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::KWMsg::Ident(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  if (from._internal_has_property()) {
    property_ = new ::KWMsg::ObjectPropertyList(*from.property_);
  } else {
    property_ = nullptr;
  }
  if (from._internal_has_record()) {
    record_ = new ::KWMsg::ObjectRecordList(*from.record_);
  } else {
    record_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLEntity)
}

void BTLEntity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entity_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&record_) -
    reinterpret_cast<char*>(&entity_id_)) + sizeof(record_));
}

BTLEntity::~BTLEntity() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLEntity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete entity_id_;
  if (this != internal_default_instance()) delete property_;
  if (this != internal_default_instance()) delete record_;
}

void BTLEntity::ArenaDtor(void* object) {
  BTLEntity* _this = reinterpret_cast< BTLEntity* >(object);
  (void)_this;
}
void BTLEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
  if (GetArenaForAllocation() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ObjectPropertyList property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ObjectRecordList record = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident entity_id = 1;
  if (this->has_entity_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_id(this), target, stream);
  }

  // .KWMsg.ObjectPropertyList property = 2;
  if (this->has_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::property(this), target, stream);
  }

  // .KWMsg.ObjectRecordList record = 3;
  if (this->has_record()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::record(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLEntity)
  return target;
}

size_t BTLEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident entity_id = 1;
  if (this->has_entity_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }

  // .KWMsg.ObjectPropertyList property = 2;
  if (this->has_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_);
  }

  // .KWMsg.ObjectRecordList record = 3;
  if (this->has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLEntity)
    MergeFrom(*source);
  }
}

void BTLEntity::MergeFrom(const BTLEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_entity_id()) {
    _internal_mutable_entity_id()->::KWMsg::Ident::MergeFrom(from._internal_entity_id());
  }
  if (from.has_property()) {
    _internal_mutable_property()->::KWMsg::ObjectPropertyList::MergeFrom(from._internal_property());
  }
  if (from.has_record()) {
    _internal_mutable_record()->::KWMsg::ObjectRecordList::MergeFrom(from._internal_record());
  }
}

void BTLEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLEntity::CopyFrom(const BTLEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLEntity::IsInitialized() const {
  return true;
}

void BTLEntity::InternalSwap(BTLEntity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLEntity, record_)
      + sizeof(BTLEntity::record_)
      - PROTOBUF_FIELD_OFFSET(BTLEntity, entity_id_)>(
          reinterpret_cast<char*>(&entity_id_),
          reinterpret_cast<char*>(&other->entity_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLEntity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[8]);
}

// ===================================================================

class AckBTLPk::_Internal {
 public:
  static const ::KWMsg::BTLPkInfo& pk(const AckBTLPk* msg);
};

const ::KWMsg::BTLPkInfo&
AckBTLPk::_Internal::pk(const AckBTLPk* msg) {
  return *msg->pk_;
}
AckBTLPk::AckBTLPk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBTLPk)
}
AckBTLPk::AckBTLPk(const AckBTLPk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pk()) {
    pk_ = new ::KWMsg::BTLPkInfo(*from.pk_);
  } else {
    pk_ = nullptr;
  }
  unique_id_ = from.unique_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBTLPk)
}

void AckBTLPk::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pk_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unique_id_) -
    reinterpret_cast<char*>(&pk_)) + sizeof(unique_id_));
}

AckBTLPk::~AckBTLPk() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBTLPk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBTLPk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pk_;
}

void AckBTLPk::ArenaDtor(void* object) {
  AckBTLPk* _this = reinterpret_cast< AckBTLPk* >(object);
  (void)_this;
}
void AckBTLPk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBTLPk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBTLPk::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBTLPk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pk_ != nullptr) {
    delete pk_;
  }
  pk_ = nullptr;
  unique_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBTLPk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLPkInfo pk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBTLPk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBTLPk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unique_id = 1;
  if (this->unique_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unique_id(), target);
  }

  // .KWMsg.BTLPkInfo pk = 2;
  if (this->has_pk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBTLPk)
  return target;
}

size_t AckBTLPk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBTLPk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.BTLPkInfo pk = 2;
  if (this->has_pk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pk_);
  }

  // int32 unique_id = 1;
  if (this->unique_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unique_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBTLPk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBTLPk)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBTLPk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBTLPk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBTLPk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBTLPk)
    MergeFrom(*source);
  }
}

void AckBTLPk::MergeFrom(const AckBTLPk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBTLPk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pk()) {
    _internal_mutable_pk()->::KWMsg::BTLPkInfo::MergeFrom(from._internal_pk());
  }
  if (from.unique_id() != 0) {
    _internal_set_unique_id(from._internal_unique_id());
  }
}

void AckBTLPk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBTLPk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBTLPk::CopyFrom(const AckBTLPk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBTLPk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBTLPk::IsInitialized() const {
  return true;
}

void AckBTLPk::InternalSwap(AckBTLPk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckBTLPk, unique_id_)
      + sizeof(AckBTLPk::unique_id_)
      - PROTOBUF_FIELD_OFFSET(AckBTLPk, pk_)>(
          reinterpret_cast<char*>(&pk_),
          reinterpret_cast<char*>(&other->pk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBTLPk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[9]);
}

// ===================================================================

class BTLEnergyInfo::_Internal {
 public:
  static const ::KWMsg::Ident& team_id(const BTLEnergyInfo* msg);
};

const ::KWMsg::Ident&
BTLEnergyInfo::_Internal::team_id(const BTLEnergyInfo* msg) {
  return *msg->team_id_;
}
void BTLEnergyInfo::clear_team_id() {
  if (GetArenaForAllocation() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
}
BTLEnergyInfo::BTLEnergyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLEnergyInfo)
}
BTLEnergyInfo::BTLEnergyInfo(const BTLEnergyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_team_id()) {
    team_id_ = new ::KWMsg::Ident(*from.team_id_);
  } else {
    team_id_ = nullptr;
  }
  ::memcpy(&cristal_, &from.cristal_,
    static_cast<size_t>(reinterpret_cast<char*>(&cristal_extra_) -
    reinterpret_cast<char*>(&cristal_)) + sizeof(cristal_extra_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLEnergyInfo)
}

void BTLEnergyInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cristal_extra_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(cristal_extra_));
}

BTLEnergyInfo::~BTLEnergyInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLEnergyInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLEnergyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete team_id_;
}

void BTLEnergyInfo::ArenaDtor(void* object) {
  BTLEnergyInfo* _this = reinterpret_cast< BTLEnergyInfo* >(object);
  (void)_this;
}
void BTLEnergyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLEnergyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLEnergyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLEnergyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
  ::memset(&cristal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cristal_extra_) -
      reinterpret_cast<char*>(&cristal_)) + sizeof(cristal_extra_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLEnergyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cristal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cristal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cristal_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cristal_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 magic_hue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          magic_hue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cristal_extra = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cristal_extra_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLEnergyInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLEnergyInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::team_id(this), target, stream);
  }

  // int32 cristal = 2;
  if (this->cristal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cristal(), target);
  }

  // int32 cristal_limit = 3;
  if (this->cristal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cristal_limit(), target);
  }

  // int32 magic_hue = 4;
  if (this->magic_hue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_magic_hue(), target);
  }

  // int32 cristal_extra = 5;
  if (this->cristal_extra() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_cristal_extra(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLEnergyInfo)
  return target;
}

size_t BTLEnergyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLEnergyInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // int32 cristal = 2;
  if (this->cristal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cristal());
  }

  // int32 cristal_limit = 3;
  if (this->cristal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cristal_limit());
  }

  // int32 magic_hue = 4;
  if (this->magic_hue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_magic_hue());
  }

  // int32 cristal_extra = 5;
  if (this->cristal_extra() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cristal_extra());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLEnergyInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLEnergyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLEnergyInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLEnergyInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLEnergyInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLEnergyInfo)
    MergeFrom(*source);
  }
}

void BTLEnergyInfo::MergeFrom(const BTLEnergyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLEnergyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    _internal_mutable_team_id()->::KWMsg::Ident::MergeFrom(from._internal_team_id());
  }
  if (from.cristal() != 0) {
    _internal_set_cristal(from._internal_cristal());
  }
  if (from.cristal_limit() != 0) {
    _internal_set_cristal_limit(from._internal_cristal_limit());
  }
  if (from.magic_hue() != 0) {
    _internal_set_magic_hue(from._internal_magic_hue());
  }
  if (from.cristal_extra() != 0) {
    _internal_set_cristal_extra(from._internal_cristal_extra());
  }
}

void BTLEnergyInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLEnergyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLEnergyInfo::CopyFrom(const BTLEnergyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLEnergyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLEnergyInfo::IsInitialized() const {
  return true;
}

void BTLEnergyInfo::InternalSwap(BTLEnergyInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLEnergyInfo, cristal_extra_)
      + sizeof(BTLEnergyInfo::cristal_extra_)
      - PROTOBUF_FIELD_OFFSET(BTLEnergyInfo, team_id_)>(
          reinterpret_cast<char*>(&team_id_),
          reinterpret_cast<char*>(&other->team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLEnergyInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[10]);
}

// ===================================================================

class BTLPkInfo::_Internal {
 public:
};

BTLPkInfo::BTLPkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  elements_(arena),
  entities_(arena),
  energy_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLPkInfo)
}
BTLPkInfo::BTLPkInfo(const BTLPkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      elements_(from.elements_),
      entities_(from.entities_),
      energy_list_(from.energy_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLPkInfo)
}

void BTLPkInfo::SharedCtor() {
}

BTLPkInfo::~BTLPkInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLPkInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLPkInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BTLPkInfo::ArenaDtor(void* object) {
  BTLPkInfo* _this = reinterpret_cast< BTLPkInfo* >(object);
  (void)_this;
}
void BTLPkInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLPkInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLPkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLPkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  entities_.Clear();
  energy_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLPkInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.BTLPkElement elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BTLEntity entities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BTLEnergyInfo energy_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_energy_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLPkInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLPkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.BTLPkElement elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_elements(i), target, stream);
  }

  // repeated .KWMsg.BTLEntity entities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entities(i), target, stream);
  }

  // repeated .KWMsg.BTLEnergyInfo energy_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_energy_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_energy_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLPkInfo)
  return target;
}

size_t BTLPkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLPkInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BTLPkElement elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.BTLEntity entities = 2;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.BTLEnergyInfo energy_list = 3;
  total_size += 1UL * this->_internal_energy_list_size();
  for (const auto& msg : this->energy_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLPkInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLPkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLPkInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLPkInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLPkInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLPkInfo)
    MergeFrom(*source);
  }
}

void BTLPkInfo::MergeFrom(const BTLPkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLPkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  entities_.MergeFrom(from.entities_);
  energy_list_.MergeFrom(from.energy_list_);
}

void BTLPkInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLPkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLPkInfo::CopyFrom(const BTLPkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLPkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLPkInfo::IsInitialized() const {
  return true;
}

void BTLPkInfo::InternalSwap(BTLPkInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
  entities_.InternalSwap(&other->entities_);
  energy_list_.InternalSwap(&other->energy_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLPkInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[11]);
}

// ===================================================================

class BTLPkElement::_Internal {
 public:
  static const ::KWMsg::Ident& entity_id(const BTLPkElement* msg);
  static const ::KWMsg::Ident& team_id(const BTLPkElement* msg);
};

const ::KWMsg::Ident&
BTLPkElement::_Internal::entity_id(const BTLPkElement* msg) {
  return *msg->entity_id_;
}
const ::KWMsg::Ident&
BTLPkElement::_Internal::team_id(const BTLPkElement* msg) {
  return *msg->team_id_;
}
void BTLPkElement::clear_entity_id() {
  if (GetArenaForAllocation() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
}
void BTLPkElement::clear_team_id() {
  if (GetArenaForAllocation() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
}
BTLPkElement::BTLPkElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLPkElement)
}
BTLPkElement::BTLPkElement(const BTLPkElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::KWMsg::Ident(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  if (from._internal_has_team_id()) {
    team_id_ = new ::KWMsg::Ident(*from.team_id_);
  } else {
    team_id_ = nullptr;
  }
  ::memcpy(&fight_, &from.fight_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_count_) -
    reinterpret_cast<char*>(&fight_)) + sizeof(reward_count_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLPkElement)
}

void BTLPkElement::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entity_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reward_count_) -
    reinterpret_cast<char*>(&entity_id_)) + sizeof(reward_count_));
}

BTLPkElement::~BTLPkElement() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLPkElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLPkElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete entity_id_;
  if (this != internal_default_instance()) delete team_id_;
}

void BTLPkElement::ArenaDtor(void* object) {
  BTLPkElement* _this = reinterpret_cast< BTLPkElement* >(object);
  (void)_this;
}
void BTLPkElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLPkElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLPkElement::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLPkElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
  ::memset(&fight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_count_) -
      reinterpret_cast<char*>(&fight_)) + sizeof(reward_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLPkElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident team_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          reward_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          reward_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLPkElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLPkElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident entity_id = 1;
  if (this->has_entity_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_id(this), target, stream);
  }

  // int32 fight = 2;
  if (this->fight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fight(), target);
  }

  // .KWMsg.Ident team_id = 3;
  if (this->has_team_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::team_id(this), target, stream);
  }

  // bytes name = 4;
  if (!this->name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_name(), target);
  }

  // int32 reward_type = 5;
  if (this->reward_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_reward_type(), target);
  }

  // int32 reward_count = 6;
  if (this->reward_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_reward_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLPkElement)
  return target;
}

size_t BTLPkElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLPkElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 4;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .KWMsg.Ident entity_id = 1;
  if (this->has_entity_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }

  // .KWMsg.Ident team_id = 3;
  if (this->has_team_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // int32 fight = 2;
  if (this->fight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fight());
  }

  // int32 reward_type = 5;
  if (this->reward_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward_type());
  }

  // int32 reward_count = 6;
  if (this->reward_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLPkElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLPkElement)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLPkElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLPkElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLPkElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLPkElement)
    MergeFrom(*source);
  }
}

void BTLPkElement::MergeFrom(const BTLPkElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLPkElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_entity_id()) {
    _internal_mutable_entity_id()->::KWMsg::Ident::MergeFrom(from._internal_entity_id());
  }
  if (from.has_team_id()) {
    _internal_mutable_team_id()->::KWMsg::Ident::MergeFrom(from._internal_team_id());
  }
  if (from.fight() != 0) {
    _internal_set_fight(from._internal_fight());
  }
  if (from.reward_type() != 0) {
    _internal_set_reward_type(from._internal_reward_type());
  }
  if (from.reward_count() != 0) {
    _internal_set_reward_count(from._internal_reward_count());
  }
}

void BTLPkElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLPkElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLPkElement::CopyFrom(const BTLPkElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLPkElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLPkElement::IsInitialized() const {
  return true;
}

void BTLPkElement::InternalSwap(BTLPkElement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLPkElement, reward_count_)
      + sizeof(BTLPkElement::reward_count_)
      - PROTOBUF_FIELD_OFFSET(BTLPkElement, entity_id_)>(
          reinterpret_cast<char*>(&entity_id_),
          reinterpret_cast<char*>(&other->entity_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLPkElement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[12]);
}

// ===================================================================

class ReqBTLAction::_Internal {
 public:
  static const ::KWMsg::BTLOperation& op(const ReqBTLAction* msg);
};

const ::KWMsg::BTLOperation&
ReqBTLAction::_Internal::op(const ReqBTLAction* msg) {
  return *msg->op_;
}
ReqBTLAction::ReqBTLAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBTLAction)
}
ReqBTLAction::ReqBTLAction(const ReqBTLAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_op()) {
    op_ = new ::KWMsg::BTLOperation(*from.op_);
  } else {
    op_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBTLAction)
}

void ReqBTLAction::SharedCtor() {
op_ = nullptr;
}

ReqBTLAction::~ReqBTLAction() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBTLAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBTLAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete op_;
}

void ReqBTLAction::ArenaDtor(void* object) {
  ReqBTLAction* _this = reinterpret_cast< ReqBTLAction* >(object);
  (void)_this;
}
void ReqBTLAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBTLAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBTLAction::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBTLAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBTLAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.BTLOperation op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBTLAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBTLAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.BTLOperation op = 1;
  if (this->has_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::op(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBTLAction)
  return target;
}

size_t ReqBTLAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBTLAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.BTLOperation op = 1;
  if (this->has_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBTLAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBTLAction)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBTLAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBTLAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBTLAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBTLAction)
    MergeFrom(*source);
  }
}

void ReqBTLAction::MergeFrom(const ReqBTLAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBTLAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_op()) {
    _internal_mutable_op()->::KWMsg::BTLOperation::MergeFrom(from._internal_op());
  }
}

void ReqBTLAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBTLAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBTLAction::CopyFrom(const ReqBTLAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBTLAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBTLAction::IsInitialized() const {
  return true;
}

void ReqBTLAction::InternalSwap(ReqBTLAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBTLAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[13]);
}

// ===================================================================

class BTLOperation::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const BTLOperation* msg);
  static const ::KWMsg::BTLManualOperation& manual_op(const BTLOperation* msg);
};

const ::KWMsg::Ident&
BTLOperation::_Internal::player_id(const BTLOperation* msg) {
  return *msg->player_id_;
}
const ::KWMsg::BTLManualOperation&
BTLOperation::_Internal::manual_op(const BTLOperation* msg) {
  return *msg->operation_.manual_op_;
}
void BTLOperation::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void BTLOperation::set_allocated_manual_op(::KWMsg::BTLManualOperation* manual_op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (manual_op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLManualOperation>::GetOwningArena(manual_op);
    if (message_arena != submessage_arena) {
      manual_op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, manual_op, submessage_arena);
    }
    set_has_manual_op();
    operation_.manual_op_ = manual_op;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLOperation.manual_op)
}
BTLOperation::BTLOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLOperation)
}
BTLOperation::BTLOperation(const BTLOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  clear_has_operation();
  switch (from.operation_case()) {
    case kAutoOp: {
      _internal_set_auto_op(from._internal_auto_op());
      break;
    }
    case kManualOp: {
      _internal_mutable_manual_op()->::KWMsg::BTLManualOperation::MergeFrom(from._internal_manual_op());
      break;
    }
    case kSkipOp: {
      _internal_set_skip_op(from._internal_skip_op());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLOperation)
}

void BTLOperation::SharedCtor() {
player_id_ = nullptr;
clear_has_operation();
}

BTLOperation::~BTLOperation() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLOperation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (has_operation()) {
    clear_operation();
  }
}

void BTLOperation::ArenaDtor(void* object) {
  BTLOperation* _this = reinterpret_cast< BTLOperation* >(object);
  (void)_this;
}
void BTLOperation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLOperation::clear_operation() {
// @@protoc_insertion_point(one_of_clear_start:KWMsg.BTLOperation)
  switch (operation_case()) {
    case kAutoOp: {
      // No need to clear
      break;
    }
    case kManualOp: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_.manual_op_;
      }
      break;
    }
    case kSkipOp: {
      // No need to clear
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPERATION_NOT_SET;
}


void BTLOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  clear_operation();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 auto_op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_auto_op(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLManualOperation manual_op = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_manual_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 skip_op = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_skip_op(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 auto_op = 2;
  if (_internal_has_auto_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_auto_op(), target);
  }

  // .KWMsg.BTLManualOperation manual_op = 3;
  if (_internal_has_manual_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::manual_op(this), target, stream);
  }

  // int32 skip_op = 4;
  if (_internal_has_skip_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_skip_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLOperation)
  return target;
}

size_t BTLOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  switch (operation_case()) {
    // int32 auto_op = 2;
    case kAutoOp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_auto_op());
      break;
    }
    // .KWMsg.BTLManualOperation manual_op = 3;
    case kManualOp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_.manual_op_);
      break;
    }
    // int32 skip_op = 4;
    case kSkipOp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_skip_op());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLOperation)
    MergeFrom(*source);
  }
}

void BTLOperation::MergeFrom(const BTLOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  switch (from.operation_case()) {
    case kAutoOp: {
      _internal_set_auto_op(from._internal_auto_op());
      break;
    }
    case kManualOp: {
      _internal_mutable_manual_op()->::KWMsg::BTLManualOperation::MergeFrom(from._internal_manual_op());
      break;
    }
    case kSkipOp: {
      _internal_set_skip_op(from._internal_skip_op());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
}

void BTLOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLOperation::CopyFrom(const BTLOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLOperation::IsInitialized() const {
  return true;
}

void BTLOperation::InternalSwap(BTLOperation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
  swap(operation_, other->operation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLOperation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[14]);
}

// ===================================================================

class BTLManualOperation::_Internal {
 public:
  static const ::KWMsg::Ident& caster_id(const BTLManualOperation* msg);
  static const ::KWMsg::Ident& selected_target_id(const BTLManualOperation* msg);
};

const ::KWMsg::Ident&
BTLManualOperation::_Internal::caster_id(const BTLManualOperation* msg) {
  return *msg->caster_id_;
}
const ::KWMsg::Ident&
BTLManualOperation::_Internal::selected_target_id(const BTLManualOperation* msg) {
  return *msg->selected_target_id_;
}
void BTLManualOperation::clear_caster_id() {
  if (GetArenaForAllocation() == nullptr && caster_id_ != nullptr) {
    delete caster_id_;
  }
  caster_id_ = nullptr;
}
void BTLManualOperation::clear_selected_target_id() {
  if (GetArenaForAllocation() == nullptr && selected_target_id_ != nullptr) {
    delete selected_target_id_;
  }
  selected_target_id_ = nullptr;
}
BTLManualOperation::BTLManualOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLManualOperation)
}
BTLManualOperation::BTLManualOperation(const BTLManualOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  skill_mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_skill_mid().empty()) {
    skill_mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_skill_mid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_caster_id()) {
    caster_id_ = new ::KWMsg::Ident(*from.caster_id_);
  } else {
    caster_id_ = nullptr;
  }
  if (from._internal_has_selected_target_id()) {
    selected_target_id_ = new ::KWMsg::Ident(*from.selected_target_id_);
  } else {
    selected_target_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLManualOperation)
}

void BTLManualOperation::SharedCtor() {
skill_mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&caster_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&selected_target_id_) -
    reinterpret_cast<char*>(&caster_id_)) + sizeof(selected_target_id_));
}

BTLManualOperation::~BTLManualOperation() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLManualOperation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLManualOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  skill_mid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete caster_id_;
  if (this != internal_default_instance()) delete selected_target_id_;
}

void BTLManualOperation::ArenaDtor(void* object) {
  BTLManualOperation* _this = reinterpret_cast< BTLManualOperation* >(object);
  (void)_this;
}
void BTLManualOperation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLManualOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLManualOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLManualOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_mid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && caster_id_ != nullptr) {
    delete caster_id_;
  }
  caster_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && selected_target_id_ != nullptr) {
    delete selected_target_id_;
  }
  selected_target_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLManualOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes skill_mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_skill_mid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident caster_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_caster_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident selected_target_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_selected_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLManualOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLManualOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes skill_mid = 1;
  if (!this->skill_mid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_skill_mid(), target);
  }

  // .KWMsg.Ident caster_id = 2;
  if (this->has_caster_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::caster_id(this), target, stream);
  }

  // .KWMsg.Ident selected_target_id = 3;
  if (this->has_selected_target_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::selected_target_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLManualOperation)
  return target;
}

size_t BTLManualOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLManualOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes skill_mid = 1;
  if (!this->skill_mid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_skill_mid());
  }

  // .KWMsg.Ident caster_id = 2;
  if (this->has_caster_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caster_id_);
  }

  // .KWMsg.Ident selected_target_id = 3;
  if (this->has_selected_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selected_target_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLManualOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLManualOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLManualOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLManualOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLManualOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLManualOperation)
    MergeFrom(*source);
  }
}

void BTLManualOperation::MergeFrom(const BTLManualOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLManualOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.skill_mid().empty()) {
    _internal_set_skill_mid(from._internal_skill_mid());
  }
  if (from.has_caster_id()) {
    _internal_mutable_caster_id()->::KWMsg::Ident::MergeFrom(from._internal_caster_id());
  }
  if (from.has_selected_target_id()) {
    _internal_mutable_selected_target_id()->::KWMsg::Ident::MergeFrom(from._internal_selected_target_id());
  }
}

void BTLManualOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLManualOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLManualOperation::CopyFrom(const BTLManualOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLManualOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLManualOperation::IsInitialized() const {
  return true;
}

void BTLManualOperation::InternalSwap(BTLManualOperation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &skill_mid_, GetArenaForAllocation(),
      &other->skill_mid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLManualOperation, selected_target_id_)
      + sizeof(BTLManualOperation::selected_target_id_)
      - PROTOBUF_FIELD_OFFSET(BTLManualOperation, caster_id_)>(
          reinterpret_cast<char*>(&caster_id_),
          reinterpret_cast<char*>(&other->caster_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLManualOperation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[15]);
}

// ===================================================================

class AckBTLAction::_Internal {
 public:
  static const ::KWMsg::BTLAction& action(const AckBTLAction* msg);
};

const ::KWMsg::BTLAction&
AckBTLAction::_Internal::action(const AckBTLAction* msg) {
  return *msg->action_;
}
AckBTLAction::AckBTLAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBTLAction)
}
AckBTLAction::AckBTLAction(const AckBTLAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action()) {
    action_ = new ::KWMsg::BTLAction(*from.action_);
  } else {
    action_ = nullptr;
  }
  unique_id_ = from.unique_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBTLAction)
}

void AckBTLAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unique_id_) -
    reinterpret_cast<char*>(&action_)) + sizeof(unique_id_));
}

AckBTLAction::~AckBTLAction() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBTLAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBTLAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_;
}

void AckBTLAction::ArenaDtor(void* object) {
  AckBTLAction* _this = reinterpret_cast< AckBTLAction* >(object);
  (void)_this;
}
void AckBTLAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBTLAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBTLAction::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBTLAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  unique_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBTLAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLAction action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBTLAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBTLAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unique_id = 1;
  if (this->unique_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unique_id(), target);
  }

  // .KWMsg.BTLAction action = 2;
  if (this->has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBTLAction)
  return target;
}

size_t AckBTLAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBTLAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.BTLAction action = 2;
  if (this->has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // int32 unique_id = 1;
  if (this->unique_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unique_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBTLAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBTLAction)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBTLAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBTLAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBTLAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBTLAction)
    MergeFrom(*source);
  }
}

void AckBTLAction::MergeFrom(const AckBTLAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBTLAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_action()) {
    _internal_mutable_action()->::KWMsg::BTLAction::MergeFrom(from._internal_action());
  }
  if (from.unique_id() != 0) {
    _internal_set_unique_id(from._internal_unique_id());
  }
}

void AckBTLAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBTLAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBTLAction::CopyFrom(const AckBTLAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBTLAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBTLAction::IsInitialized() const {
  return true;
}

void AckBTLAction::InternalSwap(AckBTLAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckBTLAction, unique_id_)
      + sizeof(AckBTLAction::unique_id_)
      - PROTOBUF_FIELD_OFFSET(AckBTLAction, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBTLAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[16]);
}

// ===================================================================

class BTLAction::_Internal {
 public:
  static const ::KWMsg::BTLActionQueue& action_queue(const BTLAction* msg);
  static const ::KWMsg::BTLStartDetail& start_action(const BTLAction* msg);
  static const ::KWMsg::BTLInActionDetail& in_action(const BTLAction* msg);
  static const ::KWMsg::BTLPostPreActionDetail& post_pre_action(const BTLAction* msg);
  static const ::KWMsg::BTLBeforeEndDetail& before_end_action(const BTLAction* msg);
};

const ::KWMsg::BTLActionQueue&
BTLAction::_Internal::action_queue(const BTLAction* msg) {
  return *msg->action_queue_;
}
const ::KWMsg::BTLStartDetail&
BTLAction::_Internal::start_action(const BTLAction* msg) {
  return *msg->action_detail_.start_action_;
}
const ::KWMsg::BTLInActionDetail&
BTLAction::_Internal::in_action(const BTLAction* msg) {
  return *msg->action_detail_.in_action_;
}
const ::KWMsg::BTLPostPreActionDetail&
BTLAction::_Internal::post_pre_action(const BTLAction* msg) {
  return *msg->action_detail_.post_pre_action_;
}
const ::KWMsg::BTLBeforeEndDetail&
BTLAction::_Internal::before_end_action(const BTLAction* msg) {
  return *msg->action_detail_.before_end_action_;
}
void BTLAction::set_allocated_start_action(::KWMsg::BTLStartDetail* start_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action_detail();
  if (start_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLStartDetail>::GetOwningArena(start_action);
    if (message_arena != submessage_arena) {
      start_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_action, submessage_arena);
    }
    set_has_start_action();
    action_detail_.start_action_ = start_action;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLAction.start_action)
}
void BTLAction::set_allocated_in_action(::KWMsg::BTLInActionDetail* in_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action_detail();
  if (in_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLInActionDetail>::GetOwningArena(in_action);
    if (message_arena != submessage_arena) {
      in_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_action, submessage_arena);
    }
    set_has_in_action();
    action_detail_.in_action_ = in_action;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLAction.in_action)
}
void BTLAction::set_allocated_post_pre_action(::KWMsg::BTLPostPreActionDetail* post_pre_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action_detail();
  if (post_pre_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLPostPreActionDetail>::GetOwningArena(post_pre_action);
    if (message_arena != submessage_arena) {
      post_pre_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_pre_action, submessage_arena);
    }
    set_has_post_pre_action();
    action_detail_.post_pre_action_ = post_pre_action;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLAction.post_pre_action)
}
void BTLAction::set_allocated_before_end_action(::KWMsg::BTLBeforeEndDetail* before_end_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action_detail();
  if (before_end_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLBeforeEndDetail>::GetOwningArena(before_end_action);
    if (message_arena != submessage_arena) {
      before_end_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, before_end_action, submessage_arena);
    }
    set_has_before_end_action();
    action_detail_.before_end_action_ = before_end_action;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLAction.before_end_action)
}
BTLAction::BTLAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLAction)
}
BTLAction::BTLAction(const BTLAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action_queue()) {
    action_queue_ = new ::KWMsg::BTLActionQueue(*from.action_queue_);
  } else {
    action_queue_ = nullptr;
  }
  ::memcpy(&stage_, &from.stage_,
    static_cast<size_t>(reinterpret_cast<char*>(&round_number_) -
    reinterpret_cast<char*>(&stage_)) + sizeof(round_number_));
  clear_has_action_detail();
  switch (from.action_detail_case()) {
    case kStartAction: {
      _internal_mutable_start_action()->::KWMsg::BTLStartDetail::MergeFrom(from._internal_start_action());
      break;
    }
    case kInAction: {
      _internal_mutable_in_action()->::KWMsg::BTLInActionDetail::MergeFrom(from._internal_in_action());
      break;
    }
    case kPostPreAction: {
      _internal_mutable_post_pre_action()->::KWMsg::BTLPostPreActionDetail::MergeFrom(from._internal_post_pre_action());
      break;
    }
    case kBeforeEndAction: {
      _internal_mutable_before_end_action()->::KWMsg::BTLBeforeEndDetail::MergeFrom(from._internal_before_end_action());
      break;
    }
    case ACTION_DETAIL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLAction)
}

void BTLAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_queue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&round_number_) -
    reinterpret_cast<char*>(&action_queue_)) + sizeof(round_number_));
clear_has_action_detail();
}

BTLAction::~BTLAction() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_queue_;
  if (has_action_detail()) {
    clear_action_detail();
  }
}

void BTLAction::ArenaDtor(void* object) {
  BTLAction* _this = reinterpret_cast< BTLAction* >(object);
  (void)_this;
}
void BTLAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLAction::clear_action_detail() {
// @@protoc_insertion_point(one_of_clear_start:KWMsg.BTLAction)
  switch (action_detail_case()) {
    case kStartAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_detail_.start_action_;
      }
      break;
    }
    case kInAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_detail_.in_action_;
      }
      break;
    }
    case kPostPreAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_detail_.post_pre_action_;
      }
      break;
    }
    case kBeforeEndAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_detail_.before_end_action_;
      }
      break;
    }
    case ACTION_DETAIL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_DETAIL_NOT_SET;
}


void BTLAction::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_queue_ != nullptr) {
    delete action_queue_;
  }
  action_queue_ = nullptr;
  ::memset(&stage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_number_) -
      reinterpret_cast<char*>(&stage_)) + sizeof(round_number_));
  clear_action_detail();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.BTLStage stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stage(static_cast<::KWMsg::BTLStage>(val));
        } else goto handle_unusual;
        continue;
      // int32 round_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          round_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLActionQueue action_queue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_queue(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLStartDetail start_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLInActionDetail in_action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLPostPreActionDetail post_pre_action = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_post_pre_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLBeforeEndDetail before_end_action = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_before_end_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.BTLStage stage = 1;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stage(), target);
  }

  // int32 round_number = 2;
  if (this->round_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_round_number(), target);
  }

  // .KWMsg.BTLActionQueue action_queue = 3;
  if (this->has_action_queue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::action_queue(this), target, stream);
  }

  // .KWMsg.BTLStartDetail start_action = 4;
  if (_internal_has_start_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::start_action(this), target, stream);
  }

  // .KWMsg.BTLInActionDetail in_action = 5;
  if (_internal_has_in_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::in_action(this), target, stream);
  }

  // .KWMsg.BTLPostPreActionDetail post_pre_action = 6;
  if (_internal_has_post_pre_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::post_pre_action(this), target, stream);
  }

  // .KWMsg.BTLBeforeEndDetail before_end_action = 7;
  if (_internal_has_before_end_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::before_end_action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLAction)
  return target;
}

size_t BTLAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.BTLActionQueue action_queue = 3;
  if (this->has_action_queue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_queue_);
  }

  // .KWMsg.BTLStage stage = 1;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage());
  }

  // int32 round_number = 2;
  if (this->round_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_round_number());
  }

  switch (action_detail_case()) {
    // .KWMsg.BTLStartDetail start_action = 4;
    case kStartAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_detail_.start_action_);
      break;
    }
    // .KWMsg.BTLInActionDetail in_action = 5;
    case kInAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_detail_.in_action_);
      break;
    }
    // .KWMsg.BTLPostPreActionDetail post_pre_action = 6;
    case kPostPreAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_detail_.post_pre_action_);
      break;
    }
    // .KWMsg.BTLBeforeEndDetail before_end_action = 7;
    case kBeforeEndAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_detail_.before_end_action_);
      break;
    }
    case ACTION_DETAIL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLAction)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLAction)
    MergeFrom(*source);
  }
}

void BTLAction::MergeFrom(const BTLAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_action_queue()) {
    _internal_mutable_action_queue()->::KWMsg::BTLActionQueue::MergeFrom(from._internal_action_queue());
  }
  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
  if (from.round_number() != 0) {
    _internal_set_round_number(from._internal_round_number());
  }
  switch (from.action_detail_case()) {
    case kStartAction: {
      _internal_mutable_start_action()->::KWMsg::BTLStartDetail::MergeFrom(from._internal_start_action());
      break;
    }
    case kInAction: {
      _internal_mutable_in_action()->::KWMsg::BTLInActionDetail::MergeFrom(from._internal_in_action());
      break;
    }
    case kPostPreAction: {
      _internal_mutable_post_pre_action()->::KWMsg::BTLPostPreActionDetail::MergeFrom(from._internal_post_pre_action());
      break;
    }
    case kBeforeEndAction: {
      _internal_mutable_before_end_action()->::KWMsg::BTLBeforeEndDetail::MergeFrom(from._internal_before_end_action());
      break;
    }
    case ACTION_DETAIL_NOT_SET: {
      break;
    }
  }
}

void BTLAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLAction::CopyFrom(const BTLAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLAction::IsInitialized() const {
  return true;
}

void BTLAction::InternalSwap(BTLAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLAction, round_number_)
      + sizeof(BTLAction::round_number_)
      - PROTOBUF_FIELD_OFFSET(BTLAction, action_queue_)>(
          reinterpret_cast<char*>(&action_queue_),
          reinterpret_cast<char*>(&other->action_queue_));
  swap(action_detail_, other->action_detail_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[17]);
}

// ===================================================================

class BTLActionQueue::_Internal {
 public:
};

BTLActionQueue::BTLActionQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  elements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLActionQueue)
}
BTLActionQueue::BTLActionQueue(const BTLActionQueue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  remain_reinforcements_ = from.remain_reinforcements_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLActionQueue)
}

void BTLActionQueue::SharedCtor() {
remain_reinforcements_ = 0;
}

BTLActionQueue::~BTLActionQueue() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLActionQueue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLActionQueue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BTLActionQueue::ArenaDtor(void* object) {
  BTLActionQueue* _this = reinterpret_cast< BTLActionQueue* >(object);
  (void)_this;
}
void BTLActionQueue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLActionQueue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLActionQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLActionQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  remain_reinforcements_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLActionQueue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.BTLActionQueueElement elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 remain_reinforcements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remain_reinforcements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLActionQueue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLActionQueue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.BTLActionQueueElement elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_elements(i), target, stream);
  }

  // int32 remain_reinforcements = 2;
  if (this->remain_reinforcements() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_remain_reinforcements(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLActionQueue)
  return target;
}

size_t BTLActionQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLActionQueue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BTLActionQueueElement elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 remain_reinforcements = 2;
  if (this->remain_reinforcements() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remain_reinforcements());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLActionQueue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLActionQueue)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLActionQueue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLActionQueue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLActionQueue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLActionQueue)
    MergeFrom(*source);
  }
}

void BTLActionQueue::MergeFrom(const BTLActionQueue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLActionQueue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  if (from.remain_reinforcements() != 0) {
    _internal_set_remain_reinforcements(from._internal_remain_reinforcements());
  }
}

void BTLActionQueue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLActionQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLActionQueue::CopyFrom(const BTLActionQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLActionQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLActionQueue::IsInitialized() const {
  return true;
}

void BTLActionQueue::InternalSwap(BTLActionQueue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
  swap(remain_reinforcements_, other->remain_reinforcements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLActionQueue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[18]);
}

// ===================================================================

class BTLActionQueueElement::_Internal {
 public:
  static const ::KWMsg::Ident& entity_id(const BTLActionQueueElement* msg);
};

const ::KWMsg::Ident&
BTLActionQueueElement::_Internal::entity_id(const BTLActionQueueElement* msg) {
  return *msg->entity_id_;
}
void BTLActionQueueElement::clear_entity_id() {
  if (GetArenaForAllocation() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
}
BTLActionQueueElement::BTLActionQueueElement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLActionQueueElement)
}
BTLActionQueueElement::BTLActionQueueElement(const BTLActionQueueElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::KWMsg::Ident(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  ::memcpy(&queue_state_, &from.queue_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&queue_state_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLActionQueueElement)
}

void BTLActionQueueElement::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entity_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&entity_id_)) + sizeof(flag_));
}

BTLActionQueueElement::~BTLActionQueueElement() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLActionQueueElement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLActionQueueElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete entity_id_;
}

void BTLActionQueueElement::ArenaDtor(void* object) {
  BTLActionQueueElement* _this = reinterpret_cast< BTLActionQueueElement* >(object);
  (void)_this;
}
void BTLActionQueueElement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLActionQueueElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLActionQueueElement::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLActionQueueElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
  ::memset(&queue_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&queue_state_)) + sizeof(flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLActionQueueElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLQueueState queue_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_queue_state(static_cast<::KWMsg::BTLQueueState>(val));
        } else goto handle_unusual;
        continue;
      // int32 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLActionQueueElement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLActionQueueElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident entity_id = 1;
  if (this->has_entity_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_id(this), target, stream);
  }

  // .KWMsg.BTLQueueState queue_state = 2;
  if (this->queue_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_queue_state(), target);
  }

  // int32 seq = 3;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_seq(), target);
  }

  // int32 flag = 4;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLActionQueueElement)
  return target;
}

size_t BTLActionQueueElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLActionQueueElement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident entity_id = 1;
  if (this->has_entity_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }

  // .KWMsg.BTLQueueState queue_state = 2;
  if (this->queue_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_queue_state());
  }

  // int32 seq = 3;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seq());
  }

  // int32 flag = 4;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLActionQueueElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLActionQueueElement)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLActionQueueElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLActionQueueElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLActionQueueElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLActionQueueElement)
    MergeFrom(*source);
  }
}

void BTLActionQueueElement::MergeFrom(const BTLActionQueueElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLActionQueueElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_entity_id()) {
    _internal_mutable_entity_id()->::KWMsg::Ident::MergeFrom(from._internal_entity_id());
  }
  if (from.queue_state() != 0) {
    _internal_set_queue_state(from._internal_queue_state());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void BTLActionQueueElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLActionQueueElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLActionQueueElement::CopyFrom(const BTLActionQueueElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLActionQueueElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLActionQueueElement::IsInitialized() const {
  return true;
}

void BTLActionQueueElement::InternalSwap(BTLActionQueueElement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLActionQueueElement, flag_)
      + sizeof(BTLActionQueueElement::flag_)
      - PROTOBUF_FIELD_OFFSET(BTLActionQueueElement, entity_id_)>(
          reinterpret_cast<char*>(&entity_id_),
          reinterpret_cast<char*>(&other->entity_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLActionQueueElement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[19]);
}

// ===================================================================

class BTLStartDetail::_Internal {
 public:
};

BTLStartDetail::BTLStartDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  effects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLStartDetail)
}
BTLStartDetail::BTLStartDetail(const BTLStartDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      effects_(from.effects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLStartDetail)
}

void BTLStartDetail::SharedCtor() {
}

BTLStartDetail::~BTLStartDetail() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLStartDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLStartDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BTLStartDetail::ArenaDtor(void* object) {
  BTLStartDetail* _this = reinterpret_cast< BTLStartDetail* >(object);
  (void)_this;
}
void BTLStartDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLStartDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLStartDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLStartDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLStartDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.BTLEffect effects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLStartDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLStartDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.BTLEffect effects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_effects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_effects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLStartDetail)
  return target;
}

size_t BTLStartDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLStartDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BTLEffect effects = 1;
  total_size += 1UL * this->_internal_effects_size();
  for (const auto& msg : this->effects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLStartDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLStartDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLStartDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLStartDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLStartDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLStartDetail)
    MergeFrom(*source);
  }
}

void BTLStartDetail::MergeFrom(const BTLStartDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLStartDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effects_.MergeFrom(from.effects_);
}

void BTLStartDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLStartDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLStartDetail::CopyFrom(const BTLStartDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLStartDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLStartDetail::IsInitialized() const {
  return true;
}

void BTLStartDetail::InternalSwap(BTLStartDetail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  effects_.InternalSwap(&other->effects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLStartDetail::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[20]);
}

// ===================================================================

class BTLInActionDetail::_Internal {
 public:
  static const ::KWMsg::BTLEntityStateInTurn& entity_state_in_turn(const BTLInActionDetail* msg);
};

const ::KWMsg::BTLEntityStateInTurn&
BTLInActionDetail::_Internal::entity_state_in_turn(const BTLInActionDetail* msg) {
  return *msg->entity_state_in_turn_;
}
BTLInActionDetail::BTLInActionDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  effects_(arena),
  energy_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLInActionDetail)
}
BTLInActionDetail::BTLInActionDetail(const BTLInActionDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      effects_(from.effects_),
      energy_list_(from.energy_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  active_skill_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_active_skill().empty()) {
    active_skill_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_active_skill(), 
      GetArenaForAllocation());
  }
  skill_result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_skill_result().empty()) {
    skill_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_skill_result(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_entity_state_in_turn()) {
    entity_state_in_turn_ = new ::KWMsg::BTLEntityStateInTurn(*from.entity_state_in_turn_);
  } else {
    entity_state_in_turn_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLInActionDetail)
}

void BTLInActionDetail::SharedCtor() {
active_skill_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
skill_result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
entity_state_in_turn_ = nullptr;
}

BTLInActionDetail::~BTLInActionDetail() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLInActionDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLInActionDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  active_skill_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  skill_result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete entity_state_in_turn_;
}

void BTLInActionDetail::ArenaDtor(void* object) {
  BTLInActionDetail* _this = reinterpret_cast< BTLInActionDetail* >(object);
  (void)_this;
}
void BTLInActionDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLInActionDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLInActionDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLInActionDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effects_.Clear();
  energy_list_.Clear();
  active_skill_.ClearToEmpty();
  skill_result_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && entity_state_in_turn_ != nullptr) {
    delete entity_state_in_turn_;
  }
  entity_state_in_turn_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLInActionDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.BTLEntityStateInTurn entity_state_in_turn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_state_in_turn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BTLEffect effects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BTLEnergyInfo energy_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_energy_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes active_skill = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_active_skill();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes skill_result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_skill_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLInActionDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLInActionDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.BTLEntityStateInTurn entity_state_in_turn = 1;
  if (this->has_entity_state_in_turn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_state_in_turn(this), target, stream);
  }

  // repeated .KWMsg.BTLEffect effects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_effects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_effects(i), target, stream);
  }

  // repeated .KWMsg.BTLEnergyInfo energy_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_energy_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_energy_list(i), target, stream);
  }

  // bytes active_skill = 4;
  if (!this->active_skill().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_active_skill(), target);
  }

  // bytes skill_result = 5;
  if (!this->skill_result().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_skill_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLInActionDetail)
  return target;
}

size_t BTLInActionDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLInActionDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BTLEffect effects = 2;
  total_size += 1UL * this->_internal_effects_size();
  for (const auto& msg : this->effects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.BTLEnergyInfo energy_list = 3;
  total_size += 1UL * this->_internal_energy_list_size();
  for (const auto& msg : this->energy_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes active_skill = 4;
  if (!this->active_skill().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_active_skill());
  }

  // bytes skill_result = 5;
  if (!this->skill_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_skill_result());
  }

  // .KWMsg.BTLEntityStateInTurn entity_state_in_turn = 1;
  if (this->has_entity_state_in_turn()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_state_in_turn_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLInActionDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLInActionDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLInActionDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLInActionDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLInActionDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLInActionDetail)
    MergeFrom(*source);
  }
}

void BTLInActionDetail::MergeFrom(const BTLInActionDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLInActionDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effects_.MergeFrom(from.effects_);
  energy_list_.MergeFrom(from.energy_list_);
  if (!from.active_skill().empty()) {
    _internal_set_active_skill(from._internal_active_skill());
  }
  if (!from.skill_result().empty()) {
    _internal_set_skill_result(from._internal_skill_result());
  }
  if (from.has_entity_state_in_turn()) {
    _internal_mutable_entity_state_in_turn()->::KWMsg::BTLEntityStateInTurn::MergeFrom(from._internal_entity_state_in_turn());
  }
}

void BTLInActionDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLInActionDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLInActionDetail::CopyFrom(const BTLInActionDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLInActionDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLInActionDetail::IsInitialized() const {
  return true;
}

void BTLInActionDetail::InternalSwap(BTLInActionDetail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  effects_.InternalSwap(&other->effects_);
  energy_list_.InternalSwap(&other->energy_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &active_skill_, GetArenaForAllocation(),
      &other->active_skill_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &skill_result_, GetArenaForAllocation(),
      &other->skill_result_, other->GetArenaForAllocation()
  );
  swap(entity_state_in_turn_, other->entity_state_in_turn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLInActionDetail::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[21]);
}

// ===================================================================

class BTLPostPreActionDetail::_Internal {
 public:
  static const ::KWMsg::BTLEntityStateInTurn& entity_state_in_turn(const BTLPostPreActionDetail* msg);
};

const ::KWMsg::BTLEntityStateInTurn&
BTLPostPreActionDetail::_Internal::entity_state_in_turn(const BTLPostPreActionDetail* msg) {
  return *msg->entity_state_in_turn_;
}
BTLPostPreActionDetail::BTLPostPreActionDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  new_entities_(arena),
  effects_(arena),
  energy_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLPostPreActionDetail)
}
BTLPostPreActionDetail::BTLPostPreActionDetail(const BTLPostPreActionDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      new_entities_(from.new_entities_),
      effects_(from.effects_),
      energy_list_(from.energy_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entity_state_in_turn()) {
    entity_state_in_turn_ = new ::KWMsg::BTLEntityStateInTurn(*from.entity_state_in_turn_);
  } else {
    entity_state_in_turn_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLPostPreActionDetail)
}

void BTLPostPreActionDetail::SharedCtor() {
entity_state_in_turn_ = nullptr;
}

BTLPostPreActionDetail::~BTLPostPreActionDetail() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLPostPreActionDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLPostPreActionDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete entity_state_in_turn_;
}

void BTLPostPreActionDetail::ArenaDtor(void* object) {
  BTLPostPreActionDetail* _this = reinterpret_cast< BTLPostPreActionDetail* >(object);
  (void)_this;
}
void BTLPostPreActionDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLPostPreActionDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLPostPreActionDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLPostPreActionDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_entities_.Clear();
  effects_.Clear();
  energy_list_.Clear();
  if (GetArenaForAllocation() == nullptr && entity_state_in_turn_ != nullptr) {
    delete entity_state_in_turn_;
  }
  entity_state_in_turn_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLPostPreActionDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.BTLEntityStateInTurn entity_state_in_turn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_state_in_turn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BTLEntity new_entities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BTLEffect effects = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BTLEnergyInfo energy_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_energy_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLPostPreActionDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLPostPreActionDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.BTLEntityStateInTurn entity_state_in_turn = 1;
  if (this->has_entity_state_in_turn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_state_in_turn(this), target, stream);
  }

  // repeated .KWMsg.BTLEntity new_entities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_new_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_new_entities(i), target, stream);
  }

  // repeated .KWMsg.BTLEffect effects = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_effects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_effects(i), target, stream);
  }

  // repeated .KWMsg.BTLEnergyInfo energy_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_energy_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_energy_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLPostPreActionDetail)
  return target;
}

size_t BTLPostPreActionDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLPostPreActionDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BTLEntity new_entities = 2;
  total_size += 1UL * this->_internal_new_entities_size();
  for (const auto& msg : this->new_entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.BTLEffect effects = 3;
  total_size += 1UL * this->_internal_effects_size();
  for (const auto& msg : this->effects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.BTLEnergyInfo energy_list = 4;
  total_size += 1UL * this->_internal_energy_list_size();
  for (const auto& msg : this->energy_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.BTLEntityStateInTurn entity_state_in_turn = 1;
  if (this->has_entity_state_in_turn()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_state_in_turn_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLPostPreActionDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLPostPreActionDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLPostPreActionDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLPostPreActionDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLPostPreActionDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLPostPreActionDetail)
    MergeFrom(*source);
  }
}

void BTLPostPreActionDetail::MergeFrom(const BTLPostPreActionDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLPostPreActionDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_entities_.MergeFrom(from.new_entities_);
  effects_.MergeFrom(from.effects_);
  energy_list_.MergeFrom(from.energy_list_);
  if (from.has_entity_state_in_turn()) {
    _internal_mutable_entity_state_in_turn()->::KWMsg::BTLEntityStateInTurn::MergeFrom(from._internal_entity_state_in_turn());
  }
}

void BTLPostPreActionDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLPostPreActionDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLPostPreActionDetail::CopyFrom(const BTLPostPreActionDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLPostPreActionDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLPostPreActionDetail::IsInitialized() const {
  return true;
}

void BTLPostPreActionDetail::InternalSwap(BTLPostPreActionDetail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  new_entities_.InternalSwap(&other->new_entities_);
  effects_.InternalSwap(&other->effects_);
  energy_list_.InternalSwap(&other->energy_list_);
  swap(entity_state_in_turn_, other->entity_state_in_turn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLPostPreActionDetail::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[22]);
}

// ===================================================================

class BTLBeforeEndDetail::_Internal {
 public:
};

BTLBeforeEndDetail::BTLBeforeEndDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  effects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLBeforeEndDetail)
}
BTLBeforeEndDetail::BTLBeforeEndDetail(const BTLBeforeEndDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      effects_(from.effects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLBeforeEndDetail)
}

void BTLBeforeEndDetail::SharedCtor() {
}

BTLBeforeEndDetail::~BTLBeforeEndDetail() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLBeforeEndDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLBeforeEndDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BTLBeforeEndDetail::ArenaDtor(void* object) {
  BTLBeforeEndDetail* _this = reinterpret_cast< BTLBeforeEndDetail* >(object);
  (void)_this;
}
void BTLBeforeEndDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLBeforeEndDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLBeforeEndDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLBeforeEndDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLBeforeEndDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.BTLEffect effects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLBeforeEndDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLBeforeEndDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.BTLEffect effects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_effects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_effects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLBeforeEndDetail)
  return target;
}

size_t BTLBeforeEndDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLBeforeEndDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BTLEffect effects = 1;
  total_size += 1UL * this->_internal_effects_size();
  for (const auto& msg : this->effects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLBeforeEndDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLBeforeEndDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLBeforeEndDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLBeforeEndDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLBeforeEndDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLBeforeEndDetail)
    MergeFrom(*source);
  }
}

void BTLBeforeEndDetail::MergeFrom(const BTLBeforeEndDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLBeforeEndDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effects_.MergeFrom(from.effects_);
}

void BTLBeforeEndDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLBeforeEndDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLBeforeEndDetail::CopyFrom(const BTLBeforeEndDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLBeforeEndDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLBeforeEndDetail::IsInitialized() const {
  return true;
}

void BTLBeforeEndDetail::InternalSwap(BTLBeforeEndDetail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  effects_.InternalSwap(&other->effects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLBeforeEndDetail::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[23]);
}

// ===================================================================

class BTLEntityStateInTurn::_Internal {
 public:
  static const ::KWMsg::Ident& entity_id(const BTLEntityStateInTurn* msg);
};

const ::KWMsg::Ident&
BTLEntityStateInTurn::_Internal::entity_id(const BTLEntityStateInTurn* msg) {
  return *msg->entity_id_;
}
void BTLEntityStateInTurn::clear_entity_id() {
  if (GetArenaForAllocation() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
}
BTLEntityStateInTurn::BTLEntityStateInTurn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  skill_states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLEntityStateInTurn)
}
BTLEntityStateInTurn::BTLEntityStateInTurn(const BTLEntityStateInTurn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      skill_states_(from.skill_states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::KWMsg::Ident(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLEntityStateInTurn)
}

void BTLEntityStateInTurn::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entity_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&entity_id_)) + sizeof(code_));
}

BTLEntityStateInTurn::~BTLEntityStateInTurn() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLEntityStateInTurn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLEntityStateInTurn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete entity_id_;
}

void BTLEntityStateInTurn::ArenaDtor(void* object) {
  BTLEntityStateInTurn* _this = reinterpret_cast< BTLEntityStateInTurn* >(object);
  (void)_this;
}
void BTLEntityStateInTurn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLEntityStateInTurn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLEntityStateInTurn::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLEntityStateInTurn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_states_.Clear();
  if (GetArenaForAllocation() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLEntityStateInTurn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BTLEntitySkillState skill_states = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skill_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLEntityStateInTurn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLEntityStateInTurn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // .KWMsg.Ident entity_id = 2;
  if (this->has_entity_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entity_id(this), target, stream);
  }

  // repeated .KWMsg.BTLEntitySkillState skill_states = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skill_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_skill_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLEntityStateInTurn)
  return target;
}

size_t BTLEntityStateInTurn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLEntityStateInTurn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BTLEntitySkillState skill_states = 3;
  total_size += 1UL * this->_internal_skill_states_size();
  for (const auto& msg : this->skill_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident entity_id = 2;
  if (this->has_entity_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }

  // .KWMsg.EGameEventCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLEntityStateInTurn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLEntityStateInTurn)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLEntityStateInTurn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLEntityStateInTurn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLEntityStateInTurn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLEntityStateInTurn)
    MergeFrom(*source);
  }
}

void BTLEntityStateInTurn::MergeFrom(const BTLEntityStateInTurn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLEntityStateInTurn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_states_.MergeFrom(from.skill_states_);
  if (from.has_entity_id()) {
    _internal_mutable_entity_id()->::KWMsg::Ident::MergeFrom(from._internal_entity_id());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void BTLEntityStateInTurn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLEntityStateInTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLEntityStateInTurn::CopyFrom(const BTLEntityStateInTurn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLEntityStateInTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLEntityStateInTurn::IsInitialized() const {
  return true;
}

void BTLEntityStateInTurn::InternalSwap(BTLEntityStateInTurn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  skill_states_.InternalSwap(&other->skill_states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLEntityStateInTurn, code_)
      + sizeof(BTLEntityStateInTurn::code_)
      - PROTOBUF_FIELD_OFFSET(BTLEntityStateInTurn, entity_id_)>(
          reinterpret_cast<char*>(&entity_id_),
          reinterpret_cast<char*>(&other->entity_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLEntityStateInTurn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[24]);
}

// ===================================================================

class BTLEntitySkillState::_Internal {
 public:
};

void BTLEntitySkillState::clear_candidate_targets() {
  candidate_targets_.Clear();
}
BTLEntitySkillState::BTLEntitySkillState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  candidate_targets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLEntitySkillState)
}
BTLEntitySkillState::BTLEntitySkillState(const BTLEntitySkillState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      candidate_targets_(from.candidate_targets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  skill_mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_skill_mid().empty()) {
    skill_mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_skill_mid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cur_cd_, &from.cur_cd_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_state_) -
    reinterpret_cast<char*>(&cur_cd_)) + sizeof(skill_state_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLEntitySkillState)
}

void BTLEntitySkillState::SharedCtor() {
skill_mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cur_cd_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&skill_state_) -
    reinterpret_cast<char*>(&cur_cd_)) + sizeof(skill_state_));
}

BTLEntitySkillState::~BTLEntitySkillState() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLEntitySkillState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLEntitySkillState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  skill_mid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BTLEntitySkillState::ArenaDtor(void* object) {
  BTLEntitySkillState* _this = reinterpret_cast< BTLEntitySkillState* >(object);
  (void)_this;
}
void BTLEntitySkillState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLEntitySkillState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLEntitySkillState::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLEntitySkillState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_targets_.Clear();
  skill_mid_.ClearToEmpty();
  ::memset(&cur_cd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_state_) -
      reinterpret_cast<char*>(&cur_cd_)) + sizeof(skill_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLEntitySkillState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes skill_mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_skill_mid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_cd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cur_cd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLSkillState skill_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_skill_state(static_cast<::KWMsg::BTLSkillState>(val));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.Ident candidate_targets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidate_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLEntitySkillState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLEntitySkillState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes skill_mid = 1;
  if (!this->skill_mid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_skill_mid(), target);
  }

  // int32 cur_cd = 2;
  if (this->cur_cd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cur_cd(), target);
  }

  // int32 cost = 3;
  if (this->cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cost(), target);
  }

  // .KWMsg.BTLSkillState skill_state = 4;
  if (this->skill_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_skill_state(), target);
  }

  // repeated .KWMsg.Ident candidate_targets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candidate_targets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_candidate_targets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLEntitySkillState)
  return target;
}

size_t BTLEntitySkillState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLEntitySkillState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.Ident candidate_targets = 5;
  total_size += 1UL * this->_internal_candidate_targets_size();
  for (const auto& msg : this->candidate_targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes skill_mid = 1;
  if (!this->skill_mid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_skill_mid());
  }

  // int32 cur_cd = 2;
  if (this->cur_cd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_cd());
  }

  // int32 cost = 3;
  if (this->cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cost());
  }

  // .KWMsg.BTLSkillState skill_state = 4;
  if (this->skill_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_skill_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLEntitySkillState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLEntitySkillState)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLEntitySkillState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLEntitySkillState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLEntitySkillState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLEntitySkillState)
    MergeFrom(*source);
  }
}

void BTLEntitySkillState::MergeFrom(const BTLEntitySkillState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLEntitySkillState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_targets_.MergeFrom(from.candidate_targets_);
  if (!from.skill_mid().empty()) {
    _internal_set_skill_mid(from._internal_skill_mid());
  }
  if (from.cur_cd() != 0) {
    _internal_set_cur_cd(from._internal_cur_cd());
  }
  if (from.cost() != 0) {
    _internal_set_cost(from._internal_cost());
  }
  if (from.skill_state() != 0) {
    _internal_set_skill_state(from._internal_skill_state());
  }
}

void BTLEntitySkillState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLEntitySkillState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLEntitySkillState::CopyFrom(const BTLEntitySkillState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLEntitySkillState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLEntitySkillState::IsInitialized() const {
  return true;
}

void BTLEntitySkillState::InternalSwap(BTLEntitySkillState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  candidate_targets_.InternalSwap(&other->candidate_targets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &skill_mid_, GetArenaForAllocation(),
      &other->skill_mid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLEntitySkillState, skill_state_)
      + sizeof(BTLEntitySkillState::skill_state_)
      - PROTOBUF_FIELD_OFFSET(BTLEntitySkillState, cur_cd_)>(
          reinterpret_cast<char*>(&cur_cd_),
          reinterpret_cast<char*>(&other->cur_cd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLEntitySkillState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[25]);
}

// ===================================================================

class BTLEffect::_Internal {
 public:
  static const ::KWMsg::Ident& caster_id(const BTLEffect* msg);
  static const ::KWMsg::Ident& target_id(const BTLEffect* msg);
  static const ::KWMsg::Ident& guid(const BTLEffect* msg);
  static const ::KWMsg::BTLDamageInfo& damage(const BTLEffect* msg);
  static const ::KWMsg::BTLHealInfo& heal(const BTLEffect* msg);
  static const ::KWMsg::BTLSummonInfo& summon(const BTLEffect* msg);
  static const ::KWMsg::BTLBuffInfo& buff(const BTLEffect* msg);
  static const ::KWMsg::BTLTransformInfo& transform(const BTLEffect* msg);
  static const ::KWMsg::BTLTriggerInfo& trigger(const BTLEffect* msg);
  static const ::KWMsg::BTLResistanceInfo& resistance(const BTLEffect* msg);
  static const ::KWMsg::BTLShowTextInfo& show_text(const BTLEffect* msg);
  static const ::KWMsg::BTLReviveInfo& revive(const BTLEffect* msg);
};

const ::KWMsg::Ident&
BTLEffect::_Internal::caster_id(const BTLEffect* msg) {
  return *msg->caster_id_;
}
const ::KWMsg::Ident&
BTLEffect::_Internal::target_id(const BTLEffect* msg) {
  return *msg->target_id_;
}
const ::KWMsg::Ident&
BTLEffect::_Internal::guid(const BTLEffect* msg) {
  return *msg->guid_;
}
const ::KWMsg::BTLDamageInfo&
BTLEffect::_Internal::damage(const BTLEffect* msg) {
  return *msg->data_.damage_;
}
const ::KWMsg::BTLHealInfo&
BTLEffect::_Internal::heal(const BTLEffect* msg) {
  return *msg->data_.heal_;
}
const ::KWMsg::BTLSummonInfo&
BTLEffect::_Internal::summon(const BTLEffect* msg) {
  return *msg->data_.summon_;
}
const ::KWMsg::BTLBuffInfo&
BTLEffect::_Internal::buff(const BTLEffect* msg) {
  return *msg->data_.buff_;
}
const ::KWMsg::BTLTransformInfo&
BTLEffect::_Internal::transform(const BTLEffect* msg) {
  return *msg->data_.transform_;
}
const ::KWMsg::BTLTriggerInfo&
BTLEffect::_Internal::trigger(const BTLEffect* msg) {
  return *msg->data_.trigger_;
}
const ::KWMsg::BTLResistanceInfo&
BTLEffect::_Internal::resistance(const BTLEffect* msg) {
  return *msg->data_.resistance_;
}
const ::KWMsg::BTLShowTextInfo&
BTLEffect::_Internal::show_text(const BTLEffect* msg) {
  return *msg->data_.show_text_;
}
const ::KWMsg::BTLReviveInfo&
BTLEffect::_Internal::revive(const BTLEffect* msg) {
  return *msg->data_.revive_;
}
void BTLEffect::clear_caster_id() {
  if (GetArenaForAllocation() == nullptr && caster_id_ != nullptr) {
    delete caster_id_;
  }
  caster_id_ = nullptr;
}
void BTLEffect::clear_target_id() {
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
}
void BTLEffect::clear_guid() {
  if (GetArenaForAllocation() == nullptr && guid_ != nullptr) {
    delete guid_;
  }
  guid_ = nullptr;
}
void BTLEffect::set_allocated_damage(::KWMsg::BTLDamageInfo* damage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (damage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLDamageInfo>::GetOwningArena(damage);
    if (message_arena != submessage_arena) {
      damage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, damage, submessage_arena);
    }
    set_has_damage();
    data_.damage_ = damage;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEffect.damage)
}
void BTLEffect::set_allocated_heal(::KWMsg::BTLHealInfo* heal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (heal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLHealInfo>::GetOwningArena(heal);
    if (message_arena != submessage_arena) {
      heal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heal, submessage_arena);
    }
    set_has_heal();
    data_.heal_ = heal;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEffect.heal)
}
void BTLEffect::set_allocated_summon(::KWMsg::BTLSummonInfo* summon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (summon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLSummonInfo>::GetOwningArena(summon);
    if (message_arena != submessage_arena) {
      summon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summon, submessage_arena);
    }
    set_has_summon();
    data_.summon_ = summon;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEffect.summon)
}
void BTLEffect::set_allocated_buff(::KWMsg::BTLBuffInfo* buff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (buff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLBuffInfo>::GetOwningArena(buff);
    if (message_arena != submessage_arena) {
      buff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buff, submessage_arena);
    }
    set_has_buff();
    data_.buff_ = buff;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEffect.buff)
}
void BTLEffect::set_allocated_transform(::KWMsg::BTLTransformInfo* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLTransformInfo>::GetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    set_has_transform();
    data_.transform_ = transform;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEffect.transform)
}
void BTLEffect::set_allocated_trigger(::KWMsg::BTLTriggerInfo* trigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (trigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLTriggerInfo>::GetOwningArena(trigger);
    if (message_arena != submessage_arena) {
      trigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }
    set_has_trigger();
    data_.trigger_ = trigger;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEffect.trigger)
}
void BTLEffect::set_allocated_resistance(::KWMsg::BTLResistanceInfo* resistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (resistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLResistanceInfo>::GetOwningArena(resistance);
    if (message_arena != submessage_arena) {
      resistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resistance, submessage_arena);
    }
    set_has_resistance();
    data_.resistance_ = resistance;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEffect.resistance)
}
void BTLEffect::set_allocated_show_text(::KWMsg::BTLShowTextInfo* show_text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (show_text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLShowTextInfo>::GetOwningArena(show_text);
    if (message_arena != submessage_arena) {
      show_text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_text, submessage_arena);
    }
    set_has_show_text();
    data_.show_text_ = show_text;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEffect.show_text)
}
void BTLEffect::set_allocated_revive(::KWMsg::BTLReviveInfo* revive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (revive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLReviveInfo>::GetOwningArena(revive);
    if (message_arena != submessage_arena) {
      revive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revive, submessage_arena);
    }
    set_has_revive();
    data_.revive_ = revive;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEffect.revive)
}
BTLEffect::BTLEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLEffect)
}
BTLEffect::BTLEffect(const BTLEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entities_(from.entities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mid().empty()) {
    mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mid(), 
      GetArenaForAllocation());
  }
  source_mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_mid().empty()) {
    source_mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_mid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_caster_id()) {
    caster_id_ = new ::KWMsg::Ident(*from.caster_id_);
  } else {
    caster_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::KWMsg::Ident(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  if (from._internal_has_guid()) {
    guid_ = new ::KWMsg::Ident(*from.guid_);
  } else {
    guid_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_index_) -
    reinterpret_cast<char*>(&type_)) + sizeof(effect_index_));
  clear_has_data();
  switch (from.data_case()) {
    case kDamage: {
      _internal_mutable_damage()->::KWMsg::BTLDamageInfo::MergeFrom(from._internal_damage());
      break;
    }
    case kHeal: {
      _internal_mutable_heal()->::KWMsg::BTLHealInfo::MergeFrom(from._internal_heal());
      break;
    }
    case kSummon: {
      _internal_mutable_summon()->::KWMsg::BTLSummonInfo::MergeFrom(from._internal_summon());
      break;
    }
    case kBuff: {
      _internal_mutable_buff()->::KWMsg::BTLBuffInfo::MergeFrom(from._internal_buff());
      break;
    }
    case kTransform: {
      _internal_mutable_transform()->::KWMsg::BTLTransformInfo::MergeFrom(from._internal_transform());
      break;
    }
    case kTrigger: {
      _internal_mutable_trigger()->::KWMsg::BTLTriggerInfo::MergeFrom(from._internal_trigger());
      break;
    }
    case kResistance: {
      _internal_mutable_resistance()->::KWMsg::BTLResistanceInfo::MergeFrom(from._internal_resistance());
      break;
    }
    case kShowText: {
      _internal_mutable_show_text()->::KWMsg::BTLShowTextInfo::MergeFrom(from._internal_show_text());
      break;
    }
    case kRevive: {
      _internal_mutable_revive()->::KWMsg::BTLReviveInfo::MergeFrom(from._internal_revive());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLEffect)
}

void BTLEffect::SharedCtor() {
mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
source_mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&caster_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&effect_index_) -
    reinterpret_cast<char*>(&caster_id_)) + sizeof(effect_index_));
clear_has_data();
}

BTLEffect::~BTLEffect() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLEffect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_mid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete caster_id_;
  if (this != internal_default_instance()) delete target_id_;
  if (this != internal_default_instance()) delete guid_;
  if (has_data()) {
    clear_data();
  }
}

void BTLEffect::ArenaDtor(void* object) {
  BTLEffect* _this = reinterpret_cast< BTLEffect* >(object);
  (void)_this;
}
void BTLEffect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLEffect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLEffect::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:KWMsg.BTLEffect)
  switch (data_case()) {
    case kDamage: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.damage_;
      }
      break;
    }
    case kHeal: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.heal_;
      }
      break;
    }
    case kSummon: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.summon_;
      }
      break;
    }
    case kBuff: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.buff_;
      }
      break;
    }
    case kTransform: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.transform_;
      }
      break;
    }
    case kTrigger: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.trigger_;
      }
      break;
    }
    case kResistance: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.resistance_;
      }
      break;
    }
    case kShowText: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.show_text_;
      }
      break;
    }
    case kRevive: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.revive_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void BTLEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  mid_.ClearToEmpty();
  source_mid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && caster_id_ != nullptr) {
    delete caster_id_;
  }
  caster_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && guid_ != nullptr) {
    delete guid_;
  }
  guid_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_index_) -
      reinterpret_cast<char*>(&type_)) + sizeof(effect_index_));
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLEffect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident caster_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_caster_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident target_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes source_mid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_source_mid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BTLEntity entities = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident guid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 effect_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          effect_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLDamageInfo damage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_damage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLHealInfo heal = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_heal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLSummonInfo summon = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_summon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLBuffInfo buff = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_buff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLTransformInfo transform = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLTriggerInfo trigger = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLResistanceInfo resistance = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_resistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLShowTextInfo show_text = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_show_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLReviveInfo revive = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_revive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLEffect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes mid = 1;
  if (!this->mid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_mid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // .KWMsg.Ident caster_id = 3;
  if (this->has_caster_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::caster_id(this), target, stream);
  }

  // .KWMsg.Ident target_id = 4;
  if (this->has_target_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::target_id(this), target, stream);
  }

  // bytes source_mid = 5;
  if (!this->source_mid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_source_mid(), target);
  }

  // repeated .KWMsg.BTLEntity entities = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_entities(i), target, stream);
  }

  // .KWMsg.Ident guid = 7;
  if (this->has_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::guid(this), target, stream);
  }

  // int32 effect_index = 8;
  if (this->effect_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_effect_index(), target);
  }

  // .KWMsg.BTLDamageInfo damage = 9;
  if (_internal_has_damage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::damage(this), target, stream);
  }

  // .KWMsg.BTLHealInfo heal = 10;
  if (_internal_has_heal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::heal(this), target, stream);
  }

  // .KWMsg.BTLSummonInfo summon = 11;
  if (_internal_has_summon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::summon(this), target, stream);
  }

  // .KWMsg.BTLBuffInfo buff = 12;
  if (_internal_has_buff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::buff(this), target, stream);
  }

  // .KWMsg.BTLTransformInfo transform = 13;
  if (_internal_has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::transform(this), target, stream);
  }

  // .KWMsg.BTLTriggerInfo trigger = 14;
  if (_internal_has_trigger()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::trigger(this), target, stream);
  }

  // .KWMsg.BTLResistanceInfo resistance = 15;
  if (_internal_has_resistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::resistance(this), target, stream);
  }

  // .KWMsg.BTLShowTextInfo show_text = 16;
  if (_internal_has_show_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::show_text(this), target, stream);
  }

  // .KWMsg.BTLReviveInfo revive = 17;
  if (_internal_has_revive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::revive(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLEffect)
  return target;
}

size_t BTLEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLEffect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BTLEntity entities = 6;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes mid = 1;
  if (!this->mid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mid());
  }

  // bytes source_mid = 5;
  if (!this->source_mid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_source_mid());
  }

  // .KWMsg.Ident caster_id = 3;
  if (this->has_caster_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caster_id_);
  }

  // .KWMsg.Ident target_id = 4;
  if (this->has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  // .KWMsg.Ident guid = 7;
  if (this->has_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guid_);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 effect_index = 8;
  if (this->effect_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_effect_index());
  }

  switch (data_case()) {
    // .KWMsg.BTLDamageInfo damage = 9;
    case kDamage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.damage_);
      break;
    }
    // .KWMsg.BTLHealInfo heal = 10;
    case kHeal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.heal_);
      break;
    }
    // .KWMsg.BTLSummonInfo summon = 11;
    case kSummon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.summon_);
      break;
    }
    // .KWMsg.BTLBuffInfo buff = 12;
    case kBuff: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.buff_);
      break;
    }
    // .KWMsg.BTLTransformInfo transform = 13;
    case kTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.transform_);
      break;
    }
    // .KWMsg.BTLTriggerInfo trigger = 14;
    case kTrigger: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.trigger_);
      break;
    }
    // .KWMsg.BTLResistanceInfo resistance = 15;
    case kResistance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.resistance_);
      break;
    }
    // .KWMsg.BTLShowTextInfo show_text = 16;
    case kShowText: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.show_text_);
      break;
    }
    // .KWMsg.BTLReviveInfo revive = 17;
    case kRevive: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.revive_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLEffect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLEffect)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLEffect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLEffect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLEffect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLEffect)
    MergeFrom(*source);
  }
}

void BTLEffect::MergeFrom(const BTLEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLEffect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
  if (!from.mid().empty()) {
    _internal_set_mid(from._internal_mid());
  }
  if (!from.source_mid().empty()) {
    _internal_set_source_mid(from._internal_source_mid());
  }
  if (from.has_caster_id()) {
    _internal_mutable_caster_id()->::KWMsg::Ident::MergeFrom(from._internal_caster_id());
  }
  if (from.has_target_id()) {
    _internal_mutable_target_id()->::KWMsg::Ident::MergeFrom(from._internal_target_id());
  }
  if (from.has_guid()) {
    _internal_mutable_guid()->::KWMsg::Ident::MergeFrom(from._internal_guid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.effect_index() != 0) {
    _internal_set_effect_index(from._internal_effect_index());
  }
  switch (from.data_case()) {
    case kDamage: {
      _internal_mutable_damage()->::KWMsg::BTLDamageInfo::MergeFrom(from._internal_damage());
      break;
    }
    case kHeal: {
      _internal_mutable_heal()->::KWMsg::BTLHealInfo::MergeFrom(from._internal_heal());
      break;
    }
    case kSummon: {
      _internal_mutable_summon()->::KWMsg::BTLSummonInfo::MergeFrom(from._internal_summon());
      break;
    }
    case kBuff: {
      _internal_mutable_buff()->::KWMsg::BTLBuffInfo::MergeFrom(from._internal_buff());
      break;
    }
    case kTransform: {
      _internal_mutable_transform()->::KWMsg::BTLTransformInfo::MergeFrom(from._internal_transform());
      break;
    }
    case kTrigger: {
      _internal_mutable_trigger()->::KWMsg::BTLTriggerInfo::MergeFrom(from._internal_trigger());
      break;
    }
    case kResistance: {
      _internal_mutable_resistance()->::KWMsg::BTLResistanceInfo::MergeFrom(from._internal_resistance());
      break;
    }
    case kShowText: {
      _internal_mutable_show_text()->::KWMsg::BTLShowTextInfo::MergeFrom(from._internal_show_text());
      break;
    }
    case kRevive: {
      _internal_mutable_revive()->::KWMsg::BTLReviveInfo::MergeFrom(from._internal_revive());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void BTLEffect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLEffect::CopyFrom(const BTLEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLEffect::IsInitialized() const {
  return true;
}

void BTLEffect::InternalSwap(BTLEffect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entities_.InternalSwap(&other->entities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mid_, GetArenaForAllocation(),
      &other->mid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_mid_, GetArenaForAllocation(),
      &other->source_mid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLEffect, effect_index_)
      + sizeof(BTLEffect::effect_index_)
      - PROTOBUF_FIELD_OFFSET(BTLEffect, caster_id_)>(
          reinterpret_cast<char*>(&caster_id_),
          reinterpret_cast<char*>(&other->caster_id_));
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLEffect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[26]);
}

// ===================================================================

class BTLDamageInfo::_Internal {
 public:
  static const ::KWMsg::BTLShieldChangeInfo& shield_change(const BTLDamageInfo* msg);
};

const ::KWMsg::BTLShieldChangeInfo&
BTLDamageInfo::_Internal::shield_change(const BTLDamageInfo* msg) {
  return *msg->shield_change_;
}
BTLDamageInfo::BTLDamageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLDamageInfo)
}
BTLDamageInfo::BTLDamageInfo(const BTLDamageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shield_change()) {
    shield_change_ = new ::KWMsg::BTLShieldChangeInfo(*from.shield_change_);
  } else {
    shield_change_ = nullptr;
  }
  ::memcpy(&display_val_, &from.display_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&display_val_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLDamageInfo)
}

void BTLDamageInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shield_change_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&shield_change_)) + sizeof(flags_));
}

BTLDamageInfo::~BTLDamageInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLDamageInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLDamageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete shield_change_;
}

void BTLDamageInfo::ArenaDtor(void* object) {
  BTLDamageInfo* _this = reinterpret_cast< BTLDamageInfo* >(object);
  (void)_this;
}
void BTLDamageInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLDamageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLDamageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLDamageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && shield_change_ != nullptr) {
    delete shield_change_;
  }
  shield_change_ = nullptr;
  ::memset(&display_val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&display_val_)) + sizeof(flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLDamageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 display_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          display_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hp_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hp_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLShieldChangeInfo shield_change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_shield_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLDamageInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLDamageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 display_val = 1;
  if (this->display_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_display_val(), target);
  }

  // int32 hp_change = 2;
  if (this->hp_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hp_change(), target);
  }

  // int32 flags = 3;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_flags(), target);
  }

  // .KWMsg.BTLShieldChangeInfo shield_change = 4;
  if (this->has_shield_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::shield_change(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLDamageInfo)
  return target;
}

size_t BTLDamageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLDamageInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.BTLShieldChangeInfo shield_change = 4;
  if (this->has_shield_change()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shield_change_);
  }

  // int32 display_val = 1;
  if (this->display_val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_display_val());
  }

  // int32 hp_change = 2;
  if (this->hp_change() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp_change());
  }

  // int32 flags = 3;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLDamageInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLDamageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLDamageInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLDamageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLDamageInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLDamageInfo)
    MergeFrom(*source);
  }
}

void BTLDamageInfo::MergeFrom(const BTLDamageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLDamageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shield_change()) {
    _internal_mutable_shield_change()->::KWMsg::BTLShieldChangeInfo::MergeFrom(from._internal_shield_change());
  }
  if (from.display_val() != 0) {
    _internal_set_display_val(from._internal_display_val());
  }
  if (from.hp_change() != 0) {
    _internal_set_hp_change(from._internal_hp_change());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
}

void BTLDamageInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLDamageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLDamageInfo::CopyFrom(const BTLDamageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLDamageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLDamageInfo::IsInitialized() const {
  return true;
}

void BTLDamageInfo::InternalSwap(BTLDamageInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLDamageInfo, flags_)
      + sizeof(BTLDamageInfo::flags_)
      - PROTOBUF_FIELD_OFFSET(BTLDamageInfo, shield_change_)>(
          reinterpret_cast<char*>(&shield_change_),
          reinterpret_cast<char*>(&other->shield_change_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLDamageInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[27]);
}

// ===================================================================

class BTLHealInfo::_Internal {
 public:
};

BTLHealInfo::BTLHealInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLHealInfo)
}
BTLHealInfo::BTLHealInfo(const BTLHealInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&display_val_, &from.display_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&display_val_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLHealInfo)
}

void BTLHealInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&display_val_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&display_val_)) + sizeof(flags_));
}

BTLHealInfo::~BTLHealInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLHealInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLHealInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BTLHealInfo::ArenaDtor(void* object) {
  BTLHealInfo* _this = reinterpret_cast< BTLHealInfo* >(object);
  (void)_this;
}
void BTLHealInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLHealInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLHealInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLHealInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&display_val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&display_val_)) + sizeof(flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLHealInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 display_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          display_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hp_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hp_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLHealInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLHealInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 display_val = 1;
  if (this->display_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_display_val(), target);
  }

  // int32 hp_change = 2;
  if (this->hp_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hp_change(), target);
  }

  // int32 flags = 3;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLHealInfo)
  return target;
}

size_t BTLHealInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLHealInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 display_val = 1;
  if (this->display_val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_display_val());
  }

  // int32 hp_change = 2;
  if (this->hp_change() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp_change());
  }

  // int32 flags = 3;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLHealInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLHealInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLHealInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLHealInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLHealInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLHealInfo)
    MergeFrom(*source);
  }
}

void BTLHealInfo::MergeFrom(const BTLHealInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLHealInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.display_val() != 0) {
    _internal_set_display_val(from._internal_display_val());
  }
  if (from.hp_change() != 0) {
    _internal_set_hp_change(from._internal_hp_change());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
}

void BTLHealInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLHealInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLHealInfo::CopyFrom(const BTLHealInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLHealInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLHealInfo::IsInitialized() const {
  return true;
}

void BTLHealInfo::InternalSwap(BTLHealInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLHealInfo, flags_)
      + sizeof(BTLHealInfo::flags_)
      - PROTOBUF_FIELD_OFFSET(BTLHealInfo, display_val_)>(
          reinterpret_cast<char*>(&display_val_),
          reinterpret_cast<char*>(&other->display_val_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLHealInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[28]);
}

// ===================================================================

class BTLSummonInfo::_Internal {
 public:
};

BTLSummonInfo::BTLSummonInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLSummonInfo)
}
BTLSummonInfo::BTLSummonInfo(const BTLSummonInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entities_(from.entities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLSummonInfo)
}

void BTLSummonInfo::SharedCtor() {
}

BTLSummonInfo::~BTLSummonInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLSummonInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLSummonInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BTLSummonInfo::ArenaDtor(void* object) {
  BTLSummonInfo* _this = reinterpret_cast< BTLSummonInfo* >(object);
  (void)_this;
}
void BTLSummonInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLSummonInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLSummonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLSummonInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLSummonInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.BTLEntity entities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLSummonInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLSummonInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.BTLEntity entities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLSummonInfo)
  return target;
}

size_t BTLSummonInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLSummonInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BTLEntity entities = 1;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLSummonInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLSummonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLSummonInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLSummonInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLSummonInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLSummonInfo)
    MergeFrom(*source);
  }
}

void BTLSummonInfo::MergeFrom(const BTLSummonInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLSummonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
}

void BTLSummonInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLSummonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLSummonInfo::CopyFrom(const BTLSummonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLSummonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLSummonInfo::IsInitialized() const {
  return true;
}

void BTLSummonInfo::InternalSwap(BTLSummonInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entities_.InternalSwap(&other->entities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLSummonInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[29]);
}

// ===================================================================

class BTLTransformInfo::_Internal {
 public:
};

BTLTransformInfo::BTLTransformInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLTransformInfo)
}
BTLTransformInfo::BTLTransformInfo(const BTLTransformInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  old_enemy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_enemy_id().empty()) {
    old_enemy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_old_enemy_id(), 
      GetArenaForAllocation());
  }
  new_enemy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_enemy_id().empty()) {
    new_enemy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_enemy_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLTransformInfo)
}

void BTLTransformInfo::SharedCtor() {
old_enemy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
new_enemy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BTLTransformInfo::~BTLTransformInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLTransformInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLTransformInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  old_enemy_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_enemy_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BTLTransformInfo::ArenaDtor(void* object) {
  BTLTransformInfo* _this = reinterpret_cast< BTLTransformInfo* >(object);
  (void)_this;
}
void BTLTransformInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLTransformInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLTransformInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLTransformInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_enemy_id_.ClearToEmpty();
  new_enemy_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLTransformInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes old_enemy_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_old_enemy_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes new_enemy_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_enemy_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLTransformInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLTransformInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes old_enemy_id = 1;
  if (!this->old_enemy_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_old_enemy_id(), target);
  }

  // bytes new_enemy_id = 2;
  if (!this->new_enemy_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_new_enemy_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLTransformInfo)
  return target;
}

size_t BTLTransformInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLTransformInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes old_enemy_id = 1;
  if (!this->old_enemy_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_enemy_id());
  }

  // bytes new_enemy_id = 2;
  if (!this->new_enemy_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_enemy_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLTransformInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLTransformInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLTransformInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLTransformInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLTransformInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLTransformInfo)
    MergeFrom(*source);
  }
}

void BTLTransformInfo::MergeFrom(const BTLTransformInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLTransformInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.old_enemy_id().empty()) {
    _internal_set_old_enemy_id(from._internal_old_enemy_id());
  }
  if (!from.new_enemy_id().empty()) {
    _internal_set_new_enemy_id(from._internal_new_enemy_id());
  }
}

void BTLTransformInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLTransformInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLTransformInfo::CopyFrom(const BTLTransformInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLTransformInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLTransformInfo::IsInitialized() const {
  return true;
}

void BTLTransformInfo::InternalSwap(BTLTransformInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &old_enemy_id_, GetArenaForAllocation(),
      &other->old_enemy_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &new_enemy_id_, GetArenaForAllocation(),
      &other->new_enemy_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLTransformInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[30]);
}

// ===================================================================

class BTLTriggerInfo::_Internal {
 public:
};

BTLTriggerInfo::BTLTriggerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLTriggerInfo)
}
BTLTriggerInfo::BTLTriggerInfo(const BTLTriggerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trigger_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trigger_id().empty()) {
    trigger_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trigger_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLTriggerInfo)
}

void BTLTriggerInfo::SharedCtor() {
trigger_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BTLTriggerInfo::~BTLTriggerInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLTriggerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLTriggerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trigger_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BTLTriggerInfo::ArenaDtor(void* object) {
  BTLTriggerInfo* _this = reinterpret_cast< BTLTriggerInfo* >(object);
  (void)_this;
}
void BTLTriggerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLTriggerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLTriggerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLTriggerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trigger_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLTriggerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes trigger_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trigger_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLTriggerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLTriggerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trigger_id = 1;
  if (!this->trigger_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_trigger_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLTriggerInfo)
  return target;
}

size_t BTLTriggerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLTriggerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes trigger_id = 1;
  if (!this->trigger_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trigger_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLTriggerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLTriggerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLTriggerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLTriggerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLTriggerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLTriggerInfo)
    MergeFrom(*source);
  }
}

void BTLTriggerInfo::MergeFrom(const BTLTriggerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLTriggerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.trigger_id().empty()) {
    _internal_set_trigger_id(from._internal_trigger_id());
  }
}

void BTLTriggerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLTriggerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLTriggerInfo::CopyFrom(const BTLTriggerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLTriggerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLTriggerInfo::IsInitialized() const {
  return true;
}

void BTLTriggerInfo::InternalSwap(BTLTriggerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &trigger_id_, GetArenaForAllocation(),
      &other->trigger_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLTriggerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[31]);
}

// ===================================================================

class BTLResistanceInfo::_Internal {
 public:
};

BTLResistanceInfo::BTLResistanceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLResistanceInfo)
}
BTLResistanceInfo::BTLResistanceInfo(const BTLResistanceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_add_ = from.is_add_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLResistanceInfo)
}

void BTLResistanceInfo::SharedCtor() {
is_add_ = 0;
}

BTLResistanceInfo::~BTLResistanceInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLResistanceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLResistanceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BTLResistanceInfo::ArenaDtor(void* object) {
  BTLResistanceInfo* _this = reinterpret_cast< BTLResistanceInfo* >(object);
  (void)_this;
}
void BTLResistanceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLResistanceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLResistanceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLResistanceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_add_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLResistanceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 is_add = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLResistanceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLResistanceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 is_add = 1;
  if (this->is_add() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_is_add(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLResistanceInfo)
  return target;
}

size_t BTLResistanceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLResistanceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 is_add = 1;
  if (this->is_add() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_add());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLResistanceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLResistanceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLResistanceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLResistanceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLResistanceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLResistanceInfo)
    MergeFrom(*source);
  }
}

void BTLResistanceInfo::MergeFrom(const BTLResistanceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLResistanceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_add() != 0) {
    _internal_set_is_add(from._internal_is_add());
  }
}

void BTLResistanceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLResistanceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLResistanceInfo::CopyFrom(const BTLResistanceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLResistanceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLResistanceInfo::IsInitialized() const {
  return true;
}

void BTLResistanceInfo::InternalSwap(BTLResistanceInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(is_add_, other->is_add_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLResistanceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[32]);
}

// ===================================================================

class BTLShowTextInfo::_Internal {
 public:
};

BTLShowTextInfo::BTLShowTextInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLShowTextInfo)
}
BTLShowTextInfo::BTLShowTextInfo(const BTLShowTextInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_id().empty()) {
    config_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_config_id(), 
      GetArenaForAllocation());
  }
  show_type_ = from.show_type_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLShowTextInfo)
}

void BTLShowTextInfo::SharedCtor() {
config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
show_type_ = 0;
}

BTLShowTextInfo::~BTLShowTextInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLShowTextInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLShowTextInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BTLShowTextInfo::ArenaDtor(void* object) {
  BTLShowTextInfo* _this = reinterpret_cast< BTLShowTextInfo* >(object);
  (void)_this;
}
void BTLShowTextInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLShowTextInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLShowTextInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLShowTextInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_id_.ClearToEmpty();
  show_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLShowTextInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 show_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          show_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes config_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_config_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLShowTextInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLShowTextInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 show_type = 1;
  if (this->show_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_show_type(), target);
  }

  // bytes config_id = 2;
  if (!this->config_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_config_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLShowTextInfo)
  return target;
}

size_t BTLShowTextInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLShowTextInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes config_id = 2;
  if (!this->config_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_config_id());
  }

  // int32 show_type = 1;
  if (this->show_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_show_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLShowTextInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLShowTextInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLShowTextInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLShowTextInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLShowTextInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLShowTextInfo)
    MergeFrom(*source);
  }
}

void BTLShowTextInfo::MergeFrom(const BTLShowTextInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLShowTextInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.config_id().empty()) {
    _internal_set_config_id(from._internal_config_id());
  }
  if (from.show_type() != 0) {
    _internal_set_show_type(from._internal_show_type());
  }
}

void BTLShowTextInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLShowTextInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLShowTextInfo::CopyFrom(const BTLShowTextInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLShowTextInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLShowTextInfo::IsInitialized() const {
  return true;
}

void BTLShowTextInfo::InternalSwap(BTLShowTextInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &config_id_, GetArenaForAllocation(),
      &other->config_id_, other->GetArenaForAllocation()
  );
  swap(show_type_, other->show_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLShowTextInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[33]);
}

// ===================================================================

class BTLReviveInfo::_Internal {
 public:
  static const ::KWMsg::Ident& entity_id(const BTLReviveInfo* msg);
};

const ::KWMsg::Ident&
BTLReviveInfo::_Internal::entity_id(const BTLReviveInfo* msg) {
  return *msg->entity_id_;
}
void BTLReviveInfo::clear_entity_id() {
  if (GetArenaForAllocation() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
}
BTLReviveInfo::BTLReviveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLReviveInfo)
}
BTLReviveInfo::BTLReviveInfo(const BTLReviveInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::KWMsg::Ident(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  hp_change_ = from.hp_change_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLReviveInfo)
}

void BTLReviveInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entity_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hp_change_) -
    reinterpret_cast<char*>(&entity_id_)) + sizeof(hp_change_));
}

BTLReviveInfo::~BTLReviveInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLReviveInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLReviveInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete entity_id_;
}

void BTLReviveInfo::ArenaDtor(void* object) {
  BTLReviveInfo* _this = reinterpret_cast< BTLReviveInfo* >(object);
  (void)_this;
}
void BTLReviveInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLReviveInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLReviveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLReviveInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
  hp_change_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLReviveInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 hp_change = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hp_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLReviveInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLReviveInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hp_change = 1;
  if (this->hp_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hp_change(), target);
  }

  // .KWMsg.Ident entity_id = 2;
  if (this->has_entity_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entity_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLReviveInfo)
  return target;
}

size_t BTLReviveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLReviveInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident entity_id = 2;
  if (this->has_entity_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }

  // int32 hp_change = 1;
  if (this->hp_change() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp_change());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLReviveInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLReviveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLReviveInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLReviveInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLReviveInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLReviveInfo)
    MergeFrom(*source);
  }
}

void BTLReviveInfo::MergeFrom(const BTLReviveInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLReviveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_entity_id()) {
    _internal_mutable_entity_id()->::KWMsg::Ident::MergeFrom(from._internal_entity_id());
  }
  if (from.hp_change() != 0) {
    _internal_set_hp_change(from._internal_hp_change());
  }
}

void BTLReviveInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLReviveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLReviveInfo::CopyFrom(const BTLReviveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLReviveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLReviveInfo::IsInitialized() const {
  return true;
}

void BTLReviveInfo::InternalSwap(BTLReviveInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLReviveInfo, hp_change_)
      + sizeof(BTLReviveInfo::hp_change_)
      - PROTOBUF_FIELD_OFFSET(BTLReviveInfo, entity_id_)>(
          reinterpret_cast<char*>(&entity_id_),
          reinterpret_cast<char*>(&other->entity_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLReviveInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[34]);
}

// ===================================================================

class BTLBuffInfo::_Internal {
 public:
  static const ::KWMsg::BTLAddBuffInfo& add_buff(const BTLBuffInfo* msg);
  static const ::KWMsg::BTLRemoveBuffInfo& remove_buff(const BTLBuffInfo* msg);
  static const ::KWMsg::BTLShieldChangeInfo& shield_change(const BTLBuffInfo* msg);
  static const ::KWMsg::BTLSealChangeInfo& seal_change(const BTLBuffInfo* msg);
  static const ::KWMsg::BTLStateChangeInfo& state_change(const BTLBuffInfo* msg);
};

const ::KWMsg::BTLAddBuffInfo&
BTLBuffInfo::_Internal::add_buff(const BTLBuffInfo* msg) {
  return *msg->data_.add_buff_;
}
const ::KWMsg::BTLRemoveBuffInfo&
BTLBuffInfo::_Internal::remove_buff(const BTLBuffInfo* msg) {
  return *msg->data_.remove_buff_;
}
const ::KWMsg::BTLShieldChangeInfo&
BTLBuffInfo::_Internal::shield_change(const BTLBuffInfo* msg) {
  return *msg->data_.shield_change_;
}
const ::KWMsg::BTLSealChangeInfo&
BTLBuffInfo::_Internal::seal_change(const BTLBuffInfo* msg) {
  return *msg->data_.seal_change_;
}
const ::KWMsg::BTLStateChangeInfo&
BTLBuffInfo::_Internal::state_change(const BTLBuffInfo* msg) {
  return *msg->data_.state_change_;
}
void BTLBuffInfo::set_allocated_add_buff(::KWMsg::BTLAddBuffInfo* add_buff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (add_buff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLAddBuffInfo>::GetOwningArena(add_buff);
    if (message_arena != submessage_arena) {
      add_buff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_buff, submessage_arena);
    }
    set_has_add_buff();
    data_.add_buff_ = add_buff;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLBuffInfo.add_buff)
}
void BTLBuffInfo::set_allocated_remove_buff(::KWMsg::BTLRemoveBuffInfo* remove_buff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (remove_buff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLRemoveBuffInfo>::GetOwningArena(remove_buff);
    if (message_arena != submessage_arena) {
      remove_buff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_buff, submessage_arena);
    }
    set_has_remove_buff();
    data_.remove_buff_ = remove_buff;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLBuffInfo.remove_buff)
}
void BTLBuffInfo::set_allocated_shield_change(::KWMsg::BTLShieldChangeInfo* shield_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (shield_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLShieldChangeInfo>::GetOwningArena(shield_change);
    if (message_arena != submessage_arena) {
      shield_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shield_change, submessage_arena);
    }
    set_has_shield_change();
    data_.shield_change_ = shield_change;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLBuffInfo.shield_change)
}
void BTLBuffInfo::set_allocated_seal_change(::KWMsg::BTLSealChangeInfo* seal_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (seal_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLSealChangeInfo>::GetOwningArena(seal_change);
    if (message_arena != submessage_arena) {
      seal_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seal_change, submessage_arena);
    }
    set_has_seal_change();
    data_.seal_change_ = seal_change;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLBuffInfo.seal_change)
}
void BTLBuffInfo::set_allocated_state_change(::KWMsg::BTLStateChangeInfo* state_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (state_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLStateChangeInfo>::GetOwningArena(state_change);
    if (message_arena != submessage_arena) {
      state_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state_change, submessage_arena);
    }
    set_has_state_change();
    data_.state_change_ = state_change;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLBuffInfo.state_change)
}
BTLBuffInfo::BTLBuffInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLBuffInfo)
}
BTLBuffInfo::BTLBuffInfo(const BTLBuffInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kAddBuff: {
      _internal_mutable_add_buff()->::KWMsg::BTLAddBuffInfo::MergeFrom(from._internal_add_buff());
      break;
    }
    case kRemoveBuff: {
      _internal_mutable_remove_buff()->::KWMsg::BTLRemoveBuffInfo::MergeFrom(from._internal_remove_buff());
      break;
    }
    case kShieldChange: {
      _internal_mutable_shield_change()->::KWMsg::BTLShieldChangeInfo::MergeFrom(from._internal_shield_change());
      break;
    }
    case kSealChange: {
      _internal_mutable_seal_change()->::KWMsg::BTLSealChangeInfo::MergeFrom(from._internal_seal_change());
      break;
    }
    case kStateChange: {
      _internal_mutable_state_change()->::KWMsg::BTLStateChangeInfo::MergeFrom(from._internal_state_change());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLBuffInfo)
}

void BTLBuffInfo::SharedCtor() {
clear_has_data();
}

BTLBuffInfo::~BTLBuffInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLBuffInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLBuffInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void BTLBuffInfo::ArenaDtor(void* object) {
  BTLBuffInfo* _this = reinterpret_cast< BTLBuffInfo* >(object);
  (void)_this;
}
void BTLBuffInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLBuffInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLBuffInfo::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:KWMsg.BTLBuffInfo)
  switch (data_case()) {
    case kAddBuff: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.add_buff_;
      }
      break;
    }
    case kRemoveBuff: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.remove_buff_;
      }
      break;
    }
    case kShieldChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.shield_change_;
      }
      break;
    }
    case kSealChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.seal_change_;
      }
      break;
    }
    case kStateChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.state_change_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void BTLBuffInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLBuffInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLBuffInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.BTLAddBuffInfo add_buff = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_buff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLRemoveBuffInfo remove_buff = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_buff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLShieldChangeInfo shield_change = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shield_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLSealChangeInfo seal_change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_seal_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLStateChangeInfo state_change = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_state_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLBuffInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLBuffInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.BTLAddBuffInfo add_buff = 1;
  if (_internal_has_add_buff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::add_buff(this), target, stream);
  }

  // .KWMsg.BTLRemoveBuffInfo remove_buff = 2;
  if (_internal_has_remove_buff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::remove_buff(this), target, stream);
  }

  // .KWMsg.BTLShieldChangeInfo shield_change = 3;
  if (_internal_has_shield_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shield_change(this), target, stream);
  }

  // .KWMsg.BTLSealChangeInfo seal_change = 4;
  if (_internal_has_seal_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::seal_change(this), target, stream);
  }

  // .KWMsg.BTLStateChangeInfo state_change = 5;
  if (_internal_has_state_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::state_change(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLBuffInfo)
  return target;
}

size_t BTLBuffInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLBuffInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .KWMsg.BTLAddBuffInfo add_buff = 1;
    case kAddBuff: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.add_buff_);
      break;
    }
    // .KWMsg.BTLRemoveBuffInfo remove_buff = 2;
    case kRemoveBuff: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.remove_buff_);
      break;
    }
    // .KWMsg.BTLShieldChangeInfo shield_change = 3;
    case kShieldChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.shield_change_);
      break;
    }
    // .KWMsg.BTLSealChangeInfo seal_change = 4;
    case kSealChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.seal_change_);
      break;
    }
    // .KWMsg.BTLStateChangeInfo state_change = 5;
    case kStateChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.state_change_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLBuffInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLBuffInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLBuffInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLBuffInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLBuffInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLBuffInfo)
    MergeFrom(*source);
  }
}

void BTLBuffInfo::MergeFrom(const BTLBuffInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLBuffInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kAddBuff: {
      _internal_mutable_add_buff()->::KWMsg::BTLAddBuffInfo::MergeFrom(from._internal_add_buff());
      break;
    }
    case kRemoveBuff: {
      _internal_mutable_remove_buff()->::KWMsg::BTLRemoveBuffInfo::MergeFrom(from._internal_remove_buff());
      break;
    }
    case kShieldChange: {
      _internal_mutable_shield_change()->::KWMsg::BTLShieldChangeInfo::MergeFrom(from._internal_shield_change());
      break;
    }
    case kSealChange: {
      _internal_mutable_seal_change()->::KWMsg::BTLSealChangeInfo::MergeFrom(from._internal_seal_change());
      break;
    }
    case kStateChange: {
      _internal_mutable_state_change()->::KWMsg::BTLStateChangeInfo::MergeFrom(from._internal_state_change());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void BTLBuffInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLBuffInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLBuffInfo::CopyFrom(const BTLBuffInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLBuffInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLBuffInfo::IsInitialized() const {
  return true;
}

void BTLBuffInfo::InternalSwap(BTLBuffInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLBuffInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[35]);
}

// ===================================================================

class BTLAddBuffInfo::_Internal {
 public:
  static const ::KWMsg::Ident& buff_guid(const BTLAddBuffInfo* msg);
};

const ::KWMsg::Ident&
BTLAddBuffInfo::_Internal::buff_guid(const BTLAddBuffInfo* msg) {
  return *msg->buff_guid_;
}
void BTLAddBuffInfo::clear_buff_guid() {
  if (GetArenaForAllocation() == nullptr && buff_guid_ != nullptr) {
    delete buff_guid_;
  }
  buff_guid_ = nullptr;
}
BTLAddBuffInfo::BTLAddBuffInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLAddBuffInfo)
}
BTLAddBuffInfo::BTLAddBuffInfo(const BTLAddBuffInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buff_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buff_id().empty()) {
    buff_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buff_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_buff_guid()) {
    buff_guid_ = new ::KWMsg::Ident(*from.buff_guid_);
  } else {
    buff_guid_ = nullptr;
  }
  left_round_ = from.left_round_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLAddBuffInfo)
}

void BTLAddBuffInfo::SharedCtor() {
buff_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&buff_guid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&left_round_) -
    reinterpret_cast<char*>(&buff_guid_)) + sizeof(left_round_));
}

BTLAddBuffInfo::~BTLAddBuffInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLAddBuffInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLAddBuffInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buff_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete buff_guid_;
}

void BTLAddBuffInfo::ArenaDtor(void* object) {
  BTLAddBuffInfo* _this = reinterpret_cast< BTLAddBuffInfo* >(object);
  (void)_this;
}
void BTLAddBuffInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLAddBuffInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLAddBuffInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLAddBuffInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buff_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && buff_guid_ != nullptr) {
    delete buff_guid_;
  }
  buff_guid_ = nullptr;
  left_round_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLAddBuffInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes buff_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_buff_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident buff_guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_buff_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 left_round = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          left_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLAddBuffInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLAddBuffInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes buff_id = 1;
  if (!this->buff_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_buff_id(), target);
  }

  // .KWMsg.Ident buff_guid = 2;
  if (this->has_buff_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::buff_guid(this), target, stream);
  }

  // int32 left_round = 3;
  if (this->left_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_left_round(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLAddBuffInfo)
  return target;
}

size_t BTLAddBuffInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLAddBuffInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buff_id = 1;
  if (!this->buff_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buff_id());
  }

  // .KWMsg.Ident buff_guid = 2;
  if (this->has_buff_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buff_guid_);
  }

  // int32 left_round = 3;
  if (this->left_round() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_left_round());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLAddBuffInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLAddBuffInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLAddBuffInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLAddBuffInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLAddBuffInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLAddBuffInfo)
    MergeFrom(*source);
  }
}

void BTLAddBuffInfo::MergeFrom(const BTLAddBuffInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLAddBuffInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.buff_id().empty()) {
    _internal_set_buff_id(from._internal_buff_id());
  }
  if (from.has_buff_guid()) {
    _internal_mutable_buff_guid()->::KWMsg::Ident::MergeFrom(from._internal_buff_guid());
  }
  if (from.left_round() != 0) {
    _internal_set_left_round(from._internal_left_round());
  }
}

void BTLAddBuffInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLAddBuffInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLAddBuffInfo::CopyFrom(const BTLAddBuffInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLAddBuffInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLAddBuffInfo::IsInitialized() const {
  return true;
}

void BTLAddBuffInfo::InternalSwap(BTLAddBuffInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buff_id_, GetArenaForAllocation(),
      &other->buff_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLAddBuffInfo, left_round_)
      + sizeof(BTLAddBuffInfo::left_round_)
      - PROTOBUF_FIELD_OFFSET(BTLAddBuffInfo, buff_guid_)>(
          reinterpret_cast<char*>(&buff_guid_),
          reinterpret_cast<char*>(&other->buff_guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLAddBuffInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[36]);
}

// ===================================================================

class BTLRemoveBuffInfo::_Internal {
 public:
};

BTLRemoveBuffInfo::BTLRemoveBuffInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buffs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLRemoveBuffInfo)
}
BTLRemoveBuffInfo::BTLRemoveBuffInfo(const BTLRemoveBuffInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buffs_(from.buffs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLRemoveBuffInfo)
}

void BTLRemoveBuffInfo::SharedCtor() {
}

BTLRemoveBuffInfo::~BTLRemoveBuffInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLRemoveBuffInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLRemoveBuffInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BTLRemoveBuffInfo::ArenaDtor(void* object) {
  BTLRemoveBuffInfo* _this = reinterpret_cast< BTLRemoveBuffInfo* >(object);
  (void)_this;
}
void BTLRemoveBuffInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLRemoveBuffInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLRemoveBuffInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLRemoveBuffInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLRemoveBuffInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.BTLRemoveBuffItem buffs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLRemoveBuffInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLRemoveBuffInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.BTLRemoveBuffItem buffs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buffs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_buffs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLRemoveBuffInfo)
  return target;
}

size_t BTLRemoveBuffInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLRemoveBuffInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BTLRemoveBuffItem buffs = 1;
  total_size += 1UL * this->_internal_buffs_size();
  for (const auto& msg : this->buffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLRemoveBuffInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLRemoveBuffInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLRemoveBuffInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLRemoveBuffInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLRemoveBuffInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLRemoveBuffInfo)
    MergeFrom(*source);
  }
}

void BTLRemoveBuffInfo::MergeFrom(const BTLRemoveBuffInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLRemoveBuffInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buffs_.MergeFrom(from.buffs_);
}

void BTLRemoveBuffInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLRemoveBuffInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLRemoveBuffInfo::CopyFrom(const BTLRemoveBuffInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLRemoveBuffInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLRemoveBuffInfo::IsInitialized() const {
  return true;
}

void BTLRemoveBuffInfo::InternalSwap(BTLRemoveBuffInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  buffs_.InternalSwap(&other->buffs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLRemoveBuffInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[37]);
}

// ===================================================================

class BTLRemoveBuffItem::_Internal {
 public:
  static const ::KWMsg::Ident& buff_guid(const BTLRemoveBuffItem* msg);
};

const ::KWMsg::Ident&
BTLRemoveBuffItem::_Internal::buff_guid(const BTLRemoveBuffItem* msg) {
  return *msg->buff_guid_;
}
void BTLRemoveBuffItem::clear_buff_guid() {
  if (GetArenaForAllocation() == nullptr && buff_guid_ != nullptr) {
    delete buff_guid_;
  }
  buff_guid_ = nullptr;
}
BTLRemoveBuffItem::BTLRemoveBuffItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLRemoveBuffItem)
}
BTLRemoveBuffItem::BTLRemoveBuffItem(const BTLRemoveBuffItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buff_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buff_id().empty()) {
    buff_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buff_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_buff_guid()) {
    buff_guid_ = new ::KWMsg::Ident(*from.buff_guid_);
  } else {
    buff_guid_ = nullptr;
  }
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLRemoveBuffItem)
}

void BTLRemoveBuffItem::SharedCtor() {
buff_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&buff_guid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&buff_guid_)) + sizeof(reason_));
}

BTLRemoveBuffItem::~BTLRemoveBuffItem() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLRemoveBuffItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLRemoveBuffItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buff_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete buff_guid_;
}

void BTLRemoveBuffItem::ArenaDtor(void* object) {
  BTLRemoveBuffItem* _this = reinterpret_cast< BTLRemoveBuffItem* >(object);
  (void)_this;
}
void BTLRemoveBuffItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLRemoveBuffItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLRemoveBuffItem::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLRemoveBuffItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buff_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && buff_guid_ != nullptr) {
    delete buff_guid_;
  }
  buff_guid_ = nullptr;
  reason_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLRemoveBuffItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes buff_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_buff_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident buff_guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_buff_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLBuffRemoveReason reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::KWMsg::BTLBuffRemoveReason>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLRemoveBuffItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLRemoveBuffItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes buff_id = 1;
  if (!this->buff_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_buff_id(), target);
  }

  // .KWMsg.Ident buff_guid = 2;
  if (this->has_buff_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::buff_guid(this), target, stream);
  }

  // .KWMsg.BTLBuffRemoveReason reason = 3;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLRemoveBuffItem)
  return target;
}

size_t BTLRemoveBuffItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLRemoveBuffItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buff_id = 1;
  if (!this->buff_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buff_id());
  }

  // .KWMsg.Ident buff_guid = 2;
  if (this->has_buff_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buff_guid_);
  }

  // .KWMsg.BTLBuffRemoveReason reason = 3;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLRemoveBuffItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLRemoveBuffItem)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLRemoveBuffItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLRemoveBuffItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLRemoveBuffItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLRemoveBuffItem)
    MergeFrom(*source);
  }
}

void BTLRemoveBuffItem::MergeFrom(const BTLRemoveBuffItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLRemoveBuffItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.buff_id().empty()) {
    _internal_set_buff_id(from._internal_buff_id());
  }
  if (from.has_buff_guid()) {
    _internal_mutable_buff_guid()->::KWMsg::Ident::MergeFrom(from._internal_buff_guid());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void BTLRemoveBuffItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLRemoveBuffItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLRemoveBuffItem::CopyFrom(const BTLRemoveBuffItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLRemoveBuffItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLRemoveBuffItem::IsInitialized() const {
  return true;
}

void BTLRemoveBuffItem::InternalSwap(BTLRemoveBuffItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buff_id_, GetArenaForAllocation(),
      &other->buff_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLRemoveBuffItem, reason_)
      + sizeof(BTLRemoveBuffItem::reason_)
      - PROTOBUF_FIELD_OFFSET(BTLRemoveBuffItem, buff_guid_)>(
          reinterpret_cast<char*>(&buff_guid_),
          reinterpret_cast<char*>(&other->buff_guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLRemoveBuffItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[38]);
}

// ===================================================================

class BTLShieldChangeInfo::_Internal {
 public:
  static const ::KWMsg::Ident& buff_guid(const BTLShieldChangeInfo* msg);
};

const ::KWMsg::Ident&
BTLShieldChangeInfo::_Internal::buff_guid(const BTLShieldChangeInfo* msg) {
  return *msg->buff_guid_;
}
void BTLShieldChangeInfo::clear_buff_guid() {
  if (GetArenaForAllocation() == nullptr && buff_guid_ != nullptr) {
    delete buff_guid_;
  }
  buff_guid_ = nullptr;
}
BTLShieldChangeInfo::BTLShieldChangeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLShieldChangeInfo)
}
BTLShieldChangeInfo::BTLShieldChangeInfo(const BTLShieldChangeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buff_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buff_id().empty()) {
    buff_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buff_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_buff_guid()) {
    buff_guid_ = new ::KWMsg::Ident(*from.buff_guid_);
  } else {
    buff_guid_ = nullptr;
  }
  ::memcpy(&shield_change_, &from.shield_change_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_mode_) -
    reinterpret_cast<char*>(&shield_change_)) + sizeof(change_mode_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLShieldChangeInfo)
}

void BTLShieldChangeInfo::SharedCtor() {
buff_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&buff_guid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&change_mode_) -
    reinterpret_cast<char*>(&buff_guid_)) + sizeof(change_mode_));
}

BTLShieldChangeInfo::~BTLShieldChangeInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLShieldChangeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLShieldChangeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buff_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete buff_guid_;
}

void BTLShieldChangeInfo::ArenaDtor(void* object) {
  BTLShieldChangeInfo* _this = reinterpret_cast< BTLShieldChangeInfo* >(object);
  (void)_this;
}
void BTLShieldChangeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLShieldChangeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLShieldChangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLShieldChangeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buff_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && buff_guid_ != nullptr) {
    delete buff_guid_;
  }
  buff_guid_ = nullptr;
  ::memset(&shield_change_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_mode_) -
      reinterpret_cast<char*>(&shield_change_)) + sizeof(change_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLShieldChangeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes buff_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_buff_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident buff_guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_buff_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shield_change = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          shield_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 change_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          change_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLShieldChangeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLShieldChangeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes buff_id = 1;
  if (!this->buff_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_buff_id(), target);
  }

  // .KWMsg.Ident buff_guid = 2;
  if (this->has_buff_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::buff_guid(this), target, stream);
  }

  // int32 shield_change = 3;
  if (this->shield_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_shield_change(), target);
  }

  // int32 change_mode = 4;
  if (this->change_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_change_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLShieldChangeInfo)
  return target;
}

size_t BTLShieldChangeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLShieldChangeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buff_id = 1;
  if (!this->buff_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buff_id());
  }

  // .KWMsg.Ident buff_guid = 2;
  if (this->has_buff_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buff_guid_);
  }

  // int32 shield_change = 3;
  if (this->shield_change() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shield_change());
  }

  // int32 change_mode = 4;
  if (this->change_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_change_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLShieldChangeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLShieldChangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLShieldChangeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLShieldChangeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLShieldChangeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLShieldChangeInfo)
    MergeFrom(*source);
  }
}

void BTLShieldChangeInfo::MergeFrom(const BTLShieldChangeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLShieldChangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.buff_id().empty()) {
    _internal_set_buff_id(from._internal_buff_id());
  }
  if (from.has_buff_guid()) {
    _internal_mutable_buff_guid()->::KWMsg::Ident::MergeFrom(from._internal_buff_guid());
  }
  if (from.shield_change() != 0) {
    _internal_set_shield_change(from._internal_shield_change());
  }
  if (from.change_mode() != 0) {
    _internal_set_change_mode(from._internal_change_mode());
  }
}

void BTLShieldChangeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLShieldChangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLShieldChangeInfo::CopyFrom(const BTLShieldChangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLShieldChangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLShieldChangeInfo::IsInitialized() const {
  return true;
}

void BTLShieldChangeInfo::InternalSwap(BTLShieldChangeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buff_id_, GetArenaForAllocation(),
      &other->buff_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLShieldChangeInfo, change_mode_)
      + sizeof(BTLShieldChangeInfo::change_mode_)
      - PROTOBUF_FIELD_OFFSET(BTLShieldChangeInfo, buff_guid_)>(
          reinterpret_cast<char*>(&buff_guid_),
          reinterpret_cast<char*>(&other->buff_guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLShieldChangeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[39]);
}

// ===================================================================

class BTLSealChangeInfo::_Internal {
 public:
};

BTLSealChangeInfo::BTLSealChangeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  skills_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLSealChangeInfo)
}
BTLSealChangeInfo::BTLSealChangeInfo(const BTLSealChangeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      skills_(from.skills_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seal_mode_ = from.seal_mode_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLSealChangeInfo)
}

void BTLSealChangeInfo::SharedCtor() {
seal_mode_ = 0;
}

BTLSealChangeInfo::~BTLSealChangeInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLSealChangeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLSealChangeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BTLSealChangeInfo::ArenaDtor(void* object) {
  BTLSealChangeInfo* _this = reinterpret_cast< BTLSealChangeInfo* >(object);
  (void)_this;
}
void BTLSealChangeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLSealChangeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLSealChangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLSealChangeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skills_.Clear();
  seal_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLSealChangeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes skills = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_skills();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 seal_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seal_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLSealChangeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLSealChangeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes skills = 1;
  for (int i = 0, n = this->_internal_skills_size(); i < n; i++) {
    const auto& s = this->_internal_skills(i);
    target = stream->WriteBytes(1, s, target);
  }

  // int32 seal_mode = 2;
  if (this->seal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_seal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLSealChangeInfo)
  return target;
}

size_t BTLSealChangeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLSealChangeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes skills = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(skills_.size());
  for (int i = 0, n = skills_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      skills_.Get(i));
  }

  // int32 seal_mode = 2;
  if (this->seal_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLSealChangeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLSealChangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLSealChangeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLSealChangeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLSealChangeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLSealChangeInfo)
    MergeFrom(*source);
  }
}

void BTLSealChangeInfo::MergeFrom(const BTLSealChangeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLSealChangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skills_.MergeFrom(from.skills_);
  if (from.seal_mode() != 0) {
    _internal_set_seal_mode(from._internal_seal_mode());
  }
}

void BTLSealChangeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLSealChangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLSealChangeInfo::CopyFrom(const BTLSealChangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLSealChangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLSealChangeInfo::IsInitialized() const {
  return true;
}

void BTLSealChangeInfo::InternalSwap(BTLSealChangeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  skills_.InternalSwap(&other->skills_);
  swap(seal_mode_, other->seal_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLSealChangeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[40]);
}

// ===================================================================

class BTLStateChangeInfo::_Internal {
 public:
  static const ::KWMsg::Ident& buff_guid(const BTLStateChangeInfo* msg);
};

const ::KWMsg::Ident&
BTLStateChangeInfo::_Internal::buff_guid(const BTLStateChangeInfo* msg) {
  return *msg->buff_guid_;
}
void BTLStateChangeInfo::clear_buff_guid() {
  if (GetArenaForAllocation() == nullptr && buff_guid_ != nullptr) {
    delete buff_guid_;
  }
  buff_guid_ = nullptr;
}
BTLStateChangeInfo::BTLStateChangeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLStateChangeInfo)
}
BTLStateChangeInfo::BTLStateChangeInfo(const BTLStateChangeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buff_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buff_id().empty()) {
    buff_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buff_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_buff_guid()) {
    buff_guid_ = new ::KWMsg::Ident(*from.buff_guid_);
  } else {
    buff_guid_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_mode_) -
    reinterpret_cast<char*>(&state_)) + sizeof(change_mode_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLStateChangeInfo)
}

void BTLStateChangeInfo::SharedCtor() {
buff_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&buff_guid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&change_mode_) -
    reinterpret_cast<char*>(&buff_guid_)) + sizeof(change_mode_));
}

BTLStateChangeInfo::~BTLStateChangeInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLStateChangeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLStateChangeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buff_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete buff_guid_;
}

void BTLStateChangeInfo::ArenaDtor(void* object) {
  BTLStateChangeInfo* _this = reinterpret_cast< BTLStateChangeInfo* >(object);
  (void)_this;
}
void BTLStateChangeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLStateChangeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLStateChangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLStateChangeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buff_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && buff_guid_ != nullptr) {
    delete buff_guid_;
  }
  buff_guid_ = nullptr;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_mode_) -
      reinterpret_cast<char*>(&state_)) + sizeof(change_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLStateChangeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes buff_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_buff_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident buff_guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_buff_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 change_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          change_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLStateChangeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLStateChangeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes buff_id = 1;
  if (!this->buff_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_buff_id(), target);
  }

  // .KWMsg.Ident buff_guid = 2;
  if (this->has_buff_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::buff_guid(this), target, stream);
  }

  // int32 state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  // int32 change_mode = 4;
  if (this->change_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_change_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLStateChangeInfo)
  return target;
}

size_t BTLStateChangeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLStateChangeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buff_id = 1;
  if (!this->buff_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buff_id());
  }

  // .KWMsg.Ident buff_guid = 2;
  if (this->has_buff_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buff_guid_);
  }

  // int32 state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 change_mode = 4;
  if (this->change_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_change_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLStateChangeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLStateChangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLStateChangeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLStateChangeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLStateChangeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLStateChangeInfo)
    MergeFrom(*source);
  }
}

void BTLStateChangeInfo::MergeFrom(const BTLStateChangeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLStateChangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.buff_id().empty()) {
    _internal_set_buff_id(from._internal_buff_id());
  }
  if (from.has_buff_guid()) {
    _internal_mutable_buff_guid()->::KWMsg::Ident::MergeFrom(from._internal_buff_guid());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.change_mode() != 0) {
    _internal_set_change_mode(from._internal_change_mode());
  }
}

void BTLStateChangeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLStateChangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLStateChangeInfo::CopyFrom(const BTLStateChangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLStateChangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLStateChangeInfo::IsInitialized() const {
  return true;
}

void BTLStateChangeInfo::InternalSwap(BTLStateChangeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buff_id_, GetArenaForAllocation(),
      &other->buff_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLStateChangeInfo, change_mode_)
      + sizeof(BTLStateChangeInfo::change_mode_)
      - PROTOBUF_FIELD_OFFSET(BTLStateChangeInfo, buff_guid_)>(
          reinterpret_cast<char*>(&buff_guid_),
          reinterpret_cast<char*>(&other->buff_guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLStateChangeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[41]);
}

// ===================================================================

class BTLChangedEntity::_Internal {
 public:
};

BTLChangedEntity::BTLChangedEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLChangedEntity)
}
BTLChangedEntity::BTLChangedEntity(const BTLChangedEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entities_(from.entities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLChangedEntity)
}

void BTLChangedEntity::SharedCtor() {
}

BTLChangedEntity::~BTLChangedEntity() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLChangedEntity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLChangedEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BTLChangedEntity::ArenaDtor(void* object) {
  BTLChangedEntity* _this = reinterpret_cast< BTLChangedEntity* >(object);
  (void)_this;
}
void BTLChangedEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLChangedEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLChangedEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLChangedEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLChangedEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.BTLEntity entities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLChangedEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLChangedEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.BTLEntity entities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLChangedEntity)
  return target;
}

size_t BTLChangedEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLChangedEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BTLEntity entities = 1;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLChangedEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLChangedEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLChangedEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLChangedEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLChangedEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLChangedEntity)
    MergeFrom(*source);
  }
}

void BTLChangedEntity::MergeFrom(const BTLChangedEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLChangedEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
}

void BTLChangedEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLChangedEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLChangedEntity::CopyFrom(const BTLChangedEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLChangedEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLChangedEntity::IsInitialized() const {
  return true;
}

void BTLChangedEntity::InternalSwap(BTLChangedEntity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entities_.InternalSwap(&other->entities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLChangedEntity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[42]);
}

// ===================================================================

class ReqBTLPullMsg::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBTLPullMsg* msg);
};

const ::KWMsg::Ident&
ReqBTLPullMsg::_Internal::player_id(const ReqBTLPullMsg* msg) {
  return *msg->player_id_;
}
void ReqBTLPullMsg::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqBTLPullMsg::ReqBTLPullMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBTLPullMsg)
}
ReqBTLPullMsg::ReqBTLPullMsg(const ReqBTLPullMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  unique_id_ = from.unique_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBTLPullMsg)
}

void ReqBTLPullMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unique_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(unique_id_));
}

ReqBTLPullMsg::~ReqBTLPullMsg() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBTLPullMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBTLPullMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqBTLPullMsg::ArenaDtor(void* object) {
  ReqBTLPullMsg* _this = reinterpret_cast< ReqBTLPullMsg* >(object);
  (void)_this;
}
void ReqBTLPullMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBTLPullMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBTLPullMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBTLPullMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  unique_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBTLPullMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 unique_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBTLPullMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBTLPullMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 unique_id = 2;
  if (this->unique_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_unique_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBTLPullMsg)
  return target;
}

size_t ReqBTLPullMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBTLPullMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 unique_id = 2;
  if (this->unique_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unique_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBTLPullMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBTLPullMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBTLPullMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBTLPullMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBTLPullMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBTLPullMsg)
    MergeFrom(*source);
  }
}

void ReqBTLPullMsg::MergeFrom(const ReqBTLPullMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBTLPullMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.unique_id() != 0) {
    _internal_set_unique_id(from._internal_unique_id());
  }
}

void ReqBTLPullMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBTLPullMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBTLPullMsg::CopyFrom(const ReqBTLPullMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBTLPullMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBTLPullMsg::IsInitialized() const {
  return true;
}

void ReqBTLPullMsg::InternalSwap(ReqBTLPullMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqBTLPullMsg, unique_id_)
      + sizeof(ReqBTLPullMsg::unique_id_)
      - PROTOBUF_FIELD_OFFSET(ReqBTLPullMsg, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBTLPullMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[43]);
}

// ===================================================================

class AckBTLPullMsg_BTLAckMsgWrapper::_Internal {
 public:
  static const ::KWMsg::AckBTLInfo& info(const AckBTLPullMsg_BTLAckMsgWrapper* msg);
  static const ::KWMsg::AckBTLPk& pk(const AckBTLPullMsg_BTLAckMsgWrapper* msg);
  static const ::KWMsg::AckBTLAction& action(const AckBTLPullMsg_BTLAckMsgWrapper* msg);
};

const ::KWMsg::AckBTLInfo&
AckBTLPullMsg_BTLAckMsgWrapper::_Internal::info(const AckBTLPullMsg_BTLAckMsgWrapper* msg) {
  return *msg->msg_data_.info_;
}
const ::KWMsg::AckBTLPk&
AckBTLPullMsg_BTLAckMsgWrapper::_Internal::pk(const AckBTLPullMsg_BTLAckMsgWrapper* msg) {
  return *msg->msg_data_.pk_;
}
const ::KWMsg::AckBTLAction&
AckBTLPullMsg_BTLAckMsgWrapper::_Internal::action(const AckBTLPullMsg_BTLAckMsgWrapper* msg) {
  return *msg->msg_data_.action_;
}
void AckBTLPullMsg_BTLAckMsgWrapper::set_allocated_info(::KWMsg::AckBTLInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg_data();
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::AckBTLInfo>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
    msg_data_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.info)
}
void AckBTLPullMsg_BTLAckMsgWrapper::set_allocated_pk(::KWMsg::AckBTLPk* pk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg_data();
  if (pk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::AckBTLPk>::GetOwningArena(pk);
    if (message_arena != submessage_arena) {
      pk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pk, submessage_arena);
    }
    set_has_pk();
    msg_data_.pk_ = pk;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.pk)
}
void AckBTLPullMsg_BTLAckMsgWrapper::set_allocated_action(::KWMsg::AckBTLAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg_data();
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::AckBTLAction>::GetOwningArena(action);
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    set_has_action();
    msg_data_.action_ = action;
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.action)
}
AckBTLPullMsg_BTLAckMsgWrapper::AckBTLPullMsg_BTLAckMsgWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper)
}
AckBTLPullMsg_BTLAckMsgWrapper::AckBTLPullMsg_BTLAckMsgWrapper(const AckBTLPullMsg_BTLAckMsgWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_type_ = from.msg_type_;
  clear_has_msg_data();
  switch (from.msg_data_case()) {
    case kInfo: {
      _internal_mutable_info()->::KWMsg::AckBTLInfo::MergeFrom(from._internal_info());
      break;
    }
    case kPk: {
      _internal_mutable_pk()->::KWMsg::AckBTLPk::MergeFrom(from._internal_pk());
      break;
    }
    case kAction: {
      _internal_mutable_action()->::KWMsg::AckBTLAction::MergeFrom(from._internal_action());
      break;
    }
    case MSG_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper)
}

void AckBTLPullMsg_BTLAckMsgWrapper::SharedCtor() {
msg_type_ = 0;
clear_has_msg_data();
}

AckBTLPullMsg_BTLAckMsgWrapper::~AckBTLPullMsg_BTLAckMsgWrapper() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBTLPullMsg_BTLAckMsgWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg_data()) {
    clear_msg_data();
  }
}

void AckBTLPullMsg_BTLAckMsgWrapper::ArenaDtor(void* object) {
  AckBTLPullMsg_BTLAckMsgWrapper* _this = reinterpret_cast< AckBTLPullMsg_BTLAckMsgWrapper* >(object);
  (void)_this;
}
void AckBTLPullMsg_BTLAckMsgWrapper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBTLPullMsg_BTLAckMsgWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBTLPullMsg_BTLAckMsgWrapper::clear_msg_data() {
// @@protoc_insertion_point(one_of_clear_start:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper)
  switch (msg_data_case()) {
    case kInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_data_.info_;
      }
      break;
    }
    case kPk: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_data_.pk_;
      }
      break;
    }
    case kAction: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_data_.action_;
      }
      break;
    }
    case MSG_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_DATA_NOT_SET;
}


void AckBTLPullMsg_BTLAckMsgWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_type_ = 0;
  clear_msg_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBTLPullMsg_BTLAckMsgWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.AckBTLInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.AckBTLPk pk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.AckBTLAction action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBTLPullMsg_BTLAckMsgWrapper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg_type = 1;
  if (this->msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg_type(), target);
  }

  // .KWMsg.AckBTLInfo info = 2;
  if (_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  // .KWMsg.AckBTLPk pk = 3;
  if (_internal_has_pk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pk(this), target, stream);
  }

  // .KWMsg.AckBTLAction action = 4;
  if (_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper)
  return target;
}

size_t AckBTLPullMsg_BTLAckMsgWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 msg_type = 1;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_type());
  }

  switch (msg_data_case()) {
    // .KWMsg.AckBTLInfo info = 2;
    case kInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_data_.info_);
      break;
    }
    // .KWMsg.AckBTLPk pk = 3;
    case kPk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_data_.pk_);
      break;
    }
    // .KWMsg.AckBTLAction action = 4;
    case kAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_data_.action_);
      break;
    }
    case MSG_DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBTLPullMsg_BTLAckMsgWrapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBTLPullMsg_BTLAckMsgWrapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBTLPullMsg_BTLAckMsgWrapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper)
    MergeFrom(*source);
  }
}

void AckBTLPullMsg_BTLAckMsgWrapper::MergeFrom(const AckBTLPullMsg_BTLAckMsgWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  switch (from.msg_data_case()) {
    case kInfo: {
      _internal_mutable_info()->::KWMsg::AckBTLInfo::MergeFrom(from._internal_info());
      break;
    }
    case kPk: {
      _internal_mutable_pk()->::KWMsg::AckBTLPk::MergeFrom(from._internal_pk());
      break;
    }
    case kAction: {
      _internal_mutable_action()->::KWMsg::AckBTLAction::MergeFrom(from._internal_action());
      break;
    }
    case MSG_DATA_NOT_SET: {
      break;
    }
  }
}

void AckBTLPullMsg_BTLAckMsgWrapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBTLPullMsg_BTLAckMsgWrapper::CopyFrom(const AckBTLPullMsg_BTLAckMsgWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBTLPullMsg_BTLAckMsgWrapper::IsInitialized() const {
  return true;
}

void AckBTLPullMsg_BTLAckMsgWrapper::InternalSwap(AckBTLPullMsg_BTLAckMsgWrapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(msg_type_, other->msg_type_);
  swap(msg_data_, other->msg_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBTLPullMsg_BTLAckMsgWrapper::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[44]);
}

// ===================================================================

class AckBTLPullMsg::_Internal {
 public:
};

AckBTLPullMsg::AckBTLPullMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  battle_ack_msgs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBTLPullMsg)
}
AckBTLPullMsg::AckBTLPullMsg(const AckBTLPullMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      battle_ack_msgs_(from.battle_ack_msgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBTLPullMsg)
}

void AckBTLPullMsg::SharedCtor() {
}

AckBTLPullMsg::~AckBTLPullMsg() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBTLPullMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBTLPullMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckBTLPullMsg::ArenaDtor(void* object) {
  AckBTLPullMsg* _this = reinterpret_cast< AckBTLPullMsg* >(object);
  (void)_this;
}
void AckBTLPullMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBTLPullMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBTLPullMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBTLPullMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battle_ack_msgs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBTLPullMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.AckBTLPullMsg.BTLAckMsgWrapper battle_ack_msgs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_battle_ack_msgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBTLPullMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBTLPullMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.AckBTLPullMsg.BTLAckMsgWrapper battle_ack_msgs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_battle_ack_msgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_battle_ack_msgs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBTLPullMsg)
  return target;
}

size_t AckBTLPullMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBTLPullMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.AckBTLPullMsg.BTLAckMsgWrapper battle_ack_msgs = 1;
  total_size += 1UL * this->_internal_battle_ack_msgs_size();
  for (const auto& msg : this->battle_ack_msgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBTLPullMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBTLPullMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBTLPullMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBTLPullMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBTLPullMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBTLPullMsg)
    MergeFrom(*source);
  }
}

void AckBTLPullMsg::MergeFrom(const AckBTLPullMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBTLPullMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  battle_ack_msgs_.MergeFrom(from.battle_ack_msgs_);
}

void AckBTLPullMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBTLPullMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBTLPullMsg::CopyFrom(const AckBTLPullMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBTLPullMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBTLPullMsg::IsInitialized() const {
  return true;
}

void AckBTLPullMsg::InternalSwap(AckBTLPullMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  battle_ack_msgs_.InternalSwap(&other->battle_ack_msgs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBTLPullMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[45]);
}

// ===================================================================

class ReqBTLToggleAutoMode::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBTLToggleAutoMode* msg);
};

const ::KWMsg::Ident&
ReqBTLToggleAutoMode::_Internal::player_id(const ReqBTLToggleAutoMode* msg) {
  return *msg->player_id_;
}
void ReqBTLToggleAutoMode::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqBTLToggleAutoMode::ReqBTLToggleAutoMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBTLToggleAutoMode)
}
ReqBTLToggleAutoMode::ReqBTLToggleAutoMode(const ReqBTLToggleAutoMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  toggle_ = from.toggle_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBTLToggleAutoMode)
}

void ReqBTLToggleAutoMode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&toggle_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(toggle_));
}

ReqBTLToggleAutoMode::~ReqBTLToggleAutoMode() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBTLToggleAutoMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBTLToggleAutoMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqBTLToggleAutoMode::ArenaDtor(void* object) {
  ReqBTLToggleAutoMode* _this = reinterpret_cast< ReqBTLToggleAutoMode* >(object);
  (void)_this;
}
void ReqBTLToggleAutoMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBTLToggleAutoMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBTLToggleAutoMode::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBTLToggleAutoMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  toggle_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBTLToggleAutoMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 toggle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          toggle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBTLToggleAutoMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBTLToggleAutoMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 toggle = 2;
  if (this->toggle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_toggle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBTLToggleAutoMode)
  return target;
}

size_t ReqBTLToggleAutoMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBTLToggleAutoMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 toggle = 2;
  if (this->toggle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_toggle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBTLToggleAutoMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBTLToggleAutoMode)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBTLToggleAutoMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBTLToggleAutoMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBTLToggleAutoMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBTLToggleAutoMode)
    MergeFrom(*source);
  }
}

void ReqBTLToggleAutoMode::MergeFrom(const ReqBTLToggleAutoMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBTLToggleAutoMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.toggle() != 0) {
    _internal_set_toggle(from._internal_toggle());
  }
}

void ReqBTLToggleAutoMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBTLToggleAutoMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBTLToggleAutoMode::CopyFrom(const ReqBTLToggleAutoMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBTLToggleAutoMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBTLToggleAutoMode::IsInitialized() const {
  return true;
}

void ReqBTLToggleAutoMode::InternalSwap(ReqBTLToggleAutoMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqBTLToggleAutoMode, toggle_)
      + sizeof(ReqBTLToggleAutoMode::toggle_)
      - PROTOBUF_FIELD_OFFSET(ReqBTLToggleAutoMode, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBTLToggleAutoMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[46]);
}

// ===================================================================

class AckBTLToggleAutoMode::_Internal {
 public:
};

AckBTLToggleAutoMode::AckBTLToggleAutoMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  auto_modes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBTLToggleAutoMode)
}
AckBTLToggleAutoMode::AckBTLToggleAutoMode(const AckBTLToggleAutoMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      auto_modes_(from.auto_modes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&toggle_) -
    reinterpret_cast<char*>(&code_)) + sizeof(toggle_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBTLToggleAutoMode)
}

void AckBTLToggleAutoMode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&toggle_) -
    reinterpret_cast<char*>(&code_)) + sizeof(toggle_));
}

AckBTLToggleAutoMode::~AckBTLToggleAutoMode() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBTLToggleAutoMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBTLToggleAutoMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckBTLToggleAutoMode::ArenaDtor(void* object) {
  AckBTLToggleAutoMode* _this = reinterpret_cast< AckBTLToggleAutoMode* >(object);
  (void)_this;
}
void AckBTLToggleAutoMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBTLToggleAutoMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBTLToggleAutoMode::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBTLToggleAutoMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auto_modes_.Clear();
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&toggle_) -
      reinterpret_cast<char*>(&code_)) + sizeof(toggle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBTLToggleAutoMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 toggle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          toggle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BTLEntityAutoMode auto_modes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_auto_modes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBTLToggleAutoMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBTLToggleAutoMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // int32 toggle = 2;
  if (this->toggle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_toggle(), target);
  }

  // repeated .KWMsg.BTLEntityAutoMode auto_modes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_auto_modes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_auto_modes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBTLToggleAutoMode)
  return target;
}

size_t AckBTLToggleAutoMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBTLToggleAutoMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BTLEntityAutoMode auto_modes = 3;
  total_size += 1UL * this->_internal_auto_modes_size();
  for (const auto& msg : this->auto_modes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.EGameEventCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  // int32 toggle = 2;
  if (this->toggle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_toggle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBTLToggleAutoMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBTLToggleAutoMode)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBTLToggleAutoMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBTLToggleAutoMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBTLToggleAutoMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBTLToggleAutoMode)
    MergeFrom(*source);
  }
}

void AckBTLToggleAutoMode::MergeFrom(const AckBTLToggleAutoMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBTLToggleAutoMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  auto_modes_.MergeFrom(from.auto_modes_);
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.toggle() != 0) {
    _internal_set_toggle(from._internal_toggle());
  }
}

void AckBTLToggleAutoMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBTLToggleAutoMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBTLToggleAutoMode::CopyFrom(const AckBTLToggleAutoMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBTLToggleAutoMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBTLToggleAutoMode::IsInitialized() const {
  return true;
}

void AckBTLToggleAutoMode::InternalSwap(AckBTLToggleAutoMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  auto_modes_.InternalSwap(&other->auto_modes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckBTLToggleAutoMode, toggle_)
      + sizeof(AckBTLToggleAutoMode::toggle_)
      - PROTOBUF_FIELD_OFFSET(AckBTLToggleAutoMode, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBTLToggleAutoMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[47]);
}

// ===================================================================

class BTLEntityAutoMode::_Internal {
 public:
  static const ::KWMsg::Ident& entity_id(const BTLEntityAutoMode* msg);
};

const ::KWMsg::Ident&
BTLEntityAutoMode::_Internal::entity_id(const BTLEntityAutoMode* msg) {
  return *msg->entity_id_;
}
void BTLEntityAutoMode::clear_entity_id() {
  if (GetArenaForAllocation() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
}
BTLEntityAutoMode::BTLEntityAutoMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLEntityAutoMode)
}
BTLEntityAutoMode::BTLEntityAutoMode(const BTLEntityAutoMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::KWMsg::Ident(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  auto_mode_ = from.auto_mode_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLEntityAutoMode)
}

void BTLEntityAutoMode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entity_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auto_mode_) -
    reinterpret_cast<char*>(&entity_id_)) + sizeof(auto_mode_));
}

BTLEntityAutoMode::~BTLEntityAutoMode() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLEntityAutoMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLEntityAutoMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete entity_id_;
}

void BTLEntityAutoMode::ArenaDtor(void* object) {
  BTLEntityAutoMode* _this = reinterpret_cast< BTLEntityAutoMode* >(object);
  (void)_this;
}
void BTLEntityAutoMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLEntityAutoMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLEntityAutoMode::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLEntityAutoMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
  auto_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLEntityAutoMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLAutoMode auto_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_mode(static_cast<::KWMsg::BTLAutoMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLEntityAutoMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLEntityAutoMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident entity_id = 1;
  if (this->has_entity_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_id(this), target, stream);
  }

  // .KWMsg.BTLAutoMode auto_mode = 2;
  if (this->auto_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_auto_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLEntityAutoMode)
  return target;
}

size_t BTLEntityAutoMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLEntityAutoMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident entity_id = 1;
  if (this->has_entity_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }

  // .KWMsg.BTLAutoMode auto_mode = 2;
  if (this->auto_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLEntityAutoMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLEntityAutoMode)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLEntityAutoMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLEntityAutoMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLEntityAutoMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLEntityAutoMode)
    MergeFrom(*source);
  }
}

void BTLEntityAutoMode::MergeFrom(const BTLEntityAutoMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLEntityAutoMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_entity_id()) {
    _internal_mutable_entity_id()->::KWMsg::Ident::MergeFrom(from._internal_entity_id());
  }
  if (from.auto_mode() != 0) {
    _internal_set_auto_mode(from._internal_auto_mode());
  }
}

void BTLEntityAutoMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLEntityAutoMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLEntityAutoMode::CopyFrom(const BTLEntityAutoMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLEntityAutoMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLEntityAutoMode::IsInitialized() const {
  return true;
}

void BTLEntityAutoMode::InternalSwap(BTLEntityAutoMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLEntityAutoMode, auto_mode_)
      + sizeof(BTLEntityAutoMode::auto_mode_)
      - PROTOBUF_FIELD_OFFSET(BTLEntityAutoMode, entity_id_)>(
          reinterpret_cast<char*>(&entity_id_),
          reinterpret_cast<char*>(&other->entity_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLEntityAutoMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[48]);
}

// ===================================================================

class ReqBTLUpdateEntityAutoMode::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBTLUpdateEntityAutoMode* msg);
  static const ::KWMsg::BTLEntityAutoMode& mode(const ReqBTLUpdateEntityAutoMode* msg);
};

const ::KWMsg::Ident&
ReqBTLUpdateEntityAutoMode::_Internal::player_id(const ReqBTLUpdateEntityAutoMode* msg) {
  return *msg->player_id_;
}
const ::KWMsg::BTLEntityAutoMode&
ReqBTLUpdateEntityAutoMode::_Internal::mode(const ReqBTLUpdateEntityAutoMode* msg) {
  return *msg->mode_;
}
void ReqBTLUpdateEntityAutoMode::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqBTLUpdateEntityAutoMode::ReqBTLUpdateEntityAutoMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBTLUpdateEntityAutoMode)
}
ReqBTLUpdateEntityAutoMode::ReqBTLUpdateEntityAutoMode(const ReqBTLUpdateEntityAutoMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_mode()) {
    mode_ = new ::KWMsg::BTLEntityAutoMode(*from.mode_);
  } else {
    mode_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBTLUpdateEntityAutoMode)
}

void ReqBTLUpdateEntityAutoMode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(mode_));
}

ReqBTLUpdateEntityAutoMode::~ReqBTLUpdateEntityAutoMode() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBTLUpdateEntityAutoMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBTLUpdateEntityAutoMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete mode_;
}

void ReqBTLUpdateEntityAutoMode::ArenaDtor(void* object) {
  ReqBTLUpdateEntityAutoMode* _this = reinterpret_cast< ReqBTLUpdateEntityAutoMode* >(object);
  (void)_this;
}
void ReqBTLUpdateEntityAutoMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBTLUpdateEntityAutoMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBTLUpdateEntityAutoMode::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBTLUpdateEntityAutoMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBTLUpdateEntityAutoMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLEntityAutoMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBTLUpdateEntityAutoMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBTLUpdateEntityAutoMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.BTLEntityAutoMode mode = 2;
  if (this->has_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mode(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBTLUpdateEntityAutoMode)
  return target;
}

size_t ReqBTLUpdateEntityAutoMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBTLUpdateEntityAutoMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.BTLEntityAutoMode mode = 2;
  if (this->has_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mode_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBTLUpdateEntityAutoMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBTLUpdateEntityAutoMode)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBTLUpdateEntityAutoMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBTLUpdateEntityAutoMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBTLUpdateEntityAutoMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBTLUpdateEntityAutoMode)
    MergeFrom(*source);
  }
}

void ReqBTLUpdateEntityAutoMode::MergeFrom(const ReqBTLUpdateEntityAutoMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBTLUpdateEntityAutoMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_mode()) {
    _internal_mutable_mode()->::KWMsg::BTLEntityAutoMode::MergeFrom(from._internal_mode());
  }
}

void ReqBTLUpdateEntityAutoMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBTLUpdateEntityAutoMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBTLUpdateEntityAutoMode::CopyFrom(const ReqBTLUpdateEntityAutoMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBTLUpdateEntityAutoMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBTLUpdateEntityAutoMode::IsInitialized() const {
  return true;
}

void ReqBTLUpdateEntityAutoMode::InternalSwap(ReqBTLUpdateEntityAutoMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqBTLUpdateEntityAutoMode, mode_)
      + sizeof(ReqBTLUpdateEntityAutoMode::mode_)
      - PROTOBUF_FIELD_OFFSET(ReqBTLUpdateEntityAutoMode, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBTLUpdateEntityAutoMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[49]);
}

// ===================================================================

class AckBTLUpdateEntityAutoMode::_Internal {
 public:
  static const ::KWMsg::BTLEntityAutoMode& mode(const AckBTLUpdateEntityAutoMode* msg);
};

const ::KWMsg::BTLEntityAutoMode&
AckBTLUpdateEntityAutoMode::_Internal::mode(const AckBTLUpdateEntityAutoMode* msg) {
  return *msg->mode_;
}
AckBTLUpdateEntityAutoMode::AckBTLUpdateEntityAutoMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBTLUpdateEntityAutoMode)
}
AckBTLUpdateEntityAutoMode::AckBTLUpdateEntityAutoMode(const AckBTLUpdateEntityAutoMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mode()) {
    mode_ = new ::KWMsg::BTLEntityAutoMode(*from.mode_);
  } else {
    mode_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBTLUpdateEntityAutoMode)
}

void AckBTLUpdateEntityAutoMode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(code_));
}

AckBTLUpdateEntityAutoMode::~AckBTLUpdateEntityAutoMode() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBTLUpdateEntityAutoMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBTLUpdateEntityAutoMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mode_;
}

void AckBTLUpdateEntityAutoMode::ArenaDtor(void* object) {
  AckBTLUpdateEntityAutoMode* _this = reinterpret_cast< AckBTLUpdateEntityAutoMode* >(object);
  (void)_this;
}
void AckBTLUpdateEntityAutoMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBTLUpdateEntityAutoMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBTLUpdateEntityAutoMode::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBTLUpdateEntityAutoMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBTLUpdateEntityAutoMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLEntityAutoMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBTLUpdateEntityAutoMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBTLUpdateEntityAutoMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // .KWMsg.BTLEntityAutoMode mode = 2;
  if (this->has_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mode(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBTLUpdateEntityAutoMode)
  return target;
}

size_t AckBTLUpdateEntityAutoMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBTLUpdateEntityAutoMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.BTLEntityAutoMode mode = 2;
  if (this->has_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mode_);
  }

  // .KWMsg.EGameEventCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBTLUpdateEntityAutoMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBTLUpdateEntityAutoMode)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBTLUpdateEntityAutoMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBTLUpdateEntityAutoMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBTLUpdateEntityAutoMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBTLUpdateEntityAutoMode)
    MergeFrom(*source);
  }
}

void AckBTLUpdateEntityAutoMode::MergeFrom(const AckBTLUpdateEntityAutoMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBTLUpdateEntityAutoMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mode()) {
    _internal_mutable_mode()->::KWMsg::BTLEntityAutoMode::MergeFrom(from._internal_mode());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void AckBTLUpdateEntityAutoMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBTLUpdateEntityAutoMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBTLUpdateEntityAutoMode::CopyFrom(const AckBTLUpdateEntityAutoMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBTLUpdateEntityAutoMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBTLUpdateEntityAutoMode::IsInitialized() const {
  return true;
}

void AckBTLUpdateEntityAutoMode::InternalSwap(AckBTLUpdateEntityAutoMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckBTLUpdateEntityAutoMode, code_)
      + sizeof(AckBTLUpdateEntityAutoMode::code_)
      - PROTOBUF_FIELD_OFFSET(AckBTLUpdateEntityAutoMode, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBTLUpdateEntityAutoMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[50]);
}

// ===================================================================

class ReqBTLSetPrioTarget::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqBTLSetPrioTarget* msg);
  static const ::KWMsg::Ident& entity_id(const ReqBTLSetPrioTarget* msg);
};

const ::KWMsg::Ident&
ReqBTLSetPrioTarget::_Internal::player_id(const ReqBTLSetPrioTarget* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqBTLSetPrioTarget::_Internal::entity_id(const ReqBTLSetPrioTarget* msg) {
  return *msg->entity_id_;
}
void ReqBTLSetPrioTarget::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqBTLSetPrioTarget::clear_entity_id() {
  if (GetArenaForAllocation() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
}
ReqBTLSetPrioTarget::ReqBTLSetPrioTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqBTLSetPrioTarget)
}
ReqBTLSetPrioTarget::ReqBTLSetPrioTarget(const ReqBTLSetPrioTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_entity_id()) {
    entity_id_ = new ::KWMsg::Ident(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqBTLSetPrioTarget)
}

void ReqBTLSetPrioTarget::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entity_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(entity_id_));
}

ReqBTLSetPrioTarget::~ReqBTLSetPrioTarget() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqBTLSetPrioTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqBTLSetPrioTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete entity_id_;
}

void ReqBTLSetPrioTarget::ArenaDtor(void* object) {
  ReqBTLSetPrioTarget* _this = reinterpret_cast< ReqBTLSetPrioTarget* >(object);
  (void)_this;
}
void ReqBTLSetPrioTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqBTLSetPrioTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqBTLSetPrioTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqBTLSetPrioTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqBTLSetPrioTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBTLSetPrioTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqBTLSetPrioTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident entity_id = 2;
  if (this->has_entity_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entity_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqBTLSetPrioTarget)
  return target;
}

size_t ReqBTLSetPrioTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqBTLSetPrioTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident entity_id = 2;
  if (this->has_entity_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBTLSetPrioTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqBTLSetPrioTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBTLSetPrioTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBTLSetPrioTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqBTLSetPrioTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqBTLSetPrioTarget)
    MergeFrom(*source);
  }
}

void ReqBTLSetPrioTarget::MergeFrom(const ReqBTLSetPrioTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqBTLSetPrioTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_entity_id()) {
    _internal_mutable_entity_id()->::KWMsg::Ident::MergeFrom(from._internal_entity_id());
  }
}

void ReqBTLSetPrioTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqBTLSetPrioTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBTLSetPrioTarget::CopyFrom(const ReqBTLSetPrioTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqBTLSetPrioTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBTLSetPrioTarget::IsInitialized() const {
  return true;
}

void ReqBTLSetPrioTarget::InternalSwap(ReqBTLSetPrioTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqBTLSetPrioTarget, entity_id_)
      + sizeof(ReqBTLSetPrioTarget::entity_id_)
      - PROTOBUF_FIELD_OFFSET(ReqBTLSetPrioTarget, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBTLSetPrioTarget::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[51]);
}

// ===================================================================

class AckBTLSetPrioTarget::_Internal {
 public:
  static const ::KWMsg::Ident& prio_opposite_target(const AckBTLSetPrioTarget* msg);
  static const ::KWMsg::Ident& prio_teammate_target(const AckBTLSetPrioTarget* msg);
};

const ::KWMsg::Ident&
AckBTLSetPrioTarget::_Internal::prio_opposite_target(const AckBTLSetPrioTarget* msg) {
  return *msg->prio_opposite_target_;
}
const ::KWMsg::Ident&
AckBTLSetPrioTarget::_Internal::prio_teammate_target(const AckBTLSetPrioTarget* msg) {
  return *msg->prio_teammate_target_;
}
void AckBTLSetPrioTarget::clear_prio_opposite_target() {
  if (GetArenaForAllocation() == nullptr && prio_opposite_target_ != nullptr) {
    delete prio_opposite_target_;
  }
  prio_opposite_target_ = nullptr;
}
void AckBTLSetPrioTarget::clear_prio_teammate_target() {
  if (GetArenaForAllocation() == nullptr && prio_teammate_target_ != nullptr) {
    delete prio_teammate_target_;
  }
  prio_teammate_target_ = nullptr;
}
AckBTLSetPrioTarget::AckBTLSetPrioTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBTLSetPrioTarget)
}
AckBTLSetPrioTarget::AckBTLSetPrioTarget(const AckBTLSetPrioTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prio_opposite_target()) {
    prio_opposite_target_ = new ::KWMsg::Ident(*from.prio_opposite_target_);
  } else {
    prio_opposite_target_ = nullptr;
  }
  if (from._internal_has_prio_teammate_target()) {
    prio_teammate_target_ = new ::KWMsg::Ident(*from.prio_teammate_target_);
  } else {
    prio_teammate_target_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBTLSetPrioTarget)
}

void AckBTLSetPrioTarget::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prio_opposite_target_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&prio_opposite_target_)) + sizeof(code_));
}

AckBTLSetPrioTarget::~AckBTLSetPrioTarget() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBTLSetPrioTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBTLSetPrioTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete prio_opposite_target_;
  if (this != internal_default_instance()) delete prio_teammate_target_;
}

void AckBTLSetPrioTarget::ArenaDtor(void* object) {
  AckBTLSetPrioTarget* _this = reinterpret_cast< AckBTLSetPrioTarget* >(object);
  (void)_this;
}
void AckBTLSetPrioTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBTLSetPrioTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBTLSetPrioTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBTLSetPrioTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && prio_opposite_target_ != nullptr) {
    delete prio_opposite_target_;
  }
  prio_opposite_target_ = nullptr;
  if (GetArenaForAllocation() == nullptr && prio_teammate_target_ != nullptr) {
    delete prio_teammate_target_;
  }
  prio_teammate_target_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBTLSetPrioTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident prio_opposite_target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prio_opposite_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident prio_teammate_target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prio_teammate_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBTLSetPrioTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBTLSetPrioTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // .KWMsg.Ident prio_opposite_target = 2;
  if (this->has_prio_opposite_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prio_opposite_target(this), target, stream);
  }

  // .KWMsg.Ident prio_teammate_target = 3;
  if (this->has_prio_teammate_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::prio_teammate_target(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBTLSetPrioTarget)
  return target;
}

size_t AckBTLSetPrioTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBTLSetPrioTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident prio_opposite_target = 2;
  if (this->has_prio_opposite_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prio_opposite_target_);
  }

  // .KWMsg.Ident prio_teammate_target = 3;
  if (this->has_prio_teammate_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prio_teammate_target_);
  }

  // .KWMsg.EGameEventCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBTLSetPrioTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBTLSetPrioTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBTLSetPrioTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBTLSetPrioTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBTLSetPrioTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBTLSetPrioTarget)
    MergeFrom(*source);
  }
}

void AckBTLSetPrioTarget::MergeFrom(const AckBTLSetPrioTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBTLSetPrioTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prio_opposite_target()) {
    _internal_mutable_prio_opposite_target()->::KWMsg::Ident::MergeFrom(from._internal_prio_opposite_target());
  }
  if (from.has_prio_teammate_target()) {
    _internal_mutable_prio_teammate_target()->::KWMsg::Ident::MergeFrom(from._internal_prio_teammate_target());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void AckBTLSetPrioTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBTLSetPrioTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBTLSetPrioTarget::CopyFrom(const AckBTLSetPrioTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBTLSetPrioTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBTLSetPrioTarget::IsInitialized() const {
  return true;
}

void AckBTLSetPrioTarget::InternalSwap(AckBTLSetPrioTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckBTLSetPrioTarget, code_)
      + sizeof(AckBTLSetPrioTarget::code_)
      - PROTOBUF_FIELD_OFFSET(AckBTLSetPrioTarget, prio_opposite_target_)>(
          reinterpret_cast<char*>(&prio_opposite_target_),
          reinterpret_cast<char*>(&other->prio_opposite_target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBTLSetPrioTarget::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[52]);
}

// ===================================================================

class ReqLeaveBattle::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqLeaveBattle* msg);
};

const ::KWMsg::Ident&
ReqLeaveBattle::_Internal::player_id(const ReqLeaveBattle* msg) {
  return *msg->player_id_;
}
void ReqLeaveBattle::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqLeaveBattle::ReqLeaveBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqLeaveBattle)
}
ReqLeaveBattle::ReqLeaveBattle(const ReqLeaveBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqLeaveBattle)
}

void ReqLeaveBattle::SharedCtor() {
player_id_ = nullptr;
}

ReqLeaveBattle::~ReqLeaveBattle() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqLeaveBattle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqLeaveBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqLeaveBattle::ArenaDtor(void* object) {
  ReqLeaveBattle* _this = reinterpret_cast< ReqLeaveBattle* >(object);
  (void)_this;
}
void ReqLeaveBattle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqLeaveBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqLeaveBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqLeaveBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqLeaveBattle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqLeaveBattle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqLeaveBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqLeaveBattle)
  return target;
}

size_t ReqLeaveBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqLeaveBattle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqLeaveBattle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqLeaveBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLeaveBattle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqLeaveBattle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqLeaveBattle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqLeaveBattle)
    MergeFrom(*source);
  }
}

void ReqLeaveBattle::MergeFrom(const ReqLeaveBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqLeaveBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqLeaveBattle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqLeaveBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveBattle::CopyFrom(const ReqLeaveBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqLeaveBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveBattle::IsInitialized() const {
  return true;
}

void ReqLeaveBattle::InternalSwap(ReqLeaveBattle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqLeaveBattle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[53]);
}

// ===================================================================

class AckLeaveBattle::_Internal {
 public:
};

AckLeaveBattle::AckLeaveBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckLeaveBattle)
}
AckLeaveBattle::AckLeaveBattle(const AckLeaveBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckLeaveBattle)
}

void AckLeaveBattle::SharedCtor() {
event_code_ = 0;
}

AckLeaveBattle::~AckLeaveBattle() {
  // @@protoc_insertion_point(destructor:KWMsg.AckLeaveBattle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckLeaveBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckLeaveBattle::ArenaDtor(void* object) {
  AckLeaveBattle* _this = reinterpret_cast< AckLeaveBattle* >(object);
  (void)_this;
}
void AckLeaveBattle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckLeaveBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckLeaveBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckLeaveBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckLeaveBattle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckLeaveBattle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckLeaveBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckLeaveBattle)
  return target;
}

size_t AckLeaveBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckLeaveBattle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckLeaveBattle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckLeaveBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const AckLeaveBattle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckLeaveBattle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckLeaveBattle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckLeaveBattle)
    MergeFrom(*source);
  }
}

void AckLeaveBattle::MergeFrom(const AckLeaveBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckLeaveBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckLeaveBattle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckLeaveBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLeaveBattle::CopyFrom(const AckLeaveBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckLeaveBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLeaveBattle::IsInitialized() const {
  return true;
}

void AckLeaveBattle::InternalSwap(AckLeaveBattle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckLeaveBattle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[54]);
}

// ===================================================================

class ReqContinuousBattle::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqContinuousBattle* msg);
};

const ::KWMsg::Ident&
ReqContinuousBattle::_Internal::player_id(const ReqContinuousBattle* msg) {
  return *msg->player_id_;
}
void ReqContinuousBattle::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqContinuousBattle::ReqContinuousBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqContinuousBattle)
}
ReqContinuousBattle::ReqContinuousBattle(const ReqContinuousBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqContinuousBattle)
}

void ReqContinuousBattle::SharedCtor() {
player_id_ = nullptr;
}

ReqContinuousBattle::~ReqContinuousBattle() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqContinuousBattle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqContinuousBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqContinuousBattle::ArenaDtor(void* object) {
  ReqContinuousBattle* _this = reinterpret_cast< ReqContinuousBattle* >(object);
  (void)_this;
}
void ReqContinuousBattle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqContinuousBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqContinuousBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqContinuousBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqContinuousBattle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqContinuousBattle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqContinuousBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqContinuousBattle)
  return target;
}

size_t ReqContinuousBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqContinuousBattle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqContinuousBattle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqContinuousBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqContinuousBattle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqContinuousBattle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqContinuousBattle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqContinuousBattle)
    MergeFrom(*source);
  }
}

void ReqContinuousBattle::MergeFrom(const ReqContinuousBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqContinuousBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqContinuousBattle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqContinuousBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqContinuousBattle::CopyFrom(const ReqContinuousBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqContinuousBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqContinuousBattle::IsInitialized() const {
  return true;
}

void ReqContinuousBattle::InternalSwap(ReqContinuousBattle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqContinuousBattle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[55]);
}

// ===================================================================

class AckContinuousBattle::_Internal {
 public:
};

AckContinuousBattle::AckContinuousBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckContinuousBattle)
}
AckContinuousBattle::AckContinuousBattle(const AckContinuousBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckContinuousBattle)
}

void AckContinuousBattle::SharedCtor() {
event_code_ = 0;
}

AckContinuousBattle::~AckContinuousBattle() {
  // @@protoc_insertion_point(destructor:KWMsg.AckContinuousBattle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckContinuousBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckContinuousBattle::ArenaDtor(void* object) {
  AckContinuousBattle* _this = reinterpret_cast< AckContinuousBattle* >(object);
  (void)_this;
}
void AckContinuousBattle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckContinuousBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckContinuousBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckContinuousBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckContinuousBattle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckContinuousBattle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckContinuousBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckContinuousBattle)
  return target;
}

size_t AckContinuousBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckContinuousBattle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckContinuousBattle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckContinuousBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const AckContinuousBattle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckContinuousBattle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckContinuousBattle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckContinuousBattle)
    MergeFrom(*source);
  }
}

void AckContinuousBattle::MergeFrom(const AckContinuousBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckContinuousBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckContinuousBattle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckContinuousBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckContinuousBattle::CopyFrom(const AckContinuousBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckContinuousBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckContinuousBattle::IsInitialized() const {
  return true;
}

void AckContinuousBattle::InternalSwap(AckContinuousBattle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckContinuousBattle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[56]);
}

// ===================================================================

class BTLRewardInfo::_Internal {
 public:
  static const ::KWMsg::Ident& reward_guid(const BTLRewardInfo* msg);
};

const ::KWMsg::Ident&
BTLRewardInfo::_Internal::reward_guid(const BTLRewardInfo* msg) {
  return *msg->reward_guid_;
}
void BTLRewardInfo::clear_reward_guid() {
  if (GetArenaForAllocation() == nullptr && reward_guid_ != nullptr) {
    delete reward_guid_;
  }
  reward_guid_ = nullptr;
}
BTLRewardInfo::BTLRewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLRewardInfo)
}
BTLRewardInfo::BTLRewardInfo(const BTLRewardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reward_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reward_id().empty()) {
    reward_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reward_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_reward_guid()) {
    reward_guid_ = new ::KWMsg::Ident(*from.reward_guid_);
  } else {
    reward_guid_ = nullptr;
  }
  ::memcpy(&reward_count_, &from.reward_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_flag_) -
    reinterpret_cast<char*>(&reward_count_)) + sizeof(reward_flag_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLRewardInfo)
}

void BTLRewardInfo::SharedCtor() {
reward_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reward_guid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reward_flag_) -
    reinterpret_cast<char*>(&reward_guid_)) + sizeof(reward_flag_));
}

BTLRewardInfo::~BTLRewardInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLRewardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLRewardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reward_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reward_guid_;
}

void BTLRewardInfo::ArenaDtor(void* object) {
  BTLRewardInfo* _this = reinterpret_cast< BTLRewardInfo* >(object);
  (void)_this;
}
void BTLRewardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLRewardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLRewardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLRewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && reward_guid_ != nullptr) {
    delete reward_guid_;
  }
  reward_guid_ = nullptr;
  ::memset(&reward_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_flag_) -
      reinterpret_cast<char*>(&reward_count_)) + sizeof(reward_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLRewardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes reward_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reward_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reward_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reward_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reward_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident reward_guid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reward_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLRewardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLRewardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes reward_id = 1;
  if (!this->reward_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_reward_id(), target);
  }

  // int32 reward_count = 2;
  if (this->reward_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reward_count(), target);
  }

  // int32 reward_flag = 3;
  if (this->reward_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reward_flag(), target);
  }

  // .KWMsg.Ident reward_guid = 4;
  if (this->has_reward_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reward_guid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLRewardInfo)
  return target;
}

size_t BTLRewardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLRewardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes reward_id = 1;
  if (!this->reward_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reward_id());
  }

  // .KWMsg.Ident reward_guid = 4;
  if (this->has_reward_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reward_guid_);
  }

  // int32 reward_count = 2;
  if (this->reward_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward_count());
  }

  // int32 reward_flag = 3;
  if (this->reward_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reward_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLRewardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLRewardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLRewardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLRewardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLRewardInfo)
    MergeFrom(*source);
  }
}

void BTLRewardInfo::MergeFrom(const BTLRewardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.reward_id().empty()) {
    _internal_set_reward_id(from._internal_reward_id());
  }
  if (from.has_reward_guid()) {
    _internal_mutable_reward_guid()->::KWMsg::Ident::MergeFrom(from._internal_reward_guid());
  }
  if (from.reward_count() != 0) {
    _internal_set_reward_count(from._internal_reward_count());
  }
  if (from.reward_flag() != 0) {
    _internal_set_reward_flag(from._internal_reward_flag());
  }
}

void BTLRewardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLRewardInfo::CopyFrom(const BTLRewardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLRewardInfo::IsInitialized() const {
  return true;
}

void BTLRewardInfo::InternalSwap(BTLRewardInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reward_id_, GetArenaForAllocation(),
      &other->reward_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BTLRewardInfo, reward_flag_)
      + sizeof(BTLRewardInfo::reward_flag_)
      - PROTOBUF_FIELD_OFFSET(BTLRewardInfo, reward_guid_)>(
          reinterpret_cast<char*>(&reward_guid_),
          reinterpret_cast<char*>(&other->reward_guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLRewardInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[57]);
}

// ===================================================================

class AckBTLEndInfo::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AckBTLEndInfo* msg);
  static const ::KWMsg::Ident& victory_entity_id(const AckBTLEndInfo* msg);
};

const ::KWMsg::Ident&
AckBTLEndInfo::_Internal::player_id(const AckBTLEndInfo* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
AckBTLEndInfo::_Internal::victory_entity_id(const AckBTLEndInfo* msg) {
  return *msg->victory_entity_id_;
}
void AckBTLEndInfo::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void AckBTLEndInfo::clear_victory_entity_id() {
  if (GetArenaForAllocation() == nullptr && victory_entity_id_ != nullptr) {
    delete victory_entity_id_;
  }
  victory_entity_id_ = nullptr;
}
AckBTLEndInfo::AckBTLEndInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reward_list_(arena),
  extra_reward_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBTLEndInfo)
}
AckBTLEndInfo::AckBTLEndInfo(const AckBTLEndInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reward_list_(from.reward_list_),
      extra_reward_list_(from.extra_reward_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_victory_entity_id()) {
    victory_entity_id_ = new ::KWMsg::Ident(*from.victory_entity_id_);
  } else {
    victory_entity_id_ = nullptr;
  }
  ::memcpy(&is_victory_, &from.is_victory_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_by_kill_) -
    reinterpret_cast<char*>(&is_victory_)) + sizeof(end_by_kill_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBTLEndInfo)
}

void AckBTLEndInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_by_kill_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(end_by_kill_));
}

AckBTLEndInfo::~AckBTLEndInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBTLEndInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBTLEndInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete victory_entity_id_;
}

void AckBTLEndInfo::ArenaDtor(void* object) {
  AckBTLEndInfo* _this = reinterpret_cast< AckBTLEndInfo* >(object);
  (void)_this;
}
void AckBTLEndInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBTLEndInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBTLEndInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBTLEndInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_list_.Clear();
  extra_reward_list_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && victory_entity_id_ != nullptr) {
    delete victory_entity_id_;
  }
  victory_entity_id_ = nullptr;
  ::memset(&is_victory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_by_kill_) -
      reinterpret_cast<char*>(&is_victory_)) + sizeof(end_by_kill_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBTLEndInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_victory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_victory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident victory_entity_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_victory_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 add_player_exp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          add_player_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 add_witch_exp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          add_witch_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 star_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          star_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BTLRewardInfo reward_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BTLRewardInfo extra_reward_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_reward_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 end_by_kill = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          end_by_kill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBTLEndInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBTLEndInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 is_victory = 2;
  if (this->is_victory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_is_victory(), target);
  }

  // .KWMsg.Ident victory_entity_id = 3;
  if (this->has_victory_entity_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::victory_entity_id(this), target, stream);
  }

  // int32 add_player_exp = 4;
  if (this->add_player_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_add_player_exp(), target);
  }

  // int32 add_witch_exp = 5;
  if (this->add_witch_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_add_witch_exp(), target);
  }

  // int32 star_state = 6;
  if (this->star_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_star_state(), target);
  }

  // repeated .KWMsg.BTLRewardInfo reward_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_reward_list(i), target, stream);
  }

  // repeated .KWMsg.BTLRewardInfo extra_reward_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extra_reward_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_extra_reward_list(i), target, stream);
  }

  // int32 end_by_kill = 9;
  if (this->end_by_kill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_end_by_kill(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBTLEndInfo)
  return target;
}

size_t AckBTLEndInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBTLEndInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BTLRewardInfo reward_list = 7;
  total_size += 1UL * this->_internal_reward_list_size();
  for (const auto& msg : this->reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.BTLRewardInfo extra_reward_list = 8;
  total_size += 1UL * this->_internal_extra_reward_list_size();
  for (const auto& msg : this->extra_reward_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident victory_entity_id = 3;
  if (this->has_victory_entity_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *victory_entity_id_);
  }

  // int32 is_victory = 2;
  if (this->is_victory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_victory());
  }

  // int32 add_player_exp = 4;
  if (this->add_player_exp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_add_player_exp());
  }

  // int32 add_witch_exp = 5;
  if (this->add_witch_exp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_add_witch_exp());
  }

  // int32 star_state = 6;
  if (this->star_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_star_state());
  }

  // int32 end_by_kill = 9;
  if (this->end_by_kill() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_by_kill());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBTLEndInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBTLEndInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBTLEndInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBTLEndInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBTLEndInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBTLEndInfo)
    MergeFrom(*source);
  }
}

void AckBTLEndInfo::MergeFrom(const AckBTLEndInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBTLEndInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_list_.MergeFrom(from.reward_list_);
  extra_reward_list_.MergeFrom(from.extra_reward_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_victory_entity_id()) {
    _internal_mutable_victory_entity_id()->::KWMsg::Ident::MergeFrom(from._internal_victory_entity_id());
  }
  if (from.is_victory() != 0) {
    _internal_set_is_victory(from._internal_is_victory());
  }
  if (from.add_player_exp() != 0) {
    _internal_set_add_player_exp(from._internal_add_player_exp());
  }
  if (from.add_witch_exp() != 0) {
    _internal_set_add_witch_exp(from._internal_add_witch_exp());
  }
  if (from.star_state() != 0) {
    _internal_set_star_state(from._internal_star_state());
  }
  if (from.end_by_kill() != 0) {
    _internal_set_end_by_kill(from._internal_end_by_kill());
  }
}

void AckBTLEndInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBTLEndInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBTLEndInfo::CopyFrom(const AckBTLEndInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBTLEndInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBTLEndInfo::IsInitialized() const {
  return true;
}

void AckBTLEndInfo::InternalSwap(AckBTLEndInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reward_list_.InternalSwap(&other->reward_list_);
  extra_reward_list_.InternalSwap(&other->extra_reward_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckBTLEndInfo, end_by_kill_)
      + sizeof(AckBTLEndInfo::end_by_kill_)
      - PROTOBUF_FIELD_OFFSET(AckBTLEndInfo, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBTLEndInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[58]);
}

// ===================================================================

class AckBTLResult::_Internal {
 public:
  static const ::KWMsg::BTLResult& result(const AckBTLResult* msg);
};

const ::KWMsg::BTLResult&
AckBTLResult::_Internal::result(const AckBTLResult* msg) {
  return *msg->result_;
}
AckBTLResult::AckBTLResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckBTLResult)
}
AckBTLResult::AckBTLResult(const AckBTLResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::KWMsg::BTLResult(*from.result_);
  } else {
    result_ = nullptr;
  }
  unique_id_ = from.unique_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckBTLResult)
}

void AckBTLResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unique_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(unique_id_));
}

AckBTLResult::~AckBTLResult() {
  // @@protoc_insertion_point(destructor:KWMsg.AckBTLResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckBTLResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void AckBTLResult::ArenaDtor(void* object) {
  AckBTLResult* _this = reinterpret_cast< AckBTLResult* >(object);
  (void)_this;
}
void AckBTLResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckBTLResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckBTLResult::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckBTLResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  unique_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckBTLResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.BTLResult result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBTLResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckBTLResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unique_id = 1;
  if (this->unique_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unique_id(), target);
  }

  // .KWMsg.BTLResult result = 2;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckBTLResult)
  return target;
}

size_t AckBTLResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckBTLResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.BTLResult result = 2;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // int32 unique_id = 1;
  if (this->unique_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unique_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBTLResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckBTLResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBTLResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBTLResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckBTLResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckBTLResult)
    MergeFrom(*source);
  }
}

void AckBTLResult::MergeFrom(const AckBTLResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckBTLResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::KWMsg::BTLResult::MergeFrom(from._internal_result());
  }
  if (from.unique_id() != 0) {
    _internal_set_unique_id(from._internal_unique_id());
  }
}

void AckBTLResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckBTLResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBTLResult::CopyFrom(const AckBTLResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckBTLResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBTLResult::IsInitialized() const {
  return true;
}

void AckBTLResult::InternalSwap(AckBTLResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckBTLResult, unique_id_)
      + sizeof(AckBTLResult::unique_id_)
      - PROTOBUF_FIELD_OFFSET(AckBTLResult, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBTLResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[59]);
}

// ===================================================================

class BTLResult::_Internal {
 public:
  static const ::KWMsg::Ident& victory_entity_id(const BTLResult* msg);
};

const ::KWMsg::Ident&
BTLResult::_Internal::victory_entity_id(const BTLResult* msg) {
  return *msg->victory_entity_id_;
}
void BTLResult::clear_victory_entity_id() {
  if (GetArenaForAllocation() == nullptr && victory_entity_id_ != nullptr) {
    delete victory_entity_id_;
  }
  victory_entity_id_ = nullptr;
}
void BTLResult::clear_won_players() {
  won_players_.Clear();
}
void BTLResult::clear_lost_players() {
  lost_players_.Clear();
}
BTLResult::BTLResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  won_players_(arena),
  lost_players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.BTLResult)
}
BTLResult::BTLResult(const BTLResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      won_players_(from.won_players_),
      lost_players_(from.lost_players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_victory_entity_id()) {
    victory_entity_id_ = new ::KWMsg::Ident(*from.victory_entity_id_);
  } else {
    victory_entity_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.BTLResult)
}

void BTLResult::SharedCtor() {
victory_entity_id_ = nullptr;
}

BTLResult::~BTLResult() {
  // @@protoc_insertion_point(destructor:KWMsg.BTLResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BTLResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete victory_entity_id_;
}

void BTLResult::ArenaDtor(void* object) {
  BTLResult* _this = reinterpret_cast< BTLResult* >(object);
  (void)_this;
}
void BTLResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BTLResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BTLResult::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.BTLResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  won_players_.Clear();
  lost_players_.Clear();
  if (GetArenaForAllocation() == nullptr && victory_entity_id_ != nullptr) {
    delete victory_entity_id_;
  }
  victory_entity_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BTLResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident victory_entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_victory_entity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.Ident won_players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_won_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.Ident lost_players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lost_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BTLResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.BTLResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident victory_entity_id = 1;
  if (this->has_victory_entity_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::victory_entity_id(this), target, stream);
  }

  // repeated .KWMsg.Ident won_players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_won_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_won_players(i), target, stream);
  }

  // repeated .KWMsg.Ident lost_players = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lost_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_lost_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.BTLResult)
  return target;
}

size_t BTLResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.BTLResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.Ident won_players = 2;
  total_size += 1UL * this->_internal_won_players_size();
  for (const auto& msg : this->won_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.Ident lost_players = 3;
  total_size += 1UL * this->_internal_lost_players_size();
  for (const auto& msg : this->lost_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident victory_entity_id = 1;
  if (this->has_victory_entity_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *victory_entity_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BTLResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.BTLResult)
  GOOGLE_DCHECK_NE(&from, this);
  const BTLResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BTLResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.BTLResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.BTLResult)
    MergeFrom(*source);
  }
}

void BTLResult::MergeFrom(const BTLResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.BTLResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  won_players_.MergeFrom(from.won_players_);
  lost_players_.MergeFrom(from.lost_players_);
  if (from.has_victory_entity_id()) {
    _internal_mutable_victory_entity_id()->::KWMsg::Ident::MergeFrom(from._internal_victory_entity_id());
  }
}

void BTLResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.BTLResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTLResult::CopyFrom(const BTLResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.BTLResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTLResult::IsInitialized() const {
  return true;
}

void BTLResult::InternalSwap(BTLResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  won_players_.InternalSwap(&other->won_players_);
  lost_players_.InternalSwap(&other->lost_players_);
  swap(victory_entity_id_, other->victory_entity_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BTLResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[60]);
}

// ===================================================================

class ReqReplayData::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqReplayData* msg);
  static const ::KWMsg::Ident& replay_id(const ReqReplayData* msg);
};

const ::KWMsg::Ident&
ReqReplayData::_Internal::player_id(const ReqReplayData* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqReplayData::_Internal::replay_id(const ReqReplayData* msg) {
  return *msg->replay_id_;
}
void ReqReplayData::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqReplayData::clear_replay_id() {
  if (GetArenaForAllocation() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
}
ReqReplayData::ReqReplayData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqReplayData)
}
ReqReplayData::ReqReplayData(const ReqReplayData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_replay_id()) {
    replay_id_ = new ::KWMsg::Ident(*from.replay_id_);
  } else {
    replay_id_ = nullptr;
  }
  idx_ = from.idx_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqReplayData)
}

void ReqReplayData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(idx_));
}

ReqReplayData::~ReqReplayData() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqReplayData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqReplayData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete replay_id_;
}

void ReqReplayData::ArenaDtor(void* object) {
  ReqReplayData* _this = reinterpret_cast< ReqReplayData* >(object);
  (void)_this;
}
void ReqReplayData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqReplayData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqReplayData::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqReplayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && replay_id_ != nullptr) {
    delete replay_id_;
  }
  replay_id_ = nullptr;
  idx_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqReplayData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident replay_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqReplayData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqReplayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident replay_id = 2;
  if (this->has_replay_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::replay_id(this), target, stream);
  }

  // int32 idx = 3;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqReplayData)
  return target;
}

size_t ReqReplayData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqReplayData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident replay_id = 2;
  if (this->has_replay_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replay_id_);
  }

  // int32 idx = 3;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqReplayData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqReplayData)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqReplayData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqReplayData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqReplayData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqReplayData)
    MergeFrom(*source);
  }
}

void ReqReplayData::MergeFrom(const ReqReplayData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqReplayData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_replay_id()) {
    _internal_mutable_replay_id()->::KWMsg::Ident::MergeFrom(from._internal_replay_id());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
}

void ReqReplayData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqReplayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqReplayData::CopyFrom(const ReqReplayData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqReplayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqReplayData::IsInitialized() const {
  return true;
}

void ReqReplayData::InternalSwap(ReqReplayData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqReplayData, idx_)
      + sizeof(ReqReplayData::idx_)
      - PROTOBUF_FIELD_OFFSET(ReqReplayData, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqReplayData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[61]);
}

// ===================================================================

class AckReplayData::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AckReplayData* msg);
};

const ::KWMsg::Ident&
AckReplayData::_Internal::player_id(const AckReplayData* msg) {
  return *msg->player_id_;
}
void AckReplayData::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
AckReplayData::AckReplayData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  msgs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckReplayData)
}
AckReplayData::AckReplayData(const AckReplayData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msgs_(from.msgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckReplayData)
}

void AckReplayData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(idx_));
}

AckReplayData::~AckReplayData() {
  // @@protoc_insertion_point(destructor:KWMsg.AckReplayData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckReplayData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void AckReplayData::ArenaDtor(void* object) {
  AckReplayData* _this = reinterpret_cast< AckReplayData* >(object);
  (void)_this;
}
void AckReplayData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckReplayData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckReplayData::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckReplayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckReplayData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.BTLMsgWrapper msgs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckReplayData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckReplayData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  // int32 idx = 3;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_idx(), target);
  }

  // repeated .KWMsg.BTLMsgWrapper msgs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_msgs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckReplayData)
  return target;
}

size_t AckReplayData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckReplayData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.BTLMsgWrapper msgs = 4;
  total_size += 1UL * this->_internal_msgs_size();
  for (const auto& msg : this->msgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 idx = 3;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckReplayData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckReplayData)
  GOOGLE_DCHECK_NE(&from, this);
  const AckReplayData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckReplayData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckReplayData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckReplayData)
    MergeFrom(*source);
  }
}

void AckReplayData::MergeFrom(const AckReplayData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckReplayData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
}

void AckReplayData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckReplayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReplayData::CopyFrom(const AckReplayData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckReplayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReplayData::IsInitialized() const {
  return true;
}

void AckReplayData::InternalSwap(AckReplayData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msgs_.InternalSwap(&other->msgs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckReplayData, idx_)
      + sizeof(AckReplayData::idx_)
      - PROTOBUF_FIELD_OFFSET(AckReplayData, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckReplayData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbattle_2eproto_getter, &descriptor_table_kwmsgbattle_2eproto_once,
      file_level_metadata_kwmsgbattle_2eproto[62]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace KWMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KWMsg::BTLMsgWrapper* Arena::CreateMaybeMessage< ::KWMsg::BTLMsgWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLMsgWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLBattleReplay_BTLBattleReplayWrapper* Arena::CreateMaybeMessage< ::KWMsg::BTLBattleReplay_BTLBattleReplayWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLBattleReplay_BTLBattleReplayWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLBattleReplay* Arena::CreateMaybeMessage< ::KWMsg::BTLBattleReplay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLBattleReplay >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqEnterBattle* Arena::CreateMaybeMessage< ::KWMsg::ReqEnterBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqEnterBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckEnterBattle* Arena::CreateMaybeMessage< ::KWMsg::AckEnterBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckEnterBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBTLInfo* Arena::CreateMaybeMessage< ::KWMsg::AckBTLInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBTLInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLSettings* Arena::CreateMaybeMessage< ::KWMsg::BTLSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLEntity* Arena::CreateMaybeMessage< ::KWMsg::BTLEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBTLPk* Arena::CreateMaybeMessage< ::KWMsg::AckBTLPk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBTLPk >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLEnergyInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLEnergyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLEnergyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLPkInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLPkInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLPkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLPkElement* Arena::CreateMaybeMessage< ::KWMsg::BTLPkElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLPkElement >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBTLAction* Arena::CreateMaybeMessage< ::KWMsg::ReqBTLAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBTLAction >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLOperation* Arena::CreateMaybeMessage< ::KWMsg::BTLOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLManualOperation* Arena::CreateMaybeMessage< ::KWMsg::BTLManualOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLManualOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBTLAction* Arena::CreateMaybeMessage< ::KWMsg::AckBTLAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBTLAction >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLAction* Arena::CreateMaybeMessage< ::KWMsg::BTLAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLAction >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLActionQueue* Arena::CreateMaybeMessage< ::KWMsg::BTLActionQueue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLActionQueue >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLActionQueueElement* Arena::CreateMaybeMessage< ::KWMsg::BTLActionQueueElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLActionQueueElement >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLStartDetail* Arena::CreateMaybeMessage< ::KWMsg::BTLStartDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLStartDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLInActionDetail* Arena::CreateMaybeMessage< ::KWMsg::BTLInActionDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLInActionDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLPostPreActionDetail* Arena::CreateMaybeMessage< ::KWMsg::BTLPostPreActionDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLPostPreActionDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLBeforeEndDetail* Arena::CreateMaybeMessage< ::KWMsg::BTLBeforeEndDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLBeforeEndDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLEntityStateInTurn* Arena::CreateMaybeMessage< ::KWMsg::BTLEntityStateInTurn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLEntityStateInTurn >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLEntitySkillState* Arena::CreateMaybeMessage< ::KWMsg::BTLEntitySkillState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLEntitySkillState >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLEffect* Arena::CreateMaybeMessage< ::KWMsg::BTLEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLEffect >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLDamageInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLDamageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLDamageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLHealInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLHealInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLHealInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLSummonInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLSummonInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLSummonInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLTransformInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLTransformInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLTransformInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLTriggerInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLTriggerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLTriggerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLResistanceInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLResistanceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLResistanceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLShowTextInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLShowTextInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLShowTextInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLReviveInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLReviveInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLReviveInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLBuffInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLBuffInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLBuffInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLAddBuffInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLAddBuffInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLAddBuffInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLRemoveBuffInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLRemoveBuffInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLRemoveBuffInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLRemoveBuffItem* Arena::CreateMaybeMessage< ::KWMsg::BTLRemoveBuffItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLRemoveBuffItem >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLShieldChangeInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLShieldChangeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLShieldChangeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLSealChangeInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLSealChangeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLSealChangeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLStateChangeInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLStateChangeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLStateChangeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLChangedEntity* Arena::CreateMaybeMessage< ::KWMsg::BTLChangedEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLChangedEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBTLPullMsg* Arena::CreateMaybeMessage< ::KWMsg::ReqBTLPullMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBTLPullMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper* Arena::CreateMaybeMessage< ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBTLPullMsg* Arena::CreateMaybeMessage< ::KWMsg::AckBTLPullMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBTLPullMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBTLToggleAutoMode* Arena::CreateMaybeMessage< ::KWMsg::ReqBTLToggleAutoMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBTLToggleAutoMode >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBTLToggleAutoMode* Arena::CreateMaybeMessage< ::KWMsg::AckBTLToggleAutoMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBTLToggleAutoMode >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLEntityAutoMode* Arena::CreateMaybeMessage< ::KWMsg::BTLEntityAutoMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLEntityAutoMode >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBTLUpdateEntityAutoMode* Arena::CreateMaybeMessage< ::KWMsg::ReqBTLUpdateEntityAutoMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBTLUpdateEntityAutoMode >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBTLUpdateEntityAutoMode* Arena::CreateMaybeMessage< ::KWMsg::AckBTLUpdateEntityAutoMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBTLUpdateEntityAutoMode >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqBTLSetPrioTarget* Arena::CreateMaybeMessage< ::KWMsg::ReqBTLSetPrioTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqBTLSetPrioTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBTLSetPrioTarget* Arena::CreateMaybeMessage< ::KWMsg::AckBTLSetPrioTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBTLSetPrioTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqLeaveBattle* Arena::CreateMaybeMessage< ::KWMsg::ReqLeaveBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqLeaveBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckLeaveBattle* Arena::CreateMaybeMessage< ::KWMsg::AckLeaveBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckLeaveBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqContinuousBattle* Arena::CreateMaybeMessage< ::KWMsg::ReqContinuousBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqContinuousBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckContinuousBattle* Arena::CreateMaybeMessage< ::KWMsg::AckContinuousBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckContinuousBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLRewardInfo* Arena::CreateMaybeMessage< ::KWMsg::BTLRewardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLRewardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBTLEndInfo* Arena::CreateMaybeMessage< ::KWMsg::AckBTLEndInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBTLEndInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckBTLResult* Arena::CreateMaybeMessage< ::KWMsg::AckBTLResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckBTLResult >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::BTLResult* Arena::CreateMaybeMessage< ::KWMsg::BTLResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::BTLResult >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqReplayData* Arena::CreateMaybeMessage< ::KWMsg::ReqReplayData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqReplayData >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckReplayData* Arena::CreateMaybeMessage< ::KWMsg::AckReplayData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckReplayData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
