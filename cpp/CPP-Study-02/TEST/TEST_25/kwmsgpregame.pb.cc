// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kwmsgpregame.proto

#include "kwmsgpregame.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace KWMsg {
constexpr ServerInfoReport::ServerInfoReport(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , zone_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , zone_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_public_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_id_(0)
  , server_port_(0)
  , server_max_online_(0)
  , server_cur_count_(0)
  , server_type_(0)
  , server_state_(0)

  , server_show_state_(0)

  , server_open_time_(0){}
struct ServerInfoReportDefaultTypeInternal {
  constexpr ServerInfoReportDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerInfoReportDefaultTypeInternal() {}
  union {
    ServerInfoReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerInfoReportDefaultTypeInternal _ServerInfoReport_default_instance_;
constexpr ServerInfoReportList::ServerInfoReportList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_list_(){}
struct ServerInfoReportListDefaultTypeInternal {
  constexpr ServerInfoReportListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerInfoReportListDefaultTypeInternal() {}
  union {
    ServerInfoReportList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerInfoReportListDefaultTypeInternal _ServerInfoReportList_default_instance_;
constexpr AckEventResult::AckEventResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_object_(nullptr)
  , event_client_(nullptr)
  , event_code_(0)
{}
struct AckEventResultDefaultTypeInternal {
  constexpr AckEventResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckEventResultDefaultTypeInternal() {}
  union {
    AckEventResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckEventResultDefaultTypeInternal _AckEventResult_default_instance_;
constexpr ReqLogin::ReqLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_info_(nullptr)
  , channel_(0)
  , client_version_(0){}
struct ReqLoginDefaultTypeInternal {
  constexpr ReqLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqLoginDefaultTypeInternal() {}
  union {
    ReqLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqLoginDefaultTypeInternal _ReqLogin_default_instance_;
constexpr AckLogin::AckLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , channel_(0){}
struct AckLoginDefaultTypeInternal {
  constexpr AckLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckLoginDefaultTypeInternal() {}
  union {
    AckLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckLoginDefaultTypeInternal _AckLogin_default_instance_;
constexpr ReqLogout::ReqLogout(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_(0){}
struct ReqLogoutDefaultTypeInternal {
  constexpr ReqLogoutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqLogoutDefaultTypeInternal() {}
  union {
    ReqLogout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqLogoutDefaultTypeInternal _ReqLogout_default_instance_;
constexpr AckLogout::AckLogout(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , channel_(0){}
struct AckLogoutDefaultTypeInternal {
  constexpr AckLogoutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckLogoutDefaultTypeInternal() {}
  union {
    AckLogout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckLogoutDefaultTypeInternal _AckLogout_default_instance_;
constexpr ServerInfo::ServerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_id_(0)
  , wait_count_(0)
  , status_(0)
{}
struct ServerInfoDefaultTypeInternal {
  constexpr ServerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerInfoDefaultTypeInternal() {}
  union {
    ServerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
constexpr ReqConnectWorld::ReqConnectWorld(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_(nullptr)
  , world_id_(0)
  , login_id_(0){}
struct ReqConnectWorldDefaultTypeInternal {
  constexpr ReqConnectWorldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqConnectWorldDefaultTypeInternal() {}
  union {
    ReqConnectWorld _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqConnectWorldDefaultTypeInternal _ReqConnectWorld_default_instance_;
constexpr AckConnectWorldResult::AckConnectWorldResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , world_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , world_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_(nullptr)
  , world_id_(0)
  , login_id_(0)
  , world_port_(0){}
struct AckConnectWorldResultDefaultTypeInternal {
  constexpr AckConnectWorldResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckConnectWorldResultDefaultTypeInternal() {}
  union {
    AckConnectWorldResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckConnectWorldResultDefaultTypeInternal _AckConnectWorldResult_default_instance_;
constexpr ReqVerifyJwt::ReqVerifyJwt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : jwt_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , world_id_(0){}
struct ReqVerifyJwtDefaultTypeInternal {
  constexpr ReqVerifyJwtDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqVerifyJwtDefaultTypeInternal() {}
  union {
    ReqVerifyJwt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqVerifyJwtDefaultTypeInternal _ReqVerifyJwt_default_instance_;
constexpr AckVerifyJwt::AckVerifyJwt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : security_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , security_iv_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_id_(nullptr){}
struct AckVerifyJwtDefaultTypeInternal {
  constexpr AckVerifyJwtDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckVerifyJwtDefaultTypeInternal() {}
  union {
    AckVerifyJwt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckVerifyJwtDefaultTypeInternal _AckVerifyJwt_default_instance_;
constexpr ReqAckKickFromWorld::ReqAckKickFromWorld(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_digital_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_client_id_(nullptr)
  , target_gate_id_(0){}
struct ReqAckKickFromWorldDefaultTypeInternal {
  constexpr ReqAckKickFromWorldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAckKickFromWorldDefaultTypeInternal() {}
  union {
    ReqAckKickFromWorld _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAckKickFromWorldDefaultTypeInternal _ReqAckKickFromWorld_default_instance_;
constexpr ReqLeaveGame::ReqLeaveGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , client_id_(nullptr)
  , game_id_(0){}
struct ReqLeaveGameDefaultTypeInternal {
  constexpr ReqLeaveGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqLeaveGameDefaultTypeInternal() {}
  union {
    ReqLeaveGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqLeaveGameDefaultTypeInternal _ReqLeaveGame_default_instance_;
constexpr AckLeaveGame::AckLeaveGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , client_id_(nullptr)
  , game_id_(0){}
struct AckLeaveGameDefaultTypeInternal {
  constexpr AckLeaveGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckLeaveGameDefaultTypeInternal() {}
  union {
    AckLeaveGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckLeaveGameDefaultTypeInternal _AckLeaveGame_default_instance_;
constexpr ReqEnterGame::ReqEnterGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , digital_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_info_(nullptr){}
struct ReqEnterGameDefaultTypeInternal {
  constexpr ReqEnterGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqEnterGameDefaultTypeInternal() {}
  union {
    ReqEnterGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqEnterGameDefaultTypeInternal _ReqEnterGame_default_instance_;
constexpr ReqPlayerLite::ReqPlayerLite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , digital_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReqPlayerLiteDefaultTypeInternal {
  constexpr ReqPlayerLiteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqPlayerLiteDefaultTypeInternal() {}
  union {
    ReqPlayerLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqPlayerLiteDefaultTypeInternal _ReqPlayerLite_default_instance_;
constexpr ReqUpdateAccountLastLoginInfo::ReqUpdateAccountLastLoginInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dev_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , zone_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , login_ts_(int64_t{0}){}
struct ReqUpdateAccountLastLoginInfoDefaultTypeInternal {
  constexpr ReqUpdateAccountLastLoginInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqUpdateAccountLastLoginInfoDefaultTypeInternal() {}
  union {
    ReqUpdateAccountLastLoginInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqUpdateAccountLastLoginInfoDefaultTypeInternal _ReqUpdateAccountLastLoginInfo_default_instance_;
constexpr PlayerLiteInfo::PlayerLiteInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , digital_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , zone_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_frame_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , level_(0)
  , last_offline_time_(0){}
struct PlayerLiteInfoDefaultTypeInternal {
  constexpr PlayerLiteInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerLiteInfoDefaultTypeInternal() {}
  union {
    PlayerLiteInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerLiteInfoDefaultTypeInternal _PlayerLiteInfo_default_instance_;
constexpr AckPlayerLite::AckPlayerLite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_data_(nullptr){}
struct AckPlayerLiteDefaultTypeInternal {
  constexpr AckPlayerLiteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckPlayerLiteDefaultTypeInternal() {}
  union {
    AckPlayerLite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckPlayerLiteDefaultTypeInternal _AckPlayerLite_default_instance_;
constexpr ReqUpdateAccountPlayer::ReqUpdateAccountPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , zone_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReqUpdateAccountPlayerDefaultTypeInternal {
  constexpr ReqUpdateAccountPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqUpdateAccountPlayerDefaultTypeInternal() {}
  union {
    ReqUpdateAccountPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqUpdateAccountPlayerDefaultTypeInternal _ReqUpdateAccountPlayer_default_instance_;
constexpr ReqLoadPlayerData::ReqLoadPlayerData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqLoadPlayerDataDefaultTypeInternal {
  constexpr ReqLoadPlayerDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqLoadPlayerDataDefaultTypeInternal() {}
  union {
    ReqLoadPlayerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqLoadPlayerDataDefaultTypeInternal _ReqLoadPlayerData_default_instance_;
constexpr AckLoadPlayerData::AckLoadPlayerData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_pack_(nullptr){}
struct AckLoadPlayerDataDefaultTypeInternal {
  constexpr AckLoadPlayerDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckLoadPlayerDataDefaultTypeInternal() {}
  union {
    AckLoadPlayerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckLoadPlayerDataDefaultTypeInternal _AckLoadPlayerData_default_instance_;
constexpr PlayerDataPack::PlayerDataPack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , property_(nullptr)
  , record_(nullptr){}
struct PlayerDataPackDefaultTypeInternal {
  constexpr PlayerDataPackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerDataPackDefaultTypeInternal() {}
  union {
    PlayerDataPack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerDataPackDefaultTypeInternal _PlayerDataPack_default_instance_;
constexpr ServerHeartBeat::ServerHeartBeat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : count_(0){}
struct ServerHeartBeatDefaultTypeInternal {
  constexpr ServerHeartBeatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerHeartBeatDefaultTypeInternal() {}
  union {
    ServerHeartBeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerHeartBeatDefaultTypeInternal _ServerHeartBeat_default_instance_;
constexpr PlayerOnlineNotify::PlayerOnlineNotify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , digital_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_frame_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , client_id_(nullptr)
  , game_id_(0)
  , proxy_id_(0)
  , level_(0){}
struct PlayerOnlineNotifyDefaultTypeInternal {
  constexpr PlayerOnlineNotifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerOnlineNotifyDefaultTypeInternal() {}
  union {
    PlayerOnlineNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerOnlineNotifyDefaultTypeInternal _PlayerOnlineNotify_default_instance_;
constexpr PlayerOfflineNotify::PlayerOfflineNotify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , digital_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_frame_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , client_id_(nullptr)
  , game_id_(0)
  , proxy_id_(0)
  , level_(0){}
struct PlayerOfflineNotifyDefaultTypeInternal {
  constexpr PlayerOfflineNotifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerOfflineNotifyDefaultTypeInternal() {}
  union {
    PlayerOfflineNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerOfflineNotifyDefaultTypeInternal _PlayerOfflineNotify_default_instance_;
constexpr ReqAckSetGameServerState::ReqAckSetGameServerState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_state_(0)

  , kick_off_all_(0){}
struct ReqAckSetGameServerStateDefaultTypeInternal {
  constexpr ReqAckSetGameServerStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAckSetGameServerStateDefaultTypeInternal() {}
  union {
    ReqAckSetGameServerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAckSetGameServerStateDefaultTypeInternal _ReqAckSetGameServerState_default_instance_;
constexpr ReqAckRefreshConfig::ReqAckRefreshConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ts_(int64_t{0}){}
struct ReqAckRefreshConfigDefaultTypeInternal {
  constexpr ReqAckRefreshConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAckRefreshConfigDefaultTypeInternal() {}
  union {
    ReqAckRefreshConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAckRefreshConfigDefaultTypeInternal _ReqAckRefreshConfig_default_instance_;
constexpr ReqReconnect::ReqReconnect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , client_id_(nullptr){}
struct ReqReconnectDefaultTypeInternal {
  constexpr ReqReconnectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqReconnectDefaultTypeInternal() {}
  union {
    ReqReconnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqReconnectDefaultTypeInternal _ReqReconnect_default_instance_;
constexpr ReqRecord::ReqRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , req_type_(0)

  , cursor_(0)
  , count_(0){}
struct ReqRecordDefaultTypeInternal {
  constexpr ReqRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqRecordDefaultTypeInternal() {}
  union {
    ReqRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqRecordDefaultTypeInternal _ReqRecord_default_instance_;
constexpr SyncQueueupRegStatus::SyncQueueupRegStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_server_id_(0)
  , is_registered_(0)
  , keep_online_status_(0)
  , keep_online_sec_(0){}
struct SyncQueueupRegStatusDefaultTypeInternal {
  constexpr SyncQueueupRegStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncQueueupRegStatusDefaultTypeInternal() {}
  union {
    SyncQueueupRegStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncQueueupRegStatusDefaultTypeInternal _SyncQueueupRegStatus_default_instance_;
constexpr SyncWorldState::SyncWorldState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_num_(0){}
struct SyncWorldStateDefaultTypeInternal {
  constexpr SyncWorldStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SyncWorldStateDefaultTypeInternal() {}
  union {
    SyncWorldState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SyncWorldStateDefaultTypeInternal _SyncWorldState_default_instance_;
constexpr ReqRegister::ReqRegister(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReqRegisterDefaultTypeInternal {
  constexpr ReqRegisterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqRegisterDefaultTypeInternal() {}
  union {
    ReqRegister _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqRegisterDefaultTypeInternal _ReqRegister_default_instance_;
constexpr AckRegister::AckRegister(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckRegisterDefaultTypeInternal {
  constexpr AckRegisterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckRegisterDefaultTypeInternal() {}
  union {
    AckRegister _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckRegisterDefaultTypeInternal _AckRegister_default_instance_;
}  // namespace KWMsg
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kwmsgpregame_2eproto[35];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kwmsgpregame_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kwmsgpregame_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kwmsgpregame_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfoReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfoReport, server_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfoReport, server_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfoReport, zone_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfoReport, zone_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfoReport, server_ip_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfoReport, server_public_ip_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfoReport, server_port_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfoReport, server_max_online_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfoReport, server_cur_count_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfoReport, server_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfoReport, server_state_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfoReport, server_show_state_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfoReport, server_open_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfoReportList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfoReportList, server_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckEventResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckEventResult, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckEventResult, event_object_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckEventResult, event_client_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckEventResult, user_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLogin, channel_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLogin, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLogin, password_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLogin, sign_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLogin, client_version_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLogin, device_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLogin, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLogin, channel_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLogin, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLogin, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLogout, channel_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLogout, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLogout, sign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLogout, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLogout, channel_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLogout, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfo, server_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfo, wait_count_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerInfo, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqConnectWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqConnectWorld, world_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqConnectWorld, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqConnectWorld, sender_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqConnectWorld, login_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckConnectWorldResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckConnectWorldResult, world_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckConnectWorldResult, sender_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckConnectWorldResult, login_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckConnectWorldResult, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckConnectWorldResult, world_ip_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckConnectWorldResult, world_port_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckConnectWorldResult, world_key_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckConnectWorldResult, ticket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqVerifyJwt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqVerifyJwt, jwt_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqVerifyJwt, world_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqVerifyJwt, ticket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckVerifyJwt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckVerifyJwt, client_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckVerifyJwt, security_key_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckVerifyJwt, security_iv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckKickFromWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckKickFromWorld, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckKickFromWorld, target_digital_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckKickFromWorld, target_gate_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckKickFromWorld, target_client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLeaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLeaveGame, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLeaveGame, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLeaveGame, client_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLeaveGame, game_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLeaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLeaveGame, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLeaveGame, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLeaveGame, client_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLeaveGame, game_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterGame, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterGame, digital_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEnterGame, device_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqPlayerLite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqPlayerLite, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqPlayerLite, digital_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdateAccountLastLoginInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdateAccountLastLoginInfo, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdateAccountLastLoginInfo, dev_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdateAccountLastLoginInfo, zone_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdateAccountLastLoginInfo, login_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerLiteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerLiteInfo, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerLiteInfo, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerLiteInfo, digital_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerLiteInfo, nickname_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerLiteInfo, zone_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerLiteInfo, level_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerLiteInfo, last_offline_time_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerLiteInfo, avatar_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerLiteInfo, avatar_frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPlayerLite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPlayerLite, player_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdateAccountPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdateAccountPlayer, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdateAccountPlayer, zone_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdateAccountPlayer, json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLoadPlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLoadPlayerData, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLoadPlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckLoadPlayerData, data_pack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerDataPack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerDataPack, id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerDataPack, property_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerDataPack, record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ServerHeartBeat, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOnlineNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOnlineNotify, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOnlineNotify, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOnlineNotify, digital_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOnlineNotify, game_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOnlineNotify, proxy_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOnlineNotify, client_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOnlineNotify, nickname_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOnlineNotify, avatar_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOnlineNotify, avatar_frame_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOnlineNotify, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOfflineNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOfflineNotify, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOfflineNotify, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOfflineNotify, digital_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOfflineNotify, game_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOfflineNotify, proxy_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOfflineNotify, client_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOfflineNotify, nickname_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOfflineNotify, avatar_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOfflineNotify, avatar_frame_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerOfflineNotify, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckSetGameServerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckSetGameServerState, server_state_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckSetGameServerState, kick_off_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckRefreshConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckRefreshConfig, ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReconnect, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReconnect, client_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqReconnect, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRecord, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRecord, req_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRecord, record_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRecord, cursor_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRecord, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncQueueupRegStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncQueueupRegStatus, target_server_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncQueueupRegStatus, is_registered_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncQueueupRegStatus, keep_online_status_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncQueueupRegStatus, keep_online_sec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncWorldState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::SyncWorldState, role_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRegister, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRegister, name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqRegister, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRegister, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRegister, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckRegister, name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::KWMsg::ServerInfoReport)},
  { 18, -1, sizeof(::KWMsg::ServerInfoReportList)},
  { 24, -1, sizeof(::KWMsg::AckEventResult)},
  { 33, -1, sizeof(::KWMsg::ReqLogin)},
  { 44, -1, sizeof(::KWMsg::AckLogin)},
  { 53, -1, sizeof(::KWMsg::ReqLogout)},
  { 61, -1, sizeof(::KWMsg::AckLogout)},
  { 69, -1, sizeof(::KWMsg::ServerInfo)},
  { 78, -1, sizeof(::KWMsg::ReqConnectWorld)},
  { 87, -1, sizeof(::KWMsg::AckConnectWorldResult)},
  { 100, -1, sizeof(::KWMsg::ReqVerifyJwt)},
  { 108, -1, sizeof(::KWMsg::AckVerifyJwt)},
  { 116, -1, sizeof(::KWMsg::ReqAckKickFromWorld)},
  { 125, -1, sizeof(::KWMsg::ReqLeaveGame)},
  { 134, -1, sizeof(::KWMsg::AckLeaveGame)},
  { 143, -1, sizeof(::KWMsg::ReqEnterGame)},
  { 151, -1, sizeof(::KWMsg::ReqPlayerLite)},
  { 158, -1, sizeof(::KWMsg::ReqUpdateAccountLastLoginInfo)},
  { 167, -1, sizeof(::KWMsg::PlayerLiteInfo)},
  { 181, -1, sizeof(::KWMsg::AckPlayerLite)},
  { 187, -1, sizeof(::KWMsg::ReqUpdateAccountPlayer)},
  { 195, -1, sizeof(::KWMsg::ReqLoadPlayerData)},
  { 201, -1, sizeof(::KWMsg::AckLoadPlayerData)},
  { 207, -1, sizeof(::KWMsg::PlayerDataPack)},
  { 215, -1, sizeof(::KWMsg::ServerHeartBeat)},
  { 221, -1, sizeof(::KWMsg::PlayerOnlineNotify)},
  { 236, -1, sizeof(::KWMsg::PlayerOfflineNotify)},
  { 251, -1, sizeof(::KWMsg::ReqAckSetGameServerState)},
  { 258, -1, sizeof(::KWMsg::ReqAckRefreshConfig)},
  { 264, -1, sizeof(::KWMsg::ReqReconnect)},
  { 272, -1, sizeof(::KWMsg::ReqRecord)},
  { 282, -1, sizeof(::KWMsg::SyncQueueupRegStatus)},
  { 291, -1, sizeof(::KWMsg::SyncWorldState)},
  { 297, -1, sizeof(::KWMsg::ReqRegister)},
  { 305, -1, sizeof(::KWMsg::AckRegister)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ServerInfoReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ServerInfoReportList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckEventResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqLogout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckLogout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqConnectWorld_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckConnectWorldResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqVerifyJwt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckVerifyJwt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAckKickFromWorld_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqLeaveGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckLeaveGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqEnterGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqPlayerLite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqUpdateAccountLastLoginInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PlayerLiteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckPlayerLite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqUpdateAccountPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqLoadPlayerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckLoadPlayerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PlayerDataPack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ServerHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PlayerOnlineNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PlayerOfflineNotify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAckSetGameServerState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAckRefreshConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqReconnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncQueueupRegStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_SyncWorldState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqRegister_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckRegister_default_instance_),
};

const char descriptor_table_protodef_kwmsgpregame_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022kwmsgpregame.proto\022\005KWMsg\032\021kwmsgdefine"
  ".proto\032\017kwmsgbase.proto\"\343\002\n\020ServerInfoRe"
  "port\022\021\n\tserver_id\030\001 \001(\005\022\023\n\013server_name\030\002"
  " \001(\014\022\017\n\007zone_id\030\003 \001(\014\022\021\n\tzone_name\030\004 \001(\014"
  "\022\021\n\tserver_ip\030\005 \001(\014\022\030\n\020server_public_ip\030"
  "\006 \001(\014\022\023\n\013server_port\030\007 \001(\005\022\031\n\021server_max"
  "_online\030\010 \001(\005\022\030\n\020server_cur_count\030\t \001(\005\022"
  "\023\n\013server_type\030\n \001(\005\022)\n\014server_state\030\013 \001"
  "(\0162\023.KWMsg.EServerState\0222\n\021server_show_s"
  "tate\030\014 \001(\0162\027.KWMsg.EServerShowState\022\030\n\020s"
  "erver_open_time\030\r \001(\005\"D\n\024ServerInfoRepor"
  "tList\022,\n\013server_list\030\001 \003(\0132\027.KWMsg.Serve"
  "rInfoReport\"\226\001\n\016AckEventResult\022)\n\nevent_"
  "code\030\001 \001(\0162\025.KWMsg.EGameEventCode\022\"\n\014eve"
  "nt_object\030\002 \001(\0132\014.KWMsg.Ident\022\"\n\014event_c"
  "lient\030\003 \001(\0132\014.KWMsg.Ident\022\021\n\tuser_data\030\004"
  " \001(\014\"\214\001\n\010ReqLogin\022\017\n\007channel\030\001 \001(\005\022\017\n\007ac"
  "count\030\002 \001(\014\022\020\n\010password\030\003 \001(\014\022\014\n\004sign\030\004 "
  "\001(\014\022\026\n\016client_version\030\005 \001(\005\022&\n\013device_in"
  "fo\030\006 \001(\0132\021.KWMsg.DeviceInfo\"c\n\010AckLogin\022"
  ")\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventCo"
  "de\022\017\n\007channel\030\002 \001(\005\022\017\n\007account\030\003 \001(\014\022\n\n\002"
  "ip\030\004 \001(\014\";\n\tReqLogout\022\017\n\007channel\030\001 \001(\005\022\017"
  "\n\007account\030\002 \001(\014\022\014\n\004sign\030\003 \001(\014\"X\n\tAckLogo"
  "ut\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEven"
  "tCode\022\017\n\007channel\030\002 \001(\005\022\017\n\007account\030\003 \001(\014\""
  "f\n\nServerInfo\022\021\n\tserver_id\030\001 \001(\005\022\014\n\004name"
  "\030\002 \001(\014\022\022\n\nwait_count\030\003 \001(\005\022#\n\006status\030\004 \001"
  "(\0162\023.KWMsg.EServerState\"d\n\017ReqConnectWor"
  "ld\022\020\n\010world_id\030\001 \001(\005\022\017\n\007account\030\002 \001(\014\022\034\n"
  "\006sender\030\003 \001(\0132\014.KWMsg.Ident\022\020\n\010login_id\030"
  "\004 \001(\005\"\263\001\n\025AckConnectWorldResult\022\020\n\010world"
  "_id\030\001 \001(\005\022\034\n\006sender\030\002 \001(\0132\014.KWMsg.Ident\022"
  "\020\n\010login_id\030\003 \001(\005\022\017\n\007account\030\004 \001(\014\022\020\n\010wo"
  "rld_ip\030\005 \001(\014\022\022\n\nworld_port\030\006 \001(\005\022\021\n\tworl"
  "d_key\030\007 \001(\014\022\016\n\006ticket\030\010 \001(\014\"=\n\014ReqVerify"
  "Jwt\022\013\n\003jwt\030\001 \001(\014\022\020\n\010world_id\030\002 \001(\005\022\016\n\006ti"
  "cket\030\003 \001(\014\"Z\n\014AckVerifyJwt\022\037\n\tclient_id\030"
  "\001 \001(\0132\014.KWMsg.Ident\022\024\n\014security_key\030\002 \001("
  "\014\022\023\n\013security_iv\030\003 \001(\014\"\201\001\n\023ReqAckKickFro"
  "mWorld\022\017\n\007account\030\001 \001(\014\022\031\n\021target_digita"
  "l_id\030\002 \001(\014\022\026\n\016target_gate_id\030\003 \001(\005\022&\n\020ta"
  "rget_client_id\030\004 \001(\0132\014.KWMsg.Ident\"r\n\014Re"
  "qLeaveGame\022\017\n\007account\030\001 \001(\014\022\037\n\tplayer_id"
  "\030\002 \001(\0132\014.KWMsg.Ident\022\037\n\tclient_id\030\003 \001(\0132"
  "\014.KWMsg.Ident\022\017\n\007game_id\030\004 \001(\005\"r\n\014AckLea"
  "veGame\022\017\n\007account\030\001 \001(\014\022\037\n\tplayer_id\030\002 \001"
  "(\0132\014.KWMsg.Ident\022\037\n\tclient_id\030\003 \001(\0132\014.KW"
  "Msg.Ident\022\017\n\007game_id\030\004 \001(\005\"[\n\014ReqEnterGa"
  "me\022\017\n\007account\030\001 \001(\014\022\022\n\ndigital_id\030\002 \001(\014\022"
  "&\n\013device_info\030\003 \001(\0132\021.KWMsg.DeviceInfo\""
  "4\n\rReqPlayerLite\022\017\n\007account\030\001 \001(\014\022\022\n\ndig"
  "ital_id\030\002 \001(\014\"c\n\035ReqUpdateAccountLastLog"
  "inInfo\022\017\n\007account\030\001 \001(\014\022\016\n\006dev_id\030\002 \001(\014\022"
  "\017\n\007zone_id\030\003 \001(\014\022\020\n\010login_ts\030\004 \001(\003\"\311\001\n\016P"
  "layerLiteInfo\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg"
  ".Ident\022\017\n\007account\030\002 \001(\014\022\022\n\ndigital_id\030\003 "
  "\001(\014\022\020\n\010nickname\030\004 \001(\014\022\017\n\007zone_id\030\005 \001(\014\022\r"
  "\n\005level\030\006 \001(\005\022\031\n\021last_offline_time\030\007 \001(\005"
  "\022\016\n\006avatar\030\010 \001(\014\022\024\n\014avatar_frame\030\t \001(\014\";"
  "\n\rAckPlayerLite\022*\n\013player_data\030\001 \001(\0132\025.K"
  "WMsg.PlayerLiteInfo\"H\n\026ReqUpdateAccountP"
  "layer\022\017\n\007account\030\001 \001(\014\022\017\n\007zone_id\030\002 \001(\014\022"
  "\014\n\004json\030\003 \001(\014\"4\n\021ReqLoadPlayerData\022\037\n\tpl"
  "ayer_id\030\001 \001(\0132\014.KWMsg.Ident\"=\n\021AckLoadPl"
  "ayerData\022(\n\tdata_pack\030\001 \001(\0132\025.KWMsg.Play"
  "erDataPack\"\200\001\n\016PlayerDataPack\022\030\n\002id\030\001 \001("
  "\0132\014.KWMsg.Ident\022+\n\010property\030\002 \001(\0132\031.KWMs"
  "g.ObjectPropertyList\022\'\n\006record\030\003 \001(\0132\027.K"
  "WMsg.ObjectRecordList\" \n\017ServerHeartBeat"
  "\022\r\n\005count\030\001 \001(\005\"\345\001\n\022PlayerOnlineNotify\022\037"
  "\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\017\n\007accou"
  "nt\030\002 \001(\014\022\022\n\ndigital_id\030\003 \001(\014\022\017\n\007game_id\030"
  "\004 \001(\005\022\020\n\010proxy_id\030\005 \001(\005\022\037\n\tclient_id\030\006 \001"
  "(\0132\014.KWMsg.Ident\022\020\n\010nickname\030\007 \001(\014\022\016\n\006av"
  "atar\030\010 \001(\014\022\024\n\014avatar_frame\030\t \001(\014\022\r\n\005leve"
  "l\030\n \001(\005\"\346\001\n\023PlayerOfflineNotify\022\037\n\tplaye"
  "r_id\030\001 \001(\0132\014.KWMsg.Ident\022\017\n\007account\030\002 \001("
  "\014\022\022\n\ndigital_id\030\003 \001(\014\022\017\n\007game_id\030\004 \001(\005\022\020"
  "\n\010proxy_id\030\005 \001(\005\022\037\n\tclient_id\030\006 \001(\0132\014.KW"
  "Msg.Ident\022\020\n\010nickname\030\007 \001(\014\022\016\n\006avatar\030\010 "
  "\001(\014\022\024\n\014avatar_frame\030\t \001(\014\022\r\n\005level\030\n \001(\005"
  "\"[\n\030ReqAckSetGameServerState\022)\n\014server_s"
  "tate\030\001 \001(\0162\023.KWMsg.EServerState\022\024\n\014kick_"
  "off_all\030\002 \001(\005\"!\n\023ReqAckRefreshConfig\022\n\n\002"
  "ts\030\001 \001(\003\"_\n\014ReqReconnect\022\037\n\tplayer_id\030\001 "
  "\001(\0132\014.KWMsg.Ident\022\037\n\tclient_id\030\002 \001(\0132\014.K"
  "WMsg.Ident\022\r\n\005token\030\003 \001(\014\"\335\001\n\tReqRecord\022"
  "\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\0221\n\010req_"
  "type\030\002 \001(\0162\037.KWMsg.ReqRecord.EAskRecordT"
  "ype\022\023\n\013record_name\030\003 \001(\014\022\016\n\006cursor\030\004 \001(\005"
  "\022\r\n\005count\030\005 \001(\005\"H\n\016EAskRecordType\022\022\n\016EAR"
  "T_OPEN_PAGE\020\000\022\024\n\020EART_OPEN_NOPAGE\020\001\022\014\n\010E"
  "ART_END\020\002\"|\n\024SyncQueueupRegStatus\022\030\n\020tar"
  "get_server_id\030\001 \001(\005\022\025\n\ris_registered\030\002 \001"
  "(\005\022\032\n\022keep_online_status\030\003 \001(\005\022\027\n\017keep_o"
  "nline_sec\030\004 \001(\005\"\"\n\016SyncWorldState\022\020\n\010rol"
  "e_num\030\001 \001(\005\">\n\013ReqRegister\022\017\n\007account\030\001 "
  "\001(\014\022\014\n\004name\030\002 \001(\014\022\020\n\010password\030\003 \001(\014\"W\n\013A"
  "ckRegister\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.E"
  "GameEventCode\022\017\n\007account\030\002 \001(\014\022\014\n\004name\030\003"
  " \001(\014*Z\n\014EServerState\022\r\n\tEST_CRASH\020\000\022\016\n\nE"
  "ST_NORMAL\020\001\022\014\n\010EST_BUSY\020\002\022\014\n\010EST_FIRE\020\003\022"
  "\017\n\013EST_MAINTEN\020\004*S\n\020EServerShowState\022\020\n\014"
  "ESST_MAINTEN\020\000\022\r\n\tESST_FULL\020\001\022\r\n\tESST_FI"
  "RE\020\002\022\017\n\013ESST_NORMAL\020\003B\nZ\010./;KWMsgb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kwmsgpregame_2eproto_deps[2] = {
  &::descriptor_table_kwmsgbase_2eproto,
  &::descriptor_table_kwmsgdefine_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kwmsgpregame_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kwmsgpregame_2eproto = {
  false, false, 4241, descriptor_table_protodef_kwmsgpregame_2eproto, "kwmsgpregame.proto", 
  &descriptor_table_kwmsgpregame_2eproto_once, descriptor_table_kwmsgpregame_2eproto_deps, 2, 35,
  schemas, file_default_instances, TableStruct_kwmsgpregame_2eproto::offsets,
  file_level_metadata_kwmsgpregame_2eproto, file_level_enum_descriptors_kwmsgpregame_2eproto, file_level_service_descriptors_kwmsgpregame_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_kwmsgpregame_2eproto_getter() {
  return &descriptor_table_kwmsgpregame_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_kwmsgpregame_2eproto(&descriptor_table_kwmsgpregame_2eproto);
namespace KWMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqRecord_EAskRecordType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgpregame_2eproto);
  return file_level_enum_descriptors_kwmsgpregame_2eproto[0];
}
bool ReqRecord_EAskRecordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReqRecord_EAskRecordType ReqRecord::EART_OPEN_PAGE;
constexpr ReqRecord_EAskRecordType ReqRecord::EART_OPEN_NOPAGE;
constexpr ReqRecord_EAskRecordType ReqRecord::EART_END;
constexpr ReqRecord_EAskRecordType ReqRecord::EAskRecordType_MIN;
constexpr ReqRecord_EAskRecordType ReqRecord::EAskRecordType_MAX;
constexpr int ReqRecord::EAskRecordType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EServerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgpregame_2eproto);
  return file_level_enum_descriptors_kwmsgpregame_2eproto[1];
}
bool EServerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EServerShowState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgpregame_2eproto);
  return file_level_enum_descriptors_kwmsgpregame_2eproto[2];
}
bool EServerShowState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ServerInfoReport::_Internal {
 public:
};

ServerInfoReport::ServerInfoReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ServerInfoReport)
}
ServerInfoReport::ServerInfoReport(const ServerInfoReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_name().empty()) {
    server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_name(), 
      GetArenaForAllocation());
  }
  zone_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_zone_id().empty()) {
    zone_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_zone_id(), 
      GetArenaForAllocation());
  }
  zone_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_zone_name().empty()) {
    zone_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_zone_name(), 
      GetArenaForAllocation());
  }
  server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_ip().empty()) {
    server_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_ip(), 
      GetArenaForAllocation());
  }
  server_public_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_public_ip().empty()) {
    server_public_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_public_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_open_time_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(server_open_time_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ServerInfoReport)
}

void ServerInfoReport::SharedCtor() {
server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
zone_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
zone_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
server_public_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_open_time_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(server_open_time_));
}

ServerInfoReport::~ServerInfoReport() {
  // @@protoc_insertion_point(destructor:KWMsg.ServerInfoReport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerInfoReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zone_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zone_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_public_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerInfoReport::ArenaDtor(void* object) {
  ServerInfoReport* _this = reinterpret_cast< ServerInfoReport* >(object);
  (void)_this;
}
void ServerInfoReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerInfoReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerInfoReport::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ServerInfoReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_name_.ClearToEmpty();
  zone_id_.ClearToEmpty();
  zone_name_.ClearToEmpty();
  server_ip_.ClearToEmpty();
  server_public_ip_.ClearToEmpty();
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_open_time_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(server_open_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerInfoReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes server_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_server_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes zone_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_zone_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes zone_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_zone_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes server_ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_server_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes server_public_ip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_server_public_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_max_online = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          server_max_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_cur_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          server_cur_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          server_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.EServerState server_state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_server_state(static_cast<::KWMsg::EServerState>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.EServerShowState server_show_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_server_show_state(static_cast<::KWMsg::EServerShowState>(val));
        } else goto handle_unusual;
        continue;
      // int32 server_open_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          server_open_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInfoReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ServerInfoReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // bytes server_name = 2;
  if (!this->server_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_server_name(), target);
  }

  // bytes zone_id = 3;
  if (!this->zone_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_zone_id(), target);
  }

  // bytes zone_name = 4;
  if (!this->zone_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_zone_name(), target);
  }

  // bytes server_ip = 5;
  if (!this->server_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_server_ip(), target);
  }

  // bytes server_public_ip = 6;
  if (!this->server_public_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_server_public_ip(), target);
  }

  // int32 server_port = 7;
  if (this->server_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_server_port(), target);
  }

  // int32 server_max_online = 8;
  if (this->server_max_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_server_max_online(), target);
  }

  // int32 server_cur_count = 9;
  if (this->server_cur_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_server_cur_count(), target);
  }

  // int32 server_type = 10;
  if (this->server_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_server_type(), target);
  }

  // .KWMsg.EServerState server_state = 11;
  if (this->server_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_server_state(), target);
  }

  // .KWMsg.EServerShowState server_show_state = 12;
  if (this->server_show_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_server_show_state(), target);
  }

  // int32 server_open_time = 13;
  if (this->server_open_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_server_open_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ServerInfoReport)
  return target;
}

size_t ServerInfoReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ServerInfoReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes server_name = 2;
  if (!this->server_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_server_name());
  }

  // bytes zone_id = 3;
  if (!this->zone_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_zone_id());
  }

  // bytes zone_name = 4;
  if (!this->zone_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_zone_name());
  }

  // bytes server_ip = 5;
  if (!this->server_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_server_ip());
  }

  // bytes server_public_ip = 6;
  if (!this->server_public_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_server_public_ip());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 server_port = 7;
  if (this->server_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_port());
  }

  // int32 server_max_online = 8;
  if (this->server_max_online() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_max_online());
  }

  // int32 server_cur_count = 9;
  if (this->server_cur_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_cur_count());
  }

  // int32 server_type = 10;
  if (this->server_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_type());
  }

  // .KWMsg.EServerState server_state = 11;
  if (this->server_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_server_state());
  }

  // .KWMsg.EServerShowState server_show_state = 12;
  if (this->server_show_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_server_show_state());
  }

  // int32 server_open_time = 13;
  if (this->server_open_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_open_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInfoReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ServerInfoReport)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfoReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerInfoReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ServerInfoReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ServerInfoReport)
    MergeFrom(*source);
  }
}

void ServerInfoReport::MergeFrom(const ServerInfoReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ServerInfoReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.server_name().empty()) {
    _internal_set_server_name(from._internal_server_name());
  }
  if (!from.zone_id().empty()) {
    _internal_set_zone_id(from._internal_zone_id());
  }
  if (!from.zone_name().empty()) {
    _internal_set_zone_name(from._internal_zone_name());
  }
  if (!from.server_ip().empty()) {
    _internal_set_server_ip(from._internal_server_ip());
  }
  if (!from.server_public_ip().empty()) {
    _internal_set_server_public_ip(from._internal_server_public_ip());
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.server_port() != 0) {
    _internal_set_server_port(from._internal_server_port());
  }
  if (from.server_max_online() != 0) {
    _internal_set_server_max_online(from._internal_server_max_online());
  }
  if (from.server_cur_count() != 0) {
    _internal_set_server_cur_count(from._internal_server_cur_count());
  }
  if (from.server_type() != 0) {
    _internal_set_server_type(from._internal_server_type());
  }
  if (from.server_state() != 0) {
    _internal_set_server_state(from._internal_server_state());
  }
  if (from.server_show_state() != 0) {
    _internal_set_server_show_state(from._internal_server_show_state());
  }
  if (from.server_open_time() != 0) {
    _internal_set_server_open_time(from._internal_server_open_time());
  }
}

void ServerInfoReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ServerInfoReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoReport::CopyFrom(const ServerInfoReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ServerInfoReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoReport::IsInitialized() const {
  return true;
}

void ServerInfoReport::InternalSwap(ServerInfoReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_name_, GetArenaForAllocation(),
      &other->server_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &zone_id_, GetArenaForAllocation(),
      &other->zone_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &zone_name_, GetArenaForAllocation(),
      &other->zone_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_ip_, GetArenaForAllocation(),
      &other->server_ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_public_ip_, GetArenaForAllocation(),
      &other->server_public_ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerInfoReport, server_open_time_)
      + sizeof(ServerInfoReport::server_open_time_)
      - PROTOBUF_FIELD_OFFSET(ServerInfoReport, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfoReport::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[0]);
}

// ===================================================================

class ServerInfoReportList::_Internal {
 public:
};

ServerInfoReportList::ServerInfoReportList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  server_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ServerInfoReportList)
}
ServerInfoReportList::ServerInfoReportList(const ServerInfoReportList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      server_list_(from.server_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.ServerInfoReportList)
}

void ServerInfoReportList::SharedCtor() {
}

ServerInfoReportList::~ServerInfoReportList() {
  // @@protoc_insertion_point(destructor:KWMsg.ServerInfoReportList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerInfoReportList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerInfoReportList::ArenaDtor(void* object) {
  ServerInfoReportList* _this = reinterpret_cast< ServerInfoReportList* >(object);
  (void)_this;
}
void ServerInfoReportList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerInfoReportList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerInfoReportList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ServerInfoReportList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerInfoReportList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.ServerInfoReport server_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_server_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInfoReportList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ServerInfoReportList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.ServerInfoReport server_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_server_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_server_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ServerInfoReportList)
  return target;
}

size_t ServerInfoReportList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ServerInfoReportList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.ServerInfoReport server_list = 1;
  total_size += 1UL * this->_internal_server_list_size();
  for (const auto& msg : this->server_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInfoReportList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ServerInfoReportList)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfoReportList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerInfoReportList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ServerInfoReportList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ServerInfoReportList)
    MergeFrom(*source);
  }
}

void ServerInfoReportList::MergeFrom(const ServerInfoReportList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ServerInfoReportList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_list_.MergeFrom(from.server_list_);
}

void ServerInfoReportList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ServerInfoReportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoReportList::CopyFrom(const ServerInfoReportList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ServerInfoReportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoReportList::IsInitialized() const {
  return true;
}

void ServerInfoReportList::InternalSwap(ServerInfoReportList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  server_list_.InternalSwap(&other->server_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfoReportList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[1]);
}

// ===================================================================

class AckEventResult::_Internal {
 public:
  static const ::KWMsg::Ident& event_object(const AckEventResult* msg);
  static const ::KWMsg::Ident& event_client(const AckEventResult* msg);
};

const ::KWMsg::Ident&
AckEventResult::_Internal::event_object(const AckEventResult* msg) {
  return *msg->event_object_;
}
const ::KWMsg::Ident&
AckEventResult::_Internal::event_client(const AckEventResult* msg) {
  return *msg->event_client_;
}
void AckEventResult::clear_event_object() {
  if (GetArenaForAllocation() == nullptr && event_object_ != nullptr) {
    delete event_object_;
  }
  event_object_ = nullptr;
}
void AckEventResult::clear_event_client() {
  if (GetArenaForAllocation() == nullptr && event_client_ != nullptr) {
    delete event_client_;
  }
  event_client_ = nullptr;
}
AckEventResult::AckEventResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckEventResult)
}
AckEventResult::AckEventResult(const AckEventResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_data().empty()) {
    user_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_event_object()) {
    event_object_ = new ::KWMsg::Ident(*from.event_object_);
  } else {
    event_object_ = nullptr;
  }
  if (from._internal_has_event_client()) {
    event_client_ = new ::KWMsg::Ident(*from.event_client_);
  } else {
    event_client_ = nullptr;
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckEventResult)
}

void AckEventResult::SharedCtor() {
user_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_object_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_code_) -
    reinterpret_cast<char*>(&event_object_)) + sizeof(event_code_));
}

AckEventResult::~AckEventResult() {
  // @@protoc_insertion_point(destructor:KWMsg.AckEventResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckEventResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_object_;
  if (this != internal_default_instance()) delete event_client_;
}

void AckEventResult::ArenaDtor(void* object) {
  AckEventResult* _this = reinterpret_cast< AckEventResult* >(object);
  (void)_this;
}
void AckEventResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckEventResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckEventResult::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckEventResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && event_object_ != nullptr) {
    delete event_object_;
  }
  event_object_ = nullptr;
  if (GetArenaForAllocation() == nullptr && event_client_ != nullptr) {
    delete event_client_;
  }
  event_client_ = nullptr;
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckEventResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident event_object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident event_client = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_client(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes user_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckEventResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckEventResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // .KWMsg.Ident event_object = 2;
  if (this->has_event_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::event_object(this), target, stream);
  }

  // .KWMsg.Ident event_client = 3;
  if (this->has_event_client()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::event_client(this), target, stream);
  }

  // bytes user_data = 4;
  if (!this->user_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_user_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckEventResult)
  return target;
}

size_t AckEventResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckEventResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes user_data = 4;
  if (!this->user_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_data());
  }

  // .KWMsg.Ident event_object = 2;
  if (this->has_event_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_object_);
  }

  // .KWMsg.Ident event_client = 3;
  if (this->has_event_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_client_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckEventResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckEventResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AckEventResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckEventResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckEventResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckEventResult)
    MergeFrom(*source);
  }
}

void AckEventResult::MergeFrom(const AckEventResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckEventResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.user_data().empty()) {
    _internal_set_user_data(from._internal_user_data());
  }
  if (from.has_event_object()) {
    _internal_mutable_event_object()->::KWMsg::Ident::MergeFrom(from._internal_event_object());
  }
  if (from.has_event_client()) {
    _internal_mutable_event_client()->::KWMsg::Ident::MergeFrom(from._internal_event_client());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckEventResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEventResult::CopyFrom(const AckEventResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEventResult::IsInitialized() const {
  return true;
}

void AckEventResult::InternalSwap(AckEventResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_data_, GetArenaForAllocation(),
      &other->user_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckEventResult, event_code_)
      + sizeof(AckEventResult::event_code_)
      - PROTOBUF_FIELD_OFFSET(AckEventResult, event_object_)>(
          reinterpret_cast<char*>(&event_object_),
          reinterpret_cast<char*>(&other->event_object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckEventResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[2]);
}

// ===================================================================

class ReqLogin::_Internal {
 public:
  static const ::KWMsg::DeviceInfo& device_info(const ReqLogin* msg);
};

const ::KWMsg::DeviceInfo&
ReqLogin::_Internal::device_info(const ReqLogin* msg) {
  return *msg->device_info_;
}
void ReqLogin::clear_device_info() {
  if (GetArenaForAllocation() == nullptr && device_info_ != nullptr) {
    delete device_info_;
  }
  device_info_ = nullptr;
}
ReqLogin::ReqLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqLogin)
}
ReqLogin::ReqLogin(const ReqLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sign().empty()) {
    sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sign(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_device_info()) {
    device_info_ = new ::KWMsg::DeviceInfo(*from.device_info_);
  } else {
    device_info_ = nullptr;
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqLogin)
}

void ReqLogin::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&device_info_)) + sizeof(client_version_));
}

ReqLogin::~ReqLogin() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_info_;
}

void ReqLogin::ArenaDtor(void* object) {
  ReqLogin* _this = reinterpret_cast< ReqLogin* >(object);
  (void)_this;
}
void ReqLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  password_.ClearToEmpty();
  sign_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && device_info_ != nullptr) {
    delete device_info_;
  }
  device_info_ = nullptr;
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(client_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sign = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 client_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.DeviceInfo device_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // bytes account = 2;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_account(), target);
  }

  // bytes password = 3;
  if (!this->password().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_password(), target);
  }

  // bytes sign = 4;
  if (!this->sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sign(), target);
  }

  // int32 client_version = 5;
  if (this->client_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_client_version(), target);
  }

  // .KWMsg.DeviceInfo device_info = 6;
  if (this->has_device_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::device_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqLogin)
  return target;
}

size_t ReqLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 2;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes password = 3;
  if (!this->password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_password());
  }

  // bytes sign = 4;
  if (!this->sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sign());
  }

  // .KWMsg.DeviceInfo device_info = 6;
  if (this->has_device_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_info_);
  }

  // int32 channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  // int32 client_version = 5;
  if (this->client_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqLogin)
    MergeFrom(*source);
  }
}

void ReqLogin::MergeFrom(const ReqLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from.password().empty()) {
    _internal_set_password(from._internal_password());
  }
  if (!from.sign().empty()) {
    _internal_set_sign(from._internal_sign());
  }
  if (from.has_device_info()) {
    _internal_mutable_device_info()->::KWMsg::DeviceInfo::MergeFrom(from._internal_device_info());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.client_version() != 0) {
    _internal_set_client_version(from._internal_client_version());
  }
}

void ReqLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogin::CopyFrom(const ReqLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogin::IsInitialized() const {
  return true;
}

void ReqLogin::InternalSwap(ReqLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, GetArenaForAllocation(),
      &other->password_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sign_, GetArenaForAllocation(),
      &other->sign_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqLogin, client_version_)
      + sizeof(ReqLogin::client_version_)
      - PROTOBUF_FIELD_OFFSET(ReqLogin, device_info_)>(
          reinterpret_cast<char*>(&device_info_),
          reinterpret_cast<char*>(&other->device_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[3]);
}

// ===================================================================

class AckLogin::_Internal {
 public:
};

AckLogin::AckLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckLogin)
}
AckLogin::AckLogin(const AckLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckLogin)
}

void AckLogin::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(channel_));
}

AckLogin::~AckLogin() {
  // @@protoc_insertion_point(destructor:KWMsg.AckLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckLogin::ArenaDtor(void* object) {
  AckLogin* _this = reinterpret_cast< AckLogin* >(object);
  (void)_this;
}
void AckLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  ip_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(channel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // int32 channel = 2;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channel(), target);
  }

  // bytes account = 3;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_account(), target);
  }

  // bytes ip = 4;
  if (!this->ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckLogin)
  return target;
}

size_t AckLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 3;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes ip = 4;
  if (!this->ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 channel = 2;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const AckLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckLogin)
    MergeFrom(*source);
  }
}

void AckLogin::MergeFrom(const AckLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from.ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
}

void AckLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLogin::CopyFrom(const AckLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLogin::IsInitialized() const {
  return true;
}

void AckLogin::InternalSwap(AckLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckLogin, channel_)
      + sizeof(AckLogin::channel_)
      - PROTOBUF_FIELD_OFFSET(AckLogin, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[4]);
}

// ===================================================================

class ReqLogout::_Internal {
 public:
};

ReqLogout::ReqLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqLogout)
}
ReqLogout::ReqLogout(const ReqLogout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sign().empty()) {
    sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sign(), 
      GetArenaForAllocation());
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqLogout)
}

void ReqLogout::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
channel_ = 0;
}

ReqLogout::~ReqLogout() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqLogout)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqLogout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqLogout::ArenaDtor(void* object) {
  ReqLogout* _this = reinterpret_cast< ReqLogout* >(object);
  (void)_this;
}
void ReqLogout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqLogout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  sign_.ClearToEmpty();
  channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqLogout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqLogout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // bytes account = 2;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_account(), target);
  }

  // bytes sign = 3;
  if (!this->sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqLogout)
  return target;
}

size_t ReqLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqLogout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 2;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes sign = 3;
  if (!this->sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sign());
  }

  // int32 channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqLogout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqLogout)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLogout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqLogout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqLogout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqLogout)
    MergeFrom(*source);
  }
}

void ReqLogout::MergeFrom(const ReqLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqLogout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from.sign().empty()) {
    _internal_set_sign(from._internal_sign());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
}

void ReqLogout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogout::CopyFrom(const ReqLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogout::IsInitialized() const {
  return true;
}

void ReqLogout::InternalSwap(ReqLogout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sign_, GetArenaForAllocation(),
      &other->sign_, other->GetArenaForAllocation()
  );
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqLogout::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[5]);
}

// ===================================================================

class AckLogout::_Internal {
 public:
};

AckLogout::AckLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckLogout)
}
AckLogout::AckLogout(const AckLogout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckLogout)
}

void AckLogout::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(channel_));
}

AckLogout::~AckLogout() {
  // @@protoc_insertion_point(destructor:KWMsg.AckLogout)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckLogout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckLogout::ArenaDtor(void* object) {
  AckLogout* _this = reinterpret_cast< AckLogout* >(object);
  (void)_this;
}
void AckLogout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckLogout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(channel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckLogout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckLogout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckLogout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // int32 channel = 2;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channel(), target);
  }

  // bytes account = 3;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckLogout)
  return target;
}

size_t AckLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckLogout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 3;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 channel = 2;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckLogout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckLogout)
  GOOGLE_DCHECK_NE(&from, this);
  const AckLogout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckLogout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckLogout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckLogout)
    MergeFrom(*source);
  }
}

void AckLogout::MergeFrom(const AckLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckLogout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
}

void AckLogout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLogout::CopyFrom(const AckLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLogout::IsInitialized() const {
  return true;
}

void AckLogout::InternalSwap(AckLogout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckLogout, channel_)
      + sizeof(AckLogout::channel_)
      - PROTOBUF_FIELD_OFFSET(AckLogout, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckLogout::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[6]);
}

// ===================================================================

class ServerInfo::_Internal {
 public:
};

ServerInfo::ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ServerInfo)
}

void ServerInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(status_));
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.ServerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerInfo::ArenaDtor(void* object) {
  ServerInfo* _this = reinterpret_cast< ServerInfo* >(object);
  (void)_this;
}
void ServerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wait_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          wait_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.EServerState status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::KWMsg::EServerState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // bytes name = 2;
  if (!this->name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 wait_count = 3;
  if (this->wait_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_wait_count(), target);
  }

  // .KWMsg.EServerState status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 wait_count = 3;
  if (this->wait_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wait_count());
  }

  // .KWMsg.EServerState status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.wait_count() != 0) {
    _internal_set_wait_count(from._internal_wait_count());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerInfo, status_)
      + sizeof(ServerInfo::status_)
      - PROTOBUF_FIELD_OFFSET(ServerInfo, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[7]);
}

// ===================================================================

class ReqConnectWorld::_Internal {
 public:
  static const ::KWMsg::Ident& sender(const ReqConnectWorld* msg);
};

const ::KWMsg::Ident&
ReqConnectWorld::_Internal::sender(const ReqConnectWorld* msg) {
  return *msg->sender_;
}
void ReqConnectWorld::clear_sender() {
  if (GetArenaForAllocation() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
ReqConnectWorld::ReqConnectWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqConnectWorld)
}
ReqConnectWorld::ReqConnectWorld(const ReqConnectWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sender()) {
    sender_ = new ::KWMsg::Ident(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  ::memcpy(&world_id_, &from.world_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&login_id_) -
    reinterpret_cast<char*>(&world_id_)) + sizeof(login_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqConnectWorld)
}

void ReqConnectWorld::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sender_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&login_id_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(login_id_));
}

ReqConnectWorld::~ReqConnectWorld() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqConnectWorld)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqConnectWorld::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void ReqConnectWorld::ArenaDtor(void* object) {
  ReqConnectWorld* _this = reinterpret_cast< ReqConnectWorld* >(object);
  (void)_this;
}
void ReqConnectWorld::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqConnectWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqConnectWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqConnectWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  ::memset(&world_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&login_id_) -
      reinterpret_cast<char*>(&world_id_)) + sizeof(login_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqConnectWorld::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 world_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident sender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 login_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqConnectWorld::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqConnectWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_world_id(), target);
  }

  // bytes account = 2;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_account(), target);
  }

  // .KWMsg.Ident sender = 3;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sender(this), target, stream);
  }

  // int32 login_id = 4;
  if (this->login_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_login_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqConnectWorld)
  return target;
}

size_t ReqConnectWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqConnectWorld)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 2;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // .KWMsg.Ident sender = 3;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  // int32 login_id = 4;
  if (this->login_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_login_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqConnectWorld::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqConnectWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqConnectWorld* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqConnectWorld>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqConnectWorld)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqConnectWorld)
    MergeFrom(*source);
  }
}

void ReqConnectWorld::MergeFrom(const ReqConnectWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqConnectWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::KWMsg::Ident::MergeFrom(from._internal_sender());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
  if (from.login_id() != 0) {
    _internal_set_login_id(from._internal_login_id());
  }
}

void ReqConnectWorld::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqConnectWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqConnectWorld::CopyFrom(const ReqConnectWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqConnectWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqConnectWorld::IsInitialized() const {
  return true;
}

void ReqConnectWorld::InternalSwap(ReqConnectWorld* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqConnectWorld, login_id_)
      + sizeof(ReqConnectWorld::login_id_)
      - PROTOBUF_FIELD_OFFSET(ReqConnectWorld, sender_)>(
          reinterpret_cast<char*>(&sender_),
          reinterpret_cast<char*>(&other->sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqConnectWorld::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[8]);
}

// ===================================================================

class AckConnectWorldResult::_Internal {
 public:
  static const ::KWMsg::Ident& sender(const AckConnectWorldResult* msg);
};

const ::KWMsg::Ident&
AckConnectWorldResult::_Internal::sender(const AckConnectWorldResult* msg) {
  return *msg->sender_;
}
void AckConnectWorldResult::clear_sender() {
  if (GetArenaForAllocation() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
AckConnectWorldResult::AckConnectWorldResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckConnectWorldResult)
}
AckConnectWorldResult::AckConnectWorldResult(const AckConnectWorldResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  world_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_world_ip().empty()) {
    world_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_world_ip(), 
      GetArenaForAllocation());
  }
  world_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_world_key().empty()) {
    world_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_world_key(), 
      GetArenaForAllocation());
  }
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ticket().empty()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sender()) {
    sender_ = new ::KWMsg::Ident(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  ::memcpy(&world_id_, &from.world_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_port_) -
    reinterpret_cast<char*>(&world_id_)) + sizeof(world_port_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckConnectWorldResult)
}

void AckConnectWorldResult::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
world_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
world_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sender_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_port_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(world_port_));
}

AckConnectWorldResult::~AckConnectWorldResult() {
  // @@protoc_insertion_point(destructor:KWMsg.AckConnectWorldResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckConnectWorldResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  world_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  world_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void AckConnectWorldResult::ArenaDtor(void* object) {
  AckConnectWorldResult* _this = reinterpret_cast< AckConnectWorldResult* >(object);
  (void)_this;
}
void AckConnectWorldResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckConnectWorldResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckConnectWorldResult::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckConnectWorldResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  world_ip_.ClearToEmpty();
  world_key_.ClearToEmpty();
  ticket_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  ::memset(&world_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_port_) -
      reinterpret_cast<char*>(&world_id_)) + sizeof(world_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckConnectWorldResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 world_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident sender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 login_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes world_ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_world_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          world_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes world_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_world_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ticket = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckConnectWorldResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckConnectWorldResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_world_id(), target);
  }

  // .KWMsg.Ident sender = 2;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sender(this), target, stream);
  }

  // int32 login_id = 3;
  if (this->login_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_login_id(), target);
  }

  // bytes account = 4;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_account(), target);
  }

  // bytes world_ip = 5;
  if (!this->world_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_world_ip(), target);
  }

  // int32 world_port = 6;
  if (this->world_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_world_port(), target);
  }

  // bytes world_key = 7;
  if (!this->world_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_world_key(), target);
  }

  // bytes ticket = 8;
  if (!this->ticket().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckConnectWorldResult)
  return target;
}

size_t AckConnectWorldResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckConnectWorldResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 4;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes world_ip = 5;
  if (!this->world_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_world_ip());
  }

  // bytes world_key = 7;
  if (!this->world_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_world_key());
  }

  // bytes ticket = 8;
  if (!this->ticket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ticket());
  }

  // .KWMsg.Ident sender = 2;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // int32 world_id = 1;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  // int32 login_id = 3;
  if (this->login_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_login_id());
  }

  // int32 world_port = 6;
  if (this->world_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckConnectWorldResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckConnectWorldResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AckConnectWorldResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckConnectWorldResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckConnectWorldResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckConnectWorldResult)
    MergeFrom(*source);
  }
}

void AckConnectWorldResult::MergeFrom(const AckConnectWorldResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckConnectWorldResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from.world_ip().empty()) {
    _internal_set_world_ip(from._internal_world_ip());
  }
  if (!from.world_key().empty()) {
    _internal_set_world_key(from._internal_world_key());
  }
  if (!from.ticket().empty()) {
    _internal_set_ticket(from._internal_ticket());
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::KWMsg::Ident::MergeFrom(from._internal_sender());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
  if (from.login_id() != 0) {
    _internal_set_login_id(from._internal_login_id());
  }
  if (from.world_port() != 0) {
    _internal_set_world_port(from._internal_world_port());
  }
}

void AckConnectWorldResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckConnectWorldResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckConnectWorldResult::CopyFrom(const AckConnectWorldResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckConnectWorldResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckConnectWorldResult::IsInitialized() const {
  return true;
}

void AckConnectWorldResult::InternalSwap(AckConnectWorldResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &world_ip_, GetArenaForAllocation(),
      &other->world_ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &world_key_, GetArenaForAllocation(),
      &other->world_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ticket_, GetArenaForAllocation(),
      &other->ticket_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckConnectWorldResult, world_port_)
      + sizeof(AckConnectWorldResult::world_port_)
      - PROTOBUF_FIELD_OFFSET(AckConnectWorldResult, sender_)>(
          reinterpret_cast<char*>(&sender_),
          reinterpret_cast<char*>(&other->sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckConnectWorldResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[9]);
}

// ===================================================================

class ReqVerifyJwt::_Internal {
 public:
};

ReqVerifyJwt::ReqVerifyJwt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqVerifyJwt)
}
ReqVerifyJwt::ReqVerifyJwt(const ReqVerifyJwt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  jwt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jwt().empty()) {
    jwt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_jwt(), 
      GetArenaForAllocation());
  }
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ticket().empty()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArenaForAllocation());
  }
  world_id_ = from.world_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqVerifyJwt)
}

void ReqVerifyJwt::SharedCtor() {
jwt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
world_id_ = 0;
}

ReqVerifyJwt::~ReqVerifyJwt() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqVerifyJwt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqVerifyJwt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  jwt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqVerifyJwt::ArenaDtor(void* object) {
  ReqVerifyJwt* _this = reinterpret_cast< ReqVerifyJwt* >(object);
  (void)_this;
}
void ReqVerifyJwt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqVerifyJwt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqVerifyJwt::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqVerifyJwt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jwt_.ClearToEmpty();
  ticket_.ClearToEmpty();
  world_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqVerifyJwt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes jwt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_jwt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ticket = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqVerifyJwt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqVerifyJwt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes jwt = 1;
  if (!this->jwt().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_jwt(), target);
  }

  // int32 world_id = 2;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_world_id(), target);
  }

  // bytes ticket = 3;
  if (!this->ticket().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqVerifyJwt)
  return target;
}

size_t ReqVerifyJwt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqVerifyJwt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes jwt = 1;
  if (!this->jwt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_jwt());
  }

  // bytes ticket = 3;
  if (!this->ticket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ticket());
  }

  // int32 world_id = 2;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqVerifyJwt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqVerifyJwt)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqVerifyJwt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqVerifyJwt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqVerifyJwt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqVerifyJwt)
    MergeFrom(*source);
  }
}

void ReqVerifyJwt::MergeFrom(const ReqVerifyJwt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqVerifyJwt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.jwt().empty()) {
    _internal_set_jwt(from._internal_jwt());
  }
  if (!from.ticket().empty()) {
    _internal_set_ticket(from._internal_ticket());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
}

void ReqVerifyJwt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqVerifyJwt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqVerifyJwt::CopyFrom(const ReqVerifyJwt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqVerifyJwt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqVerifyJwt::IsInitialized() const {
  return true;
}

void ReqVerifyJwt::InternalSwap(ReqVerifyJwt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &jwt_, GetArenaForAllocation(),
      &other->jwt_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ticket_, GetArenaForAllocation(),
      &other->ticket_, other->GetArenaForAllocation()
  );
  swap(world_id_, other->world_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqVerifyJwt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[10]);
}

// ===================================================================

class AckVerifyJwt::_Internal {
 public:
  static const ::KWMsg::Ident& client_id(const AckVerifyJwt* msg);
};

const ::KWMsg::Ident&
AckVerifyJwt::_Internal::client_id(const AckVerifyJwt* msg) {
  return *msg->client_id_;
}
void AckVerifyJwt::clear_client_id() {
  if (GetArenaForAllocation() == nullptr && client_id_ != nullptr) {
    delete client_id_;
  }
  client_id_ = nullptr;
}
AckVerifyJwt::AckVerifyJwt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckVerifyJwt)
}
AckVerifyJwt::AckVerifyJwt(const AckVerifyJwt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  security_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_security_key().empty()) {
    security_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_security_key(), 
      GetArenaForAllocation());
  }
  security_iv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_security_iv().empty()) {
    security_iv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_security_iv(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_client_id()) {
    client_id_ = new ::KWMsg::Ident(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckVerifyJwt)
}

void AckVerifyJwt::SharedCtor() {
security_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
security_iv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
client_id_ = nullptr;
}

AckVerifyJwt::~AckVerifyJwt() {
  // @@protoc_insertion_point(destructor:KWMsg.AckVerifyJwt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckVerifyJwt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  security_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_iv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_id_;
}

void AckVerifyJwt::ArenaDtor(void* object) {
  AckVerifyJwt* _this = reinterpret_cast< AckVerifyJwt* >(object);
  (void)_this;
}
void AckVerifyJwt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckVerifyJwt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckVerifyJwt::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckVerifyJwt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  security_key_.ClearToEmpty();
  security_iv_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && client_id_ != nullptr) {
    delete client_id_;
  }
  client_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckVerifyJwt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes security_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_security_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes security_iv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_security_iv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckVerifyJwt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckVerifyJwt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident client_id = 1;
  if (this->has_client_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::client_id(this), target, stream);
  }

  // bytes security_key = 2;
  if (!this->security_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_security_key(), target);
  }

  // bytes security_iv = 3;
  if (!this->security_iv().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_security_iv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckVerifyJwt)
  return target;
}

size_t AckVerifyJwt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckVerifyJwt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes security_key = 2;
  if (!this->security_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_security_key());
  }

  // bytes security_iv = 3;
  if (!this->security_iv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_security_iv());
  }

  // .KWMsg.Ident client_id = 1;
  if (this->has_client_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckVerifyJwt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckVerifyJwt)
  GOOGLE_DCHECK_NE(&from, this);
  const AckVerifyJwt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckVerifyJwt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckVerifyJwt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckVerifyJwt)
    MergeFrom(*source);
  }
}

void AckVerifyJwt::MergeFrom(const AckVerifyJwt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckVerifyJwt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.security_key().empty()) {
    _internal_set_security_key(from._internal_security_key());
  }
  if (!from.security_iv().empty()) {
    _internal_set_security_iv(from._internal_security_iv());
  }
  if (from.has_client_id()) {
    _internal_mutable_client_id()->::KWMsg::Ident::MergeFrom(from._internal_client_id());
  }
}

void AckVerifyJwt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckVerifyJwt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckVerifyJwt::CopyFrom(const AckVerifyJwt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckVerifyJwt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckVerifyJwt::IsInitialized() const {
  return true;
}

void AckVerifyJwt::InternalSwap(AckVerifyJwt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &security_key_, GetArenaForAllocation(),
      &other->security_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &security_iv_, GetArenaForAllocation(),
      &other->security_iv_, other->GetArenaForAllocation()
  );
  swap(client_id_, other->client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckVerifyJwt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[11]);
}

// ===================================================================

class ReqAckKickFromWorld::_Internal {
 public:
  static const ::KWMsg::Ident& target_client_id(const ReqAckKickFromWorld* msg);
};

const ::KWMsg::Ident&
ReqAckKickFromWorld::_Internal::target_client_id(const ReqAckKickFromWorld* msg) {
  return *msg->target_client_id_;
}
void ReqAckKickFromWorld::clear_target_client_id() {
  if (GetArenaForAllocation() == nullptr && target_client_id_ != nullptr) {
    delete target_client_id_;
  }
  target_client_id_ = nullptr;
}
ReqAckKickFromWorld::ReqAckKickFromWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAckKickFromWorld)
}
ReqAckKickFromWorld::ReqAckKickFromWorld(const ReqAckKickFromWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  target_digital_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_digital_id().empty()) {
    target_digital_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_digital_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_target_client_id()) {
    target_client_id_ = new ::KWMsg::Ident(*from.target_client_id_);
  } else {
    target_client_id_ = nullptr;
  }
  target_gate_id_ = from.target_gate_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAckKickFromWorld)
}

void ReqAckKickFromWorld::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
target_digital_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_gate_id_) -
    reinterpret_cast<char*>(&target_client_id_)) + sizeof(target_gate_id_));
}

ReqAckKickFromWorld::~ReqAckKickFromWorld() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAckKickFromWorld)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAckKickFromWorld::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_digital_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete target_client_id_;
}

void ReqAckKickFromWorld::ArenaDtor(void* object) {
  ReqAckKickFromWorld* _this = reinterpret_cast< ReqAckKickFromWorld* >(object);
  (void)_this;
}
void ReqAckKickFromWorld::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAckKickFromWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAckKickFromWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAckKickFromWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  target_digital_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && target_client_id_ != nullptr) {
    delete target_client_id_;
  }
  target_client_id_ = nullptr;
  target_gate_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAckKickFromWorld::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes target_digital_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target_digital_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_gate_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_gate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident target_client_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_client_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckKickFromWorld::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAckKickFromWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // bytes target_digital_id = 2;
  if (!this->target_digital_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_target_digital_id(), target);
  }

  // int32 target_gate_id = 3;
  if (this->target_gate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_gate_id(), target);
  }

  // .KWMsg.Ident target_client_id = 4;
  if (this->has_target_client_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::target_client_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAckKickFromWorld)
  return target;
}

size_t ReqAckKickFromWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAckKickFromWorld)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes target_digital_id = 2;
  if (!this->target_digital_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_target_digital_id());
  }

  // .KWMsg.Ident target_client_id = 4;
  if (this->has_target_client_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_client_id_);
  }

  // int32 target_gate_id = 3;
  if (this->target_gate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_gate_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckKickFromWorld::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAckKickFromWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckKickFromWorld* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckKickFromWorld>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAckKickFromWorld)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAckKickFromWorld)
    MergeFrom(*source);
  }
}

void ReqAckKickFromWorld::MergeFrom(const ReqAckKickFromWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAckKickFromWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from.target_digital_id().empty()) {
    _internal_set_target_digital_id(from._internal_target_digital_id());
  }
  if (from.has_target_client_id()) {
    _internal_mutable_target_client_id()->::KWMsg::Ident::MergeFrom(from._internal_target_client_id());
  }
  if (from.target_gate_id() != 0) {
    _internal_set_target_gate_id(from._internal_target_gate_id());
  }
}

void ReqAckKickFromWorld::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAckKickFromWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckKickFromWorld::CopyFrom(const ReqAckKickFromWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAckKickFromWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckKickFromWorld::IsInitialized() const {
  return true;
}

void ReqAckKickFromWorld::InternalSwap(ReqAckKickFromWorld* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_digital_id_, GetArenaForAllocation(),
      &other->target_digital_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqAckKickFromWorld, target_gate_id_)
      + sizeof(ReqAckKickFromWorld::target_gate_id_)
      - PROTOBUF_FIELD_OFFSET(ReqAckKickFromWorld, target_client_id_)>(
          reinterpret_cast<char*>(&target_client_id_),
          reinterpret_cast<char*>(&other->target_client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckKickFromWorld::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[12]);
}

// ===================================================================

class ReqLeaveGame::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqLeaveGame* msg);
  static const ::KWMsg::Ident& client_id(const ReqLeaveGame* msg);
};

const ::KWMsg::Ident&
ReqLeaveGame::_Internal::player_id(const ReqLeaveGame* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqLeaveGame::_Internal::client_id(const ReqLeaveGame* msg) {
  return *msg->client_id_;
}
void ReqLeaveGame::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqLeaveGame::clear_client_id() {
  if (GetArenaForAllocation() == nullptr && client_id_ != nullptr) {
    delete client_id_;
  }
  client_id_ = nullptr;
}
ReqLeaveGame::ReqLeaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqLeaveGame)
}
ReqLeaveGame::ReqLeaveGame(const ReqLeaveGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_client_id()) {
    client_id_ = new ::KWMsg::Ident(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqLeaveGame)
}

void ReqLeaveGame::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(game_id_));
}

ReqLeaveGame::~ReqLeaveGame() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqLeaveGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqLeaveGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete client_id_;
}

void ReqLeaveGame::ArenaDtor(void* object) {
  ReqLeaveGame* _this = reinterpret_cast< ReqLeaveGame* >(object);
  (void)_this;
}
void ReqLeaveGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqLeaveGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqLeaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqLeaveGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && client_id_ != nullptr) {
    delete client_id_;
  }
  client_id_ = nullptr;
  game_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqLeaveGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident client_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqLeaveGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqLeaveGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident client_id = 3;
  if (this->has_client_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::client_id(this), target, stream);
  }

  // int32 game_id = 4;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqLeaveGame)
  return target;
}

size_t ReqLeaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqLeaveGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident client_id = 3;
  if (this->has_client_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  // int32 game_id = 4;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqLeaveGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqLeaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLeaveGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqLeaveGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqLeaveGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqLeaveGame)
    MergeFrom(*source);
  }
}

void ReqLeaveGame::MergeFrom(const ReqLeaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqLeaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_client_id()) {
    _internal_mutable_client_id()->::KWMsg::Ident::MergeFrom(from._internal_client_id());
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void ReqLeaveGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqLeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveGame::CopyFrom(const ReqLeaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqLeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveGame::IsInitialized() const {
  return true;
}

void ReqLeaveGame::InternalSwap(ReqLeaveGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqLeaveGame, game_id_)
      + sizeof(ReqLeaveGame::game_id_)
      - PROTOBUF_FIELD_OFFSET(ReqLeaveGame, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqLeaveGame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[13]);
}

// ===================================================================

class AckLeaveGame::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const AckLeaveGame* msg);
  static const ::KWMsg::Ident& client_id(const AckLeaveGame* msg);
};

const ::KWMsg::Ident&
AckLeaveGame::_Internal::player_id(const AckLeaveGame* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
AckLeaveGame::_Internal::client_id(const AckLeaveGame* msg) {
  return *msg->client_id_;
}
void AckLeaveGame::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void AckLeaveGame::clear_client_id() {
  if (GetArenaForAllocation() == nullptr && client_id_ != nullptr) {
    delete client_id_;
  }
  client_id_ = nullptr;
}
AckLeaveGame::AckLeaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckLeaveGame)
}
AckLeaveGame::AckLeaveGame(const AckLeaveGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_client_id()) {
    client_id_ = new ::KWMsg::Ident(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckLeaveGame)
}

void AckLeaveGame::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(game_id_));
}

AckLeaveGame::~AckLeaveGame() {
  // @@protoc_insertion_point(destructor:KWMsg.AckLeaveGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckLeaveGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete client_id_;
}

void AckLeaveGame::ArenaDtor(void* object) {
  AckLeaveGame* _this = reinterpret_cast< AckLeaveGame* >(object);
  (void)_this;
}
void AckLeaveGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckLeaveGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckLeaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckLeaveGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && client_id_ != nullptr) {
    delete client_id_;
  }
  client_id_ = nullptr;
  game_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckLeaveGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident client_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckLeaveGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckLeaveGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident client_id = 3;
  if (this->has_client_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::client_id(this), target, stream);
  }

  // int32 game_id = 4;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckLeaveGame)
  return target;
}

size_t AckLeaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckLeaveGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // .KWMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident client_id = 3;
  if (this->has_client_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  // int32 game_id = 4;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckLeaveGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckLeaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const AckLeaveGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckLeaveGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckLeaveGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckLeaveGame)
    MergeFrom(*source);
  }
}

void AckLeaveGame::MergeFrom(const AckLeaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckLeaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_client_id()) {
    _internal_mutable_client_id()->::KWMsg::Ident::MergeFrom(from._internal_client_id());
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void AckLeaveGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckLeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLeaveGame::CopyFrom(const AckLeaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckLeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLeaveGame::IsInitialized() const {
  return true;
}

void AckLeaveGame::InternalSwap(AckLeaveGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckLeaveGame, game_id_)
      + sizeof(AckLeaveGame::game_id_)
      - PROTOBUF_FIELD_OFFSET(AckLeaveGame, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckLeaveGame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[14]);
}

// ===================================================================

class ReqEnterGame::_Internal {
 public:
  static const ::KWMsg::DeviceInfo& device_info(const ReqEnterGame* msg);
};

const ::KWMsg::DeviceInfo&
ReqEnterGame::_Internal::device_info(const ReqEnterGame* msg) {
  return *msg->device_info_;
}
void ReqEnterGame::clear_device_info() {
  if (GetArenaForAllocation() == nullptr && device_info_ != nullptr) {
    delete device_info_;
  }
  device_info_ = nullptr;
}
ReqEnterGame::ReqEnterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqEnterGame)
}
ReqEnterGame::ReqEnterGame(const ReqEnterGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  digital_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_digital_id().empty()) {
    digital_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digital_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_device_info()) {
    device_info_ = new ::KWMsg::DeviceInfo(*from.device_info_);
  } else {
    device_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqEnterGame)
}

void ReqEnterGame::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
digital_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
device_info_ = nullptr;
}

ReqEnterGame::~ReqEnterGame() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqEnterGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqEnterGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digital_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_info_;
}

void ReqEnterGame::ArenaDtor(void* object) {
  ReqEnterGame* _this = reinterpret_cast< ReqEnterGame* >(object);
  (void)_this;
}
void ReqEnterGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqEnterGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqEnterGame::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqEnterGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  digital_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && device_info_ != nullptr) {
    delete device_info_;
  }
  device_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqEnterGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes digital_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_digital_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.DeviceInfo device_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqEnterGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqEnterGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // bytes digital_id = 2;
  if (!this->digital_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_digital_id(), target);
  }

  // .KWMsg.DeviceInfo device_info = 3;
  if (this->has_device_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::device_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqEnterGame)
  return target;
}

size_t ReqEnterGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqEnterGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes digital_id = 2;
  if (!this->digital_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digital_id());
  }

  // .KWMsg.DeviceInfo device_info = 3;
  if (this->has_device_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqEnterGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqEnterGame)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEnterGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqEnterGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqEnterGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqEnterGame)
    MergeFrom(*source);
  }
}

void ReqEnterGame::MergeFrom(const ReqEnterGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqEnterGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from.digital_id().empty()) {
    _internal_set_digital_id(from._internal_digital_id());
  }
  if (from.has_device_info()) {
    _internal_mutable_device_info()->::KWMsg::DeviceInfo::MergeFrom(from._internal_device_info());
  }
}

void ReqEnterGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqEnterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGame::CopyFrom(const ReqEnterGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqEnterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGame::IsInitialized() const {
  return true;
}

void ReqEnterGame::InternalSwap(ReqEnterGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &digital_id_, GetArenaForAllocation(),
      &other->digital_id_, other->GetArenaForAllocation()
  );
  swap(device_info_, other->device_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqEnterGame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[15]);
}

// ===================================================================

class ReqPlayerLite::_Internal {
 public:
};

ReqPlayerLite::ReqPlayerLite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqPlayerLite)
}
ReqPlayerLite::ReqPlayerLite(const ReqPlayerLite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  digital_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_digital_id().empty()) {
    digital_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digital_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqPlayerLite)
}

void ReqPlayerLite::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
digital_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReqPlayerLite::~ReqPlayerLite() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqPlayerLite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqPlayerLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digital_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqPlayerLite::ArenaDtor(void* object) {
  ReqPlayerLite* _this = reinterpret_cast< ReqPlayerLite* >(object);
  (void)_this;
}
void ReqPlayerLite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqPlayerLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqPlayerLite::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqPlayerLite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  digital_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqPlayerLite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes digital_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_digital_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqPlayerLite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqPlayerLite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // bytes digital_id = 2;
  if (!this->digital_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_digital_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqPlayerLite)
  return target;
}

size_t ReqPlayerLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqPlayerLite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes digital_id = 2;
  if (!this->digital_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digital_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqPlayerLite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqPlayerLite)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqPlayerLite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqPlayerLite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqPlayerLite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqPlayerLite)
    MergeFrom(*source);
  }
}

void ReqPlayerLite::MergeFrom(const ReqPlayerLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqPlayerLite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from.digital_id().empty()) {
    _internal_set_digital_id(from._internal_digital_id());
  }
}

void ReqPlayerLite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqPlayerLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPlayerLite::CopyFrom(const ReqPlayerLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqPlayerLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPlayerLite::IsInitialized() const {
  return true;
}

void ReqPlayerLite::InternalSwap(ReqPlayerLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &digital_id_, GetArenaForAllocation(),
      &other->digital_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqPlayerLite::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[16]);
}

// ===================================================================

class ReqUpdateAccountLastLoginInfo::_Internal {
 public:
};

ReqUpdateAccountLastLoginInfo::ReqUpdateAccountLastLoginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqUpdateAccountLastLoginInfo)
}
ReqUpdateAccountLastLoginInfo::ReqUpdateAccountLastLoginInfo(const ReqUpdateAccountLastLoginInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  dev_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_id().empty()) {
    dev_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dev_id(), 
      GetArenaForAllocation());
  }
  zone_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_zone_id().empty()) {
    zone_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_zone_id(), 
      GetArenaForAllocation());
  }
  login_ts_ = from.login_ts_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqUpdateAccountLastLoginInfo)
}

void ReqUpdateAccountLastLoginInfo::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dev_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
zone_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
login_ts_ = int64_t{0};
}

ReqUpdateAccountLastLoginInfo::~ReqUpdateAccountLastLoginInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqUpdateAccountLastLoginInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqUpdateAccountLastLoginInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dev_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zone_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqUpdateAccountLastLoginInfo::ArenaDtor(void* object) {
  ReqUpdateAccountLastLoginInfo* _this = reinterpret_cast< ReqUpdateAccountLastLoginInfo* >(object);
  (void)_this;
}
void ReqUpdateAccountLastLoginInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqUpdateAccountLastLoginInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqUpdateAccountLastLoginInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqUpdateAccountLastLoginInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  dev_id_.ClearToEmpty();
  zone_id_.ClearToEmpty();
  login_ts_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqUpdateAccountLastLoginInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes dev_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dev_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes zone_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_zone_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 login_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          login_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUpdateAccountLastLoginInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqUpdateAccountLastLoginInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // bytes dev_id = 2;
  if (!this->dev_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_dev_id(), target);
  }

  // bytes zone_id = 3;
  if (!this->zone_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_zone_id(), target);
  }

  // int64 login_ts = 4;
  if (this->login_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_login_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqUpdateAccountLastLoginInfo)
  return target;
}

size_t ReqUpdateAccountLastLoginInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqUpdateAccountLastLoginInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes dev_id = 2;
  if (!this->dev_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dev_id());
  }

  // bytes zone_id = 3;
  if (!this->zone_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_zone_id());
  }

  // int64 login_ts = 4;
  if (this->login_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_login_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUpdateAccountLastLoginInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqUpdateAccountLastLoginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUpdateAccountLastLoginInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUpdateAccountLastLoginInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqUpdateAccountLastLoginInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqUpdateAccountLastLoginInfo)
    MergeFrom(*source);
  }
}

void ReqUpdateAccountLastLoginInfo::MergeFrom(const ReqUpdateAccountLastLoginInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqUpdateAccountLastLoginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from.dev_id().empty()) {
    _internal_set_dev_id(from._internal_dev_id());
  }
  if (!from.zone_id().empty()) {
    _internal_set_zone_id(from._internal_zone_id());
  }
  if (from.login_ts() != 0) {
    _internal_set_login_ts(from._internal_login_ts());
  }
}

void ReqUpdateAccountLastLoginInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqUpdateAccountLastLoginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpdateAccountLastLoginInfo::CopyFrom(const ReqUpdateAccountLastLoginInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqUpdateAccountLastLoginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdateAccountLastLoginInfo::IsInitialized() const {
  return true;
}

void ReqUpdateAccountLastLoginInfo::InternalSwap(ReqUpdateAccountLastLoginInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dev_id_, GetArenaForAllocation(),
      &other->dev_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &zone_id_, GetArenaForAllocation(),
      &other->zone_id_, other->GetArenaForAllocation()
  );
  swap(login_ts_, other->login_ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUpdateAccountLastLoginInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[17]);
}

// ===================================================================

class PlayerLiteInfo::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const PlayerLiteInfo* msg);
};

const ::KWMsg::Ident&
PlayerLiteInfo::_Internal::player_id(const PlayerLiteInfo* msg) {
  return *msg->player_id_;
}
void PlayerLiteInfo::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
PlayerLiteInfo::PlayerLiteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PlayerLiteInfo)
}
PlayerLiteInfo::PlayerLiteInfo(const PlayerLiteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  digital_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_digital_id().empty()) {
    digital_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digital_id(), 
      GetArenaForAllocation());
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  zone_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_zone_id().empty()) {
    zone_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_zone_id(), 
      GetArenaForAllocation());
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArenaForAllocation());
  }
  avatar_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_frame().empty()) {
    avatar_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_frame(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_offline_time_) -
    reinterpret_cast<char*>(&level_)) + sizeof(last_offline_time_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.PlayerLiteInfo)
}

void PlayerLiteInfo::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
digital_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
zone_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_offline_time_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(last_offline_time_));
}

PlayerLiteInfo::~PlayerLiteInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.PlayerLiteInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerLiteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digital_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zone_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void PlayerLiteInfo::ArenaDtor(void* object) {
  PlayerLiteInfo* _this = reinterpret_cast< PlayerLiteInfo* >(object);
  (void)_this;
}
void PlayerLiteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerLiteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerLiteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PlayerLiteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  digital_id_.ClearToEmpty();
  nickname_.ClearToEmpty();
  zone_id_.ClearToEmpty();
  avatar_.ClearToEmpty();
  avatar_frame_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_offline_time_) -
      reinterpret_cast<char*>(&level_)) + sizeof(last_offline_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerLiteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes digital_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_digital_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nickname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes zone_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_zone_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 last_offline_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          last_offline_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatar = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatar_frame = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_avatar_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerLiteInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PlayerLiteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes account = 2;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_account(), target);
  }

  // bytes digital_id = 3;
  if (!this->digital_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_digital_id(), target);
  }

  // bytes nickname = 4;
  if (!this->nickname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_nickname(), target);
  }

  // bytes zone_id = 5;
  if (!this->zone_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_zone_id(), target);
  }

  // int32 level = 6;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_level(), target);
  }

  // int32 last_offline_time = 7;
  if (this->last_offline_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_last_offline_time(), target);
  }

  // bytes avatar = 8;
  if (!this->avatar().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_avatar(), target);
  }

  // bytes avatar_frame = 9;
  if (!this->avatar_frame().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_avatar_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PlayerLiteInfo)
  return target;
}

size_t PlayerLiteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PlayerLiteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 2;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes digital_id = 3;
  if (!this->digital_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digital_id());
  }

  // bytes nickname = 4;
  if (!this->nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nickname());
  }

  // bytes zone_id = 5;
  if (!this->zone_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_zone_id());
  }

  // bytes avatar = 8;
  if (!this->avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar());
  }

  // bytes avatar_frame = 9;
  if (!this->avatar_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar_frame());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 level = 6;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 last_offline_time = 7;
  if (this->last_offline_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_last_offline_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerLiteInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PlayerLiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerLiteInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerLiteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PlayerLiteInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PlayerLiteInfo)
    MergeFrom(*source);
  }
}

void PlayerLiteInfo::MergeFrom(const PlayerLiteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PlayerLiteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from.digital_id().empty()) {
    _internal_set_digital_id(from._internal_digital_id());
  }
  if (!from.nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (!from.zone_id().empty()) {
    _internal_set_zone_id(from._internal_zone_id());
  }
  if (!from.avatar().empty()) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (!from.avatar_frame().empty()) {
    _internal_set_avatar_frame(from._internal_avatar_frame());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.last_offline_time() != 0) {
    _internal_set_last_offline_time(from._internal_last_offline_time());
  }
}

void PlayerLiteInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PlayerLiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLiteInfo::CopyFrom(const PlayerLiteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PlayerLiteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLiteInfo::IsInitialized() const {
  return true;
}

void PlayerLiteInfo::InternalSwap(PlayerLiteInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &digital_id_, GetArenaForAllocation(),
      &other->digital_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, GetArenaForAllocation(),
      &other->nickname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &zone_id_, GetArenaForAllocation(),
      &other->zone_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_, GetArenaForAllocation(),
      &other->avatar_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_frame_, GetArenaForAllocation(),
      &other->avatar_frame_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerLiteInfo, last_offline_time_)
      + sizeof(PlayerLiteInfo::last_offline_time_)
      - PROTOBUF_FIELD_OFFSET(PlayerLiteInfo, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerLiteInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[18]);
}

// ===================================================================

class AckPlayerLite::_Internal {
 public:
  static const ::KWMsg::PlayerLiteInfo& player_data(const AckPlayerLite* msg);
};

const ::KWMsg::PlayerLiteInfo&
AckPlayerLite::_Internal::player_data(const AckPlayerLite* msg) {
  return *msg->player_data_;
}
AckPlayerLite::AckPlayerLite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckPlayerLite)
}
AckPlayerLite::AckPlayerLite(const AckPlayerLite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_data()) {
    player_data_ = new ::KWMsg::PlayerLiteInfo(*from.player_data_);
  } else {
    player_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckPlayerLite)
}

void AckPlayerLite::SharedCtor() {
player_data_ = nullptr;
}

AckPlayerLite::~AckPlayerLite() {
  // @@protoc_insertion_point(destructor:KWMsg.AckPlayerLite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckPlayerLite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_data_;
}

void AckPlayerLite::ArenaDtor(void* object) {
  AckPlayerLite* _this = reinterpret_cast< AckPlayerLite* >(object);
  (void)_this;
}
void AckPlayerLite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckPlayerLite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckPlayerLite::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckPlayerLite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_data_ != nullptr) {
    delete player_data_;
  }
  player_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckPlayerLite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.PlayerLiteInfo player_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckPlayerLite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckPlayerLite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.PlayerLiteInfo player_data = 1;
  if (this->has_player_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckPlayerLite)
  return target;
}

size_t AckPlayerLite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckPlayerLite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.PlayerLiteInfo player_data = 1;
  if (this->has_player_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPlayerLite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckPlayerLite)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerLite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckPlayerLite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckPlayerLite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckPlayerLite)
    MergeFrom(*source);
  }
}

void AckPlayerLite::MergeFrom(const AckPlayerLite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckPlayerLite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_data()) {
    _internal_mutable_player_data()->::KWMsg::PlayerLiteInfo::MergeFrom(from._internal_player_data());
  }
}

void AckPlayerLite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckPlayerLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerLite::CopyFrom(const AckPlayerLite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckPlayerLite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerLite::IsInitialized() const {
  return true;
}

void AckPlayerLite::InternalSwap(AckPlayerLite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_data_, other->player_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckPlayerLite::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[19]);
}

// ===================================================================

class ReqUpdateAccountPlayer::_Internal {
 public:
};

ReqUpdateAccountPlayer::ReqUpdateAccountPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqUpdateAccountPlayer)
}
ReqUpdateAccountPlayer::ReqUpdateAccountPlayer(const ReqUpdateAccountPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  zone_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_zone_id().empty()) {
    zone_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_zone_id(), 
      GetArenaForAllocation());
  }
  json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_json().empty()) {
    json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqUpdateAccountPlayer)
}

void ReqUpdateAccountPlayer::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
zone_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReqUpdateAccountPlayer::~ReqUpdateAccountPlayer() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqUpdateAccountPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqUpdateAccountPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zone_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqUpdateAccountPlayer::ArenaDtor(void* object) {
  ReqUpdateAccountPlayer* _this = reinterpret_cast< ReqUpdateAccountPlayer* >(object);
  (void)_this;
}
void ReqUpdateAccountPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqUpdateAccountPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqUpdateAccountPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqUpdateAccountPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  zone_id_.ClearToEmpty();
  json_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqUpdateAccountPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes zone_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_zone_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes json = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUpdateAccountPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqUpdateAccountPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // bytes zone_id = 2;
  if (!this->zone_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_zone_id(), target);
  }

  // bytes json = 3;
  if (!this->json().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqUpdateAccountPlayer)
  return target;
}

size_t ReqUpdateAccountPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqUpdateAccountPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes zone_id = 2;
  if (!this->zone_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_zone_id());
  }

  // bytes json = 3;
  if (!this->json().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_json());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUpdateAccountPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqUpdateAccountPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUpdateAccountPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUpdateAccountPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqUpdateAccountPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqUpdateAccountPlayer)
    MergeFrom(*source);
  }
}

void ReqUpdateAccountPlayer::MergeFrom(const ReqUpdateAccountPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqUpdateAccountPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from.zone_id().empty()) {
    _internal_set_zone_id(from._internal_zone_id());
  }
  if (!from.json().empty()) {
    _internal_set_json(from._internal_json());
  }
}

void ReqUpdateAccountPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqUpdateAccountPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpdateAccountPlayer::CopyFrom(const ReqUpdateAccountPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqUpdateAccountPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdateAccountPlayer::IsInitialized() const {
  return true;
}

void ReqUpdateAccountPlayer::InternalSwap(ReqUpdateAccountPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &zone_id_, GetArenaForAllocation(),
      &other->zone_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &json_, GetArenaForAllocation(),
      &other->json_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUpdateAccountPlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[20]);
}

// ===================================================================

class ReqLoadPlayerData::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqLoadPlayerData* msg);
};

const ::KWMsg::Ident&
ReqLoadPlayerData::_Internal::player_id(const ReqLoadPlayerData* msg) {
  return *msg->player_id_;
}
void ReqLoadPlayerData::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqLoadPlayerData::ReqLoadPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqLoadPlayerData)
}
ReqLoadPlayerData::ReqLoadPlayerData(const ReqLoadPlayerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqLoadPlayerData)
}

void ReqLoadPlayerData::SharedCtor() {
player_id_ = nullptr;
}

ReqLoadPlayerData::~ReqLoadPlayerData() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqLoadPlayerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqLoadPlayerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqLoadPlayerData::ArenaDtor(void* object) {
  ReqLoadPlayerData* _this = reinterpret_cast< ReqLoadPlayerData* >(object);
  (void)_this;
}
void ReqLoadPlayerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqLoadPlayerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqLoadPlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqLoadPlayerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqLoadPlayerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqLoadPlayerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqLoadPlayerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqLoadPlayerData)
  return target;
}

size_t ReqLoadPlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqLoadPlayerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqLoadPlayerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqLoadPlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLoadPlayerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqLoadPlayerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqLoadPlayerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqLoadPlayerData)
    MergeFrom(*source);
  }
}

void ReqLoadPlayerData::MergeFrom(const ReqLoadPlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqLoadPlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqLoadPlayerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqLoadPlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLoadPlayerData::CopyFrom(const ReqLoadPlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqLoadPlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLoadPlayerData::IsInitialized() const {
  return true;
}

void ReqLoadPlayerData::InternalSwap(ReqLoadPlayerData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqLoadPlayerData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[21]);
}

// ===================================================================

class AckLoadPlayerData::_Internal {
 public:
  static const ::KWMsg::PlayerDataPack& data_pack(const AckLoadPlayerData* msg);
};

const ::KWMsg::PlayerDataPack&
AckLoadPlayerData::_Internal::data_pack(const AckLoadPlayerData* msg) {
  return *msg->data_pack_;
}
AckLoadPlayerData::AckLoadPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckLoadPlayerData)
}
AckLoadPlayerData::AckLoadPlayerData(const AckLoadPlayerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_pack()) {
    data_pack_ = new ::KWMsg::PlayerDataPack(*from.data_pack_);
  } else {
    data_pack_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckLoadPlayerData)
}

void AckLoadPlayerData::SharedCtor() {
data_pack_ = nullptr;
}

AckLoadPlayerData::~AckLoadPlayerData() {
  // @@protoc_insertion_point(destructor:KWMsg.AckLoadPlayerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckLoadPlayerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_pack_;
}

void AckLoadPlayerData::ArenaDtor(void* object) {
  AckLoadPlayerData* _this = reinterpret_cast< AckLoadPlayerData* >(object);
  (void)_this;
}
void AckLoadPlayerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckLoadPlayerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckLoadPlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckLoadPlayerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_pack_ != nullptr) {
    delete data_pack_;
  }
  data_pack_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckLoadPlayerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.PlayerDataPack data_pack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_pack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckLoadPlayerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckLoadPlayerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.PlayerDataPack data_pack = 1;
  if (this->has_data_pack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data_pack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckLoadPlayerData)
  return target;
}

size_t AckLoadPlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckLoadPlayerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.PlayerDataPack data_pack = 1;
  if (this->has_data_pack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_pack_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckLoadPlayerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckLoadPlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  const AckLoadPlayerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckLoadPlayerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckLoadPlayerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckLoadPlayerData)
    MergeFrom(*source);
  }
}

void AckLoadPlayerData::MergeFrom(const AckLoadPlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckLoadPlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data_pack()) {
    _internal_mutable_data_pack()->::KWMsg::PlayerDataPack::MergeFrom(from._internal_data_pack());
  }
}

void AckLoadPlayerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckLoadPlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLoadPlayerData::CopyFrom(const AckLoadPlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckLoadPlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLoadPlayerData::IsInitialized() const {
  return true;
}

void AckLoadPlayerData::InternalSwap(AckLoadPlayerData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_pack_, other->data_pack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckLoadPlayerData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[22]);
}

// ===================================================================

class PlayerDataPack::_Internal {
 public:
  static const ::KWMsg::Ident& id(const PlayerDataPack* msg);
  static const ::KWMsg::ObjectPropertyList& property(const PlayerDataPack* msg);
  static const ::KWMsg::ObjectRecordList& record(const PlayerDataPack* msg);
};

const ::KWMsg::Ident&
PlayerDataPack::_Internal::id(const PlayerDataPack* msg) {
  return *msg->id_;
}
const ::KWMsg::ObjectPropertyList&
PlayerDataPack::_Internal::property(const PlayerDataPack* msg) {
  return *msg->property_;
}
const ::KWMsg::ObjectRecordList&
PlayerDataPack::_Internal::record(const PlayerDataPack* msg) {
  return *msg->record_;
}
void PlayerDataPack::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void PlayerDataPack::clear_property() {
  if (GetArenaForAllocation() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
}
void PlayerDataPack::clear_record() {
  if (GetArenaForAllocation() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
}
PlayerDataPack::PlayerDataPack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PlayerDataPack)
}
PlayerDataPack::PlayerDataPack(const PlayerDataPack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::KWMsg::Ident(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_property()) {
    property_ = new ::KWMsg::ObjectPropertyList(*from.property_);
  } else {
    property_ = nullptr;
  }
  if (from._internal_has_record()) {
    record_ = new ::KWMsg::ObjectRecordList(*from.record_);
  } else {
    record_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.PlayerDataPack)
}

void PlayerDataPack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&record_) -
    reinterpret_cast<char*>(&id_)) + sizeof(record_));
}

PlayerDataPack::~PlayerDataPack() {
  // @@protoc_insertion_point(destructor:KWMsg.PlayerDataPack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerDataPack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete property_;
  if (this != internal_default_instance()) delete record_;
}

void PlayerDataPack::ArenaDtor(void* object) {
  PlayerDataPack* _this = reinterpret_cast< PlayerDataPack* >(object);
  (void)_this;
}
void PlayerDataPack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerDataPack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerDataPack::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PlayerDataPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && property_ != nullptr) {
    delete property_;
  }
  property_ = nullptr;
  if (GetArenaForAllocation() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDataPack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ObjectPropertyList property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ObjectRecordList record = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerDataPack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PlayerDataPack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .KWMsg.ObjectPropertyList property = 2;
  if (this->has_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::property(this), target, stream);
  }

  // .KWMsg.ObjectRecordList record = 3;
  if (this->has_record()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::record(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PlayerDataPack)
  return target;
}

size_t PlayerDataPack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PlayerDataPack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .KWMsg.ObjectPropertyList property = 2;
  if (this->has_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *property_);
  }

  // .KWMsg.ObjectRecordList record = 3;
  if (this->has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerDataPack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PlayerDataPack)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerDataPack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerDataPack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PlayerDataPack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PlayerDataPack)
    MergeFrom(*source);
  }
}

void PlayerDataPack::MergeFrom(const PlayerDataPack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PlayerDataPack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::KWMsg::Ident::MergeFrom(from._internal_id());
  }
  if (from.has_property()) {
    _internal_mutable_property()->::KWMsg::ObjectPropertyList::MergeFrom(from._internal_property());
  }
  if (from.has_record()) {
    _internal_mutable_record()->::KWMsg::ObjectRecordList::MergeFrom(from._internal_record());
  }
}

void PlayerDataPack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PlayerDataPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDataPack::CopyFrom(const PlayerDataPack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PlayerDataPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDataPack::IsInitialized() const {
  return true;
}

void PlayerDataPack::InternalSwap(PlayerDataPack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerDataPack, record_)
      + sizeof(PlayerDataPack::record_)
      - PROTOBUF_FIELD_OFFSET(PlayerDataPack, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDataPack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[23]);
}

// ===================================================================

class ServerHeartBeat::_Internal {
 public:
};

ServerHeartBeat::ServerHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ServerHeartBeat)
}
ServerHeartBeat::ServerHeartBeat(const ServerHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ServerHeartBeat)
}

void ServerHeartBeat::SharedCtor() {
count_ = 0;
}

ServerHeartBeat::~ServerHeartBeat() {
  // @@protoc_insertion_point(destructor:KWMsg.ServerHeartBeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerHeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerHeartBeat::ArenaDtor(void* object) {
  ServerHeartBeat* _this = reinterpret_cast< ServerHeartBeat* >(object);
  (void)_this;
}
void ServerHeartBeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ServerHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerHeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ServerHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ServerHeartBeat)
  return target;
}

size_t ServerHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ServerHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ServerHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ServerHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ServerHeartBeat)
    MergeFrom(*source);
  }
}

void ServerHeartBeat::MergeFrom(const ServerHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ServerHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ServerHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ServerHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerHeartBeat::CopyFrom(const ServerHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ServerHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerHeartBeat::IsInitialized() const {
  return true;
}

void ServerHeartBeat::InternalSwap(ServerHeartBeat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerHeartBeat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[24]);
}

// ===================================================================

class PlayerOnlineNotify::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const PlayerOnlineNotify* msg);
  static const ::KWMsg::Ident& client_id(const PlayerOnlineNotify* msg);
};

const ::KWMsg::Ident&
PlayerOnlineNotify::_Internal::player_id(const PlayerOnlineNotify* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
PlayerOnlineNotify::_Internal::client_id(const PlayerOnlineNotify* msg) {
  return *msg->client_id_;
}
void PlayerOnlineNotify::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void PlayerOnlineNotify::clear_client_id() {
  if (GetArenaForAllocation() == nullptr && client_id_ != nullptr) {
    delete client_id_;
  }
  client_id_ = nullptr;
}
PlayerOnlineNotify::PlayerOnlineNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PlayerOnlineNotify)
}
PlayerOnlineNotify::PlayerOnlineNotify(const PlayerOnlineNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  digital_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_digital_id().empty()) {
    digital_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digital_id(), 
      GetArenaForAllocation());
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArenaForAllocation());
  }
  avatar_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_frame().empty()) {
    avatar_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_frame(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_client_id()) {
    client_id_ = new ::KWMsg::Ident(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.PlayerOnlineNotify)
}

void PlayerOnlineNotify::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
digital_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(level_));
}

PlayerOnlineNotify::~PlayerOnlineNotify() {
  // @@protoc_insertion_point(destructor:KWMsg.PlayerOnlineNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerOnlineNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digital_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete client_id_;
}

void PlayerOnlineNotify::ArenaDtor(void* object) {
  PlayerOnlineNotify* _this = reinterpret_cast< PlayerOnlineNotify* >(object);
  (void)_this;
}
void PlayerOnlineNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerOnlineNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerOnlineNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PlayerOnlineNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  digital_id_.ClearToEmpty();
  nickname_.ClearToEmpty();
  avatar_.ClearToEmpty();
  avatar_frame_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && client_id_ != nullptr) {
    delete client_id_;
  }
  client_id_ = nullptr;
  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerOnlineNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes digital_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_digital_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 proxy_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          proxy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident client_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nickname = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatar = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatar_frame = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_avatar_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerOnlineNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PlayerOnlineNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes account = 2;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_account(), target);
  }

  // bytes digital_id = 3;
  if (!this->digital_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_digital_id(), target);
  }

  // int32 game_id = 4;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_game_id(), target);
  }

  // int32 proxy_id = 5;
  if (this->proxy_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_proxy_id(), target);
  }

  // .KWMsg.Ident client_id = 6;
  if (this->has_client_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::client_id(this), target, stream);
  }

  // bytes nickname = 7;
  if (!this->nickname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_nickname(), target);
  }

  // bytes avatar = 8;
  if (!this->avatar().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_avatar(), target);
  }

  // bytes avatar_frame = 9;
  if (!this->avatar_frame().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_avatar_frame(), target);
  }

  // int32 level = 10;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PlayerOnlineNotify)
  return target;
}

size_t PlayerOnlineNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PlayerOnlineNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 2;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes digital_id = 3;
  if (!this->digital_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digital_id());
  }

  // bytes nickname = 7;
  if (!this->nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nickname());
  }

  // bytes avatar = 8;
  if (!this->avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar());
  }

  // bytes avatar_frame = 9;
  if (!this->avatar_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar_frame());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident client_id = 6;
  if (this->has_client_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  // int32 game_id = 4;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  // int32 proxy_id = 5;
  if (this->proxy_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_proxy_id());
  }

  // int32 level = 10;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerOnlineNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PlayerOnlineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerOnlineNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerOnlineNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PlayerOnlineNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PlayerOnlineNotify)
    MergeFrom(*source);
  }
}

void PlayerOnlineNotify::MergeFrom(const PlayerOnlineNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PlayerOnlineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from.digital_id().empty()) {
    _internal_set_digital_id(from._internal_digital_id());
  }
  if (!from.nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (!from.avatar().empty()) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (!from.avatar_frame().empty()) {
    _internal_set_avatar_frame(from._internal_avatar_frame());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_client_id()) {
    _internal_mutable_client_id()->::KWMsg::Ident::MergeFrom(from._internal_client_id());
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
  if (from.proxy_id() != 0) {
    _internal_set_proxy_id(from._internal_proxy_id());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void PlayerOnlineNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PlayerOnlineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerOnlineNotify::CopyFrom(const PlayerOnlineNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PlayerOnlineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerOnlineNotify::IsInitialized() const {
  return true;
}

void PlayerOnlineNotify::InternalSwap(PlayerOnlineNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &digital_id_, GetArenaForAllocation(),
      &other->digital_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, GetArenaForAllocation(),
      &other->nickname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_, GetArenaForAllocation(),
      &other->avatar_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_frame_, GetArenaForAllocation(),
      &other->avatar_frame_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerOnlineNotify, level_)
      + sizeof(PlayerOnlineNotify::level_)
      - PROTOBUF_FIELD_OFFSET(PlayerOnlineNotify, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerOnlineNotify::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[25]);
}

// ===================================================================

class PlayerOfflineNotify::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const PlayerOfflineNotify* msg);
  static const ::KWMsg::Ident& client_id(const PlayerOfflineNotify* msg);
};

const ::KWMsg::Ident&
PlayerOfflineNotify::_Internal::player_id(const PlayerOfflineNotify* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
PlayerOfflineNotify::_Internal::client_id(const PlayerOfflineNotify* msg) {
  return *msg->client_id_;
}
void PlayerOfflineNotify::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void PlayerOfflineNotify::clear_client_id() {
  if (GetArenaForAllocation() == nullptr && client_id_ != nullptr) {
    delete client_id_;
  }
  client_id_ = nullptr;
}
PlayerOfflineNotify::PlayerOfflineNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PlayerOfflineNotify)
}
PlayerOfflineNotify::PlayerOfflineNotify(const PlayerOfflineNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  digital_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_digital_id().empty()) {
    digital_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digital_id(), 
      GetArenaForAllocation());
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArenaForAllocation());
  }
  avatar_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_frame().empty()) {
    avatar_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_frame(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_client_id()) {
    client_id_ = new ::KWMsg::Ident(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.PlayerOfflineNotify)
}

void PlayerOfflineNotify::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
digital_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(level_));
}

PlayerOfflineNotify::~PlayerOfflineNotify() {
  // @@protoc_insertion_point(destructor:KWMsg.PlayerOfflineNotify)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerOfflineNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digital_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete client_id_;
}

void PlayerOfflineNotify::ArenaDtor(void* object) {
  PlayerOfflineNotify* _this = reinterpret_cast< PlayerOfflineNotify* >(object);
  (void)_this;
}
void PlayerOfflineNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerOfflineNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerOfflineNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PlayerOfflineNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  digital_id_.ClearToEmpty();
  nickname_.ClearToEmpty();
  avatar_.ClearToEmpty();
  avatar_frame_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && client_id_ != nullptr) {
    delete client_id_;
  }
  client_id_ = nullptr;
  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerOfflineNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes digital_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_digital_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 proxy_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          proxy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident client_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nickname = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatar = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatar_frame = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_avatar_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerOfflineNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PlayerOfflineNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes account = 2;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_account(), target);
  }

  // bytes digital_id = 3;
  if (!this->digital_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_digital_id(), target);
  }

  // int32 game_id = 4;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_game_id(), target);
  }

  // int32 proxy_id = 5;
  if (this->proxy_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_proxy_id(), target);
  }

  // .KWMsg.Ident client_id = 6;
  if (this->has_client_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::client_id(this), target, stream);
  }

  // bytes nickname = 7;
  if (!this->nickname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_nickname(), target);
  }

  // bytes avatar = 8;
  if (!this->avatar().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_avatar(), target);
  }

  // bytes avatar_frame = 9;
  if (!this->avatar_frame().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_avatar_frame(), target);
  }

  // int32 level = 10;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PlayerOfflineNotify)
  return target;
}

size_t PlayerOfflineNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PlayerOfflineNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 2;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes digital_id = 3;
  if (!this->digital_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digital_id());
  }

  // bytes nickname = 7;
  if (!this->nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nickname());
  }

  // bytes avatar = 8;
  if (!this->avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar());
  }

  // bytes avatar_frame = 9;
  if (!this->avatar_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar_frame());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident client_id = 6;
  if (this->has_client_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  // int32 game_id = 4;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  // int32 proxy_id = 5;
  if (this->proxy_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_proxy_id());
  }

  // int32 level = 10;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerOfflineNotify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PlayerOfflineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerOfflineNotify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerOfflineNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PlayerOfflineNotify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PlayerOfflineNotify)
    MergeFrom(*source);
  }
}

void PlayerOfflineNotify::MergeFrom(const PlayerOfflineNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PlayerOfflineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from.digital_id().empty()) {
    _internal_set_digital_id(from._internal_digital_id());
  }
  if (!from.nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (!from.avatar().empty()) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (!from.avatar_frame().empty()) {
    _internal_set_avatar_frame(from._internal_avatar_frame());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_client_id()) {
    _internal_mutable_client_id()->::KWMsg::Ident::MergeFrom(from._internal_client_id());
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
  if (from.proxy_id() != 0) {
    _internal_set_proxy_id(from._internal_proxy_id());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void PlayerOfflineNotify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PlayerOfflineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerOfflineNotify::CopyFrom(const PlayerOfflineNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PlayerOfflineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerOfflineNotify::IsInitialized() const {
  return true;
}

void PlayerOfflineNotify::InternalSwap(PlayerOfflineNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &digital_id_, GetArenaForAllocation(),
      &other->digital_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, GetArenaForAllocation(),
      &other->nickname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_, GetArenaForAllocation(),
      &other->avatar_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_frame_, GetArenaForAllocation(),
      &other->avatar_frame_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerOfflineNotify, level_)
      + sizeof(PlayerOfflineNotify::level_)
      - PROTOBUF_FIELD_OFFSET(PlayerOfflineNotify, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerOfflineNotify::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[26]);
}

// ===================================================================

class ReqAckSetGameServerState::_Internal {
 public:
};

ReqAckSetGameServerState::ReqAckSetGameServerState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAckSetGameServerState)
}
ReqAckSetGameServerState::ReqAckSetGameServerState(const ReqAckSetGameServerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_state_, &from.server_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&kick_off_all_) -
    reinterpret_cast<char*>(&server_state_)) + sizeof(kick_off_all_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAckSetGameServerState)
}

void ReqAckSetGameServerState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kick_off_all_) -
    reinterpret_cast<char*>(&server_state_)) + sizeof(kick_off_all_));
}

ReqAckSetGameServerState::~ReqAckSetGameServerState() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAckSetGameServerState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAckSetGameServerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqAckSetGameServerState::ArenaDtor(void* object) {
  ReqAckSetGameServerState* _this = reinterpret_cast< ReqAckSetGameServerState* >(object);
  (void)_this;
}
void ReqAckSetGameServerState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAckSetGameServerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAckSetGameServerState::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAckSetGameServerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kick_off_all_) -
      reinterpret_cast<char*>(&server_state_)) + sizeof(kick_off_all_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAckSetGameServerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EServerState server_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_server_state(static_cast<::KWMsg::EServerState>(val));
        } else goto handle_unusual;
        continue;
      // int32 kick_off_all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          kick_off_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckSetGameServerState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAckSetGameServerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EServerState server_state = 1;
  if (this->server_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_server_state(), target);
  }

  // int32 kick_off_all = 2;
  if (this->kick_off_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_kick_off_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAckSetGameServerState)
  return target;
}

size_t ReqAckSetGameServerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAckSetGameServerState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EServerState server_state = 1;
  if (this->server_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_server_state());
  }

  // int32 kick_off_all = 2;
  if (this->kick_off_all() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kick_off_all());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckSetGameServerState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAckSetGameServerState)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckSetGameServerState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckSetGameServerState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAckSetGameServerState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAckSetGameServerState)
    MergeFrom(*source);
  }
}

void ReqAckSetGameServerState::MergeFrom(const ReqAckSetGameServerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAckSetGameServerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_state() != 0) {
    _internal_set_server_state(from._internal_server_state());
  }
  if (from.kick_off_all() != 0) {
    _internal_set_kick_off_all(from._internal_kick_off_all());
  }
}

void ReqAckSetGameServerState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAckSetGameServerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSetGameServerState::CopyFrom(const ReqAckSetGameServerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAckSetGameServerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSetGameServerState::IsInitialized() const {
  return true;
}

void ReqAckSetGameServerState::InternalSwap(ReqAckSetGameServerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqAckSetGameServerState, kick_off_all_)
      + sizeof(ReqAckSetGameServerState::kick_off_all_)
      - PROTOBUF_FIELD_OFFSET(ReqAckSetGameServerState, server_state_)>(
          reinterpret_cast<char*>(&server_state_),
          reinterpret_cast<char*>(&other->server_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckSetGameServerState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[27]);
}

// ===================================================================

class ReqAckRefreshConfig::_Internal {
 public:
};

ReqAckRefreshConfig::ReqAckRefreshConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAckRefreshConfig)
}
ReqAckRefreshConfig::ReqAckRefreshConfig(const ReqAckRefreshConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAckRefreshConfig)
}

void ReqAckRefreshConfig::SharedCtor() {
ts_ = int64_t{0};
}

ReqAckRefreshConfig::~ReqAckRefreshConfig() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAckRefreshConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAckRefreshConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqAckRefreshConfig::ArenaDtor(void* object) {
  ReqAckRefreshConfig* _this = reinterpret_cast< ReqAckRefreshConfig* >(object);
  (void)_this;
}
void ReqAckRefreshConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAckRefreshConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAckRefreshConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAckRefreshConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ts_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAckRefreshConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckRefreshConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAckRefreshConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAckRefreshConfig)
  return target;
}

size_t ReqAckRefreshConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAckRefreshConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckRefreshConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAckRefreshConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckRefreshConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckRefreshConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAckRefreshConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAckRefreshConfig)
    MergeFrom(*source);
  }
}

void ReqAckRefreshConfig::MergeFrom(const ReqAckRefreshConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAckRefreshConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
}

void ReqAckRefreshConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAckRefreshConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckRefreshConfig::CopyFrom(const ReqAckRefreshConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAckRefreshConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckRefreshConfig::IsInitialized() const {
  return true;
}

void ReqAckRefreshConfig::InternalSwap(ReqAckRefreshConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ts_, other->ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckRefreshConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[28]);
}

// ===================================================================

class ReqReconnect::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqReconnect* msg);
  static const ::KWMsg::Ident& client_id(const ReqReconnect* msg);
};

const ::KWMsg::Ident&
ReqReconnect::_Internal::player_id(const ReqReconnect* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
ReqReconnect::_Internal::client_id(const ReqReconnect* msg) {
  return *msg->client_id_;
}
void ReqReconnect::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqReconnect::clear_client_id() {
  if (GetArenaForAllocation() == nullptr && client_id_ != nullptr) {
    delete client_id_;
  }
  client_id_ = nullptr;
}
ReqReconnect::ReqReconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqReconnect)
}
ReqReconnect::ReqReconnect(const ReqReconnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_client_id()) {
    client_id_ = new ::KWMsg::Ident(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqReconnect)
}

void ReqReconnect::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(client_id_));
}

ReqReconnect::~ReqReconnect() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqReconnect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqReconnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete client_id_;
}

void ReqReconnect::ArenaDtor(void* object) {
  ReqReconnect* _this = reinterpret_cast< ReqReconnect* >(object);
  (void)_this;
}
void ReqReconnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqReconnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqReconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqReconnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && client_id_ != nullptr) {
    delete client_id_;
  }
  client_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqReconnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqReconnect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqReconnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Ident client_id = 2;
  if (this->has_client_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::client_id(this), target, stream);
  }

  // bytes token = 3;
  if (!this->token().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqReconnect)
  return target;
}

size_t ReqReconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqReconnect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 3;
  if (!this->token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident client_id = 2;
  if (this->has_client_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqReconnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqReconnect)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqReconnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqReconnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqReconnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqReconnect)
    MergeFrom(*source);
  }
}

void ReqReconnect::MergeFrom(const ReqReconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqReconnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.token().empty()) {
    _internal_set_token(from._internal_token());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_client_id()) {
    _internal_mutable_client_id()->::KWMsg::Ident::MergeFrom(from._internal_client_id());
  }
}

void ReqReconnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqReconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqReconnect::CopyFrom(const ReqReconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqReconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqReconnect::IsInitialized() const {
  return true;
}

void ReqReconnect::InternalSwap(ReqReconnect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, GetArenaForAllocation(),
      &other->token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqReconnect, client_id_)
      + sizeof(ReqReconnect::client_id_)
      - PROTOBUF_FIELD_OFFSET(ReqReconnect, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqReconnect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[29]);
}

// ===================================================================

class ReqRecord::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqRecord* msg);
};

const ::KWMsg::Ident&
ReqRecord::_Internal::player_id(const ReqRecord* msg) {
  return *msg->player_id_;
}
void ReqRecord::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqRecord::ReqRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqRecord)
}
ReqRecord::ReqRecord(const ReqRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&req_type_, &from.req_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&req_type_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqRecord)
}

void ReqRecord::SharedCtor() {
record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(count_));
}

ReqRecord::~ReqRecord() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqRecord::ArenaDtor(void* object) {
  ReqRecord* _this = reinterpret_cast< ReqRecord* >(object);
  (void)_this;
}
void ReqRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&req_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&req_type_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ReqRecord.EAskRecordType req_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_req_type(static_cast<::KWMsg::ReqRecord_EAskRecordType>(val));
        } else goto handle_unusual;
        continue;
      // bytes record_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cursor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.ReqRecord.EAskRecordType req_type = 2;
  if (this->req_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_req_type(), target);
  }

  // bytes record_name = 3;
  if (!this->record_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_record_name(), target);
  }

  // int32 cursor = 4;
  if (this->cursor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cursor(), target);
  }

  // int32 count = 5;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqRecord)
  return target;
}

size_t ReqRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes record_name = 3;
  if (!this->record_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.ReqRecord.EAskRecordType req_type = 2;
  if (this->req_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_req_type());
  }

  // int32 cursor = 4;
  if (this->cursor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cursor());
  }

  // int32 count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqRecord)
    MergeFrom(*source);
  }
}

void ReqRecord::MergeFrom(const ReqRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.record_name().empty()) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.req_type() != 0) {
    _internal_set_req_type(from._internal_req_type());
  }
  if (from.cursor() != 0) {
    _internal_set_cursor(from._internal_cursor());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ReqRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRecord::CopyFrom(const ReqRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRecord::IsInitialized() const {
  return true;
}

void ReqRecord::InternalSwap(ReqRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &record_name_, GetArenaForAllocation(),
      &other->record_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqRecord, count_)
      + sizeof(ReqRecord::count_)
      - PROTOBUF_FIELD_OFFSET(ReqRecord, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqRecord::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[30]);
}

// ===================================================================

class SyncQueueupRegStatus::_Internal {
 public:
};

SyncQueueupRegStatus::SyncQueueupRegStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncQueueupRegStatus)
}
SyncQueueupRegStatus::SyncQueueupRegStatus(const SyncQueueupRegStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_server_id_, &from.target_server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&keep_online_sec_) -
    reinterpret_cast<char*>(&target_server_id_)) + sizeof(keep_online_sec_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncQueueupRegStatus)
}

void SyncQueueupRegStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_server_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&keep_online_sec_) -
    reinterpret_cast<char*>(&target_server_id_)) + sizeof(keep_online_sec_));
}

SyncQueueupRegStatus::~SyncQueueupRegStatus() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncQueueupRegStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncQueueupRegStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncQueueupRegStatus::ArenaDtor(void* object) {
  SyncQueueupRegStatus* _this = reinterpret_cast< SyncQueueupRegStatus* >(object);
  (void)_this;
}
void SyncQueueupRegStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncQueueupRegStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncQueueupRegStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncQueueupRegStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keep_online_sec_) -
      reinterpret_cast<char*>(&target_server_id_)) + sizeof(keep_online_sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncQueueupRegStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 target_server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_registered = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_registered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 keep_online_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          keep_online_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 keep_online_sec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          keep_online_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncQueueupRegStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncQueueupRegStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 target_server_id = 1;
  if (this->target_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_target_server_id(), target);
  }

  // int32 is_registered = 2;
  if (this->is_registered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_is_registered(), target);
  }

  // int32 keep_online_status = 3;
  if (this->keep_online_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_keep_online_status(), target);
  }

  // int32 keep_online_sec = 4;
  if (this->keep_online_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_keep_online_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncQueueupRegStatus)
  return target;
}

size_t SyncQueueupRegStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncQueueupRegStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 target_server_id = 1;
  if (this->target_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_server_id());
  }

  // int32 is_registered = 2;
  if (this->is_registered() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_registered());
  }

  // int32 keep_online_status = 3;
  if (this->keep_online_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_keep_online_status());
  }

  // int32 keep_online_sec = 4;
  if (this->keep_online_sec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_keep_online_sec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncQueueupRegStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncQueueupRegStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncQueueupRegStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncQueueupRegStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncQueueupRegStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncQueueupRegStatus)
    MergeFrom(*source);
  }
}

void SyncQueueupRegStatus::MergeFrom(const SyncQueueupRegStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncQueueupRegStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_server_id() != 0) {
    _internal_set_target_server_id(from._internal_target_server_id());
  }
  if (from.is_registered() != 0) {
    _internal_set_is_registered(from._internal_is_registered());
  }
  if (from.keep_online_status() != 0) {
    _internal_set_keep_online_status(from._internal_keep_online_status());
  }
  if (from.keep_online_sec() != 0) {
    _internal_set_keep_online_sec(from._internal_keep_online_sec());
  }
}

void SyncQueueupRegStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncQueueupRegStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncQueueupRegStatus::CopyFrom(const SyncQueueupRegStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncQueueupRegStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncQueueupRegStatus::IsInitialized() const {
  return true;
}

void SyncQueueupRegStatus::InternalSwap(SyncQueueupRegStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncQueueupRegStatus, keep_online_sec_)
      + sizeof(SyncQueueupRegStatus::keep_online_sec_)
      - PROTOBUF_FIELD_OFFSET(SyncQueueupRegStatus, target_server_id_)>(
          reinterpret_cast<char*>(&target_server_id_),
          reinterpret_cast<char*>(&other->target_server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncQueueupRegStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[31]);
}

// ===================================================================

class SyncWorldState::_Internal {
 public:
};

SyncWorldState::SyncWorldState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.SyncWorldState)
}
SyncWorldState::SyncWorldState(const SyncWorldState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  role_num_ = from.role_num_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.SyncWorldState)
}

void SyncWorldState::SharedCtor() {
role_num_ = 0;
}

SyncWorldState::~SyncWorldState() {
  // @@protoc_insertion_point(destructor:KWMsg.SyncWorldState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncWorldState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SyncWorldState::ArenaDtor(void* object) {
  SyncWorldState* _this = reinterpret_cast< SyncWorldState* >(object);
  (void)_this;
}
void SyncWorldState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncWorldState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncWorldState::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.SyncWorldState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncWorldState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 role_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          role_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncWorldState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.SyncWorldState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 role_num = 1;
  if (this->role_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_role_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.SyncWorldState)
  return target;
}

size_t SyncWorldState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.SyncWorldState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 role_num = 1;
  if (this->role_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_role_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncWorldState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.SyncWorldState)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncWorldState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncWorldState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.SyncWorldState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.SyncWorldState)
    MergeFrom(*source);
  }
}

void SyncWorldState::MergeFrom(const SyncWorldState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.SyncWorldState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_num() != 0) {
    _internal_set_role_num(from._internal_role_num());
  }
}

void SyncWorldState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.SyncWorldState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncWorldState::CopyFrom(const SyncWorldState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.SyncWorldState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncWorldState::IsInitialized() const {
  return true;
}

void SyncWorldState::InternalSwap(SyncWorldState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(role_num_, other->role_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncWorldState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[32]);
}

// ===================================================================

class ReqRegister::_Internal {
 public:
};

ReqRegister::ReqRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqRegister)
}
ReqRegister::ReqRegister(const ReqRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqRegister)
}

void ReqRegister::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReqRegister::~ReqRegister() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqRegister)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqRegister::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqRegister::ArenaDtor(void* object) {
  ReqRegister* _this = reinterpret_cast< ReqRegister* >(object);
  (void)_this;
}
void ReqRegister::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  name_.ClearToEmpty();
  password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqRegister::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqRegister::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // bytes name = 2;
  if (!this->name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes password = 3;
  if (!this->password().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqRegister)
  return target;
}

size_t ReqRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqRegister)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes name = 2;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes password = 3;
  if (!this->password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqRegister::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRegister* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqRegister>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqRegister)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqRegister)
    MergeFrom(*source);
  }
}

void ReqRegister::MergeFrom(const ReqRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from.password().empty()) {
    _internal_set_password(from._internal_password());
  }
}

void ReqRegister::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRegister::CopyFrom(const ReqRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRegister::IsInitialized() const {
  return true;
}

void ReqRegister::InternalSwap(ReqRegister* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, GetArenaForAllocation(),
      &other->password_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqRegister::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[33]);
}

// ===================================================================

class AckRegister::_Internal {
 public:
};

AckRegister::AckRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckRegister)
}
AckRegister::AckRegister(const AckRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckRegister)
}

void AckRegister::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckRegister::~AckRegister() {
  // @@protoc_insertion_point(destructor:KWMsg.AckRegister)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckRegister::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckRegister::ArenaDtor(void* object) {
  AckRegister* _this = reinterpret_cast< AckRegister* >(object);
  (void)_this;
}
void AckRegister::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  name_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckRegister::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckRegister::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes account = 2;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_account(), target);
  }

  // bytes name = 3;
  if (!this->name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckRegister)
  return target;
}

size_t AckRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckRegister)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 2;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes name = 3;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckRegister::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const AckRegister* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckRegister>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckRegister)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckRegister)
    MergeFrom(*source);
  }
}

void AckRegister::MergeFrom(const AckRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckRegister::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRegister::CopyFrom(const AckRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRegister::IsInitialized() const {
  return true;
}

void AckRegister::InternalSwap(AckRegister* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckRegister::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgpregame_2eproto_getter, &descriptor_table_kwmsgpregame_2eproto_once,
      file_level_metadata_kwmsgpregame_2eproto[34]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace KWMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KWMsg::ServerInfoReport* Arena::CreateMaybeMessage< ::KWMsg::ServerInfoReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ServerInfoReport >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ServerInfoReportList* Arena::CreateMaybeMessage< ::KWMsg::ServerInfoReportList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ServerInfoReportList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckEventResult* Arena::CreateMaybeMessage< ::KWMsg::AckEventResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckEventResult >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqLogin* Arena::CreateMaybeMessage< ::KWMsg::ReqLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckLogin* Arena::CreateMaybeMessage< ::KWMsg::AckLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqLogout* Arena::CreateMaybeMessage< ::KWMsg::ReqLogout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqLogout >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckLogout* Arena::CreateMaybeMessage< ::KWMsg::AckLogout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckLogout >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ServerInfo* Arena::CreateMaybeMessage< ::KWMsg::ServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqConnectWorld* Arena::CreateMaybeMessage< ::KWMsg::ReqConnectWorld >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqConnectWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckConnectWorldResult* Arena::CreateMaybeMessage< ::KWMsg::AckConnectWorldResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckConnectWorldResult >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqVerifyJwt* Arena::CreateMaybeMessage< ::KWMsg::ReqVerifyJwt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqVerifyJwt >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckVerifyJwt* Arena::CreateMaybeMessage< ::KWMsg::AckVerifyJwt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckVerifyJwt >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAckKickFromWorld* Arena::CreateMaybeMessage< ::KWMsg::ReqAckKickFromWorld >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAckKickFromWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqLeaveGame* Arena::CreateMaybeMessage< ::KWMsg::ReqLeaveGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqLeaveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckLeaveGame* Arena::CreateMaybeMessage< ::KWMsg::AckLeaveGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckLeaveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqEnterGame* Arena::CreateMaybeMessage< ::KWMsg::ReqEnterGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqEnterGame >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqPlayerLite* Arena::CreateMaybeMessage< ::KWMsg::ReqPlayerLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqPlayerLite >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqUpdateAccountLastLoginInfo* Arena::CreateMaybeMessage< ::KWMsg::ReqUpdateAccountLastLoginInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqUpdateAccountLastLoginInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PlayerLiteInfo* Arena::CreateMaybeMessage< ::KWMsg::PlayerLiteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PlayerLiteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckPlayerLite* Arena::CreateMaybeMessage< ::KWMsg::AckPlayerLite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckPlayerLite >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqUpdateAccountPlayer* Arena::CreateMaybeMessage< ::KWMsg::ReqUpdateAccountPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqUpdateAccountPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqLoadPlayerData* Arena::CreateMaybeMessage< ::KWMsg::ReqLoadPlayerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqLoadPlayerData >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckLoadPlayerData* Arena::CreateMaybeMessage< ::KWMsg::AckLoadPlayerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckLoadPlayerData >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PlayerDataPack* Arena::CreateMaybeMessage< ::KWMsg::PlayerDataPack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PlayerDataPack >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ServerHeartBeat* Arena::CreateMaybeMessage< ::KWMsg::ServerHeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ServerHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PlayerOnlineNotify* Arena::CreateMaybeMessage< ::KWMsg::PlayerOnlineNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PlayerOnlineNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PlayerOfflineNotify* Arena::CreateMaybeMessage< ::KWMsg::PlayerOfflineNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PlayerOfflineNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAckSetGameServerState* Arena::CreateMaybeMessage< ::KWMsg::ReqAckSetGameServerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAckSetGameServerState >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAckRefreshConfig* Arena::CreateMaybeMessage< ::KWMsg::ReqAckRefreshConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAckRefreshConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqReconnect* Arena::CreateMaybeMessage< ::KWMsg::ReqReconnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqReconnect >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqRecord* Arena::CreateMaybeMessage< ::KWMsg::ReqRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncQueueupRegStatus* Arena::CreateMaybeMessage< ::KWMsg::SyncQueueupRegStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncQueueupRegStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::SyncWorldState* Arena::CreateMaybeMessage< ::KWMsg::SyncWorldState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::SyncWorldState >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqRegister* Arena::CreateMaybeMessage< ::KWMsg::ReqRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckRegister* Arena::CreateMaybeMessage< ::KWMsg::AckRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckRegister >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
