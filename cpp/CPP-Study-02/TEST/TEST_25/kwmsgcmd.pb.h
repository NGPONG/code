// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kwmsgcmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kwmsgcmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kwmsgcmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kwmsgcmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kwmsgcmd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kwmsgcmd_2eproto;
namespace KWMsg {
class AckGmGetPlayerData;
struct AckGmGetPlayerDataDefaultTypeInternal;
extern AckGmGetPlayerDataDefaultTypeInternal _AckGmGetPlayerData_default_instance_;
class ReqCmdExecute;
struct ReqCmdExecuteDefaultTypeInternal;
extern ReqCmdExecuteDefaultTypeInternal _ReqCmdExecute_default_instance_;
class ReqGmGetPlayerData;
struct ReqGmGetPlayerDataDefaultTypeInternal;
extern ReqGmGetPlayerDataDefaultTypeInternal _ReqGmGetPlayerData_default_instance_;
}  // namespace KWMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::KWMsg::AckGmGetPlayerData* Arena::CreateMaybeMessage<::KWMsg::AckGmGetPlayerData>(Arena*);
template<> ::KWMsg::ReqCmdExecute* Arena::CreateMaybeMessage<::KWMsg::ReqCmdExecute>(Arena*);
template<> ::KWMsg::ReqGmGetPlayerData* Arena::CreateMaybeMessage<::KWMsg::ReqGmGetPlayerData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace KWMsg {

enum EGmGetPlayerDataType : int {
  EDT_MIN = 0,
  EDT_PROPERTY = 1,
  EDT_RECORD = 2,
  EDT_MAX = 3,
  EGmGetPlayerDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EGmGetPlayerDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EGmGetPlayerDataType_IsValid(int value);
constexpr EGmGetPlayerDataType EGmGetPlayerDataType_MIN = EDT_MIN;
constexpr EGmGetPlayerDataType EGmGetPlayerDataType_MAX = EDT_MAX;
constexpr int EGmGetPlayerDataType_ARRAYSIZE = EGmGetPlayerDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGmGetPlayerDataType_descriptor();
template<typename T>
inline const std::string& EGmGetPlayerDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGmGetPlayerDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGmGetPlayerDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGmGetPlayerDataType_descriptor(), enum_t_value);
}
inline bool EGmGetPlayerDataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGmGetPlayerDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGmGetPlayerDataType>(
    EGmGetPlayerDataType_descriptor(), name, value);
}
enum EGmGetPlayerDataIDType : int {
  EIT_MIN = 0,
  EIT_ACCOUNT_ID = 1,
  EIT_DIGITAL_ID = 2,
  EIT_GUID = 3,
  EIT_MAX = 4,
  EGmGetPlayerDataIDType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EGmGetPlayerDataIDType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EGmGetPlayerDataIDType_IsValid(int value);
constexpr EGmGetPlayerDataIDType EGmGetPlayerDataIDType_MIN = EIT_MIN;
constexpr EGmGetPlayerDataIDType EGmGetPlayerDataIDType_MAX = EIT_MAX;
constexpr int EGmGetPlayerDataIDType_ARRAYSIZE = EGmGetPlayerDataIDType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGmGetPlayerDataIDType_descriptor();
template<typename T>
inline const std::string& EGmGetPlayerDataIDType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGmGetPlayerDataIDType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGmGetPlayerDataIDType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGmGetPlayerDataIDType_descriptor(), enum_t_value);
}
inline bool EGmGetPlayerDataIDType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGmGetPlayerDataIDType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGmGetPlayerDataIDType>(
    EGmGetPlayerDataIDType_descriptor(), name, value);
}
enum EAckGmGetPlayerDataRetType : int {
  EART_SUCCESS = 0,
  EART_ERR_PLAYER_NOT_EXIST = 1,
  EART_ERR_KEY_NOT_EXIST = 2,
  EART_ERR_DATA_TYPE = 3,
  EART_ERR_ID_TYPE = 4,
  EART_ERR_DATA_VALUE = 5,
  EART_ERR_UNKNOWN = 6,
  EAckGmGetPlayerDataRetType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EAckGmGetPlayerDataRetType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EAckGmGetPlayerDataRetType_IsValid(int value);
constexpr EAckGmGetPlayerDataRetType EAckGmGetPlayerDataRetType_MIN = EART_SUCCESS;
constexpr EAckGmGetPlayerDataRetType EAckGmGetPlayerDataRetType_MAX = EART_ERR_UNKNOWN;
constexpr int EAckGmGetPlayerDataRetType_ARRAYSIZE = EAckGmGetPlayerDataRetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAckGmGetPlayerDataRetType_descriptor();
template<typename T>
inline const std::string& EAckGmGetPlayerDataRetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EAckGmGetPlayerDataRetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EAckGmGetPlayerDataRetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EAckGmGetPlayerDataRetType_descriptor(), enum_t_value);
}
inline bool EAckGmGetPlayerDataRetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EAckGmGetPlayerDataRetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EAckGmGetPlayerDataRetType>(
    EAckGmGetPlayerDataRetType_descriptor(), name, value);
}
// ===================================================================

class ReqCmdExecute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCmdExecute) */ {
 public:
  inline ReqCmdExecute() : ReqCmdExecute(nullptr) {}
  ~ReqCmdExecute() override;
  explicit constexpr ReqCmdExecute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCmdExecute(const ReqCmdExecute& from);
  ReqCmdExecute(ReqCmdExecute&& from) noexcept
    : ReqCmdExecute() {
    *this = ::std::move(from);
  }

  inline ReqCmdExecute& operator=(const ReqCmdExecute& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCmdExecute& operator=(ReqCmdExecute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCmdExecute& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCmdExecute* internal_default_instance() {
    return reinterpret_cast<const ReqCmdExecute*>(
               &_ReqCmdExecute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqCmdExecute& a, ReqCmdExecute& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCmdExecute* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCmdExecute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCmdExecute* New() const final {
    return new ReqCmdExecute();
  }

  ReqCmdExecute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCmdExecute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCmdExecute& from);
  void MergeFrom(const ReqCmdExecute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCmdExecute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCmdExecute";
  }
  protected:
  explicit ReqCmdExecute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdOperatorFieldNumber = 1,
    kPayloadFieldNumber = 4,
    kCmdFieldNumber = 2,
    kWorldIdFieldNumber = 3,
    kReqIdFieldNumber = 5,
  };
  // bytes cmd_operator = 1;
  void clear_cmd_operator();
  const std::string& cmd_operator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cmd_operator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cmd_operator();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_cmd_operator();
  void set_allocated_cmd_operator(std::string* cmd_operator);
  private:
  const std::string& _internal_cmd_operator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd_operator(const std::string& value);
  std::string* _internal_mutable_cmd_operator();
  public:

  // bytes payload = 4;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // int32 cmd = 2;
  void clear_cmd();
  ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;
  void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;
  void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_id = 3;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 req_id = 5;
  void clear_req_id();
  ::PROTOBUF_NAMESPACE_ID::int64 req_id() const;
  void set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_req_id() const;
  void _internal_set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCmdExecute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_operator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 req_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// -------------------------------------------------------------------

class ReqGmGetPlayerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGmGetPlayerData) */ {
 public:
  inline ReqGmGetPlayerData() : ReqGmGetPlayerData(nullptr) {}
  ~ReqGmGetPlayerData() override;
  explicit constexpr ReqGmGetPlayerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGmGetPlayerData(const ReqGmGetPlayerData& from);
  ReqGmGetPlayerData(ReqGmGetPlayerData&& from) noexcept
    : ReqGmGetPlayerData() {
    *this = ::std::move(from);
  }

  inline ReqGmGetPlayerData& operator=(const ReqGmGetPlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGmGetPlayerData& operator=(ReqGmGetPlayerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGmGetPlayerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGmGetPlayerData* internal_default_instance() {
    return reinterpret_cast<const ReqGmGetPlayerData*>(
               &_ReqGmGetPlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReqGmGetPlayerData& a, ReqGmGetPlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGmGetPlayerData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGmGetPlayerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGmGetPlayerData* New() const final {
    return new ReqGmGetPlayerData();
  }

  ReqGmGetPlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGmGetPlayerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGmGetPlayerData& from);
  void MergeFrom(const ReqGmGetPlayerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGmGetPlayerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGmGetPlayerData";
  }
  protected:
  explicit ReqGmGetPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataNamesFieldNumber = 5,
    kIdFieldNumber = 1,
    kIdTypeFieldNumber = 2,
    kDataTypeFieldNumber = 3,
    kReqIdFieldNumber = 4,
  };
  // repeated bytes data_names = 5;
  int data_names_size() const;
  private:
  int _internal_data_names_size() const;
  public:
  void clear_data_names();
  const std::string& data_names(int index) const;
  std::string* mutable_data_names(int index);
  void set_data_names(int index, const std::string& value);
  void set_data_names(int index, std::string&& value);
  void set_data_names(int index, const char* value);
  void set_data_names(int index, const void* value, size_t size);
  std::string* add_data_names();
  void add_data_names(const std::string& value);
  void add_data_names(std::string&& value);
  void add_data_names(const char* value);
  void add_data_names(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_names();
  private:
  const std::string& _internal_data_names(int index) const;
  std::string* _internal_add_data_names();
  public:

  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .KWMsg.EGmGetPlayerDataIDType id_type = 2;
  void clear_id_type();
  ::KWMsg::EGmGetPlayerDataIDType id_type() const;
  void set_id_type(::KWMsg::EGmGetPlayerDataIDType value);
  private:
  ::KWMsg::EGmGetPlayerDataIDType _internal_id_type() const;
  void _internal_set_id_type(::KWMsg::EGmGetPlayerDataIDType value);
  public:

  // .KWMsg.EGmGetPlayerDataType data_type = 3;
  void clear_data_type();
  ::KWMsg::EGmGetPlayerDataType data_type() const;
  void set_data_type(::KWMsg::EGmGetPlayerDataType value);
  private:
  ::KWMsg::EGmGetPlayerDataType _internal_data_type() const;
  void _internal_set_data_type(::KWMsg::EGmGetPlayerDataType value);
  public:

  // int64 req_id = 4;
  void clear_req_id();
  ::PROTOBUF_NAMESPACE_ID::int64 req_id() const;
  void set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_req_id() const;
  void _internal_set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGmGetPlayerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int id_type_;
  int data_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 req_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// -------------------------------------------------------------------

class AckGmGetPlayerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckGmGetPlayerData) */ {
 public:
  inline AckGmGetPlayerData() : AckGmGetPlayerData(nullptr) {}
  ~AckGmGetPlayerData() override;
  explicit constexpr AckGmGetPlayerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckGmGetPlayerData(const AckGmGetPlayerData& from);
  AckGmGetPlayerData(AckGmGetPlayerData&& from) noexcept
    : AckGmGetPlayerData() {
    *this = ::std::move(from);
  }

  inline AckGmGetPlayerData& operator=(const AckGmGetPlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckGmGetPlayerData& operator=(AckGmGetPlayerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckGmGetPlayerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckGmGetPlayerData* internal_default_instance() {
    return reinterpret_cast<const AckGmGetPlayerData*>(
               &_AckGmGetPlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AckGmGetPlayerData& a, AckGmGetPlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(AckGmGetPlayerData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckGmGetPlayerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckGmGetPlayerData* New() const final {
    return new AckGmGetPlayerData();
  }

  AckGmGetPlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckGmGetPlayerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckGmGetPlayerData& from);
  void MergeFrom(const AckGmGetPlayerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckGmGetPlayerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckGmGetPlayerData";
  }
  protected:
  explicit AckGmGetPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataNamesFieldNumber = 6,
    kDataValuesFieldNumber = 7,
    kIdFieldNumber = 1,
    kReqIdFieldNumber = 3,
    kIdTypeFieldNumber = 2,
    kDataTypeFieldNumber = 4,
    kRetTypeFieldNumber = 5,
  };
  // repeated bytes data_names = 6;
  int data_names_size() const;
  private:
  int _internal_data_names_size() const;
  public:
  void clear_data_names();
  const std::string& data_names(int index) const;
  std::string* mutable_data_names(int index);
  void set_data_names(int index, const std::string& value);
  void set_data_names(int index, std::string&& value);
  void set_data_names(int index, const char* value);
  void set_data_names(int index, const void* value, size_t size);
  std::string* add_data_names();
  void add_data_names(const std::string& value);
  void add_data_names(std::string&& value);
  void add_data_names(const char* value);
  void add_data_names(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_names();
  private:
  const std::string& _internal_data_names(int index) const;
  std::string* _internal_add_data_names();
  public:

  // repeated bytes data_values = 7;
  int data_values_size() const;
  private:
  int _internal_data_values_size() const;
  public:
  void clear_data_values();
  const std::string& data_values(int index) const;
  std::string* mutable_data_values(int index);
  void set_data_values(int index, const std::string& value);
  void set_data_values(int index, std::string&& value);
  void set_data_values(int index, const char* value);
  void set_data_values(int index, const void* value, size_t size);
  std::string* add_data_values();
  void add_data_values(const std::string& value);
  void add_data_values(std::string&& value);
  void add_data_values(const char* value);
  void add_data_values(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_values();
  private:
  const std::string& _internal_data_values(int index) const;
  std::string* _internal_add_data_values();
  public:

  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int64 req_id = 3;
  void clear_req_id();
  ::PROTOBUF_NAMESPACE_ID::int64 req_id() const;
  void set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_req_id() const;
  void _internal_set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .KWMsg.EGmGetPlayerDataIDType id_type = 2;
  void clear_id_type();
  ::KWMsg::EGmGetPlayerDataIDType id_type() const;
  void set_id_type(::KWMsg::EGmGetPlayerDataIDType value);
  private:
  ::KWMsg::EGmGetPlayerDataIDType _internal_id_type() const;
  void _internal_set_id_type(::KWMsg::EGmGetPlayerDataIDType value);
  public:

  // .KWMsg.EGmGetPlayerDataType data_type = 4;
  void clear_data_type();
  ::KWMsg::EGmGetPlayerDataType data_type() const;
  void set_data_type(::KWMsg::EGmGetPlayerDataType value);
  private:
  ::KWMsg::EGmGetPlayerDataType _internal_data_type() const;
  void _internal_set_data_type(::KWMsg::EGmGetPlayerDataType value);
  public:

  // .KWMsg.EAckGmGetPlayerDataRetType ret_type = 5;
  void clear_ret_type();
  ::KWMsg::EAckGmGetPlayerDataRetType ret_type() const;
  void set_ret_type(::KWMsg::EAckGmGetPlayerDataRetType value);
  private:
  ::KWMsg::EAckGmGetPlayerDataRetType _internal_ret_type() const;
  void _internal_set_ret_type(::KWMsg::EAckGmGetPlayerDataRetType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckGmGetPlayerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int64 req_id_;
  int id_type_;
  int data_type_;
  int ret_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqCmdExecute

// bytes cmd_operator = 1;
inline void ReqCmdExecute::clear_cmd_operator() {
  cmd_operator_.ClearToEmpty();
}
inline const std::string& ReqCmdExecute::cmd_operator() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCmdExecute.cmd_operator)
  return _internal_cmd_operator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCmdExecute::set_cmd_operator(ArgT0&& arg0, ArgT... args) {
 
 cmd_operator_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCmdExecute.cmd_operator)
}
inline std::string* ReqCmdExecute::mutable_cmd_operator() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCmdExecute.cmd_operator)
  return _internal_mutable_cmd_operator();
}
inline const std::string& ReqCmdExecute::_internal_cmd_operator() const {
  return cmd_operator_.Get();
}
inline void ReqCmdExecute::_internal_set_cmd_operator(const std::string& value) {
  
  cmd_operator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCmdExecute::_internal_mutable_cmd_operator() {
  
  return cmd_operator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCmdExecute::release_cmd_operator() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCmdExecute.cmd_operator)
  return cmd_operator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCmdExecute::set_allocated_cmd_operator(std::string* cmd_operator) {
  if (cmd_operator != nullptr) {
    
  } else {
    
  }
  cmd_operator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd_operator,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCmdExecute.cmd_operator)
}

// int32 cmd = 2;
inline void ReqCmdExecute::clear_cmd() {
  cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCmdExecute::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCmdExecute::cmd() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCmdExecute.cmd)
  return _internal_cmd();
}
inline void ReqCmdExecute::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cmd_ = value;
}
inline void ReqCmdExecute::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCmdExecute.cmd)
}

// int32 world_id = 3;
inline void ReqCmdExecute::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCmdExecute::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCmdExecute::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCmdExecute.world_id)
  return _internal_world_id();
}
inline void ReqCmdExecute::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void ReqCmdExecute::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCmdExecute.world_id)
}

// bytes payload = 4;
inline void ReqCmdExecute::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& ReqCmdExecute::payload() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCmdExecute.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCmdExecute::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCmdExecute.payload)
}
inline std::string* ReqCmdExecute::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCmdExecute.payload)
  return _internal_mutable_payload();
}
inline const std::string& ReqCmdExecute::_internal_payload() const {
  return payload_.Get();
}
inline void ReqCmdExecute::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCmdExecute::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCmdExecute::release_payload() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCmdExecute.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCmdExecute::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCmdExecute.payload)
}

// int64 req_id = 5;
inline void ReqCmdExecute::clear_req_id() {
  req_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqCmdExecute::_internal_req_id() const {
  return req_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqCmdExecute::req_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCmdExecute.req_id)
  return _internal_req_id();
}
inline void ReqCmdExecute::_internal_set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  req_id_ = value;
}
inline void ReqCmdExecute::set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_req_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCmdExecute.req_id)
}

// -------------------------------------------------------------------

// ReqGmGetPlayerData

// bytes id = 1;
inline void ReqGmGetPlayerData::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ReqGmGetPlayerData::id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmGetPlayerData.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmGetPlayerData::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmGetPlayerData.id)
}
inline std::string* ReqGmGetPlayerData::mutable_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmGetPlayerData.id)
  return _internal_mutable_id();
}
inline const std::string& ReqGmGetPlayerData::_internal_id() const {
  return id_.Get();
}
inline void ReqGmGetPlayerData::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmGetPlayerData::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmGetPlayerData::release_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmGetPlayerData.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmGetPlayerData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmGetPlayerData.id)
}

// .KWMsg.EGmGetPlayerDataIDType id_type = 2;
inline void ReqGmGetPlayerData::clear_id_type() {
  id_type_ = 0;
}
inline ::KWMsg::EGmGetPlayerDataIDType ReqGmGetPlayerData::_internal_id_type() const {
  return static_cast< ::KWMsg::EGmGetPlayerDataIDType >(id_type_);
}
inline ::KWMsg::EGmGetPlayerDataIDType ReqGmGetPlayerData::id_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmGetPlayerData.id_type)
  return _internal_id_type();
}
inline void ReqGmGetPlayerData::_internal_set_id_type(::KWMsg::EGmGetPlayerDataIDType value) {
  
  id_type_ = value;
}
inline void ReqGmGetPlayerData::set_id_type(::KWMsg::EGmGetPlayerDataIDType value) {
  _internal_set_id_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmGetPlayerData.id_type)
}

// .KWMsg.EGmGetPlayerDataType data_type = 3;
inline void ReqGmGetPlayerData::clear_data_type() {
  data_type_ = 0;
}
inline ::KWMsg::EGmGetPlayerDataType ReqGmGetPlayerData::_internal_data_type() const {
  return static_cast< ::KWMsg::EGmGetPlayerDataType >(data_type_);
}
inline ::KWMsg::EGmGetPlayerDataType ReqGmGetPlayerData::data_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmGetPlayerData.data_type)
  return _internal_data_type();
}
inline void ReqGmGetPlayerData::_internal_set_data_type(::KWMsg::EGmGetPlayerDataType value) {
  
  data_type_ = value;
}
inline void ReqGmGetPlayerData::set_data_type(::KWMsg::EGmGetPlayerDataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmGetPlayerData.data_type)
}

// int64 req_id = 4;
inline void ReqGmGetPlayerData::clear_req_id() {
  req_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqGmGetPlayerData::_internal_req_id() const {
  return req_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqGmGetPlayerData::req_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmGetPlayerData.req_id)
  return _internal_req_id();
}
inline void ReqGmGetPlayerData::_internal_set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  req_id_ = value;
}
inline void ReqGmGetPlayerData::set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_req_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmGetPlayerData.req_id)
}

// repeated bytes data_names = 5;
inline int ReqGmGetPlayerData::_internal_data_names_size() const {
  return data_names_.size();
}
inline int ReqGmGetPlayerData::data_names_size() const {
  return _internal_data_names_size();
}
inline void ReqGmGetPlayerData::clear_data_names() {
  data_names_.Clear();
}
inline std::string* ReqGmGetPlayerData::add_data_names() {
  // @@protoc_insertion_point(field_add_mutable:KWMsg.ReqGmGetPlayerData.data_names)
  return _internal_add_data_names();
}
inline const std::string& ReqGmGetPlayerData::_internal_data_names(int index) const {
  return data_names_.Get(index);
}
inline const std::string& ReqGmGetPlayerData::data_names(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmGetPlayerData.data_names)
  return _internal_data_names(index);
}
inline std::string* ReqGmGetPlayerData::mutable_data_names(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmGetPlayerData.data_names)
  return data_names_.Mutable(index);
}
inline void ReqGmGetPlayerData::set_data_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmGetPlayerData.data_names)
  data_names_.Mutable(index)->assign(value);
}
inline void ReqGmGetPlayerData::set_data_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmGetPlayerData.data_names)
  data_names_.Mutable(index)->assign(std::move(value));
}
inline void ReqGmGetPlayerData::set_data_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KWMsg.ReqGmGetPlayerData.data_names)
}
inline void ReqGmGetPlayerData::set_data_names(int index, const void* value, size_t size) {
  data_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KWMsg.ReqGmGetPlayerData.data_names)
}
inline std::string* ReqGmGetPlayerData::_internal_add_data_names() {
  return data_names_.Add();
}
inline void ReqGmGetPlayerData::add_data_names(const std::string& value) {
  data_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KWMsg.ReqGmGetPlayerData.data_names)
}
inline void ReqGmGetPlayerData::add_data_names(std::string&& value) {
  data_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KWMsg.ReqGmGetPlayerData.data_names)
}
inline void ReqGmGetPlayerData::add_data_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KWMsg.ReqGmGetPlayerData.data_names)
}
inline void ReqGmGetPlayerData::add_data_names(const void* value, size_t size) {
  data_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KWMsg.ReqGmGetPlayerData.data_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReqGmGetPlayerData::data_names() const {
  // @@protoc_insertion_point(field_list:KWMsg.ReqGmGetPlayerData.data_names)
  return data_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReqGmGetPlayerData::mutable_data_names() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ReqGmGetPlayerData.data_names)
  return &data_names_;
}

// -------------------------------------------------------------------

// AckGmGetPlayerData

// bytes id = 1;
inline void AckGmGetPlayerData::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& AckGmGetPlayerData::id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGmGetPlayerData.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckGmGetPlayerData::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.id)
}
inline std::string* AckGmGetPlayerData::mutable_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGmGetPlayerData.id)
  return _internal_mutable_id();
}
inline const std::string& AckGmGetPlayerData::_internal_id() const {
  return id_.Get();
}
inline void AckGmGetPlayerData::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckGmGetPlayerData::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckGmGetPlayerData::release_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckGmGetPlayerData.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckGmGetPlayerData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckGmGetPlayerData.id)
}

// .KWMsg.EGmGetPlayerDataIDType id_type = 2;
inline void AckGmGetPlayerData::clear_id_type() {
  id_type_ = 0;
}
inline ::KWMsg::EGmGetPlayerDataIDType AckGmGetPlayerData::_internal_id_type() const {
  return static_cast< ::KWMsg::EGmGetPlayerDataIDType >(id_type_);
}
inline ::KWMsg::EGmGetPlayerDataIDType AckGmGetPlayerData::id_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGmGetPlayerData.id_type)
  return _internal_id_type();
}
inline void AckGmGetPlayerData::_internal_set_id_type(::KWMsg::EGmGetPlayerDataIDType value) {
  
  id_type_ = value;
}
inline void AckGmGetPlayerData::set_id_type(::KWMsg::EGmGetPlayerDataIDType value) {
  _internal_set_id_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.id_type)
}

// int64 req_id = 3;
inline void AckGmGetPlayerData::clear_req_id() {
  req_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AckGmGetPlayerData::_internal_req_id() const {
  return req_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AckGmGetPlayerData::req_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGmGetPlayerData.req_id)
  return _internal_req_id();
}
inline void AckGmGetPlayerData::_internal_set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  req_id_ = value;
}
inline void AckGmGetPlayerData::set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_req_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.req_id)
}

// .KWMsg.EGmGetPlayerDataType data_type = 4;
inline void AckGmGetPlayerData::clear_data_type() {
  data_type_ = 0;
}
inline ::KWMsg::EGmGetPlayerDataType AckGmGetPlayerData::_internal_data_type() const {
  return static_cast< ::KWMsg::EGmGetPlayerDataType >(data_type_);
}
inline ::KWMsg::EGmGetPlayerDataType AckGmGetPlayerData::data_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGmGetPlayerData.data_type)
  return _internal_data_type();
}
inline void AckGmGetPlayerData::_internal_set_data_type(::KWMsg::EGmGetPlayerDataType value) {
  
  data_type_ = value;
}
inline void AckGmGetPlayerData::set_data_type(::KWMsg::EGmGetPlayerDataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.data_type)
}

// .KWMsg.EAckGmGetPlayerDataRetType ret_type = 5;
inline void AckGmGetPlayerData::clear_ret_type() {
  ret_type_ = 0;
}
inline ::KWMsg::EAckGmGetPlayerDataRetType AckGmGetPlayerData::_internal_ret_type() const {
  return static_cast< ::KWMsg::EAckGmGetPlayerDataRetType >(ret_type_);
}
inline ::KWMsg::EAckGmGetPlayerDataRetType AckGmGetPlayerData::ret_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGmGetPlayerData.ret_type)
  return _internal_ret_type();
}
inline void AckGmGetPlayerData::_internal_set_ret_type(::KWMsg::EAckGmGetPlayerDataRetType value) {
  
  ret_type_ = value;
}
inline void AckGmGetPlayerData::set_ret_type(::KWMsg::EAckGmGetPlayerDataRetType value) {
  _internal_set_ret_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.ret_type)
}

// repeated bytes data_names = 6;
inline int AckGmGetPlayerData::_internal_data_names_size() const {
  return data_names_.size();
}
inline int AckGmGetPlayerData::data_names_size() const {
  return _internal_data_names_size();
}
inline void AckGmGetPlayerData::clear_data_names() {
  data_names_.Clear();
}
inline std::string* AckGmGetPlayerData::add_data_names() {
  // @@protoc_insertion_point(field_add_mutable:KWMsg.AckGmGetPlayerData.data_names)
  return _internal_add_data_names();
}
inline const std::string& AckGmGetPlayerData::_internal_data_names(int index) const {
  return data_names_.Get(index);
}
inline const std::string& AckGmGetPlayerData::data_names(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGmGetPlayerData.data_names)
  return _internal_data_names(index);
}
inline std::string* AckGmGetPlayerData::mutable_data_names(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGmGetPlayerData.data_names)
  return data_names_.Mutable(index);
}
inline void AckGmGetPlayerData::set_data_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.data_names)
  data_names_.Mutable(index)->assign(value);
}
inline void AckGmGetPlayerData::set_data_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.data_names)
  data_names_.Mutable(index)->assign(std::move(value));
}
inline void AckGmGetPlayerData::set_data_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KWMsg.AckGmGetPlayerData.data_names)
}
inline void AckGmGetPlayerData::set_data_names(int index, const void* value, size_t size) {
  data_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KWMsg.AckGmGetPlayerData.data_names)
}
inline std::string* AckGmGetPlayerData::_internal_add_data_names() {
  return data_names_.Add();
}
inline void AckGmGetPlayerData::add_data_names(const std::string& value) {
  data_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KWMsg.AckGmGetPlayerData.data_names)
}
inline void AckGmGetPlayerData::add_data_names(std::string&& value) {
  data_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KWMsg.AckGmGetPlayerData.data_names)
}
inline void AckGmGetPlayerData::add_data_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KWMsg.AckGmGetPlayerData.data_names)
}
inline void AckGmGetPlayerData::add_data_names(const void* value, size_t size) {
  data_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KWMsg.AckGmGetPlayerData.data_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AckGmGetPlayerData::data_names() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckGmGetPlayerData.data_names)
  return data_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AckGmGetPlayerData::mutable_data_names() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckGmGetPlayerData.data_names)
  return &data_names_;
}

// repeated bytes data_values = 7;
inline int AckGmGetPlayerData::_internal_data_values_size() const {
  return data_values_.size();
}
inline int AckGmGetPlayerData::data_values_size() const {
  return _internal_data_values_size();
}
inline void AckGmGetPlayerData::clear_data_values() {
  data_values_.Clear();
}
inline std::string* AckGmGetPlayerData::add_data_values() {
  // @@protoc_insertion_point(field_add_mutable:KWMsg.AckGmGetPlayerData.data_values)
  return _internal_add_data_values();
}
inline const std::string& AckGmGetPlayerData::_internal_data_values(int index) const {
  return data_values_.Get(index);
}
inline const std::string& AckGmGetPlayerData::data_values(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGmGetPlayerData.data_values)
  return _internal_data_values(index);
}
inline std::string* AckGmGetPlayerData::mutable_data_values(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGmGetPlayerData.data_values)
  return data_values_.Mutable(index);
}
inline void AckGmGetPlayerData::set_data_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.data_values)
  data_values_.Mutable(index)->assign(value);
}
inline void AckGmGetPlayerData::set_data_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.data_values)
  data_values_.Mutable(index)->assign(std::move(value));
}
inline void AckGmGetPlayerData::set_data_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KWMsg.AckGmGetPlayerData.data_values)
}
inline void AckGmGetPlayerData::set_data_values(int index, const void* value, size_t size) {
  data_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KWMsg.AckGmGetPlayerData.data_values)
}
inline std::string* AckGmGetPlayerData::_internal_add_data_values() {
  return data_values_.Add();
}
inline void AckGmGetPlayerData::add_data_values(const std::string& value) {
  data_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KWMsg.AckGmGetPlayerData.data_values)
}
inline void AckGmGetPlayerData::add_data_values(std::string&& value) {
  data_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KWMsg.AckGmGetPlayerData.data_values)
}
inline void AckGmGetPlayerData::add_data_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KWMsg.AckGmGetPlayerData.data_values)
}
inline void AckGmGetPlayerData::add_data_values(const void* value, size_t size) {
  data_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KWMsg.AckGmGetPlayerData.data_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AckGmGetPlayerData::data_values() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckGmGetPlayerData.data_values)
  return data_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AckGmGetPlayerData::mutable_data_values() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckGmGetPlayerData.data_values)
  return &data_values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KWMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KWMsg::EGmGetPlayerDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EGmGetPlayerDataType>() {
  return ::KWMsg::EGmGetPlayerDataType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::EGmGetPlayerDataIDType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EGmGetPlayerDataIDType>() {
  return ::KWMsg::EGmGetPlayerDataIDType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::EAckGmGetPlayerDataRetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EAckGmGetPlayerDataRetType>() {
  return ::KWMsg::EAckGmGetPlayerDataRetType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kwmsgcmd_2eproto
