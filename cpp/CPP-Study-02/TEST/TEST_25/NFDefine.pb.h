// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFDefine.proto

#ifndef PROTOBUF_INCLUDED_NFDefine_2eproto
#define PROTOBUF_INCLUDED_NFDefine_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_NFDefine_2eproto LIBPROTOC_EXPORT

namespace protobuf_NFDefine_2eproto {
// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void LIBPROTOC_EXPORT AddDescriptors();
}  // namespace protobuf_NFDefine_2eproto
namespace NFMsg {
}  // namespace NFMsg
namespace NFMsg {

enum EGameEventCode {
  EGEC_SUCCESS = 0,
  EGEC_UNKOWN_ERROR = 1,
  EGEC_ACCOUNT_EXIST = 2,
  EGEC_ACCOUNTPWD_INVALID = 3,
  EGEC_ACCOUNT_USING = 4,
  EGEC_ACCOUNT_LOCKED = 5,
  EGEC_ACCOUNT_SUCCESS = 6,
  EGEC_VERIFY_KEY_SUCCESS = 7,
  EGEC_VERIFY_KEY_FAIL = 8,
  EGEC_SELECTSERVER_SUCCESS = 9,
  EGEC_SELECTSERVER_FAIL = 10,
  EGEC_DB_ERROR = 11,
  EGEC_DB_INVALID_KEY_ERROR = 5083,
  EGEC_SERVER_INVALID = 12,
  EGEC_SERVER_MAINTAINING = 13,
  EGEC_REGISTER_DISABLE = 14,
  EGEC_MAIN_ROLE_NOT_EXIST = 15,
  EGEC_MAIN_ROLE_SAME = 16,
  EGEC_MAIN_ROLE_NO_NAME = 17,
  EGEC_MAIN_ROLE_ALREADY_CREATED = 18,
  EGEC_CONFIGURATION_TABLE_ERROR = 20,
  EGEC_RECORD_NOT_FIND = 21,
  EGEC_ROLE_HAS_FIGHT = 30,
  EGEC_PB_PARAM_ERROR = 31,
  EGEC_RECONNECT_SUCCESS = 40,
  EGEC_RECONNECT_FAIL = 41,
  EGEC_PLAYER_NAME_EXIST = 50,
  EGEC_UPDATE_PLAYER_INFO_SUCCESS = 51,
  EGEC_UPDATE_PLAYER_INFO_FAIL = 52,
  EGEC_PLAYER_NAME_INVALID_LENGTH = 53,
  EGEC_PLAYER_NAME_INVALID_FORMAT = 54,
  EGEC_PLAYER_NAME_INVALID_WORDS = 55,
  EGEC_PLAYER_NAME_FAIL = 56,
  EGEC_PLAYER_NAME_NO_ENOUGH_MONEY = 57,
  EGEC_NAME_EXIST = 58,
  EGEC_REGISTER_ACCOUNT_USED = 60,
  EGEC_REGISTER_ACCOUNT_INVALID = 61,
  EGEC_REGISTER_NAME_USED = 62,
  EGEC_REGISTER_NAME_INVALID = 63,
  EGEC_REGISTER_DB_FAIL = 64,
  EGEC_REGISTER_DB_PARAM_ERROR = 65,
  EGEC_REGISTER_CDKEY_ERROR = 66,
  EGEC_LOGIN_ACCOUNT_NOT_EXIST = 67,
  EGEC_CREATE_PLAYER_NAME_USED = 71,
  EGEC_CREATE_PLAYER_NAME_INVALID = 72,
  EGEC_CREATE_PLAYER_DB_PARAM_ERROR = 73,
  EGEC_SIGN_SUCCESS = 80,
  EGEC_SIGN_FAIL = 81,
  EGEC_SIGN_DB_ERROR = 82,
  EGEC_SIGN_ALREADY_TODAY = 83,
  EGEC_TAKE_SIGN_REWARD_FAILED = 84,
  EGEC_TAKE_SIGN_TOTAL_REWARD_FAILED = 85,
  EGEC_UPDATE_LOCATION_SUCCESS = 90,
  EGEC_UPDATE_LOCATION_FAIL = 91,
  EGEC_STOP_LOCATION_FAIL = 92,
  EGEC_ENCOURAGE_SUCCESS = 100,
  EGEC_ENCOURAGE_FAIL = 101,
  EGEC_ENC_NO_ENOUGH_MONEY = 110,
  EGEC_ENC_TARGET_NUM_IS_MAXIMUM = 111,
  EGEC_ENC_ALREADY_TODAY = 112,
  EGEC_GET_NEARBY_NO_MORE = 120,
  EGEC_GET_NEARBY_NOT_ENOUGH_MONEY = 121,
  EGEC_GET_NEARBY_FAIL = 122,
  EGEC_CHALLENGE_NOT_START = 130,
  EGEC_CHALLENGE_HAS_ENDED = 131,
  EGEC_CHALLENGE_IN_CD_STATUS = 132,
  EGEC_BOSS_HAS_DEAD = 133,
  EGEC_AD_CODE_INVALID = 134,
  EGEC_STEWARD_ID_INVALID = 140,
  EGEC_ROLE_RES_IS_INVALID = 141,
  EGEC_ROLE_RES_IS_LOCKED = 142,
  EGEC_ROLE_RES_NOT_PURCHASE = 143,
  EGEC_ROLE_RES_NO_ENOUGH_MONEY = 144,
  EGEC_ROLE_RES_PURCHASE_FAIL = 145,
  EGEC_TOUCH_TIME_LIMIT = 146,
  EGEC_TOUCH_FAILED = 147,
  EGEC_SCENE_STRENGTH_VALUE_NO_ENOUGH = 150,
  EGEC_SCENE_BATTLE_ARGUMENT_INVALID = 151,
  EGEC_SCENE_COST_TYPE_INVALID = 152,
  EGEC_SCENE_NOT_EXIST = 153,
  EGEC_SCENE_PLAYER_ALREADY_IN = 154,
  EGEC_SCENE_MOPTICKET_VALUE_NO_ENOUGH = 155,
  EGEC_SCENE_FUEL_VALUE_NO_ENOUGH = 156,
  EGEC_STORY_ROLE_POS_INVALID = 160,
  EGEC_STORY_TRIGGER_STATUS_INVALID = 161,
  EGEC_MAIN_ROLE_HAS_LOCKED = 170,
  EGEC_MAIN_ROLE_RES_NOT_ENOUGH = 171,
  EGEC_MAIN_ROLE_LEVEL_NOT_ENOUGH = 172,
  EGEC_TRIGGER_INVALID_SCENE = 180,
  EGEC_TRIGGER_INVALID_TRIGGER_ID = 181,
  EGEC_TRIGGER_NO_ENOUGH_TIMES = 182,
  EGEC_TRIGGER_INVALID_FUNCTION_GROUP = 183,
  EGEC_TRIGGER_CONDITION_NOT_PASSED = 184,
  EGEC_REGION_INVALID_SCENE = 190,
  EGEC_REGION_INVALID_REGION_ID = 191,
  EGEC_SKILL_RELEASER_STATE_INVALID = 200,
  EGEC_SKILL_CD = 201,
  EGEC_SKILL_CONSUME_INVALID = 202,
  EGEC_SKILL_TARGET_STATE_INVALID = 203,
  EGEC_SKILL_TARGET_LOST = 204,
  EGEC_SKILL_SELECT_TARGET_FAIL = 205,
  EGEC_SKILL_CONSUME_FAIL = 206,
  EGEC_SKILL_CD_FAIL = 207,
  EGEC_SKILL_CAST_EFFECTS_FAIL = 208,
  EGEC_SKILL_INVALID = 209,
  EGEC_SKILL_NO_AVAILABLE_AI_SKILL = 210,
  EGEC_SKILL_SEALED = 211,
  EGEC_ROLE_NOT_IN_TURN = 220,
  EGEC_ROLE_ABNORMAL_STATE = 221,
  EGEC_ROLE_TRIGGER_SPECIAL_SKILL = 230,
  EGEC_ROLE_ABANDON_SPECIAL_SKILL = 231,
  EGEC_ROLE_HAS_NO_SPECIAL_SKILL = 232,
  EGEC_TRIGGER_OTE = 240,
  EGEC_SKILL_ID_INVALID = 300,
  EGEC_SKILL_SLOT_INVALID = 301,
  EGEC_MAIN_ROLE_ID_INVALID = 302,
  EGEC_TALENT_ID_INVALID = 303,
  EGEC_UNLOCK_TALENT_PLAYER_LEVEL_LIMIT = 304,
  EGEC_UNLOCK_TALENT_NO_ENOUGH_COST = 305,
  EGEC_TALENT_LOCKED = 306,
  EGEC_TALENT_LEVEL_ALREADY_MAX = 307,
  EGEC_UPGRADE_TALENT_NO_ENOUGH_COST = 308,
  EGEC_SWITCH_TALENT_ID_SAME = 309,
  EGEC_SLOT_TYPE_NOT_MATCH = 310,
  EGEC_SLOT_TYPE_INVALID = 311,
  EGEC_SLOT_LOCKED = 312,
  EGEC_ASSEMBLY_SKIL_ID_SAME = 313,
  EGEC_SKILL_BOOK_TYPE_INVALID = 314,
  EGEC_SKILL_BOOK_SUB_TYPE_INVALID = 315,
  EGEC_SKILL_BOOK_NO_ENOUGH = 316,
  EGEC_NO_PASSIVE_SKILL_UPDATE_PROGRESS = 317,
  EGEC_SKILL_HAS_UNLOCKED = 318,
  EGEC_LAST_HOCRUX_SCHEME = 319,
  EGEC_ATTACH_SKILL_ID_LOCKED = 320,
  EGEC_HORCRUX_SCHEME_NOT_USING = 350,
  EGEC_INVALID_HORCURX_ID = 351,
  EGEC_HORCRUX_CANNOT_STRENGTHEN = 352,
  EGEC_HORCRUX_LEVEL_ALREADY_MAX = 353,
  EGEC_HORCRUX_STRENGTHEN_COST_NO_ENOUGH = 354,
  EGEC_HORCRUX_STRENGTHEN_MATERIAL_SELF = 355,
  EGEC_HORCRUX_STRENGTHEN_MATERIAL_USED_IN_SCHEME = 356,
  EGEC_HORCRUX_NO_STRENGTHEN_ATTR = 357,
  EGEC_HORCRUX_BAPTIZE_INDEX_INVALID = 358,
  EGEC_HORCRUX_NO_BASIC_ATTR = 359,
  EGEC_HORCRUX_RECAST_INDEX_INVALID = 360,
  EGEC_HORCRUX_BAPTIZE_MATERIAL_EXP_NO_ENOUGH = 361,
  EGEC_HORCRUX_SCHEME_NUM_MAX = 362,
  EGEC_HORCRUX_RESOLVE_COST_NO_ENOUGH = 363,
  EGEC_HORCRUX_RESOLVE_MATERIAL_USED_IN_SCHEME = 364,
  EGEC_HORCRUX_NOT_LEGEND = 365,
  EGEC_HORCRUX_REPLENISH_POS_ILLEGALITY = 366,
  EGEC_HORCRUX_STONE_TYPE_ILLEGALITY = 367,
  EGEC_HORCRUX_STONE_REPLENISH_POS_SAME = 368,
  EGEC_HORCRUX_HEIRLOOM_CANT_BE_MATERIAL = 369,
  EGEC_INVALID_HORCRUX_DROP_TYPE = 370,
  EGEC_HORCRUX_HEIRLOOM_CANT_OPERATE = 371,
  EGEC_CUR_TITLE_EMPTY = 380,
  EGEC_TITLE_ID_INVALID = 381,
  EGEC_TITLE_NOT_UNLOCK = 382,
  EGEC_ATTR_NOT_RELATIVE_VALUE = 390,
  EGEC_RECRUIT_COUPLE_ID_INVALID = 400,
  EGEC_RECRUIT_NO_ENOUGH_FRAGMENTS = 401,
  EGEC_RECRUIT_ALREADY_RECRUIT = 402,
  EGEC_COUPLE_ID_INVALID = 410,
  EGEC_COUPLE_STAR_ALREADY_MAX = 411,
  EGEC_COUPLE_STAR_UPGRADE_NO_ENOUGH_FRAGMENTS = 412,
  EGEC_COUPLE_BREAKTHROUGH_ALREADY_MAX = 420,
  EGEC_COUPLE_BREAKTHROUGH_NO_ENOUGH_DAZZLES = 421,
  EGEC_COUPLE_ADD_EXP_FAILED = 430,
  EGEC_COUPLE_ADD_EXP_NO_ENOUGH_GOLD = 431,
  EGEC_COUPLE_WEAR_RUNE_NO_ENOUGH_ITEMS = 450,
  EGEC_RUNE_NOT_MEET_REQUIREMENT = 451,
  EGEC_COUPLE_RUNE_ITEMS_NOT_READY = 460,
  EGEC_COUPLE_RUNE_LEVEL_UP_ALREADY_MAX = 461,
  EGEC_COUPLE_GIFT_EVENT_NO_JOIN_TIMES = 478,
  EGEC_COUPLE_GIFT_EVENT_TRIGGER_ID_INVALID = 479,
  EGEC_COUPLE_GIVE_GIFT_ALREADY_MAX = 480,
  EGEC_COUPLE_GIVE_GIFT_ID_INVALID = 481,
  EGEC_COUPLE_GIVE_GIFT_NO_ENOUGH_RESOURCE = 482,
  EGEC_COUPLE_GIVE_GIFT_NO_ENOUGH_GIFT = 483,
  EGEC_COUPLE_EMOTION_EXP_OR_LEVEL_IS_FULL = 484,
  EGEC_COUPLE_GIVE_GIFT_ALREADY_MAX_LEVEL = 485,
  EGEC_COUPLE_CALL_GHOST_RES_LACK = 486,
  EGEC_COUPLE_CALL_GHOST_LEVEL_LACK = 487,
  EGEC_COUPLE_SAVE_CALL_GHOST_NOT_EXIST = 488,
  EGEC_COMMENT_IS_LOCKED = 489,
  EGEC_COUPLE_HAS_ENCOUNTER = 490,
  EGEC_ITEM_RESOLVE_COUNT_ERROR = 491,
  EGEC_COUPLE_UNLOCK_SKIN_RES_LACK = 492,
  EGEC_BREAK_EMOTION_CHAIN_FAIL_LACK_ITEM = 493,
  EGEC_COUPLE_EMOTION_FIRST_ARRIVE_BREAK_CHAIN = 494,
  EGEC_COUPLE_GHOST_SCHEME_NOT_EXIST = 495,
  EGEC_COUPLE_GHOST_SCHEME_MAX = 496,
  EGEC_COUPLE_NO_ENOUGH_GHOST_SCHEME_COST = 497,
  EGEC_COUPLE_GHOST_SCHEME_NOT_USING = 498,
  EGEC_COUPLE_ADVANCE_CALL_GHOST_LOCKED = 499,
  EGEC_GOLD_NO_ENOUGH = 500,
  EGEC_POWER_NO_ENOUGH = 501,
  EGEC_BRAND_NO_ENOUGH = 502,
  EGEC_BLACK_DIAMOND_NO_ENOUGH = 503,
  EGEC_WHITE_DIAMOND_NO_ENOUGH = 504,
  EGEC_RECRUIT_STONE_NO_ENOUGH = 505,
  EGEC_COMP_NO_ENOUGH = 506,
  EGEC_FACE_COUPON_NO_ENOUGH = 507,
  EGEC_FLOWER_NO_ENOUGH = 508,
  EGEC_GOOD_EVIL_NO_ENOUGH = 509,
  EGEC_ITEM_NO_ENOUGH = 550,
  EGEC_HAS_MAX_LEVEL = 551,
  EGEC_SKILL_POINT_NO_ENOUGH = 552,
  EGEC_LEVEL_NO_ENOUGH = 553,
  EGEC_RUNE_NO_ENOUGH = 554,
  EGEC_RESOURCE_CONSUME_FAILED = 555,
  EGEC_RESOURCE_NO_ENOUGH = 556,
  EGEC_MOP_UP_TICKET_NO_ENOUGH = 557,
  EGEC_EXP_NO_ENOUGH = 558,
  EGEC_SOUL_GEM_NO_ENOUGH = 559,
  EGEC_ESSENCE_NO_ENOUGH = 560,
  EGEC_FUEL_NO_ENOUGH = 561,
  EGEC_ORIGIN_STONE_NO_ENOUGH = 562,
  EGEC_UNKNOWN_BOX_NO_ENOUGH = 563,
  EGEC_FEATS_NO_ENOUGH = 564,
  EGEC_SEASON_POINT_NO_ENOUGH = 565,
  EGEC_SEASON_PASS_ENOUGH = 566,
  EGEC_TASK_RECEIVE_REWARD_FAILED = 600,
  EGEC_COMPOSE_SOURCE_TYPE_ERROR = 700,
  EGEC_COMPOSE_NOT_AVAILABLE = 701,
  EGEC_COMPOSE_CONSUME_COMPONENTS_FAILED = 702,
  EGEC_COMPOSE_ADD_ITEM_FAILED = 703,
  EGEC_ASSISTANT_ID_INVALID = 800,
  EGEC_ASSISTANT_IN_CD = 801,
  EGEC_COUNT_LIMIT = 802,
  EGEC_ASSISTANT_TRANSFORM_NOT_ALLOWED = 803,
  EGEC_SEAT_LOCKED = 900,
  EGEC_COUPLE_ALREADY_SEATED = 901,
  EGEC_COUPLE_NOT_SEATED = 902,
  EGEC_COUPLE_ALREADY_DRINKING = 903,
  EGEC_COUPLE_NOT_DRINKING = 904,
  EGEC_COUPLE_EXTRACT_REWARDS_FAILED = 905,
  EGEC_INVALID_SEAT_ID = 910,
  EGEC_REST_SEAT_ALREADY_USED = 911,
  EGEC_REST_SEAT_NOT_USED = 912,
  EGEC_REST_NOT_FINISH = 913,
  EGEC_INVALID_RECIPE_ID = 914,
  EGEC_REST_MAKE_DRINK_MATERIAL_NO_ENOUGH = 915,
  EGEC_REST_NOT_MAKING_DRINK = 916,
  EGEC_REST_MAKE_DRINK_NOT_FINISH = 917,
  EGEC_REST_MAKE_DRINK_ALREADY_FINISH = 918,
  EGEC_INVALID_BLEND_DRINK_MATERIAL = 919,
  EGEC_BLEND_DRINK_MATERIAL_QUALITY_NOT_SAME = 920,
  EGEC_CREATE_BLEND_DRINK_FAILED = 921,
  EGEC_WAITER_TALENT_NOT_UNLOCKED = 922,
  EGEC_SET_WAITER_TALENT_CD = 923,
  EGEC_COUPLE_NO_NAKED_ROLE_RES = 924,
  EGEC_EMPLOY_BAR_NOT_ACTIVATE = 925,
  EGEC_EMPLOY_TASK_STATUS_MISTAKE = 926,
  EGEC_EMPLOY_COUPLE_HAVE_MISTAKE = 927,
  EGEC_EMPLOY_RECEIVE_CONDITION_NOT_PASSED = 928,
  EGEC_EMPLOY_RECEIVE_FAIL_UNKNOWN = 929,
  EGEC_EMPLOY_BAR_ALRED_UNLOCK = 930,
  EGEC_FURNITURE_INVALID_ID = 931,
  EGEC_FURNITURE_REPETITIVE_BUY = 932,
  EGEC_FURNITURE_NOT_ACQUIRED = 933,
  EGEC_FURNITURE_DECORATE_MISTAKE = 934,
  EGEC_FURNITURE_DEPLOY_MYSELF = 935,
  EGEC_ARTIFICE_ITEM_NUM_ERROR = 936,
  EGEC_ARTIFICE_TIMES_NOT_ENOUGH = 937,
  EGEC_ARTIFICE_TYPE_NOT_MATCH = 938,
  EGEC_ARTIFICE_LOWER_TYPE_NOT_MATCH = 939,
  EGEC_DECORATE_NAME_EMPTY = 971,
  EGEC_DECORATE_EXPAND_LIMIT = 972,
  EGEC_DECORATE_EXPAND_ITEM_NOT_ENOUGH = 973,
  EGEC_DECORATE_INVALID_ID = 974,
  EGEC_DECORATE_ALREADY_USED = 975,
  EGEC_DECORATE_NOT_USED = 976,
  EGEC_REST_SEAT_TYPE_ILLEGAL = 940,
  EGEC_REST_SEAT_VISIT_TIMES_NOT_ENOUGH = 941,
  EGEC_REST_VISIT_EXCHANGE_TIMES_NOT_ENOUGH = 942,
  EGEC_REST_VISIT_FRIEND_POINT_NOT_ENOUGH = 943,
  EGEC_REST_VISIT_FAIL_TO_FIND_IDLE_SEAT = 944,
  EGEC_REST_VISIT_SEAT_EXCEPT = 945,
  EGEC_REST_VISIT_OPERATOR_ILLEGAL = 946,
  EGEC_ARTIFICE_SAVE_EXP_NOT_FULL = 947,
  EGEC_JACKPOT_NOT_DEFAULT = 950,
  EGEC_JACKPOT_COUPLE_ALREADY_UNLOCK = 951,
  EGEC_JACKPOT_UNLOCK_COUPLE_ITEM_NOT_ENOUGH = 952,
  EGEC_JACKPOT_UNLOCK_COUPLE_RESOURCE_NOT_ENOUGH = 953,
  EGEC_JACKPOT_INVALID = 954,
  EGEC_JACKPOT_INTEGRAL_GOOD_NOT_EXIST = 955,
  EGEC_JACKPOT_INTEGRAL_GOOD_ALREADY_MAX_PURCHASE_TIMES = 956,
  EGEC_JACKPOT_INTEGRAL_NOT_ENOUGH = 957,
  EGEC_JACKPOT_NO_DRAW_RESULT = 958,
  EGEC_JACKPOT_NO_ENOUGH_DRAW_COST = 959,
  EGEC_JACKPOT_NO_ENOUGH_RESET_COST = 960,
  EGEC_JACKPOT_NOT_IN_CD = 961,
  EGEC_JACKPOT_RECRUIT_ENERGY_NOT_ENOUGH = 962,
  EGEC_TREASURE_BAG_NOT_EXISTS = 1000,
  EGEC_JACKPOT_POT_NOT_EXISTS = 1001,
  EGEC_JACKPOT_POT_CLOSED = 1002,
  EGEC_MAX_PUZZLE_TREASURE_BAG_REDEEM_TIMES = 1003,
  EGEC_MAX_COLLECT_TREASURE_BAG_REDEEM_TIMES = 1004,
  EGEC_PUZZLE_STATE_NOT_COMPLETE = 1005,
  EGEC_NOT_UNIVERSAL_PUZZLE = 1006,
  EGEC_PUZZLE_POSITION_INSTALLED = 1007,
  EGEC_PUZZLE_POSITION_NOT_INSTALLED = 1008,
  EGEC_MAX_SEND_TREASURE_ITEM_TIMES = 1009,
  EGEC_INTERACT_ID_NOT_EXIST = 1010,
  EGEC_INVALID_INTERACT_TYPE = 1011,
  EGEC_WRONG_INTERACT_PASSWORD = 1012,
  EGEC_MAX_EXCHANGE_TREASURE_ITEM_TIMES = 1013,
  EGEC_MAX_RECEIVE_TREASURE_ITEM_TIMES = 1014,
  EGEC_NOT_REDEEM_TIME = 1015,
  EGEC_INTERACT_OUTDATE = 1016,
  EGEC_INTERACT_UNHANDLED = 1017,
  EGEC_INTERACT_INVALID_STATE = 1018,
  EGEC_TREASURE_LEVEL_NOT_PASSED = 1019,
  EGEC_INVALID_TREASURE_SLOT_ID = 1050,
  EGEC_TREASURE_SLOT_LOCKED = 1051,
  EGEC_TREASURE_SLOT_USED = 1052,
  EGEC_TREASURE_SLOT_NOT_USED = 1053,
  EGEC_TREASURE_BOX_NOT_EXISTS = 1054,
  EGEC_TREASURE_BOX_PURIFY_NOT_FINISHED = 1055,
  EGEC_NO_ENOUGH_ACCELERATE_COST = 1056,
  EGEC_TREASURE_MAP_NOT_FULL_SET = 1057,
  EGEC_NO_ENOUGH_FREE_HUNTING_ASSISTANT_TIMES = 1058,
  EGEC_USING_HUNTING_ASSISTANT = 1059,
  EGEC_NO_TREASURE_BOX_TO_PURIFY = 1060,
  EGEC_NO_FREE_TREASURE_SLOT = 1061,
  EGEC_TREASURE_MAP_BATTLE_MAX_TIMES = 1062,
  EGEC_GOODS_SHOP_TYPE_INVALID = 1100,
  EGEC_GOODS_NOT_IN_SALES = 1101,
  EGEC_GOODS_OVER_MAX_BUY_TIMES = 1102,
  EGEC_GOODS_OVER_MAX_VALUE_IF_BUY = 1103,
  EGEC_GOODS_NO_ENOUGH_MONEY = 1104,
  EGEC_GOODS_OVER_MAX_RESOURCE_IF_BUY = 1105,
  EGEC_GOODS_OVER_MAX_EXP_LIMIT = 1106,
  EGEC_GOODS_NOT_IN_SALE_TIME = 1107,
  EGEC_PLAYER_CARD_AVATAR_LOCKED = 1200,
  EGEC_PLAYER_CARD_AVATAR_FRAME_LOCKED = 1201,
  EGEC_AVATAR_ALREADY_UNLOCKED = 1203,
  EGEC_AVATAR_FRAME_ALREADY_UNLOCKED = 1204,
  EGEC_CHANGE_NAME_CD = 1205,
  EGEC_COUPLE_TEAM_NOT_EXIST = 1300,
  EGEC_COUPLE_TEAM_FULL = 1301,
  EGEC_COUPLE_TEAM_ALREADY_IN_TEAM = 1302,
  EGEC_COUPLE_TEAM_NOT_IN_TEAM = 1303,
  EGEC_COUPLE_TEAM_LOCKED = 1304,
  EGEC_COUPLE_TEAM_NOT_CHANGED = 1305,
  EGEC_COUPLE_TEAM_INVALID_BATTLE_POS = 1306,
  EGEC_COUPLE_TEAM_INVALID_TYPE = 1307,
  EGEC_COUPLE_TEAM_PVP_MEMBER_JOB_INVALID = 1308,
  EGEC_COUPLE_TEAM_SAME_TALENT = 1309,
  EGEC_NO_ENOUGH_STARS = 1400,
  EGEC_NO_REWARD_ID = 1401,
  EGEC_DUNGEON_LOCKED = 1402,
  EGEC_DUNGEON_CLOSED = 1403,
  EGEC_DUNGEON_EMPTY = 1404,
  EGEC_DUNGEON_RES_LACK = 1405,
  EGEC_DUNGEON_NOT_THREE_STARS = 1406,
  EGEC_DUNGEON_CONTINOUS_MODE_LOCKED = 1407,
  EGEC_DUNGEON_COPY_DROP_LOCKED = 1408,
  EGEC_DUNGEON_TEAM_NUMBER_WRONG = 1410,
  EGEC_DUNGEON_TEAM_COUPLE_JOB_TYPE_NOT_FIT = 1411,
  EGEC_DUNGEON_TEAM_COUPLE_ENERGE_NOT_ENOUGH = 1412,
  EGEC_NIGHTMARE_REWARD_ALREADY_RECEIVE = 1413,
  EGEC_TALK_CONDITION_NOT_PASSED = 1500,
  EGEC_TALK_NO_AVAILABLE_OPTIONS = 1501,
  EGEC_TALK_NO_ENOUGH_TIMES = 1502,
  EGEC_TALK_NO_ENOUGH_RESOURCE = 1503,
  EGEC_QUIZ_WRONG_ANSWER = 1600,
  EGEC_QA_NOT_ON = 1601,
  EGEC_QA_ALREADY_ENLIST = 1602,
  EGEC_APPEAL_CLOSED = 1603,
  EGEC_BATTLE_REMAINED_NOT_ENOUGH = 1604,
  EGEC_APPEAL_NO_ENOUGH = 1605,
  EGEC_QUESTION_BANK_NOT_ENOUGH = 1606,
  EGEC_NOVICIATE_NOT_LAST = 1701,
  EGEC_NOVICIATE_UPDATE_GROUP_STATE_PARAM_ERROR = 1702,
  EGEC_BAG_HAS_NO_SPACE = 1800,
  EGEC_BAG_INVALID_GUID = 1801,
  EGEC_BAG_ITEM_CANNOT_SALE = 1802,
  EGEC_BAG_CONSUME_ITEM_FAILED = 1803,
  EGEC_BAG_ITEM_CANNOT_USE = 1804,
  EGEC_BAG_INVALID_USE_COUNT = 1805,
  EGEC_BAG_INVALID_ITEM_TYPE = 1806,
  EGEC_BAG_INVALID_ITEM_SUB_TYPE = 1807,
  EGEC_BAG_ADD_ITEM_FAILED = 1808,
  EGEC_ITEM_CONV_DAY_LIMIT = 1809,
  EGEC_ITEM_CONV_WEEK_LIMIT = 1810,
  EGEC_ITEM_CONV_PERMANENT_LIMIT = 1811,
  EGEC_ROLE_LOCKED = 1812,
  EGEC_ALREADY_HAS_SKIN = 1813,
  EGEC_REWARD_NOT_ALL_TOKEN = 1900,
  EGEC_REWARD_SPLIT_ERROR = 1901,
  EGEC_REWARD_TAKE_FAILED = 1902,
  EGEC_MAIL_NOT_AT_DELETE_TIME = 1903,
  EGEC_MAIL_OUTDATE = 1904,
  EGEC_MAIL_BOX_NOT_EXIST = 1905,
  EGEC_MAIL_NOT_EXIST = 1906,
  EGEC_ORDER_FOOD_NO_ENOUGH_MONEY = 2000,
  EGEC_ORDER_FOOD_GET_FOOD_ID_FAILED = 2001,
  EGEC_TAKE_FOOD_NO_ENOUGH_ITEMS = 2002,
  EGEC_NO_DINNER_EFFECTS = 2003,
  EGEC_INVALID_ITEM_ID = 2004,
  EGEC_ACTIVITY_POINT_NO_ENOUGH = 2100,
  EGEC_TREASURE_NOT_EXIST = 2101,
  EGEC_GET_TREASURE_BOX_FAILED = 2102,
  EGEC_TASK_NOT_FINISHED = 2103,
  EGEC_TASK_TIMEOUT = 2104,
  EGEC_NOT_IN_NOVICIATE_ACTIVE_TASK_TITE = 2105,
  EGEC_FESTIVAL_TASK_ID_INVALID = 2106,
  EGEC_FESTIVAL_TASK_NOT_TIMEOUT = 2107,
  EGEC_RECEIVE_AWARD_COST_ITEM_NOT_ENOUGH = 2108,
  EGEC_ADD_EXP_FAILED = 2200,
  EGEC_ADD_RES_FAILED = 2201,
  EGEC_SET_TASK_STATUS_FAILED = 2202,
  EGEC_PLAYER_NOT_IN_BATTLE = 2203,
  EGEC_BATTLE_ROLE_NOT_EXIST = 2204,
  EGEC_BATTLE_NOT_STARTED = 2205,
  EGEC_REDEEM_CODE_GROUP_ALREADT_GENERATED = 2206,
  EGEC_ACCOUNT_NOT_EXIST = 2207,
  EGEC_NOT_ONLINE = 2208,
  EGEC_GM_OPERATION_PROCESSING = 2209,
  EGEC_SENDING_GLOBAL_MAIL = 2210,
  EGEC_PLAYER_IN_BATTLE = 2211,
  EGEC_KILL_STAR_APPLY_OVER = 2300,
  EGEC_KILL_STAR_CLOSE = 2301,
  EGEC_KILL_STAR_MONSTER_OVER = 2302,
  EGEC_KILL_STAR_MONSTER_IN_BATTLE = 2303,
  EGEC_KILL_STAR_TRIGGER_MISMATCH = 2304,
  EGEC_KILL_STAR_SINGLE_MONSTER_OVER = 2305,
  EGEC_KILL_STAR_NOT_IN_WAITING = 2306,
  EGEC_SOO_TIMES_NOT_ENOUGH = 2400,
  EGEC_SOO_DIFFCULTY_LOCKED = 2401,
  EGEC_SOO_MOVE_FAILED = 2402,
  EGEC_SOO_PROP_NOT_ENOUGH = 2403,
  EGEC_SOO_GENERATE_MAP_FAILED = 2404,
  EGEC_SOO_NO_UNKNOWN_ACCOMPLICE = 2405,
  EGEC_FRIEND_ALREADY_EXIST = 2500,
  EGEC_FRIEND_NOT_EXIST = 2501,
  EGEC_FRIEND_HAS_SEND_GIFT = 2502,
  EGEC_FRIEND_NO_GIFT = 2503,
  EGEC_FRIEND_MAX_ACCEPT_GIFT_TIMES = 2504,
  EGEC_FRIEND_MAX_SELF_FRIEND_COUNT = 2505,
  EGEC_FRIEND_MAX_TARGET_FRIEND_COUNT = 2506,
  EGEC_FRIEND_CHECKING_IS_ADD_FRIEND_ENABLE = 2507,
  EGEC_NO_ENOUGH_REMOVE_FRIEND_ITEM = 2508,
  EGEC_INVITE_KEY_OUT_DATE = 2550,
  EGEC_INVITE_KEY_TIMES_EXHAUST = 2551,
  EGEC_INVITE_KEY_INVALID = 2552,
  EGEC_PLAYER_LEVEL_OVER_MAXIMUM_LEVEL = 2553,
  EGEC_ALREADY_BE_PROPAGANDA = 2554,
  EGEC_PLAYER_ALREADY_BAN_INVITER = 2555,
  EGEC_PVP_CLOSED = 2600,
  EGEC_PVP_MATCH_TIMEOUT = 2601,
  EGEC_PVP_NOT_IN_MATCH = 2602,
  EGEC_PVP_HAS_STARTED = 2603,
  EGEC_PVP_PUNISH = 2604,
  EGEC_PVP_WAITING_POOL = 2605,
  EGEC_PVP_REQ_RANKLIST_FREQUENTLY = 2606,
  EGEC_PVP_UPGRADETOP_PHASE_NOT_OPEN = 2607,
  EGEC_PVP_GRADELEVEL_TOOLOW = 2608,
  EGEC_PVP_RANKLIST_NO_DATA = 2609,
  EGEC_CARNIVAL_TIMES_NOT_ENOUGH = 2700,
  EGEC_CARNIVAL_DIFFCULTY_LOCKED = 2701,
  EGEC_PLAYER_NOT_IN_CARNIVAL = 2702,
  EGEC_REPLACE_TIME_NOT_ENOUGH = 2703,
  EGEC_INVALID_ESCORT_TIME = 2800,
  EGEC_ESCORT_ID_LOCKED = 2801,
  EGEC_NOT_IN_ESCORT = 2802,
  EGEC_ABANDON_ESCORT = 2803,
  EGEC_ESCORT_NOT_FINISHED = 2804,
  EGEC_ESCORT_EVENT_ENEMY_DEAD = 2805,
  EGEC_ESCORT_EVENT_FIRE_NO_ENOUGH_CANNON = 2806,
  EGEC_ESCORT_EVENT_CASE_DEAD = 2807,
  EGEC_NO_ENOUGH_ESCORT_TIMES = 2808,
  EGEC_TOWER_CLOSED = 2900,
  EGEC_TOWER_PREVIOUS_UNPASS = 2901,
  EGEC_TOWER_EVENT_ROOM_MISMATCH = 2902,
  EGEC_TOWER_ID_INVALID = 2903,
  EGEC_TOWER_ID_NOT_MATCH = 2904,
  EGEC_TOWER_HAVE_NO_ROOM_TO_ENTER = 2905,
  EGEC_TOWER_ID_NOT_SELECT = 2906,
  EGEC_TOWER_NOT_MEET_ENTER_CONDITION = 2907,
  EGEC_TOWER_IN_INITIALIZATION_STATE = 2908,
  EGEC_PLAY_EVENT_NOT_INTIME = 3000,
  EGEC_PLAY_EVENT_NOT_LEVEL = 3001,
  EGEC_PLAY_EVENT_HAS_COMPLETE = 3002,
  EGEC_PLAY_EVENT_HAS_OVER = 3003,
  EGEC_COMMUNITY_WELFARE_ITEM_NOT_ENOUGH = 3099,
  EGEC_PLAYER_ALREADY_IN_COMMUNITY = 3100,
  EGEC_COMMUNITY_NOT_EXIST = 3101,
  EGEC_COMMUNITY_HAVE_NO_AUTHORITY = 3102,
  EGEC_NOT_IN_THIS_COMMUNITY = 3103,
  EGEC_COMMUNITY_POSITION_FULL = 3104,
  EGEC_COMMUNITY_ALREADY_WISH_TODAY = 3105,
  EGEC_COMMUNITY_ALREADY_DONATE = 3106,
  EGEC_COMMUNITY_DONATION_ALREADY_RECEIVE = 3107,
  EGEC_COMMUNITY_QUICK_JOIN_FAILED = 3108,
  EGEC_NO_COMMUNITY_EXIST = 3109,
  EGEC_EXIST_DONATE_NOT_RECEIVED = 3110,
  EGEC_WISH_NOT_EXIST = 3111,
  EGEC_JOIN_COMMMUNITY_IN_CD = 3112,
  EGEC_COMMUNITY_FULL = 3113,
  EGEC_COMMUNITY_DONATION_FULL = 3114,
  EGEC_COMMUNITY_IS_NOT_OFFICIAL = 3115,
  EGEC_COMMUNITY_BULLETIN_REPETITION_SUPPORT = 3116,
  EGEC_COMMUNITY_BOXID_NOT_SAME = 3117,
  EGEC_COMMUNITY_WELFARE_ITEM_REPEAT_UNLOCK = 3118,
  EGEC_COMMUNITY_WELFARE_ITEM_NOT_UNLOCK = 3119,
  EGEC_COMMUNITY_WELFARE_ITEM_MEMBER_LIMIT = 3120,
  EGEC_COMMUNITY_LEVEL_NOT_ENOUGH = 3121,
  EGEC_COMMUNITY_EXTEND_POINT_NOT_ENOUGH = 3122,
  EGEC_COMMUNITY_TASK_NOT_EXIST = 3123,
  EGEC_COMMUNITY_TASK_IN_CD = 3124,
  EGEC_COMMUNITY_TASK_BAR_NOT_IN_CD = 3125,
  EGEC_COMMUNITY_TASK_BAR_NOT_IN_UNLOCK = 3126,
  EGEC_COMMUNITY_TASK_BAR_NOT_IN_ACCEPTED = 3127,
  EGEC_COMMUNITY_TASK_TIMES_IS_EXHAUST = 3128,
  EGEC_COMMUNITY_PREVIOUS_BUY_NOT_FINISH = 3129,
  EGEC_COMMUNITY_MATCH_NOT_IN_CURRENT_EVENT = 3130,
  EGEC_COMMUNITY_MATCH_RIVAL_IS_EMPTY = 3131,
  EGEC_COMMUNITY_MATCH_ID_NOT_FIND = 3132,
  EGEC_COMMUNITY_MATCH_ALREADY_SIGN_UP = 3133,
  EGEC_COMMUNITY_MATCH_NOT_IN_PLAY_TIME = 3134,
  EGEC_COMMUNITY_MATCH_TICKET_NOT_ENOUGH = 3135,
  EGEC_COMMUNITY_MATCH_CONDITION_NOT_MEET = 3136,
  EGEC_REDEEM_CODE_INVALID = 3200,
  EGEC_REDEEM_CODE_NOT_ACTIVE = 3201,
  EGEC_REDEEM_CODE_USED = 3202,
  EGEC_REDEEM_CODE_GROUP_REACH_MAX_VALUE = 3203,
  EGEC_OPERATING_ACTIVITY_NOT_EXIST = 3300,
  EGEC_PREVIOUS_REWARD_NOT_RECEIVED = 3301,
  EGEC_TASK_STATUS_WRONG = 3302,
  EGEC_OPERATING_ACTIVITY_INVALID_TYPE = 3303,
  EGEC_OPERATING_ACTIVITY_NO_REWARDS = 3304,
  EGEC_BUY_SEASON_POINT_OVER_MAX_VALUE = 3305,
  EGEC_BUY_SEASON_POINT_LIMIT_TIMES = 3306,
  EGEC_REGRESS_TASK_REPEAT_RECEIVE = 3307,
  EGEC_FESTIVAL_ACTIVITY_INIT_NOT_COMPLETE = 3308,
  EGEC_FESTIVAL_ACTIVITY_NOT_OPEN = 3309,
  EGEC_GOODS_NOT_GLOBAL_LIMIT = 3310,
  EGEC_GLOBAL_LIMIT_GOODS_SELL_OUT = 3311,
  EGEC_GLOBAL_LIMIT_GOODS_CONDITION_NOT_PASS = 3312,
  EGEC_BUY_GLOBAL_LIMIT_GOODS_TIME_OUT = 3313,
  EGEC_ADD_GLOBAL_EXCHANGE_INFO_TIME_OUT = 3314,
  EGEC_REMOVE_GLOBAL_EXCHANGE_INFO_TIME_OUT = 3315,
  EGEC_ACCEPT_GLOBAL_EXCHANGE_INFO_TIME_OUT = 3316,
  EGEC_INVALID_GLOBAL_EXCHANGE_ID = 3317,
  EGEC_PREVIOUS_REQUEST_IN_PROCESSING = 3318,
  EGEC_EXCHANGE_INFO_ACCEPT_BY_OTHERS_ALREADY = 3319,
  EGEC_EXCHANGE_INFO_REMOVE_BY_OTHERS_ALREADY = 3320,
  EGEC_GLOBAL_EXCHANGE_TYPE_INVALID = 3321,
  EGEC_APPLY_EXCHANGE_ITEM_TYPE_INVALID = 3322,
  EGEC_APPLY_EXCHANGE_ITEM_NOT_ENOUGH = 3323,
  EGEC_HAVE_NO_APPLY_EXCHANGE_COUNT = 3324,
  EGEC_HAVE_NO_ACCEPT_EXCHANGE_COUNT = 3325,
  EGEC_ACCEPT_EXCHANGE_ITEM_NOT_ENOUGH = 3326,
  EGEC_HAVE_NO_FESTIVAL_PUZZLE_AWARD_COUNT = 3327,
  EGEC_HAVE_NO_FESTIVAL_CONVERSION_AWARD_COUNT = 3328,
  EGEC_FESTIVAL_PUZZLE_MATERIAL_NOT_ENOUGH = 3329,
  EGEC_FESTIVAL_CONVERSION_MATERIAL_NOT_ENOUGH = 3330,
  EGEC_FESTIVAL_CONVERSION_AWARD_ITEM_INVALID = 3331,
  EGEC_RANK_ID_INVALID = 3400,
  EGEC_RANK_NOT_ACTIVE = 3401,
  EGEC_INVALID_PAY_EVENT_ID = 3501,
  EGEC_PAY_EVENT_DAILY_LIMIT = 3502,
  EGEC_PAY_EVENT_NO_ENOUGH_DAILY_REWARD_TIMES = 3503,
  EGEC_INVALID_BEHAVIOR_GOOD_ID = 3600,
  EGEC_BEHAVIOR_GOOD_INACTIVATE = 3601,
  EGEC_COMMON_LOGIN_VERIFYING = 4000,
  EGEC_COMMON_LOGIN_VERIFY_SERVER_ERROR = 4001,
  EGEC_COMMON_LOGIN_VERIFY_FAILED = 4002,
  EGEC_COMMON_LOGIN_ACCOUNT_NOT_EXIST = 4003,
  EGEC_COMMON_LOGIN_ACCOUNT_CHANNEL_ERROR = 4004,
  EGEC_COMMON_LOGIN_ACCOUNT_PASSWORD_ERROR = 4005,
  EGEC_RECHARGE_INVALID_PRODUCT_ID = 4100,
  EGEC_PRODUCT_PURCHASE_TIMES_LIMIT = 4101,
  EGEC_NOVICIATE_WELFARE_INVALID_PRODUCT_ID = 4102,
  EGEC_FORBID_BUY_NOT_OPEN_ACTIVITY_PRODUCT = 4103,
  EGEC_FORBID_FORWARD_BUY_ACTIVITY_PRODUCT = 4104,
  EGEC_LOGIN_FUNDS_PRODUCT_TIMES_LIMIT = 4105,
  EGEC_CONTINUOUS_RECHARGE_PRODUCT_TIMES_LIMIT = 4106,
  EGEC_GROWTH_FUNDS_PRODUCT_TIMES_LIMIT = 4107,
  EGEC_EMOTION_NEED_BREAK_CHAIN = 4200,
  EGEC_EMOTION_NOT_NEED_BREAK_CHAIN = 4201,
  EGEC_WORLD_BOSS_COUPLE_TIMES_NOT_EXHAUST = 4230,
  EGEC_WORLD_BOSS_COUPLE_TIMES_NOT_ENOUGH = 4231,
  EGEC_WORLD_BOSS_OUT_OF_JOIN_TIME = 4232,
  EGEC_WORLD_BOSS_LEVEL_NOT_SATISFACTION = 4233,
  EGEC_WORLD_BOSS_ACTION_IS_EXPIRED = 4234,
  EGEC_WORLD_BOSS_NOT_IN_PREPARE_STAGE = 4235,
  EGEC_WORLD_BOSS_BATTLE_NOT_BEGIN = 4236,
  EGEC_WORLD_BOSS_NOT_EXIST = 4237,
  EGEC_WORLD_BOSS_ALREADY_DEAD = 4238,
  EGEC_WORLD_BOSS_PLAYER_NOT_IN_ROOM = 4239,
  EGEC_WORLD_BOSS_ROOM_ID_INVALID = 4240,
  EGEC_WORLD_BOSS_SKILL_ALREADY_EXIST = 4241,
  EGEC_WORLD_BOSS_SKILL_NUM_MAXIMUM = 4242,
  EGEC_WORLD_BOSS_SKILL_IS_NOT_EXIST = 4243,
  EGEC_PAGEANT_SKIN_IS_INVALIDE = 4280,
  EGEC_PAGEANT_NOT_ROLE_USING_SKIN = 4281,
  EGEC_PAGEANT_ROLE_ID_NOT_MATCH = 4282,
  EGEC_PAGEANT_NOT_IN_ACTION_TIME = 4283,
  EGEC_PAGEANT_NOT_IN_COMPARE_TIME = 4284,
  EGEC_PAGEANT_VOTE_TIMES_NOT_ENOUGH = 4285,
  EGEC_PAGEANT_PURCHASE_REACH_UPPER_LIMIT = 4286,
  EGEC_PAGEANT_PLAYER_ALREADY_SIGN_UP = 4287,
  EGEC_PAGEANT_CANDIDATE_NUM_NOT_ENOUGH = 4288,
  EGEC_PAGEANT_CONTEST_DATA_EXCEPTION = 4289,
  EGEC_PAGEANT_CONTEST_FAIL = 4290,
  EGEC_PAGEANT_PLAYER_NOT_SIGN_UP = 4291,
  EGEC_PAGEANT_PLAYER_SIGN_UP_FAIL = 4292,
  EGEC_PAGEANT_NOT_FIND_PLAYER = 4293,
  EGEC_PAGEANT_STORE_DATA_EXCPTION = 4294,
  EGEC_PAGEANT_ROLE_ID_ILLEGAL = 4295,
  EGEC_PAGEANT_RED_ENVELOPE_COOLING_DOWN = 4296,
  EGEC_STORY_REVIEW_NOT_ALL_TASK_FINISHED = 4500,
  EGEC_STORY_REVIEW_NO_REVIEW_TASK_GROUP = 4501,
  EGEC_COLLECTION_REWARD_NOT_EXIST = 4520,
  EGEC_COLLECTION_REWARD_ALREADY_RECEIVED = 4521,
  EGEC_COLLECTION_REWARD_INVALID_PROGRESS = 4522,
  EGEC_TEACHING_LOCKED = 4600,
  EGEC_TEACHING_NOT_FINISHED = 4601,
  EGEC_TEACHING_ALREADY_REWARD = 4602,
  EGEC_LIVE_DISABLE = 4650,
  EGEC_LIVE_GIVEGIFT_NO_ENOUGH_MONEY = 4651,
  EGEC_WORLDSERVER_IS_UNAVAILABLE = 4660,
  EGEC_PROXYSERVER_IS_UNAVAILABLE = 4661,
  EGEC_API_PATIAL_SERVER_OPERATION_FAILED = 4670,
  EGEC_API_PATIAL_PLAYER_OPERATION_FAILED = 4671,
  EGEC_API_REQUEST_PARAM_INVALID = 4672,
  EGEC_API_PLAYER_DIGITAL_ID_INVALID = 4673,
  EGEC_PUSH_NOTIFICATION_FAILED = 4700,
  EGEC_AI_SETTINGS_INVALID_AI_ID = 4710,
  EGEC_AI_SETTINGS_INVALID_POS = 4711,
  EGEC_AI_SETTINGS_INVALID_SRC_BEHAVIOR_ID = 4712,
  EGEC_AI_SETTINGS_INVALID_TGT_BEHAVIOR_ID = 4713,
  EGEC_NODE_EXPLORE_PASSED_PLAYER_EXIST = 4800,
  EGEC_NODE_EXPLORE_PASSED_PLAYER_NOT_EXIST = 4801,
  EGEC_NODE_EXPLORE_IN_INIT_STATE = 4802,
  EGEC_NODE_EXPLORE_IN_SETTLEMENT_STATE = 4803,
  EGEC_NODE_EXPLORE_IN_RESET_STATE = 4804,
  EGEC_NODE_EXPLORE_DATA_IN_PREPARATION = 4805,
  EGEC_NODE_EXPLORE_LAYER_ID_INVALID = 4806,
  EGEC_NODE_EXPLORE_REWARD_TYPE_INVALID = 4807,
  EGEC_NODE_EXPLORE_CUR_LAYER_NOT_PASSED = 4808,
  EGEC_NODE_EXPLORE_HAVE_NO_PASSED_PLAYER = 4809,
  EGEC_NODE_EXPLORE_NOT_FIRST_PASSED_PLAYER = 4810,
  EGEC_NODE_EXPLORE_REWAD_NOT_EXIST = 4811,
  EGEC_NODE_EXPLORE_REWAD_RECEIVED_ALREADY = 4812,
  EGEC_NODE_EXPLORE_CUBE_IS_IN_GOOD_CONDITION = 4813,
  EGEC_NODE_EXPLORE_CUBE_IS_IN_BAD_CONDITION = 4814,
  EGEC_NODE_EXPLORE_REPAIR_USE_INVALID_ITEM = 4815,
  EGEC_NODE_EXPLORE_NOT_MEET_ENTER_CONDITION = 4816,
  EGEC_NODE_EXPLORE_CUR_LAYER_PASSED_ALREADY = 4817,
  EGEC_NODE_EXPLORE_PRE_LAYER_NOT_PASSED = 4818,
  EGEC_NODE_EXPLORE_REPAIR_ITEM_NOT_ENOOUGH = 4819,
  EGEC_NODE_EXPLORE_CUR_LAYER_CANNOT_JUMP = 4820,
  EGEC_NODE_EXPLORE_NOT_MEET_JUMP_CONDITION = 4821,
  EGEC_NODE_EXPLORE_IN_NORMAL_ONE = 4822,
  EGEC_NODE_EXPLORE_REACH_MAX_JUMP_LIMIT = 4823,
  EGEC_NODE_EXPLORE_REACH_MAX_JUMP_LIMIT_USE_PROP = 4824,
  EGEC_NODE_EXPLORE_NOT_ENOUGH_PROPS = 4825,
  EGEC_IMPRINT_INVALID_TARGET_ID = 4850,
  EGEC_IMPRINT_ROLE_COUPLE_NOT_GAIN = 4851,
  EGEC_IMPRINT_MAIN_ROlE_NOT_CUR_USED = 4852,
  EGEC_IMPRINT_TALENT_NOT_CUR_USED = 4853,
  EGEC_IMPRINT_IS_UP_TO_MAX_LEVEL = 4854,
  EGEC_IMPRINT_LEVEL_UP_MATERIAL_NOT_ENOUGH = 4855,
  EGEC_IMPRINT_SKILL_ID_INVALID = 4856,
  EGEC_IMPRINT_UNLOCKSKILL_MATERIAL_NOT_ENOUGH = 4857,
  EGEC_IMPRINT_SKILL_ALREADY_UNLOCK = 4858,
  EGEC_IMPRINT_SKILL_NOT_MEET_UNLOCK_CONDITON = 4859,
  EGEC_IMPRINT_SKILL_NOT_MEET_JOB_TYPE = 4860,
  EGEC_IMPRINT_SKILL_NOT_UNLOCK = 4861,
  EGEC_IMPRINT_SKILL_OWNER_NOT_MATCH = 4862,
  EGEC_IMPRINT_NOT_EQUIP_THE_SKILL = 4863,
  EGEC_IMPRINT_NOT_MEET_LUCKY_COIN_CODITION = 4864,
  EGEC_IMPRINT_TEMP_ATTRS_NOT_SAVE = 4865,
  EGEC_IMPRINT_REFRESHCOIN_MATERIAL_NOT_ENOUGH = 4866,
  EGEC_IMPRINT_NO_TEMP_ATTRS_TO_SAVE = 4867,
  EGEC_IMPRINT_NO_TEMP_ATTRS_TO_CANCEL = 4868,
  EGEC_IMPRINT_SKILL_SLOT_NOT_UNLOCK = 4869,
  EGEC_IMPRINT_SKILL_ALREADY_EQUIPED = 4870,
  EGEC_IMPRINT_REPLACE_LUCKY_COIN_INVALID_ITEM = 4871,
  EGEC_BATH_ROOM_ID_INVALID = 4900,
  EGEC_BATH_ROOM_ALREADY_UNLOCKED = 4901,
  EGEC_BATH_ROOM_LAST_ROOM_LOCKED = 4902,
  EGEC_BATH_ROOM_UNLOCK_CONDITION_NOT_PASSED = 4903,
  EGEC_BATH_ROOM_LOCKED = 4904,
  EGEC_BATH_ROOM_UNLOCK_NO_ENOUGH_COST = 4905,
  EGEC_BATH_ROOM_ALREADY_MAX_LEVEL = 4906,
  EGEC_BATH_ROOM_IS_COMBINING = 4907,
  EGEC_BATH_ROOM_LEVEL_UP_NO_ENOUGH_COST = 4908,
  EGEC_BATH_ROOM_COUPLE_IN_OTHER_ROOM = 4909,
  EGEC_BATH_ROOM_NO_TARGET_COUPLE = 4910,
  EGEC_BATH_ROOM_INVALID_SOURCE_POS = 4911,
  EGEC_BATH_ROOM_INVALID_COUPLE_COUNT = 4912,
  EGEC_BATH_ROOM_COUPLE_NOT_COMBINING = 4913,
  EGEC_BATH_ROOM_COMBINE_NO_ENOUGH_COST = 4914,
  EGEC_RESET_COUPLE_IS_COMBINING = 4950,
  EGEC_CALL_GHOST_REPLACE_IS_COMBINING = 4960,
  EGEC_CALL_GHOST_REPLACE_JOB_NOT_MATCH = 4961,
  EGEC_CALL_GHOST_REPLACE_INVALID_ITEM = 4962,
  EGEC_CALL_GHOST_REPLACE_CANT_COMBINE_SCHEME = 4963,
  EGEC_MAP_TREASURE_NOT_FIND_MAP_ID = 4970,
  EGEC_MAP_TREASURE_FAIL_TO_GENERATE = 4971,
  EGEC_MAP_TREASURE_EXCEPTION_DATA = 4972,
  EGEC_MAP_TREASURE_COMPLETE = 4973,
  EGEC_MAP_TREASURE_FAIL_TO_MOVE_TARGET_NODE = 4974,
  EGEC_MAP_TREASURE_NOT_FIND_NODE_INFO = 4975,
  EGEC_EXTREME_CHALLENGE_ID_NO_UNLOCK = 4980,
  EGEC_EXTREME_CHALLENGE_ID_NOT_FIND = 4981,
  EGEC_WEDDING_SCENE_NOT_EXIST = 5000,
  EGEC_WEDDING_SCENE_NOT_IN_CURRENT_GAME = 5001,
  EGEC_WEDDING_IS_OVER = 5002,
  EGEC_WEDDING_SCENE_PLAYER_REACH_MAX_LIMIT = 5003,
  EGEC_WEDDING_MARRIAGE_ID_INVALID = 5004,
  EGEC_WEDDING_CREATE_SCHEMA_RESOURCE_NOT_ENOUGH = 5005,
  EGEC_WEDDING_ACCEPT_SCHEMA_RESOURCE_NOT_ENOUGH = 5006,
  EGEC_WEDDING_CREATE_SCHEMA_BILLS_RATIO_INVALID = 5007,
  EGEC_WEDDING_PARTNER_IS_NOT_ONLINE = 5008,
  EGEC_WEDDING_PARTNER_CANT_BE_SELF = 5009,
  EGEC_WEDDING_PLAYER_IS_NOT_IN_MARRIAGE = 5010,
  EGEC_WEDDING_CANCEL_SCHEMA_NOT_EXIST = 5011,
  EGEC_WEDDING_VIEW_SCHEMA_NOT_EXIST = 5012,
  EGEC_WEDDING_ACCEPT_SCHEMA_NOT_EXIST = 5013,
  EGEC_WEDDING_REFUSE_SCHEMA_NOT_EXIST = 5014,
  EGEC_WEDDING_SCHEMA_ACCEPTED_CANT_CANCEL = 5015,
  EGEC_WEDDING_SCHEMA_ALREADY_ACCEPTED = 5016,
  EGEC_WEDDING_INVITE_TYPE_INVALID = 5017,
  EGEC_WEDDING_NOT_IN_WEDDING_SCENE = 5018,
  EGEC_WEDDING_ALREADY_IN_WEDDING_SCENE = 5019,
  EGEC_WEDDING_GIFT_BOX_TYPE_INVALID = 5020,
  EGEC_WEDDING_SEND_GIFT_BOX_REACHED_MAX_LIMIT = 5021,
  EGEC_WEDDING_RECEIVE_GIFT_BOX_IN_CD = 5022,
  EGEC_WEDDING_TRANSFIGURATION_IN_CD = 5023,
  EGEC_WEDDING_RECEIVE_FRUIT_DISH_IN_CD = 5024,
  EGEC_WEDDING_RECEIVE_FRUIT_DISH_REACHED_MAX_LIMIT = 5025,
  EGEC_WEDDING_ROLE_COUPLE_IS_NOT_UNLOCK = 5026,
  EGEC_WEDDING_TROUBLEMAKER_BATTLE_IS_INVALID = 5027,
  EGEC_WEDDING_INVITE_GUESTS_IN_CD = 5028,
  EGEC_WEDDING_GUESTS_COUNT_NOT_MEET = 5029,
  EGEC_WEDDING_GIFT_BOX_ID_INVALID = 5030,
  EGEC_WEDDING_GIFT_BOX_IS_EMPTY = 5031,
  EGEC_WEDDING_GIFT_BOX_ONLY_RECEIVE_ONCE = 5032,
  EGEC_WEDDING_CANT_UNLOCK_SKIN_LACK_OF_WEDDING = 5033,
  EGEC_WEDDING_SEND_GIFT_BOX_TOO_FREQUENTLY = 5034,
  EGEC_WEDDING_SCHEMA_INVALID = 5035,
  EGEC_WEDDING_PREPARATION_NOT_ACTIVATED = 5036,
  EGEC_WEDDING_CANT_USE_MARRY_SKIN = 5037,
  EGEC_INTIMATE_SEND_BLESS_IS_EMPTY = 5050,
  EGEC_INTIMATE_RESEIVE_BLESS_IS_EMPTY = 5051,
  EGEC_DATING_NOT_REGISTER = 5052,
  EGEC_DATING_ALREADY_REGISTER = 5053,
  EGEC_DATING_DURATION_DIVORCE = 5054,
  EGEC_DATING_ALREADY_MARRIAGE = 5055,
  EGEC_PROPOSAL_APPLY_ALREADY_EXIST = 5056,
  EGEC_PROPOSAL_APPLY_NOT_EXIST = 5057,
  EGEC_PROPOSAL_NOT_OPEN = 5058,
  EGEC_PROPOSAL_ALREADY_OPEN = 5059,
  EGEC_PROPOSAL_LETTER_GET_FAIL = 5060,
  EGEC_PROPOSAL_LETTER_INVAILD = 5061,
  EGEC_TEXT_INVALID_LENGTH = 5062,
  EGEC_TEXT_INVALID_WORDS = 5063,
  EGEC_TEXT_INVALID_FORMAT = 5064,
  EGEC_PROPOSAL_INTIMACY_NOT_ENOUGH = 5065,
  EGEC_MARRIAGE_OBJECT_NOT_EXIST = 5066,
  EGEC_MARRIAGE_DATA_EXCEPTION = 5067,
  EGEC_MARRIAGE_DAILY_POINT_REWARD_RECEIVED = 5068,
  EGEC_MARRIAGE_PIGGY_BANK_NOT_COMPLETE = 5069,
  EGEC_MARRIAGE_PIGGY_BANK_REWARD_RECEIVED = 5070,
  EGEC_MARRIAGE_ALREADY_WISH_TODAY = 5071,
  EGEC_MARRIAGE_WISH_DATA_EXCEPTION = 5072,
  EGEC_MARRIAGE_DONATION_EMPTY = 5073,
  EGEC_MARRIAGE_DONATION_ALREADY_RECEIVED = 5074,
  EGEC_MARRIAGE_DONATION_RECEIVE_ERROR = 5075,
  EGEC_MARRIAGE_DONATION_REPEATE = 5076,
  EGEC_MARRIAGE_DONATION_ITEM_NOT_MATCH = 5077,
  EGEC_MARRIAGE_NOT_RECORD = 5078,
  EGEC_MARRIAGE_TOKEN_ALREADY_UNLOCK = 5079,
  EGEC_MARRIAGE_DIVORCE_FAIL_WEDDING_OPEN = 5080,
  EGEC_MARRIAGE_REMOVE_FRIEND_FAIL = 5081,
  EGEC_MARRIAGE_TOKEN_NOT_UNLOCK = 5082,
  EGEC_KNOCKOUT_NOT_OPEN = 5100,
  EGEC_KNOCKOUT_SET_TEAM_IN_INVALID_TIME = 5101,
  EGEC_KNOCKOUT_TALENT_EMPTY = 5102,
  EGEC_KNOCKOUT_TALENT_INVALID = 5103,
  EGEC_KNOCKOUT_TALENT_NOT_UNLOCK = 5104,
  EGEC_KNOCKOUT_COUPLE_NOT_GAIN = 5105,
  EGEC_KNOCKOUT_COUPLE_EXCEED_STAR_LIMIT = 5106,
  EGEC_KNOCKOUT_TEAM_ID_INVALID = 5107,
  EGEC_KNOCKOUT_BETTING_IN_INVALID_TIME = 5108,
  EGEC_KNOCKOUT_INVALID_WATCHED_PLAYER = 5109,
  EGEC_KNOCKOUT_BATTLE_NOT_START = 5110,
  EGEC_KNOCKOUT_BATTLE_SPECTATOR_FULL = 5111,
  EGEC_KNOCKOUT_SEND_BULLET_SCREEN_TOO_FAST = 5112,
  EGEC_KNOCKOUT_ALREADY_IN_LIVE_SCENE = 5113,
  EGEC_KNOCKOUT_BETTING_TARGET_INVALID = 5119,
  EGEC_KNOCKOUT_BETTING_ITEM_NOT_ENOUGH = 5120,
  EGEC_KNOCKOUT_BETTING_HAVE_EMPTY_PLAYER = 5121,
  EGEC_KNOCKOUT_ACTIVITY_CLOSE = 5122,
  EGEC_KNOCKOUT_ROUND_INVALID = 5123,
  EGEC_KNOCKOUT_MATCH_INDEX_INVALID = 5124,
  EGEC_KNOCKOUT_NOT_PARTICIPATING_PLAYER = 5125,
  EGEC_KNOCKOUT_BATTLE_END = 5126,
  EGEC_KNOCKOUT_ALREADY_BETTING = 5127,
  EGEC_BAN_COUPLE_CANT_USED = 5190,
  EGEC_BAN_PROTECT_COUPLE_ID_INVALID = 5191,
  EGEC_VIRTUALIZER_NOT_EXIST = 5200,
  EGEC_VIRTUALIZER_UNLOCK_CONDITION_NOT_PASSED = 5201,
  EGEC_VIRTUALIZER_NOT_IN_TEAM = 5202,
  EGEC_SUPPORT_GYEE_EVENT_HAS_ENDED = 5129,
  EGEC_SUPPORT_GYEE_ITEM_NOT_ENOUGH = 5130,
  EGEC_SUPPORT_GYEE_CONDTION_NOT_PASSED = 5131,
  EGEC_SUPPORT_GYEE_INVALID_GYEE_ID = 5132,
  EGEC_MONOPOLY_EVENT_HAS_ENDED = 5150,
  EGEC_MONOPOLY_EVENT_PRE_CLOSED = 5151,
  EGEC_MONOPOLY_RESOURCE_NOT_ENOUGH = 5152,
  EGEC_MONOPOLY_PURCHASE_LIMIT = 5153,
  EGEC_MONOPOLY_NOT_MATCHED_DICE_GRADE = 5154,
  EGEC_MONOPOLY_SHARE_TIME_LIMIT = 5155,
  EGEC_MONOPOLY_BE_SHARED_TIME_LIMIT = 5156,
  EGEC_MONOPOLY_SHARED_THE_SAME_USER = 5157,
  EGameEventCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EGameEventCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool EGameEventCode_IsValid(int value);
const EGameEventCode EGameEventCode_MIN = EGEC_SUCCESS;
const EGameEventCode EGameEventCode_MAX = EGEC_VIRTUALIZER_NOT_IN_TEAM;
const int EGameEventCode_ARRAYSIZE = EGameEventCode_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* EGameEventCode_descriptor();
inline const ::std::string& EGameEventCode_Name(EGameEventCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGameEventCode_descriptor(), value);
}
inline bool EGameEventCode_Parse(
    const ::std::string& name, EGameEventCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGameEventCode>(
    EGameEventCode_descriptor(), name, value);
}
enum ESynMsgID {
  ESMI_UNKNOW = 0,
  ESynMsgID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ESynMsgID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ESynMsgID_IsValid(int value);
const ESynMsgID ESynMsgID_MIN = ESMI_UNKNOW;
const ESynMsgID ESynMsgID_MAX = ESMI_UNKNOW;
const int ESynMsgID_ARRAYSIZE = ESynMsgID_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ESynMsgID_descriptor();
inline const ::std::string& ESynMsgID_Name(ESynMsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESynMsgID_descriptor(), value);
}
inline bool ESynMsgID_Parse(
    const ::std::string& name, ESynMsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESynMsgID>(
    ESynMsgID_descriptor(), name, value);
}
enum EGameMsgID {
  EGMI_UNKNOW = 0,
  EGMI_EVENT_RESULT = 1,
  EGMI_EVENT_TRANSPOND = 2,
  EGMI_CLOSE_SOCKET = 3,
  EGMI_WTM_WORLD_REGISTERED = 10,
  EGMI_WTM_WORLD_UNREGISTERED = 11,
  EGMI_WTM_WORLD_REFRESH = 12,
  EGMI_LTM_LOGIN_REGISTERED = 13,
  EGMI_LTM_LOGIN_UNREGISTERED = 14,
  EGMI_LTM_LOGIN_REFRESH = 15,
  EGMI_GLTSC_GLOBAL_REGISTERED = 16,
  EGMI_GLTSC_GLOBAL_UNREGISTERED = 17,
  EGMI_GLTSC_GLOBAL_REFRESH = 18,
  EGMI_PTWG_PROXY_REGISTERED = 19,
  EGMI_PTWG_PROXY_UNREGISTERED = 20,
  EGMI_PTWG_PROXY_REFRESH = 21,
  EGMI_GLTDB_GLOBAL_REGISTERED = 22,
  EGMI_GLTDB_GLOBAL_UNREGISTERED = 23,
  EGMI_GLTDB_GLOBAL_REFRESH = 24,
  EGMI_GTW_GAME_REGISTERED = 25,
  EGMI_GTW_GAME_UNREGISTERED = 26,
  EGMI_GTW_GAME_REFRESH = 27,
  EGMI_GTGL_GAME_REGISTERED = 28,
  EGMI_GTGL_GAME_UNREGISTERED = 29,
  EGMI_GTGL_GAME_REFRESH = 30,
  EGMI_GLTW_GLOBAL_REGISTERED = 31,
  EGMI_GLTW_GLOBAL_UNREGISTERED = 32,
  EGMI_GLTW_GLOBAL_REFRESH = 33,
  EGMI_GTDB_GAME_REGISTERED = 34,
  EGMI_GTDB_GAME_UNREGISTERED = 35,
  EGMI_GTDB_GAME_REFRESH = 36,
  EGMI_WBTWGL_WORLDBATTLE_REGISTERD = 37,
  EGMI_WBTWGL_WORLDBATTLE_UNREGISTERD = 38,
  EGMI_WBTWGL_WORLDBATTLE_REFRESH = 39,
  EGMI_GTWB_GAME_REGISTERED = 40,
  EGMI_GTWB_GAME_UNREGISTERED = 41,
  EGMI_GTWB_GAME_REFRESH = 42,
  EGMI_SCTW_SOCIAL_REGISTERD = 43,
  EGMI_SCTW_SOCIAL_UNREGISTERD = 44,
  EGMI_SCTW_SOCIAL_REFRESH = 45,
  EGMI_STS_NET_INFO = 55,
  EGMI_SWITCH_GAME_SVR = 60,
  EGMI_REQ_LOAD_PLAYER_DATA_ON_SWITCH_GAME_SVR = 61,
  EGMI_ACK_LOAD_PLAYER_DATA_ON_SWITCH_GAME_SVR = 62,
  EGMI_REQ_COMMON_LOGIN = 70,
  EGMI_ACK_COMMON_LOGIN = 71,
  EGMI_REQ_GET_BULLETINS = 75,
  EGMI_ACK_GET_BULLETINS = 76,
  EGMI_STS_SERVER_REPORT = 90,
  EGMI_STS_HEART_BEAT = 100,
  EGMI_REQ_LOGIN = 101,
  EGMI_ACK_LOGIN = 102,
  EGMI_REQ_LOGOUT = 103,
  EGMI_REQ_RECONNECT = 104,
  EGMI_ACK_RECONNECT = 105,
  EGMI_REQ_REBIND_GAME_SERVER = 106,
  EGMI_ACK_REBIND_GAME_SERVER = 107,
  EGMI_REQ_GET_RECONNECT_GAME_ID = 108,
  EGMI_ACK_GET_RECONNECT_GAME_ID = 109,
  EGMI_REQ_WORLD_LIST = 110,
  EGMI_ACK_WORLD_LIST = 111,
  EGMI_REQ_CONNECT_WORLD = 112,
  EGMI_ACK_CONNECT_WORLD = 113,
  EGMI_REQ_KICK_CLIENT_INWORLD = 114,
  EGMI_REQ_CONNECT_KEY = 120,
  EGMI_ACK_CONNECT_KEY = 122,
  EGMI_REQ_SELECT_SERVER = 130,
  EGMI_ACK_SELECT_SERVER = 131,
  EGMI_REQ_PLAYER_LIST = 132,
  EGMI_ACK_PLAYER_LIST = 133,
  EGMI_REQ_CREATE_PLAYER = 134,
  EGMI_ACK_CREATE_PLAYER = 135,
  EGMI_REQ_DELETE_PLAYER = 136,
  EGMI_REQ_RECOVER_PLAYER = 137,
  EGMI_REQ_CREATE_UPDATE_MAIN_ROLE = 140,
  EGMI_ACK_CREATE_UPDATE_MAIN_ROLE = 141,
  EGMI_REQ_MAX_LEVEL_LIMIT = 142,
  EGMI_ACK_MAX_LEVEL_LIMIT = 143,
  EGMI_REQ_UNLOCK_MAIN_ROLE = 144,
  EGMI_ACK_UNLOCK_MAIN_ROLE = 145,
  EGMI_REQ_ENTER_GAME = 150,
  EGMI_ACK_ENTER_GAME = 151,
  EGMI_REQ_LEAVE_GAME = 152,
  EGMI_ACK_LEAVE_GAME = 153,
  EGMI_REQ_SWAP_GAME = 154,
  EGMI_REQ_SWAP_SCENE = 155,
  EGMI_ACK_SWAP_SCENE = 156,
  EGMI_REQ_SWAP_HOME_SCENE = 157,
  EGMI_ACK_SWAP_HOME_SCENE = 158,
  EGMI_REQ_ENTER_GAME_FINISH = 159,
  EGMI_ACK_ENTER_GAME_FINISH = 160,
  EGMI_REQ_CHECK_ACCOUNT = 164,
  EGMI_ACK_CHECK_ACCOUNT = 165,
  EGMI_REQ_CHECK_NAME = 166,
  EGMI_ACK_CHECK_NAME = 167,
  EGMI_REQ_REGISTER = 168,
  EGMI_ACK_REGISTER = 169,
  EGMI_REQ_SET_PLAYER_AVATAR = 174,
  EGMI_ACK_SET_PLAYER_AVATAR = 175,
  EGMI_REQ_SET_PLAYER_AVATAR_FRAME = 176,
  EGMI_ACK_SET_PLAYER_AVATAR_FRAME = 177,
  EGMI_REQ_UNLOCK_AVATAR = 178,
  EGMI_ACK_UNLOCK_AVATAR = 179,
  EGMI_REQ_UNLOCK_AVATAR_FRAME = 180,
  EGMI_ACK_UNLOCK_AVATAR_FRAME = 181,
  EGMI_REQ_SAVE_PLAYER_DATA = 185,
  EGMI_ACK_SAVE_PLAYER_DATA = 186,
  EGMI_REQ_LOAD_PLAYER_DATA = 187,
  EGMI_ACK_LOAD_PLAYER_DATA = 188,
  EGMI_REPORT_ONLINE = 190,
  EGMI_REPORT_OFFLINE = 191,
  EGMI_REPORT_ALL_ONLINE_ON_REGISTERED = 194,
  EGMI_REQ_REPORT_REBIND = 195,
  EGMI_REPORT_OFFLINE_SAVE_COMPLETE = 196,
  EGMI_REQ_SYNC_UPDATE_PLAYER_BASIC_INFO = 197,
  EGMI_ACK_SYNC_UPDATE_PLAYER_BASIC_INFO = 198,
  EGMI_ACK_OBJECT_ENTRY = 200,
  EGMI_ACK_OBJECT_LEAVE = 201,
  EGMI_ACK_OBJECT_PROPERTY_ENTRY = 202,
  EGMI_ACK_OBJECT_RECORD_ENTRY = 203,
  EGMI_ACK_OBJECT_ALLDATA_ENTRY = 204,
  EGMI_ACK_SAVE_COMPLETE = 205,
  EGMI_ACK_PROPERTY_INT = 210,
  EGMI_ACK_PROPERTY_FLOAT = 211,
  EGMI_ACK_PROPERTY_STRING = 212,
  EGMI_ACK_PROPERTY_OBJECT = 214,
  EGMI_ACK_PROPERTY_VECTOR2 = 215,
  EGMI_ACK_PROPERTY_VECTOR3 = 216,
  EGMI_ACK_PROPERTY_REFRESH = 217,
  EGMI_ACK_ADD_ROW = 220,
  EGMI_ACK_REMOVE_ROW = 221,
  EGMI_ACK_SWAP_ROW = 222,
  EGMI_ACK_RECORD_INT = 223,
  EGMI_ACK_RECORD_FLOAT = 224,
  EGMI_ACK_RECORD_STRING = 226,
  EGMI_ACK_RECORD_OBJECT = 227,
  EGMI_ACK_RECORD_VECTOR2 = 228,
  EGMI_ACK_RECORD_VECTOR3 = 229,
  EGMI_ACK_RECORD_CLEAR = 250,
  EGMI_ACK_RECORD_SORT = 251,
  EGMI_ACK_RECORD_REFRESH = 252,
  EGMI_ACK_DATA_FINISHED = 260,
  EGMI_ACK_UPDATE_CACHE_PROPERTY_FROM_GLOBALSVR = 270,
  EGMI_ACK_UPDATE_CACHE_RECORD_ROW_FROM_GLOBALSVR = 271,
  EGMI_REQ_TCP_HEART_BEAT = 400,
  EGMI_ACK_TCP_HEART_BEAT = 401,
  EGMI_FORCE_DISCONNECT = 450,
  EGMI_REQ_CHECK_SERVER_STATE = 500,
  EGMI_ACK_SERVER_STATE = 501,
  EGMI_REQ_REPORT_POSITION = 510,
  EGMI_ACK_REPORT_POSITION = 511,
  EGMI_REQ_SIGN = 600,
  EGMI_ACK_SIGN = 601,
  EGMI_REQ_UPDATE_LOCATION = 604,
  EGMI_ACK_UPDATE_LOCATION = 605,
  EGMI_REQ_STOP_LOCATION = 606,
  EGMI_ACK_STOP_LOCATION = 607,
  EGMI_REQ_PLAYER_CARD = 700,
  EGMI_ACK_PLAYER_CARD = 701,
  EGMI_REQ_NEARBY_PLAYER_LIST = 720,
  EGMI_ACK_NEARBY_PLAYER_LIST = 721,
  EGMI_REQ_RESET_STORY = 760,
  EGMI_ACK_SAVED_REDUCE_EXP_CHANGED = 761,
  EGMI_REQ_UNLOCK_TALENT = 810,
  EGMI_ACK_UNLOCK_TALENT = 811,
  EGMI_REQ_UPGRADE_TALENT = 812,
  EGMI_ACK_UPGRADE_TALENT = 813,
  EGMI_REQ_SWITCH_TALENT = 814,
  EGMI_ACK_SWITCH_TALENT = 815,
  EGMI_REQ_ASSEMBLY_TALENT_SKILL = 816,
  EGMI_ACK_ASSEMBLY_TALENT_SKILL = 817,
  EGMI_REQ_UNLOCK_SKILL_BY_SKILL_BOOK = 818,
  EGMI_ACK_UNLOCK_SKILL_BY_SKILL_BOOK = 819,
  EGMI_REQ_LOAD_TITLE = 820,
  EGMI_ACK_LOAD_TITLE = 821,
  EGMI_REQ_UNLOAD_TITLE = 822,
  EGMI_ACK_UNLOAD_TITLE = 823,
  EGMI_REQ_UNLOCK_SKILL_BY_ITEM = 830,
  EGMI_ACK_UNLOCK_SKILL_BY_ITEM = 831,
  EGMI_REQ_UNLOCK_SKILL_BY_SKIN = 832,
  EGMI_ACK_UNLOCK_SKILL_BY_SKIN = 833,
  EGMI_REQ_CHANGE_NAME = 834,
  EGMI_ACK_CHANGE_NAME = 835,
  EGMI_REQ_TEST_NICK_EXIST = 836,
  EGMI_ACK_TEST_NICK_EXIST = 837,
  EGMI_REQ_CHANGE_NAME_GLOBAL = 838,
  EGMI_ACK_CHANGE_NAME_GLOBAL = 839,
  EGMI_REQ_UPDATE_MARRIAGE_REGISTER_INFO = 840,
  EGMI_ACK_UPDATE_MARRIAGE_REGISTER_INFO = 841,
  EGMI_REQ_RECRUIT_COUPLE = 900,
  EGMI_ACK_RECRUIT_COUPLE = 901,
  EGMI_REQ_COUPLE_UPGRADE_STAR = 902,
  EGMI_ACK_COUPLE_UPGRADE_STAR = 903,
  EGMI_REQ_COUPLE_BREAKTHROUGH_STAR_MAX = 904,
  EGMI_ACK_COUPLE_BREAKTHROUGH_STAR_MAX = 905,
  EGMI_REQ_COUPLE_LEVELUP_BY_EXP_BOOK = 906,
  EGMI_ACK_COUPLE_LEVELUP_BY_EXP_BOOK = 907,
  EGMI_REQ_COUPLE_WEAR_RUNE = 910,
  EGMI_ACK_COUPLE_WEAR_RUNE = 911,
  EGMI_REQ_COUPLE_RUNE_LEVEL_UP = 912,
  EGMI_ACK_COUPLE_RUNE_LEVEL_UP = 913,
  EGMI_REQ_COUPLE_GIVE_GIFT = 914,
  EGMI_ACK_COUPLE_GIVE_GIFT = 915,
  EGMI_ACK_COUPLE_RECRUIT_HINT = 916,
  EGMI_REQ_ENGRAVE_RUNE = 917,
  EGMI_ACK_ENGRAVE_RUNE = 918,
  EGMI_REQ_COMPOSE_RUNE = 919,
  EGMI_ACK_COMPOSE_RUNE = 920,
  EGMI_REQ_WEAPON_LEVEL_UP = 921,
  EGMI_ACK_WEAPON_LEVEL_UP = 922,
  EGMI_REQ_COUPLE_FIRST_ENCOUNTER = 923,
  EGMI_ACK_COUPLE_FIRST_ENCOUNTER = 924,
  EGMI_ACK_ARCHIVE_OPEN = 925,
  EGMI_REQ_BREAK_EMOTION_CHAIN = 927,
  EGMI_ACK_BREAK_EMOTION_CHAIN = 928,
  EGMI_ACK_COUPLE_EMOTION_FIRST_ARRIVE_BREAK_CHAIN = 929,
  EGMI_REQ_CALL_GHOST = 930,
  EGMI_ACK_CALL_GHOST = 931,
  EGMI_REQ_SAVE_CALL_GHOST_RESULT = 932,
  EGMI_ACK_SAVE_CALL_GHOST_RESULT = 933,
  EGMI_REQ_TAKE_UNLOCK_COMMENT_REWARD = 934,
  EGMI_ACK_TAKE_UNLOCK_COMMENT_REWARD = 935,
  EGMI_REQ_RESOLVE_ITEM = 936,
  EGMI_ACK_RESOLVE_ITEM = 937,
  EGMI_REQ_UNLOCK_CP_SKIN = 938,
  EGMI_ACK_UNLOCK_CP_SKIN = 939,
  EGMI_REQ_REFRESH_CP_COMMENTS = 940,
  EGMI_ACK_REFRESH_CP_COMMENTS = 941,
  EGMI_REQ_UNLOCK_ROLE_SKIN = 942,
  EGMI_ACK_SKIN_COMMON_RST = 943,
  EGMI_REQ_DYEING_ROLE_SKIN = 944,
  EGMI_REQ_WEAR_ROLE_SKIN = 945,
  EGMI_REQ_COUPLE_GIFT_OPEN = 950,
  EGMI_ACK_COUPLE_GIFT_OPEN = 951,
  EGMI_REQ_COUPLE_ENTER_PRIVACY_STORY = 960,
  EGMI_ACK_COUPLE_ENTER_RRIVACY_STORY = 961,
  EGMI_REQ_APPLY_CALL_GHOST_SCHEME = 970,
  EGMI_ACK_APPLY_CALL_GHOST_SCHEME = 971,
  EGMI_REQ_SET_CALL_GHOST_SCHEME_NAME = 972,
  EGMI_ACK_SET_CALL_GHOST_SCHEME_NAME = 973,
  EGMI_REQ_UNLOCK_NEW_CALL_GHOST_SCHEME = 974,
  EGMI_ACK_UNLOCK_NEW_CALL_GHOST_SCHEME = 975,
  EGMI_REQ_CHECK_QUICK_ENGRAVE = 980,
  EGMI_ACK_CHECK_QUICK_ENGRAVE = 981,
  EGMI_REQ_QUICK_ENGRAVE = 982,
  EGMI_ACK_QUICk_ENGRAVE = 983,
  EGMI_REQ_UP_MAIN_ROLE_EQUIP_LEVEL = 1000,
  EGMI_ACK_UP_MAIN_ROLE_EQUIP_LEVEL = 1001,
  EGMI_ACK_UP_MAIN_ROLE_EQUIP_MASTER_LEVEL = 1002,
  EGMI_REQ_UPDATE_AI_SETTINGS = 1050,
  EGMI_ACK_UPDATE_AI_SETTINGS = 1051,
  EGMI_REQ_RESET_AI_SETTINGS = 1052,
  EGMI_ACK_RESET_AI_SETTINGS = 1053,
  EGMI_REQ_HANDLE_GIFT_EVENT = 1060,
  EGMI_ACK_HANDLE_GIFT_EVENT = 1061,
  EGMI_REQ_COMPOSE_ITEM = 1100,
  EGMI_ACK_COMPOSE_ITEM = 1101,
  EGMI_REQ_BAGPACK_SALE = 1102,
  EGMI_ACK_BAGPACK_SALE = 1103,
  EGMI_REQ_BAGPACK_USE_ITEM = 1104,
  EGMI_ACK_BAGPACK_USE_ITEM = 1105,
  EGMI_REQ_BAGPACK_IS_USABLE = 1106,
  EGMI_ACK_BAGPACK_IS_USABLE = 1107,
  EGMI_REQ_ITEM_CONVERSION = 1108,
  EGMI_ACK_ITEM_CONVERSION = 1109,
  EGMI_REQ_USE_CHAT_ITEM = 1150,
  EGMI_ACK_USE_CHAT_ITEM = 1151,
  EGMI_ACK_LIVE_STATE = 1152,
  EGMI_REQ_LIVE_GIVE_GIFT = 1153,
  EGMI_ACK_LIVE_GIVE_GIFT = 1154,
  EGMI_REQ_COUPLE_SEAT = 1200,
  EGMI_ACK_COUPLE_SEAT = 1201,
  EGMI_REQ_COUPLE_UNSEAT = 1202,
  EGMI_ACK_COUPLE_UNSEAT = 1203,
  EGMI_REQ_SET_DRINK = 1204,
  EGMI_ACK_SET_DRINK = 1205,
  EGMI_REQ_DROP_DRINK = 1206,
  EGMI_ACK_DROP_DRINK = 1207,
  EGMI_REQ_CHEERS = 1208,
  EGMI_ACK_CHEERS = 1209,
  EGMI_REQ_USE_SKILL = 1240,
  EGMI_ACK_USE_SKILL = 1241,
  EGMI_REQ_USE_SPECIAL_SKILL = 1242,
  EGMI_REQ_USE_OT_SKILL = 1243,
  EGMI_ACK_ONLINE_NOTIFY = 1290,
  EGMI_ACK_OFFLINE_NOTIFY = 1291,
  EGMI_REQSWICHSERVER = 1840,
  EGMI_ACKSWICHSERVER = 1841,
  EGMI_REQ_RECEIVE_TASK_REWARD = 2000,
  EGMI_ACK_RECEIVE_TASK_REWARD = 2001,
  EGMI_ACK_TASK_END_COUNT_DOWN = 2002,
  EGMI_REQ_TASK_READ = 2003,
  EGMI_ACK_TASK_READ = 2004,
  EGMI_REQ_RECEIVE_SAME_TYPE_TASK_REWARD = 2005,
  EGMI_ACK_RECEIVE_SAME_TYPE_TASK_REWARD = 2006,
  EGMI_REQ_RECEIVE_TIMEOUT_TASK_REWARD = 2007,
  EGMI_ACK_RECEIVE_TIMEOUT_TASK_REWARD = 2008,
  EGMI_REQ_TASK_MOVE_TO_POS = 2020,
  EGMI_REQ_TASK_TRIGGER_INTERACTION = 2021,
  EGMI_REQ_GET_TREASURE_BOX = 2022,
  EGMI_ACK_GET_TREASURE_BOX = 2023,
  EGMI_ACK_DAILY_TASK_RESET = 2024,
  EGMI_REQ_SPEAK = 2025,
  EGMI_ACK_WEEKLY_TASK_RESET = 2026,
  EGMI_REQ_TRIGGER_COMPLETE = 2080,
  EGMI_ACK_TRIGGER_COMPLETE = 2081,
  EGMI_REQ_IS_TRIGGER_ENABLE = 2082,
  EGMI_ACK_IS_TRIGGER_ENABLE = 2083,
  EGMI_ACK_BATTLE_TRIGGER = 2084,
  EGMI_REQ_ACTIVE_REGION = 2090,
  EGMI_ACK_ACTIVE_REGION = 2091,
  EGMI_REQ_SET_ASSISTANT = 2100,
  EGMI_ACK_SET_ASSISTANT = 2101,
  EGMI_REQ_ADD_ASSISTANT_EMOTION = 2102,
  EGMI_ACK_ADD_ASSISTANT_EMOTION = 2103,
  EGMI_REQ_TAKE_SIGN_TOTAL_REWARD = 2104,
  EGMI_ACK_TAKE_SIGN_TOTAL_REWARD = 2105,
  EGMI_REQ_SET_ASSISTANT_TRANSFORM = 2106,
  EGMI_ACK_SET_ASSISTANT_TRANSFORM = 2107,
  EGMI_REQ_OPEN_TREASURE_BAG = 2200,
  EGMI_ACK_OPEN_TREASURE_BAG = 2201,
  EGMI_REQ_INSTALL_PUZZLE = 2202,
  EGMI_ACK_INSTALL_PUZZLE = 2203,
  EGMI_REQ_UNINSTALL_PUZZLE = 2204,
  EGMI_ACK_UNINSTALL_PUZZLE = 2205,
  EGMI_REQ_REDEEM_TREASURE_BAG = 2206,
  EGMI_ACK_REDEEM_TREASURE_BAG = 2207,
  EGMI_REQ_GET_REDEEM_TIME = 2208,
  EGMI_ACK_GET_REDEEM_TIME = 2209,
  EGMI_REQ_SEND_TREASURE_ITEM = 2210,
  EGMI_ACK_SEND_TREASURE_ITEM = 2211,
  EGMI_REQ_RECEIVE_TREASURE_ITEM = 2212,
  EGMI_ACK_RECEIVE_TREASURE_ITEM = 2213,
  EGMI_REQ_APPLY_EXCHANGE_TREASURE_ITEM = 2214,
  EGMI_ACK_APPLY_EXCHANGE_TREASURE_ITEM = 2215,
  EGMI_REQ_APPROVE_EXCHANGE_TREASURE_ITEM = 2216,
  EGMI_ACK_APPROVE_EXCHANGE_TREASURE_ITEM = 2217,
  EGMI_REQ_REJECT_EXCHANGE_TREASURE_ITEM = 2218,
  EGMI_ACK_REJECT_EXCHANGE_TREASURE_ITEM = 2219,
  EGMI_REQ_CANCEL_EXCHANGE_TREASURE_ITEM = 2220,
  EGMI_ACK_CANCEL_EXCHANGE_TREASURE_ITEM = 2221,
  EGMI_REQ_ADD_INTERACT_MSG = 2222,
  EGMI_ACK_ADD_INTERACT_MSG = 2223,
  EGMI_REQ_REMOVE_INTERACT_MSG = 2224,
  EGMI_ACK_REMOVE_INTERACT_MSG = 2225,
  EGMI_REQ_RETURN_EXCHANGE_TIMES = 2226,
  EGMI_ACK_RETURN_EXCHANGE_TIMES = 2227,
  EGMI_REQ_RESET_TREASURE_TIMES = 2228,
  EGMI_REQ_CANCEL_SEND_TREASURE_ITEM = 2229,
  EGMI_ACK_CANCEL_SEND_TREASURE_ITEM = 2230,
  EGMI_REQ_REJECT_SEND_TREASURE_ITEM = 2231,
  EGMI_ACK_REJECT_SEND_TREASURE_ITEM = 2232,
  EGMI_REQ_RECLAIM_TREASURE_ITEM = 2233,
  EGMI_ACK_RECLAIM_TREASURE_ITEM = 2234,
  EGMI_REQ_OPEN_TREASURE_BOX = 2250,
  EGMI_ACK_OPEN_TREASURE_BOX = 2251,
  EGMI_REQ_PURIFY_TREASURE_BOX = 2252,
  EGMI_ACK_PURIFY_TREASURE_BOX = 2253,
  EGMI_REQ_ACCELERATE_PURIFY_TREASURE_BOX = 2254,
  EGMI_ACK_ACCELERATE_PURIFY_TREASURE_BOX = 2255,
  EGMI_REQ_TREASURE_HUNTING = 2256,
  EGMI_ACK_TREASURE_HUNTING = 2257,
  EGMI_REQ_USE_HUNTING_DETECTOR = 2258,
  EGMI_ACK_USE_HUNTING_DETECTOR = 2259,
  EGMI_REQ_USE_HUNTING_ASSISTANT = 2260,
  EGMI_ACK_USE_HUNTING_ASSISTANT = 2270,
  EGMI_REQ_GET_TREASURE_SNATCH_LIST = 2271,
  EGMI_ACK_GET_TREASURE_SNATCH_LIST = 2272,
  EGMI_REQ_SNATCH_TREASURE = 2273,
  EGMI_ACK_SNATCH_TREASURE = 2274,
  EGMI_ACK_SNATCH_REWARDS = 2275,
  EGMI_REQ_FINISH_HUNTING_TREASURE = 2276,
  EGMI_ACK_FINISH_HUNTING_TREASURE = 2277,
  EGMI_REQ_UPDATE_TREASURE_SNATCH_POOL = 2280,
  EGMI_REQ_SNATCH_TREASURE_BOX_TIMES = 2281,
  EGMI_ACK_SNATCH_TREASURE_BOX_TIMES = 2282,
  EGMI_REQ_QUICK_PURIFY_TREASURE_BOX = 2283,
  EGMI_ACK_QUICK_PURIFY_TREASURE_BOX = 2284,
  EGMI_REQ_QUICK_OPEN_TREASURE_BOX = 2285,
  EGMI_ACK_QUICK_OPEN_TREASURE_BOX = 2286,
  EGMI_REQ_BUY_GOODS = 2300,
  EGMI_ACK_BUY_GOODS = 2301,
  EGMI_REQ_GET_GOODS_LIST = 2302,
  EGMI_ACK_GET_GOODS_LIST = 2303,
  EGMI_REQ_OPEN_SHOP_SYSTEM = 2304,
  EGMI_ACK_OPEN_SHOP_SYSTEM = 2305,
  EGMI_REQ_FRESH_MYSTERY_SHOP = 2306,
  EGMI_ACK_FRESH_MYSTERY_SHOP = 2307,
  EGMI_ACK_FRESH_SHOP = 2308,
  EGMI_REQ_QUICK_BUY_GOODS = 2309,
  EGMI_ACK_QUICK_BUY_GOODS = 2310,
  EGMI_REQ_JOIN_COUPLE_TEAM = 2400,
  EGMI_ACK_JOIN_COUPLE_TEAM = 2401,
  EGMI_REQ_LEAVE_COUPLE_TEAM = 2402,
  EGMI_ACK_LEAVE_COUPLE_TEAM = 2403,
  EGMI_REQ_REPLACE_COUPLE_TEAM = 2404,
  EGMI_ACK_REPLACE_COUPLE_TEAM = 2405,
  EGMI_REQ_SET_CUR_COUPLE_TEAM = 2406,
  EGMI_ACK_SET_CUR_COUPLE_TEAM = 2407,
  EGMI_REQ_SET_COUPLE_TEAM_NAME = 2408,
  EGMI_ACK_SET_COUPLE_TEAM_NAME = 2409,
  EGMI_REQ_RESET_COUPLE_TEAM = 2410,
  EGMI_ACK_RESET_COUPLE_TEAM = 2411,
  EGMI_REQ_QUICK_CONFIGURE_COUPLE_TEAM = 2412,
  EGMI_ACK_QUICK_CONFIGURE_COUPLE_TEAM = 2413,
  EGMI_REQ_SET_MAIN_ROLE_IN_BATTLE = 2414,
  EGMI_ACK_SET_MAIN_ROLE_IN_BATTLE = 2415,
  EGMI_REQ_DUNGEON_LIST = 2500,
  EGMI_ACK_DUNGEON_LIST = 2501,
  EGMI_REQ_ENTER_DUNGEON = 2502,
  EGMI_ACK_ENTER_DUNGEON = 2503,
  EGMI_REQ_TAKE_BOX_AWARD = 2504,
  EGMI_ACK_TAKE_BOX_AWARD = 2505,
  EGMI_REQ_NIGHTMARE_DUNGEON_RANK = 2506,
  EGMI_ACK_NIGHTMARE_DUNGEON_RANK = 2507,
  EGMI_REQ_NIGHTMARE_DUNGEON_TEAM_SET = 2508,
  EGMI_ACK_NIGHTMARE_DUNGEON_TEAM_SET = 2509,
  EGMI_REQ_RECOMMEND_COUPLE_RANK = 2510,
  EGMI_ACK_RECOMMEND_COUPLE_RANK = 2511,
  EGMI_ACK_NIGHTMARE_PLAYER_DATA_TO_GLOBAL = 2512,
  EGMI_REQ_IS_TALK_ENABLE = 2600,
  EGMI_ACK_IS_TALK_ENABLE = 2601,
  EGMI_REQ_COMPLETE_TALKS = 2602,
  EGMI_ACK_COMPLETE_TALKS = 2603,
  EGMI_REQ_EXAM_QUIZ = 2700,
  EGMI_ACK_EXAM_QUIZ = 2701,
  EGMI_REQ_CHECK_ANSWER = 2702,
  EGMI_ACK_CHECK_ANSWER = 2703,
  EGMI_REQ_NOVICIATE_COMPLETE = 2800,
  EGMI_ACK_NOVICIATE_COMPLETE = 2801,
  EGMI_REQ_SEND_STSTEM_PROMPT = 3000,
  EGMI_ACK_SEND_SYSTEM_PROMPT = 3001,
  EGMI_NOTI_SYSTEM_PROMPT = 3002,
  EGMI_REQ_CREATE_HORCRUX_SCHEME = 3100,
  EGMI_ACK_CREATE_HORCRUX_SCHEME = 3101,
  EGMI_REQ_DELETE_HORCRUX_SCHEME = 3102,
  EGMI_ACK_DELETE_HORCRUX_SCHEME = 3103,
  EGMI_REQ_SAVE_HORCRUX_SCHEME = 3104,
  EGMI_ACK_SAVE_HORCRUX_SCHEME = 3105,
  EGMI_REQ_REPLACE_HORCRUX_SCHEME_INUSING = 3106,
  EGMI_ACK_REPLACE_HORCRUX_SCHEME_INUSING = 3107,
  EGMI_REQ_CLEAR_HORCRUX_SCHEME = 3108,
  EGMI_ACK_CLEAR_HORCRUX_SCHEME = 3109,
  EGMI_REQ_HORCRUX_STRENGTHEN = 3110,
  EGMI_ACK_HORCRUX_STRENGTHEN = 3111,
  EGMI_REQ_HORCRUX_BAPTISM = 3112,
  EGMI_ACK_HORCRUX_BAPTISM = 3113,
  EGMI_REQ_HORCRUX_RECAST = 3114,
  EGMI_ACK_HORCRUX_RECAST = 3115,
  EGMI_REQ_SAVE_HORCRUX_BAPTISM_RESULT = 3116,
  EGMI_ACK_SAVE_HORCRUX_BAPTISM_RESULT = 3117,
  EGMI_REQ_SAVE_HORCRUX_RECAST_RESULT = 3118,
  EGMI_ACK_SAVE_HORCRUX_RECAST_RESULT = 3119,
  EGMI_REQ_LOAD_HORCRUX = 3120,
  EGMI_ACK_LOAD_HORCRUX = 3121,
  EGMI_REQ_UNLOAD_HORCRUX = 3122,
  EGMI_ACK_UNLOAD_HORCRUX = 3123,
  EGMI_REQ_REPLACE_HORCRUX = 3124,
  EGMI_ACK_REPLACE_HORCRUX = 3125,
  EGMI_REQ_RESOLVE_HORCRUX = 3126,
  EGMI_ACK_RESOLVE_HORCRUX = 3127,
  EGMI_REQ_HORCRUX_STRENGTHEN_V2 = 3128,
  EGMI_ACK_HORCRUX_STRENGTHEN_V2 = 3129,
  EGMI_REQ_HORCRUX_BAPTISM_V2 = 3130,
  EGMI_ACK_HORCRUX_BAPTISM_V2 = 3131,
  EGMI_REQ_HORCRUX_STRENGTH_REPLENISH = 3132,
  EGMI_ACK_HORCRUX_STRENGTH_REPLENISH = 3133,
  EGMI_REQ_HORCRUX_EXTRACT_STONE = 3134,
  EGMI_ACK_HORCRUX_EXTRACT_STONE = 3135,
  EGMI_REQ_OPEN_MAIL_SYSTEM = 3200,
  EGMI_ACK_OPEN_MAIL_STYTEM = 3201,
  EGMI_REQ_OPEN_MAIL = 3202,
  EGMI_ACK_OPEN_MAIL = 3203,
  EGMI_REQ_DELETE_SPECIFIC_MAIL = 3204,
  EGMI_ACK_DELETE_SPECIFIC_MAIL = 3205,
  EGMI_REQ_DELETE_All_MAIL = 3206,
  EGMI_ACK_DELETE_All_MAIL = 3207,
  EGMI_REQ_GET_REWARD_IN_SPECIFIC_MAIL = 3208,
  EGMI_ACK_GET_REWARD_IN_SPECIFIC_MAIL = 3209,
  EGMI_REQ_GET_REWARD_IN_ALL_MAIL = 3210,
  EGMI_ACK_GET_REWARD_IN_ALL_MAIL = 3211,
  EGMI_ACK_NEW_MAIL = 3212,
  EGMI_REQ_MAIL_STATE = 3213,
  EGMI_ACK_MAIL_STATE = 3214,
  EGMI_REQ_DELETE_OVERDATE_MAIL = 3215,
  EGMI_ACK_DELETE_OVERDATE_MAIL = 3216,
  EGMI_REQ_SEND_MAIL = 3217,
  EGMI_REQ_SYNC_TIME = 3500,
  EGMI_ACK_SYNC_TIME = 3501,
  EGMI_REQ_ORDER_FOOD = 3502,
  EGMI_ACK_ORDER_FOOD = 3503,
  EGMI_REQ_TAKE_FOOD = 3504,
  EGMI_ACK_TAKE_FOOD = 3505,
  EGMI_REQ_SET_DINNER_EFFECT_STATE = 3506,
  EGMI_ACK_SET_DINNER_EFFECT_STATE = 3507,
  EGMI_REQ_FETCH_RADIO_MESSAGE = 3600,
  EGMI_ACK_FETCH_RADIO_MESSAGE = 3601,
  EGMI_REQ_SEND_APPEAL_MESSAGE = 3700,
  EGMI_ACK_SEND_APPEAL_MESSAGE = 3701,
  EGMI_REQ_BUY_APPEAL_TIMES = 3702,
  EGMI_ACK_BUY_APPEAL_TIMES = 3703,
  EGMI_REQ_QA_INFO = 3704,
  EGMI_ACK_QA_INFO = 3705,
  EGMI_REQ_GIVE_UP_QA = 3706,
  EGMI_ACK_GIVE_UP_QA = 3707,
  EGMI_ACK_APPEAL_INFO = 3708,
  EGMI_REQ_JUDGE_HELP_ANSWER = 3709,
  EGMI_ACK_JUDGE_HELP_ANSWER = 3710,
  EGMI_ACK_APPEAL_SUCCCESS = 3711,
  EGMI_REQ_JUDGE_ANSWER = 3712,
  EGMI_ACK_JUDGE_ANSWER = 3713,
  EGMI_REQ_ENLIST_QA = 3714,
  EGMI_ACK_ENLIST_QA = 3715,
  EGMI_REQ_GIVEUP_APPEAL = 3716,
  EGMI_ACK_GIVEUP_APPEAL = 3717,
  EGMI_REQ_QUESTION_BATTLE = 3718,
  EGMI_ACK_QUESTION_BATTLE = 3719,
  EGMI_SYNC_DAILY_QUESTION_INNER = 3720,
  EGMI_SYNC_CURRENT_SESSION_INFO = 3721,
  EGMI_REQ_KILL_STAR = 3800,
  EGMI_ACK_KILL_STAR = 3801,
  EGMI_ACK_BEGIN_KILL_STAR = 3802,
  EGMI_REQ_SYNC_KILL_STAR = 3803,
  EGMI_ACK_SYNC_KILL_STAR = 3804,
  EGMI_REQ_KILL_STAR_BATTLE = 3805,
  EGMI_ACK_KILL_STAR_BATTLE = 3806,
  EGMI_SYNC_KILL_STAR_BATTLE_RESULT = 3807,
  EGMI_REQ_KILL_STAR_TRANSFER = 3808,
  EGMI_ACK_KILL_STAR_TRANSFER = 3809,
  EGMI_REQ_KILL_STAR_LEAVE = 3810,
  EGMI_ACK_KILL_STAR_LEAVE = 3811,
  EGMI_ACK_KILL_STAR_CLOSE = 3812,
  EGMI_REQ_KILL_STAR_CANCEL_WAIT = 3813,
  EGMI_ACK_KILL_STAR_CANCEL_WAIT = 3814,
  EGMI_REQ_SWORD_OF_OATH_LIST = 3900,
  EGMI_ACK_SWORD_OF_OATH_LIST = 3901,
  EGMI_REQ_ENTER_SWORD_OF_OATH = 3902,
  EGMI_ACK_ENTER_SWORD_OF_OATH = 3903,
  EGMI_REQ_USE_SOO_PROP = 3904,
  EGMI_ACK_USE_SOO_PROP = 3905,
  EGMI_REQ_MOVE_IN_SOO_MAP = 3906,
  EGMI_ACK_MOVE_IN_SOO_MAP = 3907,
  EGMI_REQ_QUIT_SWORD_OF_OATH = 3908,
  EGMI_ACK_QUIT_SWORD_OF_OATH = 3909,
  EGMI_REQ_SWORD_OF_OATH_BATTLE = 3910,
  EGMI_ACK_SWORD_OF_OATH_BATTLE = 3911,
  EGMI_REQ_REFUSE_BATTLE = 3912,
  EGMI_ACK_REFUSE_BATTLE = 3913,
  EGMI_ACK_SOO_REWARD = 3914,
  EGMI_REQ_LOAD_PLAYER_AMBUSH_DATA = 3920,
  EGMI_ACK_LOAD_PLAYER_AMBUSH_DATA = 3921,
  EGMI_REQ_SAVE_PLAYER_AMBUSH_DATA = 3922,
  EGMI_ACK_SAVE_PLAYER_AMBUSH_DATA = 3923,
  EGMI_REQ_RESET_PLAYER_AMBUSH_DATA = 3924,
  EGMI_ACK_RESET_PLAYER_AMBUSH_DATA = 3925,
  EGMI_REQ_ADD_FRIEND = 4000,
  EGMI_ACK_ADD_FRIEND = 4001,
  EGMI_REQ_GET_FRIEND_LIST = 4002,
  EGMI_ACK_GET_FRIEND_LIST = 4003,
  EGMI_REQ_SEND_GIFT_TO_FRIEND = 4004,
  EGMI_ACK_SEND_GIFT_TO_FRIEND = 4005,
  EGMI_REQ_ACCEPT_GIFT_FROM_FRIEND = 4006,
  EGMI_ACK_ACCEPT_GIFT_FROM_FRIEND = 4007,
  EGMI_REQ_RECEIVE_GIFT_FROM_FRIEND = 4008,
  EGMI_ACK_RECEIVE_GIFT_FROM_FRIEND = 4009,
  EGMI_REQ_REMOVE_FRIEND = 4010,
  EGMI_ACK_REMOVE_FRIEND = 4011,
  EGMI_REQ_IS_ADD_FRIEND_ENABLE = 4012,
  EGMI_ACK_IS_ADD_FRIEND_ENABLE = 4013,
  EGMI_ACK_AGREE_ADD_FRIEND = 4014,
  EGMI_REQ_GET_FRIEND_LIST_V2 = 4015,
  EGMI_ACK_GET_FRIEND_LIST_V2 = 4016,
  EGMI_REQ_IS_FRIEND = 4017,
  EGMI_ACK_IS_FRIEND = 4018,
  EGMI_REQ_GET_FRIEND_LIST_V3 = 4019,
  EGMI_ACK_GET_FRIEND_LIST_V3 = 4020,
  EGMI_REQ_OPEN_RECRUIT_STONE = 4100,
  EGMI_ACK_OPEN_RECRUIT_STONE = 4101,
  EGMI_REQ_JACK_POT_INFO = 4102,
  EGMI_ACK_JACK_POT_INFO = 4103,
  EGMI_REQ_UNLOCK_JACK_POT_COUPLE = 4104,
  EGMI_ACK_UNLOCK_JACK_POT_COUPLE = 4105,
  EGMI_REQ_PURCHASE_INTEGRAL_SHOP = 4106,
  EGMI_ACK_PURCHASE_INTEGRAL_SHOP = 4107,
  EGMI_REQ_HANDLE_JACKPOT_RESULT = 4108,
  EGMI_ACK_HANDLE_JACKPOT_RESULT = 4109,
  EGMI_REQ_RESET_JACKPOT_CD = 4110,
  EGMI_ACK_RESET_JACKPOT_CD = 4111,
  EGMI_REQ_TAKE_COMPOSITE_JACKPOT_RESET_CD_ITEM = 4112,
  EGMI_ACK_TAKE_COMPOSITE_JACKPOT_RESET_CD_ITEM = 4113,
  EGMI_REQ_ENTER_CARNIVAL = 4200,
  EGMI_ACK_ENTER_CARNIVAL = 4201,
  EGMI_REQ_CARNIVAL_BATTLE = 4202,
  EGMI_ACK_CARNIVAL_BATTLE = 4203,
  EGMI_REQ_QUIT_CARNIVAL = 4204,
  EGMI_ACK_QUIT_CARNIVAL = 4205,
  EGMI_REQ_REPLACE_SCRIPT = 4206,
  EGMI_ACK_REPLACE_SCRIPT = 4207,
  EGMI_ACK_CARNIVAL_REWARD = 4208,
  EGMI_REQ_GET_ESCORT_INFO = 4300,
  EGMI_ACK_GET_ESCORT_INFO = 4301,
  EGMI_REQ_START_ESCORT = 4302,
  EGMI_ACK_START_ESCORT = 4303,
  EGMI_REQ_FINISH_ESCORT = 4304,
  EGMI_ACK_FINISH_ESCORT = 4305,
  EGMI_REQ_ENCOUNTER_ESCORT_EVENT = 4306,
  EGMI_ACK_ENCOUNTER_ESCORT_EVENT = 4307,
  EGMI_REQ_FIRE = 4308,
  EGMI_ACK_FIRE = 4309,
  EGMI_REQ_ENTER_ESCORT_BATTLE = 4310,
  EGMI_ACK_ENTER_ESCORT_BATTLE = 4311,
  EGMI_REQ_SYNC_ESCORT_INFO = 4312,
  EGMI_ACK_SYNC_ESCORT_INFO = 4313,
  EGMI_REQ_ENTER_TOWER = 4400,
  EGMI_ACK_ENTER_TOWER = 4401,
  EGMI_REQ_ENTER_ROOM = 4402,
  EGMI_ACK_ENTER_ROOM = 4403,
  EGMI_REQ_SELECT_OPTION = 4404,
  EGMI_ACK_SELECT_OPTION = 4405,
  EGMI_REQ_LEAVE_TOWER = 4406,
  EGMI_ACK_LEAVE_TOWER = 4407,
  EGMI_REQ_REFRESH_STATE = 4408,
  EGMI_ACK_REFRESH_STATE = 4409,
  EGMI_ACK_TOWER_CLOSE_COUNT_DOWN = 4410,
  EGMI_REQ_PLAY_EVENTS = 4500,
  EGMI_ACK_PLAY_EVENTS = 4501,
  EGMI_REQ_JOIN_EVENT = 4502,
  EGMI_ACK_JOIN_EVENT = 4503,
  EGMI_REQ_SET_EVENT_NOTIFY = 4504,
  EGMI_ACK_SET_EVENT_NOTIFY = 4505,
  EGMI_ACK_PUSH_EVENT_NOTIFY_INFO = 4506,
  EGMI_REQ_BEGIN_REST = 4600,
  EGMI_ACK_BEGIN_REST = 4601,
  EGMI_REQ_FINISH_REST = 4602,
  EGMI_ACK_FINISH_REST = 4603,
  EGMI_REQ_BEGIN_MAKE_DRINK = 4604,
  EGMI_ACK_BEGIN_MAKE_DRINK = 4605,
  EGMI_REQ_FINISH_MAKE_DRINK = 4606,
  EGMI_ACK_FINISH_MAKE_DRINK = 4607,
  EGMI_REQ_BLEND_DRINK = 4608,
  EGMI_ACK_BLEND_DRINK = 4609,
  EGMI_REQ_ACTIVATE_WAITER_TALENT = 4610,
  EGMI_ACK_ACTIVATE_WAITER_TALENT = 4611,
  EGMI_REQ_RECEIVE_EMPLOY_TASK = 4612,
  EGMI_ACK_RECEIVE_EMPLOY_TASK = 4613,
  EGMI_REQ_RECEIVE_EMPLOY_REWARD = 4614,
  EGMI_ACK_RECEIVE_EMPLOY_REWARD = 4615,
  EGMI_REQ_REFRESH_EMPLOY_TASK = 4616,
  EGMI_ACK_REFRESH_EMPLOY_TASK = 4617,
  EGMI_REQ_UNLOCK_EMPLOY_TASK = 4618,
  EGMI_ACK_UNLOCK_EMPLOY_TASK = 4619,
  EGMI_REQ_BUY_FURNITURE = 4620,
  EGMI_ACK_BUY_FURNITURE = 4621,
  EGMI_REQ_DEPLOY_FURNITURE = 4622,
  EGMI_ACK_DEPLOY_FURNITURE = 4623,
  EGMI_REQ_ARTIFICE_ITEM = 4624,
  EGMI_ACK_ARTIFICE_ITEM = 4625,
  EGMI_REQ_CHANGE_DECORATE_NAME = 4626,
  EGMI_ACK_CHANGE_DECORATE_NAME = 4627,
  EGMI_REQ_EXPAND_DECORATES = 4628,
  EGMI_ACK_EXPAND_DECORATES = 4629,
  EGMI_REQ_USE_DECORATE = 4630,
  EGMI_ACK_USE_DECORATE = 4631,
  EGMI_REQ_GET_VISIT_PAGE_INFO = 4640,
  EGMI_ACK_GET_VISIT_PAGE_INFO = 4641,
  EGMI_REQ_ENTER_SOMEONE_REST_ZONE = 4642,
  EGMI_ACK_ENTER_SOMEONE_REST_ZONE = 4643,
  EGMI_REQ_BEGIN_REST_ASSIGN_COUPLE = 4644,
  EGMI_ACK_BEGIN_REST_ASSIGN_COUPLE = 4645,
  EGMI_ACK_BEGIN_REST_ASSIGN_COUPLE_INNER = 4646,
  EGMI_REQ_FINISH_REST_ASSIGN_COUPLE = 4647,
  EGMI_ACK_FINISH_REST_ASSIGN_COUPLE = 4648,
  EGMI_REQ_REDEEM_REST_ENERGY_VALUE = 4649,
  EGMI_ACK_REDEEM_REST_ENERGY_VALUE = 4650,
  EGMI_REQ_ADD_VISITOR_SEATS_INNER = 4651,
  EGMI_REQ_FINISH_REST_ASSIGN_COUPLE_INNER = 4652,
  EGMI_ACK_FINISH_REST_ASSIGN_COUPLE_INNER = 4653,
  EGMI_REQ_REST_VISIT_ADD_REWARD = 4654,
  EGMI_ACK_REST_VISIT_ADD_REWARD = 4655,
  EGMI_REQ_SYNC_VISIT_NEED_DATA = 4656,
  EGMI_REQ_FINISH_REST_ALL_ASSIGN_COUPLE = 4657,
  EGMI_ACK_FINISH_REST_ALL_ASSIGN_COUPLE = 4658,
  EGMI_REQ_ENTER_BATH = 4700,
  EGMI_ACK_ENTER_BATH = 4701,
  EGMI_REQ_LEAVE_BATH = 4702,
  EGMI_ACK_LEAVE_BATH = 4703,
  EGMI_REQ_GET_BATH_ROOM_CONDITION_STATES = 4704,
  EGMI_ACK_GET_BATH_ROOM_CONDITION_STATES = 4705,
  EGMI_REQ_UNLOCK_BATH_ROOM = 4706,
  EGMI_ACK_UNLOCK_BATH_ROOM = 4707,
  EGMI_REQ_LEVEL_UP_BATH_ROOM = 4708,
  EGMI_ACK_LEVEL_UP_BATH_ROOM = 4709,
  EGMI_REQ_SET_BATH_ROOM_TARGET_COUPLE = 4710,
  EGMI_ACK_SET_BATH_ROOM_TARGET_COUPLE = 4711,
  EGMI_REQ_SET_BATH_ROOM_SOURCE_COUPLE = 4712,
  EGMI_ACK_SET_BATH_ROOM_SOURCE_COUPLE = 4713,
  EGMI_REQ_BATH_ROOM_BEGIN_COMBINE = 4714,
  EGMI_ACK_BATH_ROOM_BEGIN_COMBINE = 4715,
  EGMI_REQ_BATH_ROOM_CANCEL_COMBINE = 4716,
  EGMI_ACK_BATH_ROOM_CANCEL_COMBINE = 4717,
  EGMI_REQ_SWITCH_BATH_ROOM = 4718,
  EGMI_ACK_SWITCH_BATH_ROOM = 4719,
  EGMI_REQ_IMPRINT_LEVEL_UP = 4750,
  EGMI_ACK_IMPRINT_LEVEL_UP = 4751,
  EGMI_REQ_UNLOCK_IMPRINT_SKILL = 4752,
  EGMI_ACK_UNLOCK_IMPRINT_SKILL = 4753,
  EGMI_REQ_EQUIP_IMPRINT_SKILL = 4754,
  EGMI_ACK_EQUIP_IMPRINT_SKILL = 4755,
  EGMI_REQ_DEMOUNT_IMPRINT_SKILL = 4756,
  EGMI_ACK_DEMOUNT_IMPRINT_SKILL = 4757,
  EGMI_REQ_REFRESH_IMPRINT_LUCKY_COIN_ATTRS = 4758,
  EGMI_ACK_REFRESH_IMPRINT_LUCKY_COIN_ATTRS = 4759,
  EGMI_REQ_SAVE_IMPRINT_LUCKY_COIN_ATTRS = 4760,
  EGMI_ACK_SAVE_IMPRINT_LUCKY_COIN_ATTRS = 4761,
  EGMI_REQ_CANCEL_IMPRINT_LUCKY_COIN_ATTRS = 4762,
  EGMI_ACK_CANCEL_IMPRINT_LUCKY_COIN_ATTRS = 4763,
  EGMI_REQ_REPLACE_IMPRINT_LUCKY_COIN = 4770,
  EGMI_ACK_REPLACE_IMPRINT_LUCKY_COIN = 4771,
  EGMI_REQ_REPLACE_CALL_GHOST_RUBBING = 4772,
  EGMI_ACK_REPLACE_CALL_GHOST_RUBBING = 4773,
  EGMI_REQ_TOP_IMPRINT = 4774,
  EGMI_ACK_TOP_IMPRINT = 4775,
  EGMI_REQ_ENTER_PVP = 5000,
  EGMI_ACK_ENTER_PVP = 5001,
  EGMI_REQ_MATCH_PVP = 5002,
  EGMI_ACK_MATCH_PVP = 5003,
  EGMI_REQ_CANCEL_MATCH_PVP = 5004,
  EGMI_ACK_CANCEL_MATCH_PVP = 5005,
  EGMI_REQ_SYNC_PVP_STATE = 5006,
  EGMI_ACK_SYNC_PVP_STATE = 5007,
  EGMI_ACK_GLOBAL_PVP_MATCH = 5008,
  EGMI_ACK_PVP_PLAYER_DESTROY = 5009,
  EGMI_ACK_PVP_CLOSED = 5010,
  EGMI_REQ_IS_IN_PVP_MATCH_WAITING_POOL = 5011,
  EGMI_ACK_IS_IN_PVP_MATCH_WAITING_POOL = 5012,
  EGMI_REQ_REFRESH_PVP_RANK_INFO = 5013,
  EGMI_ACK_REFRESH_PVP_RANK_INFO = 5014,
  EGMI_REQ_PVP_RANK_DATA_STATE = 5015,
  EGMI_ACK_PVP_RANK_DATA_STATE = 5016,
  EGMI_REQ_PVP_RANKLIST = 5017,
  EGMI_ACK_PVP_RANKLIST = 5018,
  EGMI_REQ_ADD_PVP_REWARD_CANDIDATE = 5019,
  EGMI_ACK_SYNC_PVP_SESSION_STATE_INFO = 5040,
  EGMI_REQ_CREATE_COMMUNITY = 5100,
  EGMI_ACK_CREATE_COMMUNITY = 5101,
  EGMI_REQ_JOIN_COMMUNITY = 5102,
  EGMI_ACK_JOIN_COMMUNITY = 5103,
  EGMI_REQ_CANCEL_JOIN_COMMUNITY = 5104,
  EGMI_ACK_CANCEL_JOIN_COMMUNITY = 5105,
  EGMI_REQ_QUICK_JOIN_COMMUNITY = 5106,
  EGMI_ACK_QUICK_JOIN_COMMUNITY = 5107,
  EGMI_REQ_PAGE_INFO = 5110,
  EGMI_ACK_PAGE_INFO = 5111,
  EGMI_REQ_SEARCH_COMMUNITY = 5112,
  EGMI_ACK_SEARCH_COMMUNITY = 5113,
  EGMI_REQ_MODIFY_COMMUNITY_SETTING = 5114,
  EGMI_ACK_MODIFY_COMMUNITY_SETTING = 5115,
  EGMI_REQ_APPLICATION_INFO = 5116,
  EGMI_ACK_APPLICATION_INFO = 5117,
  EGMI_REQ_PERSONNEL_ASSIGNMENT = 5118,
  EGMI_ACK_PERSONNEL_ASSIGNMENT = 5119,
  EGMI_REQ_CONSTRUCTION_TASK_OPERATION = 5120,
  EGMI_ACK_CONSTRUCTION_TASK_OPERATION = 5121,
  EGMI_REQ_MAKE_WISH = 5122,
  EGMI_ACK_MAKE_WISH = 5123,
  EGMI_REQ_DONATION_OPERATION = 5124,
  EGMI_ACK_DONATION_OPERATION = 5125,
  EGMI_REQ_WISH_DETAILS = 5126,
  EGMI_ACK_WISH_DETAILS = 5127,
  EGMI_REQ_RECEIVE_DONATION = 5128,
  EGMI_ACK_RECEIVE_DONATION = 5129,
  EGMI_REQ_QUIT_COMMUNITY = 5130,
  EGMI_ACK_QUIT_COMMUNITY = 5131,
  EGMI_REQ_CANCEL_CREATE_COMMUNITY = 5132,
  EGMI_ACK_CANCEL_CREATE_COMMUNITY = 5133,
  EGMI_REQ_COMMUNITY_SETTING = 5134,
  EGMI_ACK_COMMUNITY_SETTING = 5135,
  EGMI_REQ_OTHER_PLAYER_COMMUNITY_INFO = 5136,
  EGMI_ACK_OTHER_PLAYER_COMMUNITY_INFO = 5137,
  EGMI_ACK_JOIN_COMMUNITY_SUCCESS = 5138,
  EGMI_ACK_GAME_TO_GLOBAL_COMMUNITY_COMMON_RST = 5139,
  EGMI_REQ_COMMUNITY_BULLETIN_CONTENT = 5140,
  EGMI_ACK_COMMUNITY_BULLETIN_CONTENT = 5141,
  EGMI_REQ_COMMUNITY_BULLETIN_SUPPORT = 5142,
  EGMI_ACK_COMMUNITY_BULLETIN_SUPPORT = 5143,
  EGMI_REQ_GAME_TO_GLOBAL_COMMUNITY_UPDATE_TASK = 5144,
  EGMI_ACK_GLOBAL_TO_GAME_COMMUNITY_UPDATE_TASK = 5145,
  EGMI_REQ_OPERATE_COMMUNITY_TASK = 5146,
  EGMI_ACK_OPERATE_COMMUNITY_TASK = 5147,
  EGMI_REQ_COMMUNITY_UNLOCK_WELFARE_ITEM = 5148,
  EGMI_ACK_COMMUNITY_UNLOCK_WELFARE_ITEM = 5149,
  EGMI_REQ_COMMUNITY_WELFARE_ITEM_LIST = 5150,
  EGMI_ACK_COMMUNITY_WELFARE_ITEM_LIST = 5151,
  EGMI_REQ_COMMUNITY_PURCHASE_WELFARE_ITEM = 5152,
  EGMI_ACK_COMMUNITY_PURCHASE_WELFARE_ITEM = 5153,
  EGMI_ACK_GAME_TO_GLOBAL_COMMUNITY_BULLETIN_LOTTERY = 5154,
  EGMI_REQ_GET_EXP_ITEM_CAN_BUY_NUM = 5155,
  EGMI_ACK_GET_EXP_ITEM_CAN_BUY_NUM = 5156,
  EGMI_REQ_GET_COMMUNITY_RANKING_LIST = 5157,
  EGMI_ACK_GET_COMMUNITY_RANKING_LIST = 5158,
  EGMI_REQ_ENTER_COMMUNITY_MATCH = 5160,
  EGMI_ACK_ENTER_COMMUNITY_MATCH = 5161,
  EGMI_REQ_COMMUNITY_EVENT_INFO = 5162,
  EGMI_ACK_COMMUNITY_EVENT_INFO = 5163,
  EGMI_REQ_COMMUNITY_EVENT_SIGN_UP = 5164,
  EGMI_ACK_COMMUNITY_EVENT_SIGN_UP = 5165,
  EGMI_SYNC_COMMUNITY_MATCH_STATUS = 5166,
  EGMI_REQ_COMMUNITY_MATCH_CONTENT_UPDATE = 5167,
  EGMI_REQ_COMMUNITY_MATCH_STATUS = 5168,
  EGMI_ACK_COMMUNITY_MATCH_STATUS = 5169,
  EGMI_REQ_COMMUNITY_MATCH_BULLETIN_CONTENT = 5170,
  EGMI_ACK_COMMUNITY_MATCH_BULLETIN_CONTENT = 5171,
  EGMI_REQ_COMMUNITY_MATCH_UPDATE_RANK_DATA = 5172,
  EGMI_REQ_COMMUNITY_EVENT_CHALLENGE = 5173,
  EGMI_ACK_COMMUNITY_EVENT_CHALLENGE = 5174,
  EGMI_REQ_EVENT_MATCH_INFO = 5175,
  EGMI_ACK_EVENT_MATCH_INFO = 5176,
  EGMI_REQ_SET_OTHER_PLAYER_PROPERTY_INT = 5200,
  EGMI_REQ_SET_OTHER_PLAYER_PROPERTY_FLOAT = 5201,
  EGMI_REQ_SET_OTHER_PLAYER_PROPERTY_STRING = 5202,
  EGMI_REQ_SET_OTHER_PLAYER_PROPERTY_OBJECT = 5203,
  EGMI_REQ_SET_OTHER_PLAYER_PROPERTY_VECTOR2 = 5204,
  EGMI_REQ_SET_OTHER_PLAYER_PROPERTY_VECTOR3 = 5205,
  EGMI_REQ_RECEIVE_OPERATING_ACTIVITY_REWARD = 5300,
  EGMI_ACK_RECEIVE_OPERATING_ACTIVITY_REWARD = 5301,
  EGMI_REQ_CHECK_REDEEM_CODE = 5302,
  EGMI_ACK_CHECK_REDEEM_CODE = 5303,
  EGMI_REQ_USE_REDEEM_CODE = 5304,
  EGMI_ACK_USE_REDEEM_CODE = 5305,
  EGMI_REQ_OPEN_OPERTING_ACTIVITY_SYSTEM = 5306,
  EGMI_ACK_OPEN_OPERTING_ACTIVITY_SYSTEM = 5307,
  EGMI_REQ_RECEIVE_ALL_OPERARING_ACTIVITY_REWARD = 5308,
  EGMI_ACK_RECEIVE_ALL_OPERATING_ACTIVITY_REWARD = 5309,
  EGMI_REQ_BUY_SEASON_POINT = 5310,
  EGMI_ACK_BUY_SEASON_POINT = 5311,
  EGMI_REQ_BECOME_PROPAGANDIST = 5312,
  EGMI_ACK_BECOME_PROPAGANDIST = 5313,
  EGMI_REQ_BIND_INVITER = 5314,
  EGMI_ACK_BIND_INVITER = 5315,
  EGMI_REQ_INVITEE_INFO = 5316,
  EGMI_ACK_INVITEE_INFO = 5317,
  EGMI_REQ_RESET_LAST_INVITE_EVENT_DATA = 5318,
  EGMI_ACK_RESET_LAST_INVITE_EVENT_DATA = 5319,
  EGMI_REQ_SYNC_UPDATE_INVITE_LIST = 5320,
  EGMI_REQ_FRIEND_NUM_UPDATE_PROPAGANDA_TASK = 5321,
  EGMI_ACK_FRIEND_NUM_UPDATE_PROPAGANDA_TASK = 5322,
  EGMI_REQ_BIND_INVITER_INFO_ONLINE = 5323,
  EGMI_ACK_BIND_INVITER_INFO_ONLINE = 5324,
  EGMI_REQ_TRIAL_ROLE_BY_JACKPOT = 5325,
  EGMI_ACK_TRIAL_ROLE_BY_JACKPOT = 5326,
  EGMI_REQ_RECEIVE_REGRESS_TASK = 5327,
  EGMI_ACK_RECEIVE_REGRESS_TASK = 5328,
  EGMI_ACK_REGRESS_SHOP_DEADLINE = 5329,
  EGMI_REQ_CREATE_NOVICIATE_WELFARE_ORDER = 5330,
  EGMI_ACK_CREATE_NOVICIATE_WELFARE_ORDER = 5331,
  EGMI_REQ_ADD_GLOBAL_EXCHANGE_ITEM = 5332,
  EGMI_ACK_ADD_GLOBAL_EXCHANGE_ITEM = 5333,
  EGMI_REQ_REMOVE_GLOBAL_EXCHANGE_ITEM = 5334,
  EGMI_ACK_REMOVE_GLOBAL_EXCHANGE_ITEM = 5335,
  EGMI_REQ_ACCEPT_GLOBAL_EXCHANGE_ITEM = 5336,
  EGMI_ACK_ACCEPT_GLOBAL_EXCHANGE_ITEM = 5337,
  EGMI_REQ_REFRESH_GLOBAL_EXCHANGE_ITEM_LIST = 5338,
  EGMI_ACK_REFRESH_GLOBAL_EXCHANGE_ITEM_LIST = 5339,
  EGMI_REQ_RECEIVE_FESTIVAL_PUZZLE_AWARD = 5340,
  EGMI_ACK_RECEIVE_FESTIVAL_PUZZLE_AWARD = 5341,
  EGMI_REQ_RECEIVE_FESTIVAL_CONVERSION_AWARD = 5342,
  EGMI_ACK_RECEIVE_FESTIVAL_CONVERSION_AWARD = 5343,
  EGMI_REQ_GET_GLOBAL_LIMIT_GOODS_REMAIN_COUNT = 5344,
  EGMI_ACK_GET_GLOBAL_LIMIT_GOODS_REMAIN_COUNT = 5345,
  EGMI_REQ_ENTER_FESTIVAL_TRIAL = 5346,
  EGMI_REQ_BUY_GLOBAL_LIMIT_GOODS = 5384,
  EGMI_ACK_BUY_GLOBAL_LIMIT_GOODS = 5385,
  EGMI_REQ_GET_PAY_CALLBACK = 5400,
  EGMI_ACK_GET_PAY_CALLBACK = 5401,
  EGMI_REQ_CREATE_ORDER = 5402,
  EGMI_ACK_CREATE_ORDER = 5403,
  EGMI_REQ_RECHARGE = 5404,
  EGMI_ACK_RECHARGE = 5405,
  EGMI_REQ_DOUBLE_CHECK_RECHARGE = 5406,
  EGMI_ACK_DOUBLE_CHECK_RECHARGE = 5407,
  EGMI_ACK_RECHARGE_PURCHASE_RESULT = 5408,
  EGMI_REQ_UPDATE_RANK_SCORE = 5500,
  EGMI_ACK_UPDATE_RANK_SCORE = 5501,
  EGMI_REQ_GET_RANK_LIST = 5502,
  EGMI_ACK_GET_RANK_LIST = 5503,
  EGMI_REQ_ADD_RANK_GROUP_STAGE_REWARD = 5504,
  EGMI_REQ_REMOVE_RANK_GROUP_STAGE_REWARD = 5505,
  EGMI_REQ_GET_ACTIVITY_URL = 5600,
  EGMI_ACK_GET_ACTIVITY_URL = 5601,
  EGMI_REQ_MYCARD_GET_AUTH = 5700,
  EGMI_ACK_MYCARD_GET_AUTH = 5701,
  EGMI_REQ_MYCARD_QUERY_RESULT = 5702,
  EGMI_ACK_MYCARD_QUERY_RESULT = 5703,
  EGMI_REQ_TRIGGER_WORLD_EVENT_BATTLES = 5800,
  EGMI_ACK_TRIGGER_WORLD_EVENT_BATTLES = 5801,
  EGMI_REQ_RESET_WORLD_EVENT_PROB = 5802,
  EGMI_REQ_CHECK_PAY_EVENT_PURCHASE = 5900,
  EGMI_ACK_CHECK_PAY_EVENT_PURCHASE = 5901,
  EGMI_ACK_PAY_EVENT_PURCHASE_RESULT = 5902,
  EGMI_REQ_PAY_EVENT_RECEIVE_DAILY_REWARD = 5903,
  EGMI_ACK_PAY_EVENT_RECEIVE_DAILY_REWARD = 5904,
  EGMI_REQ_CHECK_BEHAVIOR_SHOP_PURCHASE = 6000,
  EGMI_ACK_CHECK_BEHAVIOR_SHOP_PURCHASE = 6001,
  EGMI_ACK_BEHAVIOR_SHOP_PURCHAE_RESULT = 6002,
  EGMI_REQ_ENTER_WORLD_BOSS_ACTION = 7002,
  EGMI_ACK_ENTER_WORLD_BOSS_ACTION = 7003,
  EGMI_REQ_ENTER_WORLD_BOSS_ROOM = 7004,
  EGMI_ACK_ENTER_WORLD_BOSS_ROOM = 7005,
  EGMI_REQ_GET_WORLD_BOSS_BRIEF_INFO = 7006,
  EGMI_ACK_GET_WORLD_BOSS_BRIEF_INFO = 7007,
  EGMI_REQ_BEGIN_WORLD_BOSS_BATTLE = 7008,
  EGMI_ACK_BEGIN_WORLD_BOSS_BATTLE = 7009,
  EGMI_ACK_WORLD_BOSS_SETTLEMENT = 7010,
  EGMI_REQ_UPLOAD_WORLD_BOSS_DAMAGE = 7012,
  EGMI_ACK_WORLD_BOSS_SYNC_HP = 7013,
  EGMI_REQ_SUBMIT_WORLD_BOSS_FINAL_SCORE = 7014,
  EGMI_ACK_SUBMIT_WORLD_BOSS_FINAL_SCORE = 7015,
  EGMI_ACK_WORLD_BOSS_DEAD_OR_END = 7016,
  EGMI_ACK_WORLD_BOSS_DAMAGE_SYNC = 7017,
  EGMI_REQ_GET_WORLD_BOSS_ROOM_RANK = 7018,
  EGMI_ACK_GET_WORLD_BOSS_ROOM_RANK = 7019,
  EGMI_REQ_BUY_WORLD_BOSS_SKILL = 7020,
  EGMI_ACK_BUY_WORLD_BOSS_SKILL = 7021,
  EGMI_REQ_BEGIN_WORLD_MONSTER_BATTLE = 7022,
  EGMI_ACK_BEGIN_WORLD_MONSTER_BATTLE = 7023,
  EGMI_ACK_BEGIN_SYNC_WORLD_BOSS_DAMAGE_SCHEDULE = 7024,
  EGMI_ACK_STOP_SYNC_WORLD_BOSS_DAMAGE_SCHEDULE = 7025,
  EGMI_ACK_SYNC_WORLD_BOSS_BRIEF_INFO = 7026,
  EGMI_ACK_SYNC_WORLD_BOSS_ACTION_STATUS = 7027,
  EGMI_REQ_GET_WORLD_BOSS_TOTAL_RANK = 7028,
  EGMI_ACK_GET_WORLD_BOSS_TOTAL_RANK = 7029,
  EGMI_REQ_UPLOAD_WORLD_BOSS_PLAYER_NAME = 7030,
  EGMI_SYNC_WORLD_BOSS_TOTAL_RANK_SAVED = 7031,
  EGMI_REQ_PAGEANT_SIGIN_UP = 7050,
  EGMI_ACK_PAGEANT_SIGIN_UP = 7051,
  EGMI_REQ_PAGEANT_COMPARE_INFO = 7052,
  EGMI_ACK_PAGEANT_COMPARE_INFO = 7053,
  EGMI_REQ_PAGEANT_COMPARE = 7054,
  EGMI_ACK_PAGEANT_COMPARE = 7055,
  EGMI_REQ_PAGEANT_RANK = 7056,
  EGMI_ACK_PAGEANT_RANK = 7057,
  EGMI_REQ_PAGEANT_VOTE_INFO = 7058,
  EGMI_ACK_PAGEANT_VOTE_INFO = 7059,
  EGMI_REQ_PAGEANT_PURCHASE_VATE_NUM = 7060,
  EGMI_ACK_PAGEANT_PURCHASE_VATE_NUM = 7061,
  EGMI_REQ_PAGEANT_EVENT_ID = 7062,
  EGMI_ACK_PAGEANT_EVENT_ID = 7063,
  EGMI_SYNC_PAGEANT_EVENT_INFO = 7064,
  EGMI_ACK_PAGEANT_EVENT_END = 7065,
  EGMI_REQ_SEND_RED_ENEVLOPE = 7080,
  EGMI_ACK_SEND_RED_ENEVLOPE = 7081,
  EGMI_REQ_RECEIVE_RED_ENEVLOPE = 7082,
  EGMI_ACK_RECEIVE_RED_ENEVLOPE = 7083,
  EGMI_REQ_STORY_REVIEW = 8000,
  EGMI_ACK_STORY_REVIEW = 8001,
  EGMI_REQ_TAKE_HIDDEN_COLLECTION_REWARD = 8020,
  EGMI_ACK_TAKE_HIDDEN_COLLECTION_REWARD = 8021,
  EGMI_REQ_TAKE_NOVICIATE_TEACHING_REWARD = 8050,
  EGMI_ACK_TAKE_NOVICIATE_TEACHING_REWARD = 8051,
  EGMI_REQ_BEGIN_NOVICIATE_TEACHING = 8052,
  EGMI_ACK_BEGIN_NOVICIATE_TEACHING = 8053,
  EGMI_REQ_NODE_EXPLORE_JUMP = 8078,
  EGMI_ACK_NODE_EXPLORE_JUMP = 8079,
  EGMI_REQ_NODE_EXPLORE_DETAIL_INFO = 8080,
  EGMI_ACK_NODE_EXPLORE_DETAIL_INFO = 8081,
  EGMI_REQ_NODE_EXPLORE_BULLETINS = 8082,
  EGMI_ACK_NODE_EXPLORE_BULLETINS = 8083,
  EGMI_REQ_NODE_EXPLORE_GET_REWARD = 8084,
  EGMI_ACK_NODE_EXPLORE_GET_REWARD = 8085,
  EGMI_REQ_NODE_EXPLORE_REPAIR = 8086,
  EGMI_ACK_NODE_EXPLORE_REPAIR = 8087,
  EGMI_REQ_NODE_EXPLORE_GET_SHOP_GOODS = 8088,
  EGMI_ACK_NODE_EXPLORE_GET_SHOP_GOODS = 8089,
  EGMI_REQ_NODE_EXPLORE_ENTER = 8090,
  EGMI_ACK_NODE_EXPLORE_ENTER = 8091,
  EGMI_ACK_NODE_EXPLORE_INIT_DATA = 8092,
  EGMI_ACK_NODE_EXPLORE_STATE_AND_TS = 8093,
  EGMI_REQ_NODE_EXPLORE_UPLOAD_PASSED_DATA = 8094,
  EGMI_ACK_NODE_EXPLORE_UPLOAD_PASSED_DATA = 8095,
  EGMI_REQ_NODE_EXPLORE_UPDATE_PASSED_DATA = 8096,
  EGMI_ACK_NODE_EXPLORE_UPDATE_PASSED_DATA = 8097,
  EGMI_ACK_NODE_EXPLORE_NEW_PHASE = 8098,
  EGMI_REQ_NODE_EXPLORE_JUMP_WITH_PROP = 8099,
  EGMI_ACK_NODE_EXPLORE_JUMP_WITH_PROP = 8106,
  EGMI_REQ_NODE_EXPLORE_UPLOAD_DB_STRING_DATA = 8107,
  EGMI_ACK_NODE_EXPLORE_UPLOAD_DB_STRING_DATA = 8108,
  EGMI_REQ_TOGGLE_HORCRUX_AUTO_CONVERSION_SETTINGS = 8100,
  EGMI_ACK_TOGGLE_HORCRUX_AUTO_CONVERSION_SETTINGS = 8101,
  EGMI_REQ_UPDATE_HORCRUX_AUTO_CONVERSION_SETTINGS = 8102,
  EGMI_ACK_UPDATE_HORCRUX_AUTO_CONVERSION_SETTINGS = 8103,
  EGMI_REQ_UPDATE_HORCRUX_DROP_TYPE_SETTINGS = 8104,
  EGMI_ACK_UPDATE_HORCRUX_DROP_TYPE_SETTINGS = 8105,
  EGMI_REQ_EXTREM_CHALLENGE_PAGE = 8120,
  EGMI_ACK_EXTREM_CHALLENGE_PAGE = 8121,
  EGMI_REQ_ENTER_EXTREM_CHALLENGE = 8122,
  EGMI_ACK_ENTER_EXTREM_CHALLENGE = 8123,
  EGMI_SYNC_EXTREM_CHALLENGE_INNER = 8124,
  EGMI_ACK_EXTREM_CHALLENGE_REWARD = 8125,
  EGMI_REQ_MAP_TREASURE_ENTER = 8150,
  EGMI_ACK_MAP_TREASURE_ENTER = 8151,
  EGMI_REQ_MAP_TREASURE_MOVE = 8152,
  EGMI_ACK_MAP_TREASURE_MOVE = 8153,
  EGMI_REQ_MAP_TREASURE_LEAVE = 8154,
  EGMI_ACK_MAP_TREASURE_LEAVE = 8155,
  EGMI_REQ_MAP_TREASURE_EXPLORE = 8156,
  EGMI_ACK_MAP_TREASURE_EXPLORE = 8157,
  EGMI_REQ_GET_MARRIAGE_DATA = 8200,
  EGMI_REQ_REGISTER_MARRIAGE = 8201,
  EGMI_ACK_REGISTER_MARRIAGE = 8202,
  EGMI_REQ_DIVORCE = 8203,
  EGMI_ACK_DIVORCE = 8204,
  EGMI_REQ_UPDATE_MARRIAGE_RUNTIME_INFO = 8205,
  EGMI_REQ_SEND_INTIMATE_GIFT = 8230,
  EGMI_ACK_SEND_INTIMATE_GIFT = 8231,
  EGMI_REQ_QUICK_SEND_BLESS = 8232,
  EGMI_ACK_QUICK_SEND_BLESS = 8233,
  EGMI_REQ_QUICK_RECEIVE_BLESS = 8234,
  EGMI_ACK_QUICK_RECEIVE_BLESS = 8235,
  EGMI_REQ_QUERY_SELF_DATING_INFO = 8236,
  EGMI_ACK_QUERY_SELF_DATING_INFO = 8237,
  EGMI_REQ_REGISTER_DATING_INFO = 8238,
  EGMI_ACK_REGISTER_DATING_INFO = 8239,
  EGMI_REQ_DATING_INFO_LIST = 8240,
  EGMI_ACK_DATING_INFO_LIST = 8241,
  EGMI_REQ_OPEN_PROPOSAL = 8242,
  EGMI_ACK_OPEN_PROPOSAL = 8243,
  EGMI_REP_CLOSE_PROPOSAL = 8244,
  EGMI_ACK_CLOSE_PROPOSAL = 8245,
  EGMI_REQ_SEND_PROPOSAL_APPLY = 8246,
  EGMI_ACK_SEND_PROPOSAL_APPLY = 8247,
  EGMI_REQ_CANCEL_PROPOSAL_APPLY = 8248,
  EGMI_ACK_CANCEL_PROPOSAL_APPLY = 8249,
  EGMI_REQ_GET_PROPOSAL_LIST = 8250,
  EGMI_ACK_GET_PROPOSAL_LIST = 8251,
  EGMI_REQ_GET_PROPOSAL_APPLY_LIST = 8252,
  EGMI_ACK_GET_PROPOSAL_APPLY_LIST = 8253,
  EGMI_REQ_OPERATION_PROPOSAL_LETTER = 8254,
  EGMI_ACK_OPERATION_PROPOSAL_LETTER = 8255,
  EGMI_REQ_OPERATION_TOKEN = 8256,
  EGMI_ACK_OPERATION_TOKEN = 8257,
  EGMI_REQ_MAKE_WISH_FOR_MATE = 8258,
  EGMI_ACK_MAKE_WISH_FOR_MATE = 8259,
  EGMI_REQ_MAKE_DONATION_FOR_MATE = 8260,
  EGMI_ACK_MAKE_DONATION_FOR_MATE = 8261,
  EGMI_REQ_GET_STAGE_REWARD_FOR_MARRIAGE = 8262,
  EGMI_ACK_GET_STAGE_REWARD_FOR_MARRIAGE = 8263,
  EGMI_REQ_UPDATE_MARRIAGE_DATA = 8264,
  EGMI_REQ_RECEIVE_DONATION_FOR_MATE = 8265,
  EGMI_ACK_RECEIVE_DONATION_FOR_MATE = 8266,
  EGMI_REQ_MAIL_REWARD_WITH_MARRIAGE = 8267,
  EGMI_REQ_GET_TOKEN_DATA = 8268,
  EGMI_ACK_GET_TOKEN_DATA = 8269,
  EGMI_REQ_GET_PIGGY_BANK_NEXT_RESET_TS = 8270,
  EGMI_ACK_GET_PIGGY_BANK_NEXT_RESET_TS = 8271,
  EGMI_ACK_NEW_PROPOSAL_APPLY = 8272,
  EGMI_REQ_CREATE_WEDDING_SCHEMA = 8300,
  EGMI_ACK_CREATE_WEDDING_SCHEMA = 8301,
  EGMI_REQ_CANCEL_WEDDING_SCHEMA = 8302,
  EGMI_ACK_CANCEL_WEDDING_SCHEMA = 8303,
  EGMI_REQ_VIEW_WEDDING_SCHEMA = 8304,
  EGMI_ACK_VIEW_WEDDING_SCHEMA = 8305,
  EGMI_REQ_ACCEPT_WEDDING_SCHEMA = 8306,
  EGMI_ACK_ACCEPT_WEDDING_SCHEMA = 8307,
  EGMI_REQ_REFUSE_WEDDING_SCHEMA = 8308,
  EGMI_ACK_REFUSE_WEDDING_SCHEMA = 8309,
  EGMI_REQ_ENTER_WEDDING_SCENE = 8310,
  EGMI_ACK_ENTER_WEDDING_SCENE = 8311,
  EGMI_REQ_REPORT_WEDDING_SCENE_PLAYER_INFO = 8312,
  EGMI_ACK_ADD_WEDDING_SCENE_PLAYER_INFO = 8313,
  EGMI_ACK_REMOVE_WEDDING_SCENE_PLAYER_INFO = 8314,
  EGMI_ACK_UPDATE_WEDDING_SCENE_PLAYER_INFO = 8315,
  EGMI_ACK_ADD_WEDDING_SCENE_ROBOT_INFO = 8316,
  EGMI_ACK_REMOVE_WEDDING_SCENE_ROBOT_INFO = 8317,
  EGMI_REQ_INVITE_GUESTS = 8318,
  EGMI_ACK_INVITE_GUESTS = 8319,
  EGMI_REQ_SEND_GIFT_BOX = 8320,
  EGMI_ACK_SEND_GIFT_BOX = 8321,
  EGMI_REQ_VIEW_GIFT_BOX = 8322,
  EGMI_ACK_VIEW_GIFT_BOX = 8323,
  EGMI_REQ_RECEIVE_GIFT_BOX = 8324,
  EGMI_ACK_RECEIVE_GIFT_BOX = 8325,
  EGMI_REQ_TRANSFIGURATION = 8326,
  EGMI_ACK_TRANSFIGURATION = 8327,
  EGMI_REQ_SHOOT_OFF_FIREWORKS = 8328,
  EGMI_ACK_SHOOT_OFF_FIREWORKS = 8329,
  EGMI_REQ_RECEIVE_FRUIT_DISH = 8330,
  EGMI_ACK_RECEIVE_FRUIT_DISH = 8331,
  EGMI_REQ_BATTLE_TROUBLEMAKER = 8332,
  EGMI_ACK_BATTLE_TROUBLEMAKER = 8333,
  EGMI_REQ_LEAVE_WEDDING_SCENE = 8334,
  EGMI_ACK_LEAVE_WEDDING_SCENE = 8335,
  EGMI_REQ_SEND_GIFT_BOX_REMAIN_REWARD = 8336,
  EGMI_ACK_SEND_GIFT_BOX_REMAIN_REWARD = 8337,
  EGMI_REQ_START_SYNC_WEDDING_SCENE_ROLE_INFO = 8338,
  EGMI_REQ_STOP_SYNC_WEDDING_SCENE_ROLE_INFO = 8339,
  EGMI_REQ_MARRIAGE_PROPERTY = 8340,
  EGMI_ACK_MARRIAGE_PROPERTY = 8341,
  EGMI_REQ_VIEW_KNOCKOUT_MATCH_INFO = 8370,
  EGMI_ACK_VIEW_KNOCKOUT_MATCH_INFO = 8371,
  EGMI_REQ_GET_PARTICIPATING_STATE = 8372,
  EGMI_ACK_GET_PARTICIPATING_STATE = 8373,
  EGMI_REQ_VIEW_KNOCKOUT_BETTING_INFO = 8374,
  EGMI_ACK_VIEW_KNOCKOUT_BETTING_INFO = 8375,
  EGMI_REQ_VIEW_KNOCKOUT_ALL_BETTING_INFO = 8376,
  EGMI_ACK_VIEW_KNOCKOUT_ALL_BETTING_INFO = 8377,
  EGMI_REQ_BETTING_KNOCKOUT = 8378,
  EGMI_ACK_BETTING_KNOCKOUT = 8379,
  EGMI_REQ_SET_KNOCKOUT_BATTLE_TEAM = 8380,
  EGMI_ACK_SET_KNOCKOUT_BATTLE_TEAM = 8381,
  EGMI_REQ_GET_KNOCKOUT_STATE = 8382,
  EGMI_ACK_GET_KNOCKOUT_STATE = 8383,
  EGMI_REQ_AUTO_SET_KNOCKOUT_TEAM = 8384,
  EGMI_ACK_AUTO_SET_KNOCKOUT_TEAM = 8385,
  EGMI_REQ_DESTROY_PLAYER_FOR_KNOCKOUT = 8386,
  EGMI_ACK_DESTROY_PLAYER_FOR_KNOCKOUT = 8387,
  EGMI_REQ_LOAD_PLAYER_FOR_KNOCKOUT = 8388,
  EGMI_ACK_LOAD_PLAYER_FOR_KNOCKOUT = 8389,
  EGMI_REQ_START_KNOCKOUT_BATTLE = 8390,
  EGMI_ACK_START_KNOCKOUT_BATTLE = 8391,
  EGMI_REQ_REPORT_KNOCKOUT_TEAM_INFO = 8392,
  EGMI_ACK_REPORT_KNOCKOUT_TEAM_INFO = 8393,
  EGMI_REQ_IS_IN_KNOCKOUT_BATTLE = 8394,
  EGMI_ACK_IS_IN_KNOCKOUT_BATTLE = 8395,
  EGMI_REQ_REENTER_KNOCKOUT_BATTLE = 8396,
  EGMI_ACK_REENTER_KNOCKOUT_BATTLE = 8397,
  EGMI_REQ_REPORT_KNOCKOUT_BATTLE_RESULT = 8398,
  EGMI_REQ_PREPARE_FOR_KNOCKOUT_BATTLE = 8400,
  EGMI_ACK_PREPARE_FOR_KNOCKOUT_BATTLE = 8401,
  EGMI_REQ_CANCEL_PREPARE_STATE = 8402,
  EGMI_ACK_CANCEL_PREPARE_STATE = 8403,
  EGMI_REQ_GET_KNOCKOUT_RANK_INFO = 8404,
  EGMI_ACK_GET_KNOCKOUT_RANK_INFO = 8405,
  EGMI_REQ_BEFORE_MIRROR_PLAYER_ACT = 8406,
  EGMI_REQ_TEMPORARY_SWITCH_MAINROLE_TALENT = 8407,
  EGMI_ACK_TEMPORARY_SWITCH_MAINROLE_TALENT = 8408,
  EGMI_REQ_RESTORE_MAINROLE_TALENT = 8409,
  EGMI_ACK_RESTORE_MAINROLE_TALENT = 8410,
  EGMI_REQ_REPORT_KNOCKOUT_BATTLE_GAME = 8411,
  EGMI_ACK_REPORT_KNOCKOUT_BATTLE_GAME = 8412,
  EGMI_REQ_WATCH_KNOCKOUT_BATTLE = 8420,
  EGMI_ACK_WATCH_KNOCKOUT_BATTLE = 8421,
  EGMI_REQ_ADD_SPECTATOR_CLINET_INFO = 8422,
  EGMI_ACK_ADD_SPECTATOR_CLINET_INFO = 8423,
  EGMI_REQ_REMOVE_SPECTATOR_CLINET_INFO = 8424,
  EGMI_ACK_REMOVE_SPECTATOR_CLINET_INFO = 8425,
  EGMI_REQ_SEND_KNOCKOUT_BULLET_SCREEN = 8426,
  EGMI_ACK_SEND_KNOCKOUT_BULLET_SCREEN = 8427,
  EGMI_REQ_SYNC_KNOCKOUT_BATTLE_STATE = 8428,
  EGMI_ACK_SYNC_KNOCKOUT_BATTLE_STATE = 8429,
  EGMI_REQ_REPORT_PVP_USED_COUPLES = 8450,
  EGMI_ACK_SYNC_BAN_COUPLES = 8451,
  EGMI_REQ_GET_BAN_COUPLE_LIST = 8452,
  EGMI_ACK_GET_BAN_COUPLE_LIST = 8453,
  EGMI_REQ_GET_PROTECT_COUPLE_LIST = 8454,
  EGMI_ACK_GET_PROTECT_COUPLE_LIST = 8455,
  EGMI_REQ_GET_BAN_COUPLE_REMAIN_TIME = 8456,
  EGMI_ACK_GET_BAN_COUPLE_REMAIN_TIME = 8457,
  EGMI_REQ_UNLOCK_VIRTUALIZER = 8500,
  EGMI_ACK_UNLOCK_VIRTUALIZER = 8501,
  EGMI_REQ_SUPPORT_GYEE_GET_RANKING = 8510,
  EGMI_ACK_SUPPORT_GYEE_GET_RANKING = 8511,
  EGMI_REQ_SUPPORT_GYEE_VOTES = 8512,
  EGMI_ACK_SUPPORT_GYEE_VOTES = 8513,
  EGMI_SYNC_SUPPORT_GYEE_MAIN_EVENT_OPEN = 8514,
  EGMI_SYNC_SUPPORT_GYEE_MAIN_EVENT_CLOSE = 8515,
  EGMI_SYNC_SUPPORT_GYEE_TASK_EVENT_CLOSE = 8516,
  EGMI_SYNC_SUPPORT_GYEE_VOTES_EVENT_CLOSE = 8517,
  EGMI_REQ_SUPPORT_GYEE_UPDATE_FULL_VOTE_PROGRESS = 8518,
  EGMI_ACK_SUPPORT_GYEE_UPDATE_FULL_VOTE_PROGRESS = 8519,
  EGMI_REQ_SUPPORT_GYEE_UPDATE_ALL_ONLINE_PLAYER_FULL_VOTE_PROGRESS = 8520,
  EGMI_ACK_SUPPORT_GYEE_UPDATE_ALL_ONLINE_PLAYER_FULL_VOTE_PROGRESS = 8521,
  EGMI_REQ_SUPPORT_GYEE_PAST_CHAMPIONS = 8522,
  EGMI_ACK_SUPPORT_GYEE_PAST_CHAMPIONS = 8523,
  EGMI_SYNC_MONOPOLY_EVENT_STATE = 8541,
  EGMI_REQ_PURCHASE_MONOPOLY_SHOP_ITEM = 8542,
  EGMI_ACK_PURCHASE_MONOPOLY_SHOP_ITEM = 8543,
  EGMI_REQ_RECEIVE_MONOPOLY_DICE_REWARDS = 8544,
  EGMI_ACK_RECEIVE_MONOPOLY_DICE_REWARDS = 8545,
  EGMI_REQ_SHARE_MONOPOLY_DICE_REWARDS = 8546,
  EGMI_ACK_SHARE_MONOPOLY_DICE_REWARDS = 8547,
  EGMI_REQ_ROLLING_MONOPOLY_ANY_DICE = 8548,
  EGMI_ACK_ROLLING_MONOPOLY_ANY_DICE = 8549,
  EGMI_REQ_ROLLING_MONOPOLY_ONE_DICE = 8550,
  EGMI_ACK_ROLLING_MONOPOLY_ONE_DICE = 8551,
  EGMI_REQ_ROLLING_MONOPOLY_OPTIONAL_DICE = 8552,
  EGMI_ACK_ROLLING_MONOPOLY_OPTIONAL_DICE = 8553,
  EGMI_REQ_MONOPOLY_BE_SHARED_TIME = 8554,
  EGMI_ACK_MONOPOLY_BE_SHARED_TIME = 8555,
  EGMI_REQ_MONOPOLY_STEPS_RANKING = 8556,
  EGMI_ACK_MONOPOLY_STEPS_RANKING = 8557,
  EGMI_REQ_MONOPOLY_EVENT_SELECT_OPTION = 8558,
  EGMI_ACK_MONOPOLY_EVENT_SELECT_OPTION = 8559,
  EGMI_SYNC_MONOPOLY_UPDATE_STEPS_RANKING = 8560,
  EGMI_REQ_MONOPOLY_SELF_BOSS_ATTACK_LIST = 8561,
  EGMI_ACK_MONOPOLY_SELF_BOSS_ATTACK_LIST = 8562,
  EGMI_REQ_MONOPOLY_PUBLIC_BOSS_ATTACK_LIST = 8563,
  EGMI_ACK_MONOPOLY_PUBLIC_BOSS_ATTACK_LIST = 8564,
  EGMI_REQ_MONOPOLY_CHALLENGE_SELF_BOSS_ATTACK = 8565,
  EGMI_ACK_MONOPOLY_CHALLENGE_SELF_BOSS_ATTACK = 8566,
  EGMI_REQ_MONOPOLY_RECEIVE_SELF_BOSS_GIFT = 8567,
  EGMI_ACK_MONOPOLY_RECEIVE_SELF_BOSS_GIFT = 8568,
  EGMI_REQ_MONOPOLY_BOSS_ATTACK_LIST = 8569,
  EGMI_ACK_MONOPOLY_BOSS_ATTACK_LIST = 8570,
  EGMI_FLUSH_MONOPOLY_BOSS_ATTACK_ITEM = 8571,
  EGMI_REQ_CMD_PROPERTY_INT = 10000,
  EGMI_REQ_CMD_PROPERTY_STR = 10001,
  EGMI_REQ_CMD_PROPERTY_OBJECT = 10002,
  EGMI_REQ_CMD_PROPERTY_FLOAT = 10003,
  EGMI_REQ_CMD_RECORD_INT = 10004,
  EGMI_REQ_CMD_RECORD_STR = 10005,
  EGMI_REQ_CMD_RECORD_OBJECT = 10006,
  EGMI_REQ_CMD_RECORD_FLOAT = 10007,
  EGMI_REQ_CMD_NORMAL = 10008,
  EGMI_REQ_QUERY_SERVER_STATUS = 10200,
  EGMI_REQ_GM_SET_EXP = 11000,
  EGMI_REQ_GM_SET_RESOURCE = 11001,
  EGMI_REQ_GM_ADD_REMOVE_ITEM = 11002,
  EGMI_REQ_GM_SET_TASK_STATUS = 11003,
  EGMI_REQ_GM_SET_LAST_STORY_SCENE_ID = 11004,
  EGMI_REQ_GM_UNLOCK_SEAT = 11005,
  EGMI_REQ_GM_SET_BARTENDER_LEVEL = 11006,
  EGMI_REQ_GM_SET_ACTIVATE_STATE = 11007,
  EGMI_REQ_GM_ADD_NEW_TIPS = 11008,
  EGMI_REQ_GM_SET_NOVICIATE_STATE = 11009,
  EGMI_REQ_GM_SET_DUNGEON_STATE = 11010,
  EGMI_REQ_GM_CLEAR_BAGPACK = 11011,
  EGMI_REQ_GM_UPDATE_PVP_GRADE_LVL = 11012,
  EGMI_REQ_GM_SET_OA_PROGRESS = 11013,
  EGMI_REQ_GM_UPDATE_BEHAVIOR_STORE_STATE = 11014,
  EGMI_REQ_GM_UPDATE_STORY_TASK_PROGRESS = 11015,
  EGMI_REQ_GM_RESET_PAY_EVENT_TODAY_STATE = 11016,
  EGMI_REQ_GM_GET_FORMER_NAME = 11017,
  EGMI_ACK_GM_GET_FORMER_NAME = 11018,
  EGMI_REQ_GM_UNLOCK_TALENT = 12000,
  EGMI_REQ_GM_UNLOCK_ROLE_SKILL = 12001,
  EGMI_REQ_GM_CREATE_HORCRUX = 12002,
  EGMI_REQ_GM_SET_BATTLE_ATTR = 13000,
  EGMI_REQ_GM_UNLOCK_BATTLE_SKILL = 13001,
  EGMI_REQ_GM_SET_SKILL_CD = 13002,
  EGMI_REQ_GM_SET_MONSTER_RECOGNITION = 13003,
  EGMI_REQ_GM_SET_BATTLE_END = 13004,
  EGMI_REQ_GM_TOGGLE_BATTLE_FEEDBACK = 13005,
  EGMI_REQ_GM_COMMUNITY_SET_EXP = 13500,
  EGMI_REQ_GM_COMMUNITY_KICK_MEMBER = 13501,
  EGMI_REQ_GM_TOGGLE_COMMUNITY_MATCH = 13502,
  EGMI_REQ_GM_DIVORCE = 13600,
  EGMI_REQ_GM_GENERATE_REDEEM_CODE = 14000,
  EGMI_ACK_GM_GENERATE_REDEEM_CODE = 14001,
  EGMI_REQ_GM_MAINTEN_SERVERS = 14002,
  EGMI_REQ_GM_TOGGLE_REGISTER = 14003,
  EGMI_REQ_GM_SEND_SYSTEM_PROMPT = 14004,
  EGMI_REQ_GM_SEND_MAIL = 14005,
  EGMI_REQ_GM_RESET_SCENE_DATA = 14006,
  EGMI_REQ_GM_RESET_COMMUNITY_DATA = 14007,
  EGMI_REQ_GM_SET_OA_TASK_STATUS = 14008,
  EGMI_REQ_GM_RESET_PASSWORD = 14009,
  EGMI_REQ_GM_QUERY_PLAYE_INFO = 14010,
  EGMI_ACK_GM_QUERY_PLAYE_INFO = 14011,
  EGMI_REQ_GM_REFRESH_DATA_CONFIG = 14012,
  EGMI_REQ_GM_SET_BULLETIN = 14013,
  EGMI_REQ_GM_KICK_OFF_PLAYERS = 14014,
  EGMI_REQ_GM_QUERY_ONLINE_COUNT = 14015,
  EGMI_ACK_GM_QUERY_ONLINE_COUNT = 14016,
  EGMI_REQ_GM_QUERY_ITEM_COUNT = 14017,
  EGMI_ACK_GM_QUERY_ITEM_COUNT = 14018,
  EGMI_REQ_GM_RESET_RUN_DAY_INDEX = 14019,
  EGMI_REQ_GM_REGISTER_ACCOUNT = 14020,
  EGMI_REQ_GM_SET_ACCOUNT_PRIVILEGE = 14021,
  EGMI_REQ_GM_SET_ACCOUNT_ENABLE = 14022,
  EGMI_REQ_GM_QUERY_PRIVILEGE = 14023,
  EGMI_ACK_GM_QUERY_PRIVILEGE = 14024,
  EGMI_REQ_GM_KICK_OFF_SOME_PLAYER = 14025,
  EGMI_REQ_GM_RESET_RECHARGE_STATE = 14026,
  EGMI_REQ_GM_RESET_PLAYER_RECHARGE_STATE = 14027,
  EGMI_REQ_GM_SET_PLAYER_PROPERTIES = 14028,
  EGMI_REQ_GM_UPDATE_ACTIVITY_URL = 14029,
  EGMI_REQ_GM_GET_WHITE_LIST = 14030,
  EGMI_ACK_GM_GET_WHITE_LIST = 14031,
  EGMI_REQ_GM_SET_WHITE_LIST = 14032,
  EGMI_REQ_GM_TOGGLE_LIVE = 14033,
  EGMI_REQ_GM_PUSH_NOTIFICATION = 14034,
  EGMI_REQ_GM_SET_NODE_EXPLORE_BULLETIN = 14035,
  EGMI_REQ_GM_RECLAIM_REDEEM_CODE = 14036,
  EGMI_REQ_GM_TOGGLE_BAN = 14037,
  EGMI_REQ_GM_SET_COUPLE_PROTECT_NUM = 14038,
  EGMI_REQ_MOVE_BUILD_OBJECT = 20002,
  EGMI_ACK_MOVE_BUILD_OBJECT = 20003,
  EGMI_REQ_UP_BUILD_LVL = 20101,
  EGMI_REQ_CREATE_ITEM = 20102,
  EGMI_REQ_BUILD_OPERATE = 20103,
  EGMI_REQ_SEARCH_TO_SHARE = 30000,
  EGMI_ACK_SEARCH_TO_SHARE = 30001,
  EGMI_REQ_SHARE_TO_ATART = 30002,
  EGMI_ACK_SHARE_TO_ATART = 30003,
  EGMI_REQ_BATTLE_ORDER_LIST = 31000,
  EGMI_ACK_BATTLE_ORDER_LIST = 31001,
  EGMI_REQ_CHANGE_COUPLE_ROLE = 31002,
  EGMI_ACK_CHANGE_COUPLE_ROLE = 31003,
  EGMI_ACK_READY_TO_BATTLE = 31004,
  EGMI_ACK_COUNTDOWN_READY = 31005,
  EGMI_REQ_START_TO_BATTLE = 31006,
  EGMI_ACK_START_TO_BATTLE = 31007,
  EGMI_ACK_BUFF_INFO_BEFORE_NEXT_ROLE_ACTION = 31008,
  EGMI_ACK_ROLE_DEAD = 31009,
  EGMI_ACK_BATTLE_END = 31010,
  EGMI_ACK_BATTLE_STEP_END = 31011,
  EGMI_REQ_DUNGEON_THREE_STAR_REWARD = 31012,
  EGMI_ACK_DUNGEON_THREE_STAR_REWARD = 31013,
  EGMI_REQ_SYNC_BATTLE_STATE = 31020,
  EGMI_ACK_SYNC_BATTLE_STATE = 31021,
  EGMI_REQ_BATTLE_MONSTERS = 31100,
  EGMI_ACK_BATTLE_MONSTERS = 31101,
  EGMI_ACK_REMOVE_BUFF = 31200,
  EGMI_ACK_AI_PLAY_STORY = 31300,
  EGMI_REQ_SET_AUTO_BATTLE = 31310,
  EGMI_ACK_SET_AUTO_BATTLE = 31311,
  EGMI_REQ_BEFORE_ROBOT_ACT = 31312,
  EGMI_REQ_GET_ATTR_RELATIVE_PERCENT = 32002,
  EGMI_ACK_GET_ATTR_RELATIVE_PERCENT = 32003,
  EGMI_REQ_SKILL_STATE_INFO = 33000,
  EGMI_ACK_SKILL_STATE_INFO = 33001,
  EGMI_REQ_MARK_AI_FLAG = 33100,
  EGMI_ACK_MARK_AI_FLAG = 33101,
  EGMI_REQ_API_TOKEN = 34000,
  EGMI_ACK_API_TOKEN = 34001,
  EGMI_REQ_API_EXECUTE_COMMAND = 34098,
  EGMI_ACK_API_EXECUTE_COMMAND = 34099,
  EGMI_REQ_API_GET_WHITE_LIST = 34100,
  EGMI_ACK_API_GET_WHITE_LIST = 34101,
  EGMI_REQ_API_SET_WHITE_LIST = 34102,
  EGMI_ACK_API_SET_WHITE_LIST = 34103,
  EGMI_REQ_API_SET_REGISTR_TOGGLE = 34104,
  EGMI_ACK_API_SET_REGISTR_TOGGLE = 34105,
  EGMI_REQ_API_SET_BULLETIN = 34106,
  EGMI_ACK_API_SET_BULLETIN = 34107,
  EGMI_REQ_API_SET_MAINTAIN = 34108,
  EGMI_ACK_API_SET_MAINTAIN = 34109,
  EGMI_REQ_API_KICKOFF_ALL = 34110,
  EGMI_ACK_API_KICKOFF_ALL = 34111,
  EGMI_REQ_API_KICKOFF_SERVER = 34112,
  EGMI_ACK_API_KICKOFF_SERVER = 34113,
  EGMI_REQ_API_KICKOFF_PLAYER = 34114,
  EGMI_ACK_API_KICKOFF_PLAYER = 34115,
  EGMI_REQ_API_GET_RUNDAY = 34116,
  EGMI_ACK_API_GET_RUNDAY = 34117,
  EGMI_REQ_API_SET_RUNDAY = 34118,
  EGMI_ACK_API_SET_RUNDAY = 34119,
  EGMI_REQ_API_SET_NEWS_URL = 34120,
  EGMI_ACK_API_SET_NEWS_URL = 34121,
  EGMI_REQ_API_SET_LIVE_TOGGLE = 34122,
  EGMI_ACK_API_SET_LIVE_TOGGLE = 34123,
  EGMI_REQ_API_SET_REDEEM_CODE = 34124,
  EGMI_ACK_API_SET_REDEEM_CODE = 34125,
  EGMI_REQ_API_SEND_MAIL = 34126,
  EGMI_ACK_API_SEND_MAIL = 34127,
  EGMI_REQ_API_SEND_PROMPT = 34128,
  EGMI_ACK_API_SEND_PROMPT = 34129,
  EGMI_REQ_API_RELOAD_CONFIG = 34130,
  EGMI_ACK_API_RELOAD_CONFIG = 34131,
  EGMI_REQ_API_RESET_RECHARGE = 34132,
  EGMI_ACK_API_RESET_RECHARGE = 34133,
  EGMI_REQ_API_REGISTER_API_ACCOUNT = 34134,
  EGMI_ACK_API_REGISTER_API_ACCOUNT = 34135,
  EGMI_REQ_API_RESET_API_PASSWORD = 34136,
  EGMI_ACK_API_RESET_API_PASSWORD = 34137,
  EGMI_REQ_API_SET_NODE_EXPLORE_BULLETIN = 34138,
  EGMI_ACK_API_SET_NODE_EXPLORE_BULLETIN = 34139,
  EGMI_REQ_API_RECLAIM_REDEEM_CODE = 34140,
  EGMI_ACK_API_RECLAIM_REDEEM_CODE = 34141,
  EGMI_REQ_API_SET_BAN_TOGGLE = 34142,
  EGMI_ACK_API_SET_BAN_TOGGLE = 34143,
  EGMI_REQ_API_SET_COUPLE_PROTECT_NUM = 34144,
  EGMI_ACK_API_SET_COUPLE_PROTECT_NUM = 34145,
  EGMI_REQ_API_GET_PLAYER_BASE_INFO = 34400,
  EGMI_ACK_API_GET_PLAYER_BASE_INFO = 34401,
  EGMI_REQ_API_SET_STORY_PROGRESS = 34402,
  EGMI_ACK_API_SET_STORY_PROGRESS = 34403,
  EGMI_REQ_API_SET_TASK_STATUS = 34404,
  EGMI_ACK_API_SET_TASK_STATUS = 34405,
  EGMI_REQ_API_SET_OA_PROGRESS = 34406,
  EGMI_ACK_API_SET_OA_PROGRESS = 34407,
  EGMI_REQ_API_SET_BEHAVIOR_STORE_STATE = 34408,
  EGMI_ACK_API_SET_BEHAVIOR_STORE_STATE = 34409,
  EGMI_REQ_API_RESET_PLAYER_RECHARGE = 34410,
  EGMI_ACK_API_RESET_PLAYER_RECHARGE = 34411,
  EGMI_REQ_API_GET_TRIGGER = 34412,
  EGMI_ACK_API_GET_TRIGGER = 34413,
  EGMI_REQ_API_SET_TRIGGER = 34414,
  EGMI_ACK_API_SET_TRIGGER = 34415,
  EGMI_REQ_API_GET_PROPERTY = 34416,
  EGMI_ACK_API_GET_PROPERTY = 34417,
  EGMI_REQ_API_SET_PROPERTY = 34418,
  EGMI_ACK_API_SET_PROPERTY = 34419,
  EGMI_REQ_API_GET_RECORD = 34420,
  EGMI_ACK_API_GET_RECORD = 34421,
  EGMI_REQ_API_SET_RECORD = 34422,
  EGMI_ACK_API_SET_RECORD = 34423,
  EGMI_REQ_API_INCREASE_RESOURCE = 34424,
  EGMI_ACK_API_INCREASE_RESOURCE = 34425,
  EGMI_REQ_API_DECREASE_RESOURCE = 34426,
  EGMI_ACK_API_DECREASE_RESOURCE = 34427,
  EGMI_REQ_API_SET_ACTIVATE_STATUS = 34428,
  EGMI_ACK_API_SET_ACTIVATE_STATUS = 34429,
  EGMI_REQ_API_CLEAR_BAGPACK = 34430,
  EGMI_ACK_API_CLEAR_BAGPACK = 34431,
  EGMI_REQ_API_SET_BATTLE_END = 34432,
  EGMI_ACK_API_SET_BATTLE_END = 34433,
  EGMI_REQ_API_GET_FORMER_NAME = 34434,
  EGMI_ACK_API_GET_FORMER_NAME = 34435,
  EGMI_REQ_API_GET_COMMUNITY_LIST = 34700,
  EGMI_ACK_API_GET_COMMUNITY_LIST = 34701,
  EGMI_REQ_API_GET_COMMUNITY_BASE_INFO = 34702,
  EGMI_ACK_API_GET_COMMUNITY_BASE_INFO = 34703,
  EGMI_REQ_API_ADD_COMMUNITY_EXP = 34704,
  EGMI_ACK_API_ADD_COMMUNITY_EXP = 34705,
  EGMI_REQ_API_KICKOFF_COMMUNITY_MEMBER = 34706,
  EGMI_ACK_API_KICKOFF_COMMUNITY_MEMBER = 34707,
  EGMI_REQ_API_SET_COMMUNITY_MATCH_TOGGLE = 34708,
  EGMI_ACK_API_SET_COMMUNITY_MATCH_TOGGLE = 34709,
  EGameMsgID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EGameMsgID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool EGameMsgID_IsValid(int value);
const EGameMsgID EGameMsgID_MIN = EGMI_UNKNOW;
const EGameMsgID EGameMsgID_MAX = EGMI_ACK_API_SET_COMMUNITY_MATCH_TOGGLE;
const int EGameMsgID_ARRAYSIZE = EGameMsgID_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* EGameMsgID_descriptor();
inline const ::std::string& EGameMsgID_Name(EGameMsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGameMsgID_descriptor(), value);
}
inline bool EGameMsgID_Parse(
    const ::std::string& name, EGameMsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGameMsgID>(
    EGameMsgID_descriptor(), name, value);
}
enum EBattleMode {
  BATTLE_MODE_NORMAL = 0,
  BATTLE_MODE_ATTACK_ENEMY = 1,
  BATTLE_MODE_ENEMY_ATTACK_ME = 2,
  BATTLE_MODE_ATTACK_EACH_OTHER = 3,
  EBattleMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EBattleMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool EBattleMode_IsValid(int value);
const EBattleMode EBattleMode_MIN = BATTLE_MODE_NORMAL;
const EBattleMode EBattleMode_MAX = BATTLE_MODE_ATTACK_EACH_OTHER;
const int EBattleMode_ARRAYSIZE = EBattleMode_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* EBattleMode_descriptor();
inline const ::std::string& EBattleMode_Name(EBattleMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBattleMode_descriptor(), value);
}
inline bool EBattleMode_Parse(
    const ::std::string& name, EBattleMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBattleMode>(
    EBattleMode_descriptor(), name, value);
}
enum EOrderType {
  ORDER_TYPE_Top = 0,
  ORDER_TYPE_PRIORITY = 1,
  ORDER_TYPE_NORMAL = 2,
  ORDER_TYPE_LAST = 3,
  ORDER_TYPE_BUFF_CAUSE_LAST = 4,
  EOrderType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EOrderType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool EOrderType_IsValid(int value);
const EOrderType EOrderType_MIN = ORDER_TYPE_Top;
const EOrderType EOrderType_MAX = ORDER_TYPE_BUFF_CAUSE_LAST;
const int EOrderType_ARRAYSIZE = EOrderType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* EOrderType_descriptor();
inline const ::std::string& EOrderType_Name(EOrderType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EOrderType_descriptor(), value);
}
inline bool EOrderType_Parse(
    const ::std::string& name, EOrderType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EOrderType>(
    EOrderType_descriptor(), name, value);
}
enum EffectFlags {
  SFLAGS_NONE = 0,
  SFLAGS_PROTECTED = 1,
  SFLAGS_BLOCK = 2,
  SFLAGS_MISSING = 4,
  SFLAGS_COUNTER_ATTACK = 8,
  SFLAGS_CRITICAL_STRIKE = 16,
  SFLAGS_SPULTTERED = 32,
  SFLAGS_RICHOCHET = 64,
  SFLAGS_IMMUTE_DAMAGE = 128,
  SFLAGS_WEAKNEES = 256,
  SFLAGS_RESIST = 512,
  SFLAGS_REFLECT = 1024,
  SFLAGS_ABSORB = 2048,
  SFLAGS_HIDE = 4096,
  SFLAGS_SUPER_ARMOR_BROKEN = 8192,
  SFLAGS_SUPER_ARMOR_MAX = 16384,
  SFLAGS_ACTION_AGAIN = 32768,
  SFLAGS_SHIELD = 65536,
  SFLAGS_COUNTER_DAMAGE = 131072,
  SFLAGS_REVIVE = 262144,
  EffectFlags_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EffectFlags_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool EffectFlags_IsValid(int value);
const EffectFlags EffectFlags_MIN = SFLAGS_NONE;
const EffectFlags EffectFlags_MAX = SFLAGS_REVIVE;
const int EffectFlags_ARRAYSIZE = EffectFlags_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* EffectFlags_descriptor();
inline const ::std::string& EffectFlags_Name(EffectFlags value) {
  return ::google::protobuf::internal::NameOfEnum(
    EffectFlags_descriptor(), value);
}
inline bool EffectFlags_Parse(
    const ::std::string& name, EffectFlags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EffectFlags>(
    EffectFlags_descriptor(), name, value);
}
enum SkillState {
  SKS_NORMAL = 0,
  SKS_DISABLE = 1,
  SKS_CD = 2,
  SKS_ENERGY_NOT_ENOUGH = 3,
  SKS_NO_CANDIDATES = 4,
  SKS_SEALED = 5,
  SkillState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SkillState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool SkillState_IsValid(int value);
const SkillState SkillState_MIN = SKS_NORMAL;
const SkillState SkillState_MAX = SKS_SEALED;
const int SkillState_ARRAYSIZE = SkillState_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* SkillState_descriptor();
inline const ::std::string& SkillState_Name(SkillState value) {
  return ::google::protobuf::internal::NameOfEnum(
    SkillState_descriptor(), value);
}
inline bool SkillState_Parse(
    const ::std::string& name, SkillState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SkillState>(
    SkillState_descriptor(), name, value);
}
enum ShopType {
  SHOP_TYPE_NONE = 0,
  RECOMMEND = 1,
  GROCERY = 2,
  MYSTERY = 3,
  INVITE = 4,
  BATTLE = 5,
  EVIL = 6,
  QUICK_BUY = 7,
  RECHARGE = 8,
  MONTH_CARD = 9,
  COMMUNITY_WELFARE = 10,
  PAGE_NODE_EXPLORE = 11,
  WEEKLY_LIMIT = 12,
  LIFETIME_LIMIT = 13,
  PAGE_BLUEDIAMOND = 14,
  PAGE_GYEECALL = 19,
  PAGE_DECOSKIN_COLOR = 22,
  PAGE_NODE_EXPLORE_SPECIAL = 23,
  PAGE_REGRESS_SALE = 24,
  PAGE_PAGE_DECO = 25,
  PAGE_INTIMACY = 32,
  PAGE_THANKSGIVING = 500,
  ShopType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ShopType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ShopType_IsValid(int value);
const ShopType ShopType_MIN = SHOP_TYPE_NONE;
const ShopType ShopType_MAX = PAGE_THANKSGIVING;
const int ShopType_ARRAYSIZE = ShopType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ShopType_descriptor();
inline const ::std::string& ShopType_Name(ShopType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ShopType_descriptor(), value);
}
inline bool ShopType_Parse(
    const ::std::string& name, ShopType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShopType>(
    ShopType_descriptor(), name, value);
}
enum QuickBuyType {
  QUICK_TYPE_NONE = 0,
  ITEM = 1,
  ACTIVATE = 2,
  RESOURCE = 3,
  QuickBuyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  QuickBuyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool QuickBuyType_IsValid(int value);
const QuickBuyType QuickBuyType_MIN = QUICK_TYPE_NONE;
const QuickBuyType QuickBuyType_MAX = RESOURCE;
const int QuickBuyType_ARRAYSIZE = QuickBuyType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* QuickBuyType_descriptor();
inline const ::std::string& QuickBuyType_Name(QuickBuyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuickBuyType_descriptor(), value);
}
inline bool QuickBuyType_Parse(
    const ::std::string& name, QuickBuyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuickBuyType>(
    QuickBuyType_descriptor(), name, value);
}
enum TaskType {
  TASK_TYPE_NONE = 0,
  MAIN = 1,
  EXTENSION = 2,
  SPECIAL = 3,
  DAILY = 4,
  NOVICIATE = 5,
  COMMUNITY = 6,
  PROPAGANDIZE = 7,
  WEEKLY = 8,
  REVIEW = 9,
  REGRESS_ACTIVITY = 10,
  NOVICIATE_ACTIVE = 11,
  FESTIVAL_ACTIVITY = 12,
  SUPPORT_GYEE = 13,
  MONOPOLY = 14,
  TaskType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TaskType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool TaskType_IsValid(int value);
const TaskType TaskType_MIN = TASK_TYPE_NONE;
const TaskType TaskType_MAX = MONOPOLY;
const int TaskType_ARRAYSIZE = TaskType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* TaskType_descriptor();
inline const ::std::string& TaskType_Name(TaskType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskType_descriptor(), value);
}
inline bool TaskType_Parse(
    const ::std::string& name, TaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskType>(
    TaskType_descriptor(), name, value);
}
enum TaskSubType {
  TASK_SUB_TYPE_NONE = 0,
  EXPLORE = 1,
  GUIDE = 2,
  DELEGATE = 3,
  HIDDEN = 4,
  ADVENTURE = 5,
  QUESTION = 6,
  EMOTION = 7,
  TREASURE = 8,
  SUDDEN = 9,
  TALK = 10,
  GATHER = 11,
  CHALLENGE = 12,
  KILL = 13,
  DONATE = 14,
  ACHIEVEMENT = 50,
  TaskSubType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TaskSubType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool TaskSubType_IsValid(int value);
const TaskSubType TaskSubType_MIN = TASK_SUB_TYPE_NONE;
const TaskSubType TaskSubType_MAX = ACHIEVEMENT;
const int TaskSubType_ARRAYSIZE = TaskSubType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* TaskSubType_descriptor();
inline const ::std::string& TaskSubType_Name(TaskSubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskSubType_descriptor(), value);
}
inline bool TaskSubType_Parse(
    const ::std::string& name, TaskSubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskSubType>(
    TaskSubType_descriptor(), name, value);
}
enum TaskStatus {
  INACTIVED = 0,
  ACTIVED = 1,
  FINISHED = 2,
  FINISHED_AND_REWARD = 3,
  TIMEOUT = 4,
  TaskStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TaskStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool TaskStatus_IsValid(int value);
const TaskStatus TaskStatus_MIN = INACTIVED;
const TaskStatus TaskStatus_MAX = TIMEOUT;
const int TaskStatus_ARRAYSIZE = TaskStatus_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* TaskStatus_descriptor();
inline const ::std::string& TaskStatus_Name(TaskStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskStatus_descriptor(), value);
}
inline bool TaskStatus_Parse(
    const ::std::string& name, TaskStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskStatus>(
    TaskStatus_descriptor(), name, value);
}
enum StageRewardType {
  STAGE_REWARD_NONE = 0,
  DUNGEON_STAR = 1,
  NEWBIE = 2,
  DAILY_TASK = 3,
  NOVICIATE_TASK = 4,
  RANK = 5,
  COMMUNITY_TASK_BOX = 6,
  PAGEANT_BOX = 7,
  CHARPTER_COLLECTION = 8,
  COMMUNITY_MATCH = 9,
  REGRESS_POINT_RWARD = 10,
  MARRIAGE_MATE_DAILY_POINT = 11,
  MARRIAGE_MATE_PIGGY_BANK = 12,
  StageRewardType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StageRewardType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool StageRewardType_IsValid(int value);
const StageRewardType StageRewardType_MIN = STAGE_REWARD_NONE;
const StageRewardType StageRewardType_MAX = MARRIAGE_MATE_PIGGY_BANK;
const int StageRewardType_ARRAYSIZE = StageRewardType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* StageRewardType_descriptor();
inline const ::std::string& StageRewardType_Name(StageRewardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StageRewardType_descriptor(), value);
}
inline bool StageRewardType_Parse(
    const ::std::string& name, StageRewardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StageRewardType>(
    StageRewardType_descriptor(), name, value);
}
enum PageantReceiveRedEvpStatus {
  EGEC_PAGEANT_RED_ENVELOPE_RECEIVE_SUCCESS = 0,
  EGEC_PAGEANT_RED_ENVELOPE_RECEIVE_OVER = 1,
  EGEC_PAGEANT_RED_ENVELOPE_RECEIVE_NOT_EXIST = 2,
  EGEC_PAGEANT_RED_ENVELOPE_RECEIVE_SELF_RESEIVE = 3,
  EGEC_PAGEANT_RED_ENVELOPE_RECEIVE_REPEAT = 4,
  EGEC_PAGEANT_RED_ENVELOPE_RECEIVE_TIME_ERROR = 5,
  EGEC_PAGEANT_RED_ENVELOPE_RECEIVE_RESTRICT = 6,
  PageantReceiveRedEvpStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PageantReceiveRedEvpStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool PageantReceiveRedEvpStatus_IsValid(int value);
const PageantReceiveRedEvpStatus PageantReceiveRedEvpStatus_MIN = EGEC_PAGEANT_RED_ENVELOPE_RECEIVE_SUCCESS;
const PageantReceiveRedEvpStatus PageantReceiveRedEvpStatus_MAX = EGEC_PAGEANT_RED_ENVELOPE_RECEIVE_RESTRICT;
const int PageantReceiveRedEvpStatus_ARRAYSIZE = PageantReceiveRedEvpStatus_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* PageantReceiveRedEvpStatus_descriptor();
inline const ::std::string& PageantReceiveRedEvpStatus_Name(PageantReceiveRedEvpStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    PageantReceiveRedEvpStatus_descriptor(), value);
}
inline bool PageantReceiveRedEvpStatus_Parse(
    const ::std::string& name, PageantReceiveRedEvpStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PageantReceiveRedEvpStatus>(
    PageantReceiveRedEvpStatus_descriptor(), name, value);
}
enum CommunitySettingType {
  COMMUNITY_NAME = 0,
  COMMUNITY_DECLARATION = 1,
  COMMUNITY_ICON = 2,
  COMMUNITY_JOIN_RESTRICTION = 3,
  COMMUNITY_REGION_RESTRICTION = 4,
  COMMUNITY_LEVEL_RESTRICTION = 5,
  CommunitySettingType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommunitySettingType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool CommunitySettingType_IsValid(int value);
const CommunitySettingType CommunitySettingType_MIN = COMMUNITY_NAME;
const CommunitySettingType CommunitySettingType_MAX = COMMUNITY_LEVEL_RESTRICTION;
const int CommunitySettingType_ARRAYSIZE = CommunitySettingType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* CommunitySettingType_descriptor();
inline const ::std::string& CommunitySettingType_Name(CommunitySettingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommunitySettingType_descriptor(), value);
}
inline bool CommunitySettingType_Parse(
    const ::std::string& name, CommunitySettingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommunitySettingType>(
    CommunitySettingType_descriptor(), name, value);
}
enum CommunityState {
  NOT_IN_ANY_COMMUNITY = 0,
  ON_APPLYING = 1,
  ON_SUPPORTING = 2,
  ON_CREATING = 3,
  IN_COMMUNITY = 4,
  CommunityState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommunityState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool CommunityState_IsValid(int value);
const CommunityState CommunityState_MIN = NOT_IN_ANY_COMMUNITY;
const CommunityState CommunityState_MAX = IN_COMMUNITY;
const int CommunityState_ARRAYSIZE = CommunityState_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* CommunityState_descriptor();
inline const ::std::string& CommunityState_Name(CommunityState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommunityState_descriptor(), value);
}
inline bool CommunityState_Parse(
    const ::std::string& name, CommunityState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommunityState>(
    CommunityState_descriptor(), name, value);
}
enum CommunityPosition {
  COMMUNITY_MEMBER = 0,
  COMMUNITY_SPOKESMAN = 1,
  COMMUNITY_VICE_PRESIDENT = 2,
  COMMUNITY_PRESIDENT = 3,
  CommunityPosition_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommunityPosition_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool CommunityPosition_IsValid(int value);
const CommunityPosition CommunityPosition_MIN = COMMUNITY_MEMBER;
const CommunityPosition CommunityPosition_MAX = COMMUNITY_PRESIDENT;
const int CommunityPosition_ARRAYSIZE = CommunityPosition_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* CommunityPosition_descriptor();
inline const ::std::string& CommunityPosition_Name(CommunityPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommunityPosition_descriptor(), value);
}
inline bool CommunityPosition_Parse(
    const ::std::string& name, CommunityPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommunityPosition>(
    CommunityPosition_descriptor(), name, value);
}
enum CommunityMemberOperationType {
  COMMUNITY_MEMBER_OPERATION_DELETE = 0,
  COMMUNITY_MEMBER_OPERATION_APPROVE = 1,
  COMMUNITY_MEMBER_OPERATION_REJECT = 2,
  COMMUNITY_MEMBER_OPERATION_SPOKESMAN_CANCEL = 3,
  COMMUNITY_MEMBER_OPERATION_SPOKESMAN = 4,
  COMMUNITY_MEMBER_OPERATION_VICE_PRESIDENT_CANCEL = 5,
  COMMUNITY_MEMBER_OPERATION_VICE_PRESIDENT = 6,
  COMMUNITY_MEMBER_OPERATION_PRESIDENT = 7,
  CommunityMemberOperationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommunityMemberOperationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool CommunityMemberOperationType_IsValid(int value);
const CommunityMemberOperationType CommunityMemberOperationType_MIN = COMMUNITY_MEMBER_OPERATION_DELETE;
const CommunityMemberOperationType CommunityMemberOperationType_MAX = COMMUNITY_MEMBER_OPERATION_PRESIDENT;
const int CommunityMemberOperationType_ARRAYSIZE = CommunityMemberOperationType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* CommunityMemberOperationType_descriptor();
inline const ::std::string& CommunityMemberOperationType_Name(CommunityMemberOperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommunityMemberOperationType_descriptor(), value);
}
inline bool CommunityMemberOperationType_Parse(
    const ::std::string& name, CommunityMemberOperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommunityMemberOperationType>(
    CommunityMemberOperationType_descriptor(), name, value);
}
enum PageType {
  PAGE_TYPE_NONE = 0,
  PAGE_COMMUNITY_INFO = 1,
  PAGE_CONSTRUCTION_INFO = 2,
  PAGE_WISH_INFO = 3,
  PAGE_WELFARE_INFO = 4,
  PageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool PageType_IsValid(int value);
const PageType PageType_MIN = PAGE_TYPE_NONE;
const PageType PageType_MAX = PAGE_WELFARE_INFO;
const int PageType_ARRAYSIZE = PageType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* PageType_descriptor();
inline const ::std::string& PageType_Name(PageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PageType_descriptor(), value);
}
inline bool PageType_Parse(
    const ::std::string& name, PageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PageType>(
    PageType_descriptor(), name, value);
}
enum CommunityBulletinMsgType {
  COMMUNITY_BULLETIN_NONE = 0,
  COMMUNITY_BULLETIN_GOOD_LUCK = 1,
  COMMUNITY_BULLETIN_NEW_MEMBER = 2,
  COMMUNITY_BULLETIN_NOTIFY = 3,
  CommunityBulletinMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommunityBulletinMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool CommunityBulletinMsgType_IsValid(int value);
const CommunityBulletinMsgType CommunityBulletinMsgType_MIN = COMMUNITY_BULLETIN_NONE;
const CommunityBulletinMsgType CommunityBulletinMsgType_MAX = COMMUNITY_BULLETIN_NOTIFY;
const int CommunityBulletinMsgType_ARRAYSIZE = CommunityBulletinMsgType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* CommunityBulletinMsgType_descriptor();
inline const ::std::string& CommunityBulletinMsgType_Name(CommunityBulletinMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommunityBulletinMsgType_descriptor(), value);
}
inline bool CommunityBulletinMsgType_Parse(
    const ::std::string& name, CommunityBulletinMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommunityBulletinMsgType>(
    CommunityBulletinMsgType_descriptor(), name, value);
}
enum CommunityBulletinSpliceType {
  COMMUNITY_BULLETIN_SPLICE_NONE = 0,
  COMMUNITY_BULLETIN_SPLICE_NOT_ARG = 1,
  COMMUNITY_BULLETIN_SPLICE_PURE_ARG = 2,
  COMMUNITY_BULLETIN_SPLICE_GRADE = 3,
  COMMUNITY_BULLETIN_SPLICE_GRADE_ITEM = 4,
  COMMUNITY_BULLETIN_SPLICE_COUPLE_PLAYER = 5,
  CommunityBulletinSpliceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommunityBulletinSpliceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool CommunityBulletinSpliceType_IsValid(int value);
const CommunityBulletinSpliceType CommunityBulletinSpliceType_MIN = COMMUNITY_BULLETIN_SPLICE_NONE;
const CommunityBulletinSpliceType CommunityBulletinSpliceType_MAX = COMMUNITY_BULLETIN_SPLICE_COUPLE_PLAYER;
const int CommunityBulletinSpliceType_ARRAYSIZE = CommunityBulletinSpliceType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* CommunityBulletinSpliceType_descriptor();
inline const ::std::string& CommunityBulletinSpliceType_Name(CommunityBulletinSpliceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommunityBulletinSpliceType_descriptor(), value);
}
inline bool CommunityBulletinSpliceType_Parse(
    const ::std::string& name, CommunityBulletinSpliceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommunityBulletinSpliceType>(
    CommunityBulletinSpliceType_descriptor(), name, value);
}
enum CommunityTaskBarState {
  COMMUNITY_TASKBAR_NONE = 0,
  COMMUNITY_TASKBAR_UNLOCK = 1,
  COMMUNITY_TASKBAR_CD = 2,
  COMMUNITY_TASKBAR_ACCEPTED = 3,
  CommunityTaskBarState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommunityTaskBarState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool CommunityTaskBarState_IsValid(int value);
const CommunityTaskBarState CommunityTaskBarState_MIN = COMMUNITY_TASKBAR_NONE;
const CommunityTaskBarState CommunityTaskBarState_MAX = COMMUNITY_TASKBAR_ACCEPTED;
const int CommunityTaskBarState_ARRAYSIZE = CommunityTaskBarState_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* CommunityTaskBarState_descriptor();
inline const ::std::string& CommunityTaskBarState_Name(CommunityTaskBarState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommunityTaskBarState_descriptor(), value);
}
inline bool CommunityTaskBarState_Parse(
    const ::std::string& name, CommunityTaskBarState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommunityTaskBarState>(
    CommunityTaskBarState_descriptor(), name, value);
}
enum CommunityWelfareItemState {
  COMMUNITY_WELFARE_ITEM_STATE_NONE = 0,
  COMMUNITY_WELFARE_ITEM_STATE_UNLOCKED = 1,
  COMMUNITY_WELFARE_ITEM_STATE_CAN = 2,
  CommunityWelfareItemState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommunityWelfareItemState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool CommunityWelfareItemState_IsValid(int value);
const CommunityWelfareItemState CommunityWelfareItemState_MIN = COMMUNITY_WELFARE_ITEM_STATE_NONE;
const CommunityWelfareItemState CommunityWelfareItemState_MAX = COMMUNITY_WELFARE_ITEM_STATE_CAN;
const int CommunityWelfareItemState_ARRAYSIZE = CommunityWelfareItemState_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* CommunityWelfareItemState_descriptor();
inline const ::std::string& CommunityWelfareItemState_Name(CommunityWelfareItemState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommunityWelfareItemState_descriptor(), value);
}
inline bool CommunityWelfareItemState_Parse(
    const ::std::string& name, CommunityWelfareItemState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommunityWelfareItemState>(
    CommunityWelfareItemState_descriptor(), name, value);
}
enum CommunityTaskOperateType {
  COMMUNITY_TASK_OPERATE_NONE = 0,
  COMMUNITY_TASK_OPERATE_ACCEPT = 1,
  COMMUNITY_TASK_OPERATE_DELETE = 2,
  COMMUNITY_TASK_OPERATE_PURCHASE_CD = 3,
  COMMUNITY_TASK_OPERATE_DONATE = 4,
  CommunityTaskOperateType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommunityTaskOperateType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool CommunityTaskOperateType_IsValid(int value);
const CommunityTaskOperateType CommunityTaskOperateType_MIN = COMMUNITY_TASK_OPERATE_NONE;
const CommunityTaskOperateType CommunityTaskOperateType_MAX = COMMUNITY_TASK_OPERATE_DONATE;
const int CommunityTaskOperateType_ARRAYSIZE = CommunityTaskOperateType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* CommunityTaskOperateType_descriptor();
inline const ::std::string& CommunityTaskOperateType_Name(CommunityTaskOperateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommunityTaskOperateType_descriptor(), value);
}
inline bool CommunityTaskOperateType_Parse(
    const ::std::string& name, CommunityTaskOperateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommunityTaskOperateType>(
    CommunityTaskOperateType_descriptor(), name, value);
}
enum CommunityUpdateTaskType {
  COMMUNITY_UPDATE_TASK_NONE = 0,
  COMMUNITY_UPDATE_TASK_LEVEL_UP = 1,
  COMMUNITY_UPDATE_TASK_REFRESH = 2,
  COMMUNITY_UPDATE_TASK_JOIN = 3,
  COMMUNITY_UPDATE_TASK_ADD_EXP = 4,
  COMMUNITY_UPDATE_TASK_QUIT = 5,
  COMMUNITY_UPDATE_TASK_PLAYER_ONLINE = 6,
  CommunityUpdateTaskType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommunityUpdateTaskType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool CommunityUpdateTaskType_IsValid(int value);
const CommunityUpdateTaskType CommunityUpdateTaskType_MIN = COMMUNITY_UPDATE_TASK_NONE;
const CommunityUpdateTaskType CommunityUpdateTaskType_MAX = COMMUNITY_UPDATE_TASK_PLAYER_ONLINE;
const int CommunityUpdateTaskType_ARRAYSIZE = CommunityUpdateTaskType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* CommunityUpdateTaskType_descriptor();
inline const ::std::string& CommunityUpdateTaskType_Name(CommunityUpdateTaskType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommunityUpdateTaskType_descriptor(), value);
}
inline bool CommunityUpdateTaskType_Parse(
    const ::std::string& name, CommunityUpdateTaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommunityUpdateTaskType>(
    CommunityUpdateTaskType_descriptor(), name, value);
}
enum CommunityMatchEventStatus {
  COMMUNITY_MATCH_EVENT_NONE = 0,
  COMMUNITY_MATCH_EVENT_AUTO = 1,
  COMMUNITY_MATCH_EVENT_ALREADY = 2,
  CommunityMatchEventStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommunityMatchEventStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool CommunityMatchEventStatus_IsValid(int value);
const CommunityMatchEventStatus CommunityMatchEventStatus_MIN = COMMUNITY_MATCH_EVENT_NONE;
const CommunityMatchEventStatus CommunityMatchEventStatus_MAX = COMMUNITY_MATCH_EVENT_ALREADY;
const int CommunityMatchEventStatus_ARRAYSIZE = CommunityMatchEventStatus_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* CommunityMatchEventStatus_descriptor();
inline const ::std::string& CommunityMatchEventStatus_Name(CommunityMatchEventStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommunityMatchEventStatus_descriptor(), value);
}
inline bool CommunityMatchEventStatus_Parse(
    const ::std::string& name, CommunityMatchEventStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommunityMatchEventStatus>(
    CommunityMatchEventStatus_descriptor(), name, value);
}
enum CommunityMatchResult {
  COMMUNITY_MATCH_NONE = 0,
  COMMUNITY_MATCH_VICTORY = 1,
  COMMUNITY_MATCH_DEFEATED = 2,
  COMMUNITY_MATCH_DEUCE = 3,
  CommunityMatchResult_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommunityMatchResult_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool CommunityMatchResult_IsValid(int value);
const CommunityMatchResult CommunityMatchResult_MIN = COMMUNITY_MATCH_NONE;
const CommunityMatchResult CommunityMatchResult_MAX = COMMUNITY_MATCH_DEUCE;
const int CommunityMatchResult_ARRAYSIZE = CommunityMatchResult_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* CommunityMatchResult_descriptor();
inline const ::std::string& CommunityMatchResult_Name(CommunityMatchResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommunityMatchResult_descriptor(), value);
}
inline bool CommunityMatchResult_Parse(
    const ::std::string& name, CommunityMatchResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommunityMatchResult>(
    CommunityMatchResult_descriptor(), name, value);
}
enum CommunityMatchBulletinType {
  COMMUNITY_MATCH_BULLETIN_NONE = 0,
  COMMUNITY_MATCH_BULLETIN_SIGN_UP = 1,
  COMMUNITY_MATCH_BULLETIN_TAKE_CROWN = 2,
  COMMUNITY_MATCH_BULLETIN_RIVAL_TAKE_CROWN = 3,
  COMMUNITY_MATCH_BULLETIN_TEAM = 4,
  CommunityMatchBulletinType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommunityMatchBulletinType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool CommunityMatchBulletinType_IsValid(int value);
const CommunityMatchBulletinType CommunityMatchBulletinType_MIN = COMMUNITY_MATCH_BULLETIN_NONE;
const CommunityMatchBulletinType CommunityMatchBulletinType_MAX = COMMUNITY_MATCH_BULLETIN_TEAM;
const int CommunityMatchBulletinType_ARRAYSIZE = CommunityMatchBulletinType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* CommunityMatchBulletinType_descriptor();
inline const ::std::string& CommunityMatchBulletinType_Name(CommunityMatchBulletinType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommunityMatchBulletinType_descriptor(), value);
}
inline bool CommunityMatchBulletinType_Parse(
    const ::std::string& name, CommunityMatchBulletinType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommunityMatchBulletinType>(
    CommunityMatchBulletinType_descriptor(), name, value);
}
enum OperatingActivityTaskStatus {
  OA_TASK_INACTIVED = 0,
  OA_TASK_ACTIVED = 1,
  OA_TASK_FINISHED = 2,
  OA_TASK_FINISHED_AND_REWARD = 3,
  OA_TASK_TIMEOUT = 4,
  OperatingActivityTaskStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OperatingActivityTaskStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool OperatingActivityTaskStatus_IsValid(int value);
const OperatingActivityTaskStatus OperatingActivityTaskStatus_MIN = OA_TASK_INACTIVED;
const OperatingActivityTaskStatus OperatingActivityTaskStatus_MAX = OA_TASK_TIMEOUT;
const int OperatingActivityTaskStatus_ARRAYSIZE = OperatingActivityTaskStatus_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* OperatingActivityTaskStatus_descriptor();
inline const ::std::string& OperatingActivityTaskStatus_Name(OperatingActivityTaskStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    OperatingActivityTaskStatus_descriptor(), value);
}
inline bool OperatingActivityTaskStatus_Parse(
    const ::std::string& name, OperatingActivityTaskStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OperatingActivityTaskStatus>(
    OperatingActivityTaskStatus_descriptor(), name, value);
}
enum ReqUnlocRolekSkinType {
  ROLE_SKIN_NONE = 0,
  ROLE_SKIN_CONSUME_ITEM = 1,
  ROLE_SKIN_GO_THROUGH_THE_GROUP = 2,
  ROLE_SKIN_USE_MONEY_PURCHASE = 3,
  ROLE_SKIN_USE_ITEM_EXCHANGE = 4,
  ReqUnlocRolekSkinType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqUnlocRolekSkinType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqUnlocRolekSkinType_IsValid(int value);
const ReqUnlocRolekSkinType ReqUnlocRolekSkinType_MIN = ROLE_SKIN_NONE;
const ReqUnlocRolekSkinType ReqUnlocRolekSkinType_MAX = ROLE_SKIN_USE_ITEM_EXCHANGE;
const int ReqUnlocRolekSkinType_ARRAYSIZE = ReqUnlocRolekSkinType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqUnlocRolekSkinType_descriptor();
inline const ::std::string& ReqUnlocRolekSkinType_Name(ReqUnlocRolekSkinType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqUnlocRolekSkinType_descriptor(), value);
}
inline bool ReqUnlocRolekSkinType_Parse(
    const ::std::string& name, ReqUnlocRolekSkinType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqUnlocRolekSkinType>(
    ReqUnlocRolekSkinType_descriptor(), name, value);
}
enum RoleSkinType {
  ROLE_SKIN_MAINROLE_TYPE = 0,
  ROLE_SKIN_COUPLE_TYPE = 1,
  RoleSkinType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RoleSkinType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool RoleSkinType_IsValid(int value);
const RoleSkinType RoleSkinType_MIN = ROLE_SKIN_MAINROLE_TYPE;
const RoleSkinType RoleSkinType_MAX = ROLE_SKIN_COUPLE_TYPE;
const int RoleSkinType_ARRAYSIZE = RoleSkinType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* RoleSkinType_descriptor();
inline const ::std::string& RoleSkinType_Name(RoleSkinType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoleSkinType_descriptor(), value);
}
inline bool RoleSkinType_Parse(
    const ::std::string& name, RoleSkinType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoleSkinType>(
    RoleSkinType_descriptor(), name, value);
}
enum AckRoleSkinCommonRST {
  ROLE_SKIN_PERCHASE_SUCCESS = 0,
  ROLE_SKIN_EXCHANGE_SUCCESS = 1,
  ROLE_SKIN_NOT_ENOUGH_ITEM = 2,
  ROLE_SKIN_NO_COLOR_CHANGE = 3,
  ROLE_SKIN_DYEING_SUCCESS = 4,
  ROLE_SKIN_ERROR_UNKNOWN = 5,
  ROLE_SKIN_NOT_ENOUGH_RESOURCE = 6,
  ROLE_SKIN_ROLE_TYPE_WRONG = 7,
  ROLE_SKIN_DEFAULT_COLOR_CLEAN = 8,
  ROLE_SKIN_CANNOT_DYEING_TYPE = 9,
  ROLE_SKIN_CURRENT_WEARING = 10,
  ROLE_SKIN_REFUSE_SWIMWEAR = 11,
  ROLE_SKIN_WEAR_SUCCESS = 12,
  ROLE_SKIN_ALREADY_UNLOCK_STATUS = 13,
  ROLE_SKIN_ROLE_ID_ERROR = 14,
  ROLE_SKIN_NOT_HOLD_WEDDING = 15,
  AckRoleSkinCommonRST_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AckRoleSkinCommonRST_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool AckRoleSkinCommonRST_IsValid(int value);
const AckRoleSkinCommonRST AckRoleSkinCommonRST_MIN = ROLE_SKIN_PERCHASE_SUCCESS;
const AckRoleSkinCommonRST AckRoleSkinCommonRST_MAX = ROLE_SKIN_NOT_HOLD_WEDDING;
const int AckRoleSkinCommonRST_ARRAYSIZE = AckRoleSkinCommonRST_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* AckRoleSkinCommonRST_descriptor();
inline const ::std::string& AckRoleSkinCommonRST_Name(AckRoleSkinCommonRST value) {
  return ::google::protobuf::internal::NameOfEnum(
    AckRoleSkinCommonRST_descriptor(), value);
}
inline bool AckRoleSkinCommonRST_Parse(
    const ::std::string& name, AckRoleSkinCommonRST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AckRoleSkinCommonRST>(
    AckRoleSkinCommonRST_descriptor(), name, value);
}
enum EnergyResistCategory {
  ENERGY_RESIST_CATEGORY_UNKNOWN = 0,
  ENERGY_RESIST_CATEGORY_FIRE = 1,
  ENERGY_RESIST_CATEGORY_GOLD = 2,
  ENERGY_RESIST_CATEGORY_LAND = 3,
  ENERGY_RESIST_CATEGORY_FOREST = 4,
  ENERGY_RESIST_CATEGORY_WATER = 5,
  ENERGY_RESIST_CATEGORY_MYSTERY = 6,
  EnergyResistCategory_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EnergyResistCategory_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool EnergyResistCategory_IsValid(int value);
const EnergyResistCategory EnergyResistCategory_MIN = ENERGY_RESIST_CATEGORY_UNKNOWN;
const EnergyResistCategory EnergyResistCategory_MAX = ENERGY_RESIST_CATEGORY_MYSTERY;
const int EnergyResistCategory_ARRAYSIZE = EnergyResistCategory_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* EnergyResistCategory_descriptor();
inline const ::std::string& EnergyResistCategory_Name(EnergyResistCategory value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnergyResistCategory_descriptor(), value);
}
inline bool EnergyResistCategory_Parse(
    const ::std::string& name, EnergyResistCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnergyResistCategory>(
    EnergyResistCategory_descriptor(), name, value);
}
enum EnergyResistType {
  ENERGY_RESIST_TYPE_NONE = 0,
  ENERGY_RESIST_TYPE_WEAK = 1,
  ENERGY_RESIST_TYPE_RESIST = 2,
  ENERGY_RESIST_TYPE_REFLECT = 3,
  ENERGY_RESIST_TYPE_ABSORT = 4,
  EnergyResistType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EnergyResistType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool EnergyResistType_IsValid(int value);
const EnergyResistType EnergyResistType_MIN = ENERGY_RESIST_TYPE_NONE;
const EnergyResistType EnergyResistType_MAX = ENERGY_RESIST_TYPE_ABSORT;
const int EnergyResistType_ARRAYSIZE = EnergyResistType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* EnergyResistType_descriptor();
inline const ::std::string& EnergyResistType_Name(EnergyResistType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnergyResistType_descriptor(), value);
}
inline bool EnergyResistType_Parse(
    const ::std::string& name, EnergyResistType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnergyResistType>(
    EnergyResistType_descriptor(), name, value);
}
enum NodeExploreState {
  NODE_EXPLORE_STATE_INIT = 0,
  NODE_EXPLORE_STATE_NORMAL1 = 1,
  NODE_EXPLORE_STATE_NORMAL2 = 2,
  NODE_EXPLORE_STATE_NORMAL3 = 3,
  NODE_EXPLORE_STATE_NORMAL4 = 4,
  NODE_EXPLORE_STATE_SETTLEMENT = 5,
  NODE_EXPLORE_STATE_RESET = 6,
  NodeExploreState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NodeExploreState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool NodeExploreState_IsValid(int value);
const NodeExploreState NodeExploreState_MIN = NODE_EXPLORE_STATE_INIT;
const NodeExploreState NodeExploreState_MAX = NODE_EXPLORE_STATE_RESET;
const int NodeExploreState_ARRAYSIZE = NodeExploreState_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* NodeExploreState_descriptor();
inline const ::std::string& NodeExploreState_Name(NodeExploreState value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeExploreState_descriptor(), value);
}
inline bool NodeExploreState_Parse(
    const ::std::string& name, NodeExploreState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeExploreState>(
    NodeExploreState_descriptor(), name, value);
}
enum NodeExploreRewardType {
  NODE_EXPLORE_REWARD_TYPE_PERSONAL = 0,
  NODE_EXPLORE_REWARD_TYPE_COMMON = 1,
  NODE_EXPLORE_REWARD_TYPE_FIRST_PASSED = 2,
  NodeExploreRewardType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NodeExploreRewardType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool NodeExploreRewardType_IsValid(int value);
const NodeExploreRewardType NodeExploreRewardType_MIN = NODE_EXPLORE_REWARD_TYPE_PERSONAL;
const NodeExploreRewardType NodeExploreRewardType_MAX = NODE_EXPLORE_REWARD_TYPE_FIRST_PASSED;
const int NodeExploreRewardType_ARRAYSIZE = NodeExploreRewardType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* NodeExploreRewardType_descriptor();
inline const ::std::string& NodeExploreRewardType_Name(NodeExploreRewardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeExploreRewardType_descriptor(), value);
}
inline bool NodeExploreRewardType_Parse(
    const ::std::string& name, NodeExploreRewardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeExploreRewardType>(
    NodeExploreRewardType_descriptor(), name, value);
}
enum EmployTaskBarStatus {
  EMPLOY_TASK_BAR_STATUS_CAN_UNLOCK = 0,
  EMPLOY_TASK_BAR_STATUS_BE_UNLOCK = 1,
  EMPLOY_TASK_BAR_STATUS_BEING = 2,
  EMPLOY_TASK_BAR_STATUS_COMPLETE = 3,
  EMPLOY_TASK_BAR_STATUS_COMPLETE_REWARED = 4,
  EmployTaskBarStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EmployTaskBarStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool EmployTaskBarStatus_IsValid(int value);
const EmployTaskBarStatus EmployTaskBarStatus_MIN = EMPLOY_TASK_BAR_STATUS_CAN_UNLOCK;
const EmployTaskBarStatus EmployTaskBarStatus_MAX = EMPLOY_TASK_BAR_STATUS_COMPLETE_REWARED;
const int EmployTaskBarStatus_ARRAYSIZE = EmployTaskBarStatus_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* EmployTaskBarStatus_descriptor();
inline const ::std::string& EmployTaskBarStatus_Name(EmployTaskBarStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmployTaskBarStatus_descriptor(), value);
}
inline bool EmployTaskBarStatus_Parse(
    const ::std::string& name, EmployTaskBarStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmployTaskBarStatus>(
    EmployTaskBarStatus_descriptor(), name, value);
}
enum OrderExtraParamType {
  ORDER_EXTRA_PARAM_TYPE_NONE = 0,
  ORDER_EXTRA_PARAM_TYPE_REWARD_EVNET_ID = 1,
  ORDER_EXTRA_PARAM_TYPE_REWARD_EVNET_TASK_ID = 2,
  OrderExtraParamType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OrderExtraParamType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool OrderExtraParamType_IsValid(int value);
const OrderExtraParamType OrderExtraParamType_MIN = ORDER_EXTRA_PARAM_TYPE_NONE;
const OrderExtraParamType OrderExtraParamType_MAX = ORDER_EXTRA_PARAM_TYPE_REWARD_EVNET_TASK_ID;
const int OrderExtraParamType_ARRAYSIZE = OrderExtraParamType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* OrderExtraParamType_descriptor();
inline const ::std::string& OrderExtraParamType_Name(OrderExtraParamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderExtraParamType_descriptor(), value);
}
inline bool OrderExtraParamType_Parse(
    const ::std::string& name, OrderExtraParamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderExtraParamType>(
    OrderExtraParamType_descriptor(), name, value);
}
enum CommonRewardFlag {
  CRF_NONE = 0,
  CRF_EXTRA = 1,
  CRF_RESOLVED = 2,
  CRF_SOLD = 4,
  CommonRewardFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonRewardFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool CommonRewardFlag_IsValid(int value);
const CommonRewardFlag CommonRewardFlag_MIN = CRF_NONE;
const CommonRewardFlag CommonRewardFlag_MAX = CRF_SOLD;
const int CommonRewardFlag_ARRAYSIZE = CommonRewardFlag_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* CommonRewardFlag_descriptor();
inline const ::std::string& CommonRewardFlag_Name(CommonRewardFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonRewardFlag_descriptor(), value);
}
inline bool CommonRewardFlag_Parse(
    const ::std::string& name, CommonRewardFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonRewardFlag>(
    CommonRewardFlag_descriptor(), name, value);
}
enum TreasureNodeType {
  TREASURE_NODE_TYPE_EMPTY = 0,
  TREASURE_NODE_TYPE_BIRTH_POS = 1,
  TREASURE_NODE_TYPE_PLAYER_CURRENT_POS = 2,
  TREASURE_NODE_TYPE_MONSTER_POS = 4,
  TREASURE_NODE_TYPE_TREASURE_POS = 8,
  TREASURE_NODE_TYPE_EXPECT_TARGET_POS = 16,
  TreasureNodeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TreasureNodeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool TreasureNodeType_IsValid(int value);
const TreasureNodeType TreasureNodeType_MIN = TREASURE_NODE_TYPE_EMPTY;
const TreasureNodeType TreasureNodeType_MAX = TREASURE_NODE_TYPE_EXPECT_TARGET_POS;
const int TreasureNodeType_ARRAYSIZE = TreasureNodeType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* TreasureNodeType_descriptor();
inline const ::std::string& TreasureNodeType_Name(TreasureNodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TreasureNodeType_descriptor(), value);
}
inline bool TreasureNodeType_Parse(
    const ::std::string& name, TreasureNodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TreasureNodeType>(
    TreasureNodeType_descriptor(), name, value);
}
enum MapTreasureMoveType {
  MAP_TREASURE_MOVE_PLAYER = 0,
  MAP_TREASURE_MOVE_MONSTER = 1,
  MapTreasureMoveType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MapTreasureMoveType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool MapTreasureMoveType_IsValid(int value);
const MapTreasureMoveType MapTreasureMoveType_MIN = MAP_TREASURE_MOVE_PLAYER;
const MapTreasureMoveType MapTreasureMoveType_MAX = MAP_TREASURE_MOVE_MONSTER;
const int MapTreasureMoveType_ARRAYSIZE = MapTreasureMoveType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* MapTreasureMoveType_descriptor();
inline const ::std::string& MapTreasureMoveType_Name(MapTreasureMoveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MapTreasureMoveType_descriptor(), value);
}
inline bool MapTreasureMoveType_Parse(
    const ::std::string& name, MapTreasureMoveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MapTreasureMoveType>(
    MapTreasureMoveType_descriptor(), name, value);
}
enum MapTreasureView {
  MAP_TREASURE_VIEW_NO_ACTIVATED = 0,
  MAP_TREASURE_VIEW_ACTIVATED = 1,
  MAP_TREASURE_VIEW_CAN_ARRIVE = 2,
  MapTreasureView_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MapTreasureView_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool MapTreasureView_IsValid(int value);
const MapTreasureView MapTreasureView_MIN = MAP_TREASURE_VIEW_NO_ACTIVATED;
const MapTreasureView MapTreasureView_MAX = MAP_TREASURE_VIEW_CAN_ARRIVE;
const int MapTreasureView_ARRAYSIZE = MapTreasureView_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* MapTreasureView_descriptor();
inline const ::std::string& MapTreasureView_Name(MapTreasureView value) {
  return ::google::protobuf::internal::NameOfEnum(
    MapTreasureView_descriptor(), value);
}
inline bool MapTreasureView_Parse(
    const ::std::string& name, MapTreasureView* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MapTreasureView>(
    MapTreasureView_descriptor(), name, value);
}
enum GlobalExchangeType {
  GLOBAL_EXCHANGE_TYPE_NONE = 0,
  GLOBAL_EXCHANGE_TYPE_FESTIVAL_PUZZLE = 1,
  GLOBAL_EXCHANGE_TYPE_FESTIVAL_CONVERSION = 2,
  GlobalExchangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GlobalExchangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool GlobalExchangeType_IsValid(int value);
const GlobalExchangeType GlobalExchangeType_MIN = GLOBAL_EXCHANGE_TYPE_NONE;
const GlobalExchangeType GlobalExchangeType_MAX = GLOBAL_EXCHANGE_TYPE_FESTIVAL_CONVERSION;
const int GlobalExchangeType_ARRAYSIZE = GlobalExchangeType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* GlobalExchangeType_descriptor();
inline const ::std::string& GlobalExchangeType_Name(GlobalExchangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GlobalExchangeType_descriptor(), value);
}
inline bool GlobalExchangeType_Parse(
    const ::std::string& name, GlobalExchangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GlobalExchangeType>(
    GlobalExchangeType_descriptor(), name, value);
}
enum VisitSeatInfoStatus {
  VISIT_SEAT_INFO_STATUS_NOT_UNLOCK = 0,
  VISIT_SEAT_INFO_STATUS_UNLOCK = 1,
  VISIT_SEAT_INFO_STATUS_OCCUPY = 2,
  VisitSeatInfoStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VisitSeatInfoStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool VisitSeatInfoStatus_IsValid(int value);
const VisitSeatInfoStatus VisitSeatInfoStatus_MIN = VISIT_SEAT_INFO_STATUS_NOT_UNLOCK;
const VisitSeatInfoStatus VisitSeatInfoStatus_MAX = VISIT_SEAT_INFO_STATUS_OCCUPY;
const int VisitSeatInfoStatus_ARRAYSIZE = VisitSeatInfoStatus_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* VisitSeatInfoStatus_descriptor();
inline const ::std::string& VisitSeatInfoStatus_Name(VisitSeatInfoStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    VisitSeatInfoStatus_descriptor(), value);
}
inline bool VisitSeatInfoStatus_Parse(
    const ::std::string& name, VisitSeatInfoStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VisitSeatInfoStatus>(
    VisitSeatInfoStatus_descriptor(), name, value);
}
enum VisitorHistoryFormat {
  VISITOR_HISTORY_FORMAT = 0,
  VISITOR_HISTORY_FORMAT_FRIEND_ENTER = 1,
  VISITOR_HISTORY_FORMAT_FRIEND_FINISH = 2,
  VISITOR_HISTORY_FORMAT_STRANGER_ENTER = 3,
  VISITOR_HISTORY_FORMAT_STRANGER_FINISH = 4,
  VisitorHistoryFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VisitorHistoryFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool VisitorHistoryFormat_IsValid(int value);
const VisitorHistoryFormat VisitorHistoryFormat_MIN = VISITOR_HISTORY_FORMAT;
const VisitorHistoryFormat VisitorHistoryFormat_MAX = VISITOR_HISTORY_FORMAT_STRANGER_FINISH;
const int VisitorHistoryFormat_ARRAYSIZE = VisitorHistoryFormat_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* VisitorHistoryFormat_descriptor();
inline const ::std::string& VisitorHistoryFormat_Name(VisitorHistoryFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    VisitorHistoryFormat_descriptor(), value);
}
inline bool VisitorHistoryFormat_Parse(
    const ::std::string& name, VisitorHistoryFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VisitorHistoryFormat>(
    VisitorHistoryFormat_descriptor(), name, value);
}
enum WelfareItemType {
  WELFARE_ITEM_TYPE_NORMAL = 0,
  WELFARE_ITEM_TYPE_DYNAMIC_STORE = 1,
  WelfareItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WelfareItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool WelfareItemType_IsValid(int value);
const WelfareItemType WelfareItemType_MIN = WELFARE_ITEM_TYPE_NORMAL;
const WelfareItemType WelfareItemType_MAX = WELFARE_ITEM_TYPE_DYNAMIC_STORE;
const int WelfareItemType_ARRAYSIZE = WelfareItemType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* WelfareItemType_descriptor();
inline const ::std::string& WelfareItemType_Name(WelfareItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WelfareItemType_descriptor(), value);
}
inline bool WelfareItemType_Parse(
    const ::std::string& name, WelfareItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WelfareItemType>(
    WelfareItemType_descriptor(), name, value);
}
enum ReportPlayerInfoOperatingType {
  REPORT_PLAYER_INFO_OPTYPE_ADD = 0,
  REPORT_PLAYER_INFO_OPTYPE_REMOVE = 1,
  REPORT_PLAYER_INFO_OPTYPE_UPDATE = 2,
  REPORT_PLAYER_INFO_OPTYPE_STOP_SYNC = 3,
  ReportPlayerInfoOperatingType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReportPlayerInfoOperatingType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReportPlayerInfoOperatingType_IsValid(int value);
const ReportPlayerInfoOperatingType ReportPlayerInfoOperatingType_MIN = REPORT_PLAYER_INFO_OPTYPE_ADD;
const ReportPlayerInfoOperatingType ReportPlayerInfoOperatingType_MAX = REPORT_PLAYER_INFO_OPTYPE_STOP_SYNC;
const int ReportPlayerInfoOperatingType_ARRAYSIZE = ReportPlayerInfoOperatingType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReportPlayerInfoOperatingType_descriptor();
inline const ::std::string& ReportPlayerInfoOperatingType_Name(ReportPlayerInfoOperatingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReportPlayerInfoOperatingType_descriptor(), value);
}
inline bool ReportPlayerInfoOperatingType_Parse(
    const ::std::string& name, ReportPlayerInfoOperatingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReportPlayerInfoOperatingType>(
    ReportPlayerInfoOperatingType_descriptor(), name, value);
}
enum GuestsInviteType {
  GUESTS_INVITE_TYPE_NEVER_ISLAND = 0,
  GUESTS_INVITE_TYPE_COMMUNITY = 1,
  GUESTS_INVITE_TYPE_ALL_FRIEND = 2,
  GuestsInviteType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GuestsInviteType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool GuestsInviteType_IsValid(int value);
const GuestsInviteType GuestsInviteType_MIN = GUESTS_INVITE_TYPE_NEVER_ISLAND;
const GuestsInviteType GuestsInviteType_MAX = GUESTS_INVITE_TYPE_ALL_FRIEND;
const int GuestsInviteType_ARRAYSIZE = GuestsInviteType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* GuestsInviteType_descriptor();
inline const ::std::string& GuestsInviteType_Name(GuestsInviteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GuestsInviteType_descriptor(), value);
}
inline bool GuestsInviteType_Parse(
    const ::std::string& name, GuestsInviteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuestsInviteType>(
    GuestsInviteType_descriptor(), name, value);
}
enum GiftBoxType {
  GIFT_BOX_TYPE_FINE = 0,
  GIFT_BOX_TYPE_LUXURIOUS = 1,
  GiftBoxType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GiftBoxType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool GiftBoxType_IsValid(int value);
const GiftBoxType GiftBoxType_MIN = GIFT_BOX_TYPE_FINE;
const GiftBoxType GiftBoxType_MAX = GIFT_BOX_TYPE_LUXURIOUS;
const int GiftBoxType_ARRAYSIZE = GiftBoxType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* GiftBoxType_descriptor();
inline const ::std::string& GiftBoxType_Name(GiftBoxType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GiftBoxType_descriptor(), value);
}
inline bool GiftBoxType_Parse(
    const ::std::string& name, GiftBoxType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GiftBoxType>(
    GiftBoxType_descriptor(), name, value);
}
enum WeddingState {
  WEDDING_STATE_NOT_BEGIN = 0,
  WEDDING_STATE_RUNNING = 1,
  WEDDING_STATE_COMPLETE = 2,
  WeddingState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WeddingState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool WeddingState_IsValid(int value);
const WeddingState WeddingState_MIN = WEDDING_STATE_NOT_BEGIN;
const WeddingState WeddingState_MAX = WEDDING_STATE_COMPLETE;
const int WeddingState_ARRAYSIZE = WeddingState_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* WeddingState_descriptor();
inline const ::std::string& WeddingState_Name(WeddingState value) {
  return ::google::protobuf::internal::NameOfEnum(
    WeddingState_descriptor(), value);
}
inline bool WeddingState_Parse(
    const ::std::string& name, WeddingState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WeddingState>(
    WeddingState_descriptor(), name, value);
}
enum KnockoutState {
  KNOCKOUT_STATE_CLOSED = 0,
  KNOCKOUT_STATE_PREPARE = 1,
  KNOCKOUT_STATE_AUTO_ADJUST_TEAM = 2,
  KNOCKOUT_STATE_ROUND_1_BET = 3,
  KNOCKOUT_STATE_ROUND_1_BATTLE = 4,
  KNOCKOUT_STATE_ROUND_1_WAIT_END = 5,
  KNOCKOUT_STATE_ROUND_2_BET = 6,
  KNOCKOUT_STATE_ROUND_2_BATTLE = 7,
  KNOCKOUT_STATE_ROUND_2_WAIT_END = 8,
  KNOCKOUT_STATE_ROUND_3_BET = 9,
  KNOCKOUT_STATE_ROUND_3_BATTLE = 10,
  KNOCKOUT_STATE_ROUND_3_WAIT_END = 11,
  KNOCKOUT_STATE_ROUND_4_BET = 12,
  KNOCKOUT_STATE_ROUND_4_BATTLE = 13,
  KNOCKOUT_STATE_ROUND_4_WAIT_END = 14,
  KNOCKOUT_STATE_ROUND_5_BET = 15,
  KNOCKOUT_STATE_ROUND_5_BATTLE = 16,
  KNOCKOUT_STATE_ROUND_5_WAIT_END = 17,
  KNOCKOUT_STATE_ROUND_6_BET = 18,
  KNOCKOUT_STATE_ROUND_6_BATTLE = 19,
  KNOCKOUT_STATE_ROUND_6_WAIT_END = 20,
  KNOCKOUT_STATE_SETTLEMENT = 21,
  KnockoutState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  KnockoutState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool KnockoutState_IsValid(int value);
const KnockoutState KnockoutState_MIN = KNOCKOUT_STATE_CLOSED;
const KnockoutState KnockoutState_MAX = KNOCKOUT_STATE_SETTLEMENT;
const int KnockoutState_ARRAYSIZE = KnockoutState_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* KnockoutState_descriptor();
inline const ::std::string& KnockoutState_Name(KnockoutState value) {
  return ::google::protobuf::internal::NameOfEnum(
    KnockoutState_descriptor(), value);
}
inline bool KnockoutState_Parse(
    const ::std::string& name, KnockoutState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KnockoutState>(
    KnockoutState_descriptor(), name, value);
}
enum KnockoutRound {
  KNOCKOUT_ROUND_INVALID = 0,
  KNOCKOUT_ROUND_1 = 1,
  KNOCKOUT_ROUND_2 = 2,
  KNOCKOUT_ROUND_3 = 3,
  KNOCKOUT_ROUND_4 = 4,
  KNOCKOUT_ROUND_5 = 5,
  KNOCKOUT_ROUND_6 = 6,
  KnockoutRound_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  KnockoutRound_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool KnockoutRound_IsValid(int value);
const KnockoutRound KnockoutRound_MIN = KNOCKOUT_ROUND_INVALID;
const KnockoutRound KnockoutRound_MAX = KNOCKOUT_ROUND_6;
const int KnockoutRound_ARRAYSIZE = KnockoutRound_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* KnockoutRound_descriptor();
inline const ::std::string& KnockoutRound_Name(KnockoutRound value) {
  return ::google::protobuf::internal::NameOfEnum(
    KnockoutRound_descriptor(), value);
}
inline bool KnockoutRound_Parse(
    const ::std::string& name, KnockoutRound* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KnockoutRound>(
    KnockoutRound_descriptor(), name, value);
}
enum CommunityRankingType {
  ENERGY_STORE = 0,
  PVP_SCORE = 1,
  WORLD_BOSS_SCORE = 2,
  CommunityRankingType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommunityRankingType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool CommunityRankingType_IsValid(int value);
const CommunityRankingType CommunityRankingType_MIN = ENERGY_STORE;
const CommunityRankingType CommunityRankingType_MAX = WORLD_BOSS_SCORE;
const int CommunityRankingType_ARRAYSIZE = CommunityRankingType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* CommunityRankingType_descriptor();
inline const ::std::string& CommunityRankingType_Name(CommunityRankingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommunityRankingType_descriptor(), value);
}
inline bool CommunityRankingType_Parse(
    const ::std::string& name, CommunityRankingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommunityRankingType>(
    CommunityRankingType_descriptor(), name, value);
}
enum MonopolyEventState {
  MONOPOLY_EVENT_STATE_DEFAULT = 0,
  MONOPOLY_EVENT_STATE_OPEN = 1,
  MONOPOLY_EVENT_STATE_PRE_CLOSE = 2,
  MONOPOLY_EVENT_STATE_CLOSED = 3,
  MonopolyEventState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MonopolyEventState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool MonopolyEventState_IsValid(int value);
const MonopolyEventState MonopolyEventState_MIN = MONOPOLY_EVENT_STATE_DEFAULT;
const MonopolyEventState MonopolyEventState_MAX = MONOPOLY_EVENT_STATE_CLOSED;
const int MonopolyEventState_ARRAYSIZE = MonopolyEventState_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* MonopolyEventState_descriptor();
inline const ::std::string& MonopolyEventState_Name(MonopolyEventState value) {
  return ::google::protobuf::internal::NameOfEnum(
    MonopolyEventState_descriptor(), value);
}
inline bool MonopolyEventState_Parse(
    const ::std::string& name, MonopolyEventState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MonopolyEventState>(
    MonopolyEventState_descriptor(), name, value);
}
enum MonopolySquareType {
  MONOPOLY_SQUARE_TYPE_START = 0,
  MONOPOLY_SQUARE_TYPE_NORMAL = 1,
  MONOPOLY_SQUARE_TYPE_DELUXE = 2,
  MONOPOLY_SQUARE_TYPE_SPECIAL = 3,
  MONOPOLY_SQUARE_TYPE_FINISH = 4,
  MonopolySquareType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MonopolySquareType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool MonopolySquareType_IsValid(int value);
const MonopolySquareType MonopolySquareType_MIN = MONOPOLY_SQUARE_TYPE_START;
const MonopolySquareType MonopolySquareType_MAX = MONOPOLY_SQUARE_TYPE_FINISH;
const int MonopolySquareType_ARRAYSIZE = MonopolySquareType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* MonopolySquareType_descriptor();
inline const ::std::string& MonopolySquareType_Name(MonopolySquareType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MonopolySquareType_descriptor(), value);
}
inline bool MonopolySquareType_Parse(
    const ::std::string& name, MonopolySquareType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MonopolySquareType>(
    MonopolySquareType_descriptor(), name, value);
}
enum MonopolySquareState {
  MONOPOLY_SQUARE_STATE_INIT = 0,
  MONOPOLY_SQUARE_STATE_ARRIVED = 1,
  MONOPOLY_SQUARE_STATE_INDEX = 2,
  MonopolySquareState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MonopolySquareState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool MonopolySquareState_IsValid(int value);
const MonopolySquareState MonopolySquareState_MIN = MONOPOLY_SQUARE_STATE_INIT;
const MonopolySquareState MonopolySquareState_MAX = MONOPOLY_SQUARE_STATE_INDEX;
const int MonopolySquareState_ARRAYSIZE = MonopolySquareState_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* MonopolySquareState_descriptor();
inline const ::std::string& MonopolySquareState_Name(MonopolySquareState value) {
  return ::google::protobuf::internal::NameOfEnum(
    MonopolySquareState_descriptor(), value);
}
inline bool MonopolySquareState_Parse(
    const ::std::string& name, MonopolySquareState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MonopolySquareState>(
    MonopolySquareState_descriptor(), name, value);
}
enum MonopolySharedHistoryType {
  MONOPOLY_SHARED_HISTORY_TYPE_FRIEND = 0,
  MONOPOLY_SHARED_HISTORY_TYPE_COUPLE = 1,
  MonopolySharedHistoryType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MonopolySharedHistoryType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool MonopolySharedHistoryType_IsValid(int value);
const MonopolySharedHistoryType MonopolySharedHistoryType_MIN = MONOPOLY_SHARED_HISTORY_TYPE_FRIEND;
const MonopolySharedHistoryType MonopolySharedHistoryType_MAX = MONOPOLY_SHARED_HISTORY_TYPE_COUPLE;
const int MonopolySharedHistoryType_ARRAYSIZE = MonopolySharedHistoryType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* MonopolySharedHistoryType_descriptor();
inline const ::std::string& MonopolySharedHistoryType_Name(MonopolySharedHistoryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MonopolySharedHistoryType_descriptor(), value);
}
inline bool MonopolySharedHistoryType_Parse(
    const ::std::string& name, MonopolySharedHistoryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MonopolySharedHistoryType>(
    MonopolySharedHistoryType_descriptor(), name, value);
}
enum MonopolyDiceType {
  MONOPOLY_DICE_TYPE_NORMAL = 0,
  MONOPOLY_DICE_TYPE_ONE = 1,
  MONOPOLY_DICE_TYPE_ANY = 2,
  MonopolyDiceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MonopolyDiceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool MonopolyDiceType_IsValid(int value);
const MonopolyDiceType MonopolyDiceType_MIN = MONOPOLY_DICE_TYPE_NORMAL;
const MonopolyDiceType MonopolyDiceType_MAX = MONOPOLY_DICE_TYPE_ANY;
const int MonopolyDiceType_ARRAYSIZE = MonopolyDiceType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* MonopolyDiceType_descriptor();
inline const ::std::string& MonopolyDiceType_Name(MonopolyDiceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MonopolyDiceType_descriptor(), value);
}
inline bool MonopolyDiceType_Parse(
    const ::std::string& name, MonopolyDiceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MonopolyDiceType>(
    MonopolyDiceType_descriptor(), name, value);
}
enum MonopolyPublicBossAttackListType {
  MONOPOLY_PUBLIC_BOSS_ATTACK_LIST_TYPE_FRIEND = 0,
  MONOPOLY_PUBLIC_BOSS_ATTACK_LIST_TYPE_COMMUNITY = 1,
  MONOPOLY_PUBLIC_BOSS_ATTACK_LIST_TYPE_WORLD = 2,
  MonopolyPublicBossAttackListType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MonopolyPublicBossAttackListType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool MonopolyPublicBossAttackListType_IsValid(int value);
const MonopolyPublicBossAttackListType MonopolyPublicBossAttackListType_MIN = MONOPOLY_PUBLIC_BOSS_ATTACK_LIST_TYPE_FRIEND;
const MonopolyPublicBossAttackListType MonopolyPublicBossAttackListType_MAX = MONOPOLY_PUBLIC_BOSS_ATTACK_LIST_TYPE_WORLD;
const int MonopolyPublicBossAttackListType_ARRAYSIZE = MonopolyPublicBossAttackListType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* MonopolyPublicBossAttackListType_descriptor();
inline const ::std::string& MonopolyPublicBossAttackListType_Name(MonopolyPublicBossAttackListType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MonopolyPublicBossAttackListType_descriptor(), value);
}
inline bool MonopolyPublicBossAttackListType_Parse(
    const ::std::string& name, MonopolyPublicBossAttackListType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MonopolyPublicBossAttackListType>(
    MonopolyPublicBossAttackListType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NFMsg::EGameEventCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::EGameEventCode>() {
  return ::NFMsg::EGameEventCode_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::ESynMsgID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ESynMsgID>() {
  return ::NFMsg::ESynMsgID_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::EGameMsgID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::EGameMsgID>() {
  return ::NFMsg::EGameMsgID_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::EBattleMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::EBattleMode>() {
  return ::NFMsg::EBattleMode_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::EOrderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::EOrderType>() {
  return ::NFMsg::EOrderType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::EffectFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::EffectFlags>() {
  return ::NFMsg::EffectFlags_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::SkillState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::SkillState>() {
  return ::NFMsg::SkillState_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::ShopType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ShopType>() {
  return ::NFMsg::ShopType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::QuickBuyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::QuickBuyType>() {
  return ::NFMsg::QuickBuyType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::TaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::TaskType>() {
  return ::NFMsg::TaskType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::TaskSubType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::TaskSubType>() {
  return ::NFMsg::TaskSubType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::TaskStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::TaskStatus>() {
  return ::NFMsg::TaskStatus_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::StageRewardType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::StageRewardType>() {
  return ::NFMsg::StageRewardType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::PageantReceiveRedEvpStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::PageantReceiveRedEvpStatus>() {
  return ::NFMsg::PageantReceiveRedEvpStatus_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::CommunitySettingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::CommunitySettingType>() {
  return ::NFMsg::CommunitySettingType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::CommunityState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::CommunityState>() {
  return ::NFMsg::CommunityState_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::CommunityPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::CommunityPosition>() {
  return ::NFMsg::CommunityPosition_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::CommunityMemberOperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::CommunityMemberOperationType>() {
  return ::NFMsg::CommunityMemberOperationType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::PageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::PageType>() {
  return ::NFMsg::PageType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::CommunityBulletinMsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::CommunityBulletinMsgType>() {
  return ::NFMsg::CommunityBulletinMsgType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::CommunityBulletinSpliceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::CommunityBulletinSpliceType>() {
  return ::NFMsg::CommunityBulletinSpliceType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::CommunityTaskBarState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::CommunityTaskBarState>() {
  return ::NFMsg::CommunityTaskBarState_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::CommunityWelfareItemState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::CommunityWelfareItemState>() {
  return ::NFMsg::CommunityWelfareItemState_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::CommunityTaskOperateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::CommunityTaskOperateType>() {
  return ::NFMsg::CommunityTaskOperateType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::CommunityUpdateTaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::CommunityUpdateTaskType>() {
  return ::NFMsg::CommunityUpdateTaskType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::CommunityMatchEventStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::CommunityMatchEventStatus>() {
  return ::NFMsg::CommunityMatchEventStatus_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::CommunityMatchResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::CommunityMatchResult>() {
  return ::NFMsg::CommunityMatchResult_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::CommunityMatchBulletinType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::CommunityMatchBulletinType>() {
  return ::NFMsg::CommunityMatchBulletinType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::OperatingActivityTaskStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::OperatingActivityTaskStatus>() {
  return ::NFMsg::OperatingActivityTaskStatus_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::ReqUnlocRolekSkinType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqUnlocRolekSkinType>() {
  return ::NFMsg::ReqUnlocRolekSkinType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::RoleSkinType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::RoleSkinType>() {
  return ::NFMsg::RoleSkinType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::AckRoleSkinCommonRST> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::AckRoleSkinCommonRST>() {
  return ::NFMsg::AckRoleSkinCommonRST_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::EnergyResistCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::EnergyResistCategory>() {
  return ::NFMsg::EnergyResistCategory_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::EnergyResistType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::EnergyResistType>() {
  return ::NFMsg::EnergyResistType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::NodeExploreState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::NodeExploreState>() {
  return ::NFMsg::NodeExploreState_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::NodeExploreRewardType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::NodeExploreRewardType>() {
  return ::NFMsg::NodeExploreRewardType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::EmployTaskBarStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::EmployTaskBarStatus>() {
  return ::NFMsg::EmployTaskBarStatus_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::OrderExtraParamType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::OrderExtraParamType>() {
  return ::NFMsg::OrderExtraParamType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::CommonRewardFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::CommonRewardFlag>() {
  return ::NFMsg::CommonRewardFlag_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::TreasureNodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::TreasureNodeType>() {
  return ::NFMsg::TreasureNodeType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::MapTreasureMoveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::MapTreasureMoveType>() {
  return ::NFMsg::MapTreasureMoveType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::MapTreasureView> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::MapTreasureView>() {
  return ::NFMsg::MapTreasureView_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::GlobalExchangeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::GlobalExchangeType>() {
  return ::NFMsg::GlobalExchangeType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::VisitSeatInfoStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::VisitSeatInfoStatus>() {
  return ::NFMsg::VisitSeatInfoStatus_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::VisitorHistoryFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::VisitorHistoryFormat>() {
  return ::NFMsg::VisitorHistoryFormat_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::WelfareItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::WelfareItemType>() {
  return ::NFMsg::WelfareItemType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::ReportPlayerInfoOperatingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReportPlayerInfoOperatingType>() {
  return ::NFMsg::ReportPlayerInfoOperatingType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::GuestsInviteType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::GuestsInviteType>() {
  return ::NFMsg::GuestsInviteType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::GiftBoxType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::GiftBoxType>() {
  return ::NFMsg::GiftBoxType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::WeddingState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::WeddingState>() {
  return ::NFMsg::WeddingState_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::KnockoutState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::KnockoutState>() {
  return ::NFMsg::KnockoutState_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::KnockoutRound> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::KnockoutRound>() {
  return ::NFMsg::KnockoutRound_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::CommunityRankingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::CommunityRankingType>() {
  return ::NFMsg::CommunityRankingType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::MonopolyEventState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::MonopolyEventState>() {
  return ::NFMsg::MonopolyEventState_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::MonopolySquareType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::MonopolySquareType>() {
  return ::NFMsg::MonopolySquareType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::MonopolySquareState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::MonopolySquareState>() {
  return ::NFMsg::MonopolySquareState_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::MonopolySharedHistoryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::MonopolySharedHistoryType>() {
  return ::NFMsg::MonopolySharedHistoryType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::MonopolyDiceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::MonopolyDiceType>() {
  return ::NFMsg::MonopolyDiceType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::MonopolyPublicBossAttackListType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::MonopolyPublicBossAttackListType>() {
  return ::NFMsg::MonopolyPublicBossAttackListType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_NFDefine_2eproto
