// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kwmsgdefine.proto

#include "kwmsgdefine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace KWMsg {
}  // namespace KWMsg
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kwmsgdefine_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kwmsgdefine_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kwmsgdefine_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_kwmsgdefine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021kwmsgdefine.proto\022\005KWMsg*\356\007\n\016EGameEven"
  "tCode\022\013\n\007SUCCESS\020\000\022\020\n\014UNKOWN_ERROR\020\001\022\020\n\014"
  "CONFIG_ERROR\020\002\022\030\n\024GET_GAME_SERVER_FAIL\020\n"
  "\022\034\n\030CONNECT_GAME_SERVER_FAIL\020\013\022\022\n\016SVR_ID"
  "_INVALID\020\016\022\026\n\022SVR_ZONEID_INVALID\020\017\022\025\n\021SV"
  "R_ZONE_OVERLOAD\020\020\022\023\n\017SVR_MAINTAINING\020\021\022\024"
  "\n\020REGISTER_DISABLE\020\022\022\025\n\021RECONNECT_SUCCES"
  "S\020\023\022\022\n\016RECONNECT_FAIL\020\024\022\016\n\nNOT_ONLINE\020\025\022"
  "%\n!LOGIN_INVALID_ACCOUNT_OR_PASSWORD\020\036\022\033"
  "\n\027LOGIN_ACCOUNT_NOT_EXIST\020\037\022 \n\034LOGIN_REG"
  "ISTER_ACCOUNT_EXIST\020 \022$\n LOGIN_REGISTER_"
  "PASS_CHAR_INVALID\020!\022#\n\037LOGIN_REGISTER_PA"
  "SS_LEN_INVALID\020\"\022\024\n\020KCP_OBJECT_EXIST\020(\022#"
  "\n\037QUEUE_UP_INVALID_STILL_IN_QUEUE\0202\022\034\n\030Q"
  "UEUE_UP_PUSH_INTO_QUEUE\0203\022 \n\034QUEUE_UP_CO"
  "NSUME_TOKEN_FAILD\0204\022\"\n\036QUEUE_UP_CONSUME_"
  "TOKEN_SUCCESS\0205\022\036\n\032PLAYER_NAME_INVALID_F"
  "ORMAT\020<\022\035\n\031PLAYER_NAME_INVALID_WORDS\020=\022\036"
  "\n\032PLAYER_NAME_INVALID_LENGTH\020>\022\025\n\021PLAYER"
  "_NAME_EXIST\020\?\022\033\n\027BTL_MISS_PRIMARY_TARGET"
  "\020d\022\025\n\020BTL_SKILL_SEALED\020\226\001\022\036\n\031BTL_SKILL_I"
  "NVALID_CONSUME\020\227\001\022\024\n\017BTL_SKILL_IN_CD\020\230\001\022"
  "\026\n\021BTL_NOT_AUTO_MODE\020\240\001\022\024\n\017BTL_TARGET_DE"
  "AD\020\241\001\022\022\n\rBTL_IN_BATTLE\020\242\001\022\033\n\026STORY_MODUL"
  "EID_INVALID\020\254\002\022 \n\033STORY_CHAPTERSTATUS_IN"
  "VALID\020\255\002\022\031\n\024STORY_BATTLE_INVALID\020\256\002*\341\026\n\n"
  "EGameMsgID\022\n\n\006UNKNOW\020\000\022\020\n\014EVENT_RESULT\020\001"
  "\022\023\n\017EVENT_TRANSPORT\020\002\022\020\n\014CLOSE_SOCKET\020\003\022"
  "\022\n\016STS_REGISTERED\020\004\022\023\n\017STS_UNREGISTERD\020\005"
  "\022\017\n\013STS_REFRESH\020\006\022\025\n\021STS_SERVICE_ROUTE\020\007"
  "\022\020\n\014STS_NET_INFO\020\010\022\022\n\016STS_HEART_BEAT\020\t\022\030"
  "\n\024STS_SYNC_WORLD_STATE\020\n\022\016\n\tREQ_LOGIN\020\310\001"
  "\022\016\n\tACK_LOGIN\020\311\001\022\017\n\nREQ_LOGOUT\020\312\001\022\026\n\021REQ"
  "_CONNECT_WORLD\020\322\001\022\026\n\021ACK_CONNECT_WORLD\020\323"
  "\001\022\023\n\016REQ_VERIFY_JWT\020\324\001\022\023\n\016ACK_VERIFY_JWT"
  "\020\325\001\022\030\n\023REQ_KICK_FROM_WORLD\020\326\001\022\030\n\023ACK_KIC"
  "K_FROM_WORLD\020\327\001\022\023\n\016REQ_ENTER_GAME\020\334\001\022\031\n\024"
  "ACK_ENTER_GAME_BEGIN\020\335\001\022\027\n\022ACK_ENTER_GAM"
  "E_END\020\336\001\022\024\n\017REQ_PLAYER_LITE\020\337\001\022\024\n\017ACK_PL"
  "AYER_LITE\020\340\001\022\036\n\031REQ_UPDATE_ACCOUNT_PLAYE"
  "R\020\341\001\022\'\n\"REQ_UPDATE_ACCOUNT_LAST_LOGIN_IN"
  "FO\020\342\001\022\031\n\024REQ_LOAD_PLAYER_DATA\020\346\001\022\031\n\024ACK_"
  "LOAD_PLAYER_DATA\020\347\001\022\031\n\024REQ_SAVE_PLAYER_D"
  "ATA\020\350\001\022\031\n\024ACK_SAVE_PLAYER_DATA\020\351\001\022\023\n\016REQ"
  "_LEAVE_GAME\020\374\001\022\023\n\016ACK_LEAVE_GAME\020\375\001\022\023\n\016R"
  "EQ_SWAP_SCENE\020\376\001\022\031\n\024ACK_SWAP_SCENE_BEGIN"
  "\020\377\001\022\027\n\022ACK_SWAP_SCENE_END\020\200\002\022\022\n\rREQ_RECO"
  "NNECT\020\204\002\022\022\n\rACK_RECONNECT\020\205\002\022\025\n\020ACK_OBJE"
  "CT_ENTRY\020\254\002\022\025\n\020ACK_OBJECT_LEAVE\020\255\002\022\036\n\031AC"
  "K_OBJECT_PROPERTY_ENTRY\020\256\002\022\034\n\027ACK_OBJECT"
  "_RECORD_ENTRY\020\257\002\022\025\n\020ACK_PROPERTY_INT\020\266\002\022"
  "\027\n\022ACK_PROPERTY_FLOAT\020\267\002\022\030\n\023ACK_PROPERTY"
  "_STRING\020\270\002\022\030\n\023ACK_PROPERTY_OBJECT\020\271\002\022\031\n\024"
  "ACK_PROPERTY_VECTOR2\020\272\002\022\031\n\024ACK_PROPERTY_"
  "VECTOR3\020\273\002\022\027\n\022ACK_PROPERTY_CLEAR\020\274\002\022\020\n\013A"
  "CK_ADD_ROW\020\300\002\022\023\n\016ACK_REMOVE_ROW\020\301\002\022\021\n\014AC"
  "K_SWAP_ROW\020\302\002\022\023\n\016ACK_RECORD_INT\020\303\002\022\025\n\020AC"
  "K_RECORD_FLOAT\020\304\002\022\026\n\021ACK_RECORD_STRING\020\305"
  "\002\022\026\n\021ACK_RECORD_OBJECT\020\306\002\022\027\n\022ACK_RECORD_"
  "VECTOR2\020\307\002\022\027\n\022ACK_RECORD_VECTOR3\020\310\002\022\025\n\020A"
  "CK_RECORD_CLEAR\020\311\002\022\024\n\017ACK_RECORD_SORT\020\312\002"
  "\022\026\n\021ACK_DATA_FINISHED\020\324\002\022\026\n\021ACK_ONLINE_N"
  "OTIFY\020\220\003\022\027\n\022ACK_OFFLINE_NOTIFY\020\221\003\022\023\n\016REQ"
  "_HEART_BEAT\020\232\003\022\023\n\016ACK_HEART_BEAT\020\233\003\022\021\n\014R"
  "EQ_LAG_TEST\020\234\003\022\021\n\014ACK_LAG_TEST\020\235\003\022\036\n\031REQ"
  "_SET_GAME_SERVER_STATE\020\244\003\022\036\n\031ACK_SET_GAM"
  "E_SERVER_STATE\020\245\003\022\027\n\022REQ_REFRESH_CONFIG\020"
  "\246\003\022!\n\034REQ_PUSH_CLIENT_INTO_QUEUEUP\020\247\003\022!\n"
  "\034ACK_PUSH_CLIENT_INTO_QUEUEUP\020\250\003\022)\n$REQ_"
  "QUEUEUP_GET_CUR_WORLD_SUIT_PROXY\020\251\003\022)\n$A"
  "CK_QUEUEUP_GET_CUR_WORLD_SUIT_PROXY\020\252\003\022\034"
  "\n\027SYNC_QUEUEUP_REG_STATUS\020\253\003\022\034\n\027REQ_KICK"
  "_CLIENTS_RANDOM\020\254\003\022(\n#REQ_UPDATE_PLAYER_"
  "LAST_HEARTBEAT_TS\020\255\003\022(\n#SYNC_QUEUE_UP_US"
  "ER_CANCEL_OPERATION\020\256\003\022\017\n\nREQ_RECORD\020\350\007\022"
  "\017\n\nACK_RECORD\020\351\007\022\032\n\025REQ_CREATE_KCP_OBJEC"
  "T\020\352\007\022\032\n\025ACK_CREATE_KCP_OBJECT\020\353\007\022!\n\034REQ_"
  "ESTABLISH_KCP_CONNECTION\020\354\007\022!\n\034ACK_ESTAB"
  "LISH_KCP_CONNECTION\020\355\007\022\027\n\022REQ_KCP_HEART_"
  "BEAT\020\356\007\022\027\n\022ACK_KCP_HEART_BEAT\020\357\007\022\026\n\021REQ_"
  "COLLECT_WITCH\020\360\007\022\026\n\021ACK_COLLECT_WITCH\020\361\007"
  "\022\031\n\024REQ_INIT_PLAYER_NAME\020\362\007\022\031\n\024ACK_INIT_"
  "PLAYER_NAME\020\363\007\022\026\n\021REQ_UPDATE_MODULE\020\364\007\022\026"
  "\n\021ACK_UPDATE_MODULE\020\365\007\022\027\n\022REQ_CHAPTER_TI"
  "P_OK\020\366\007\022\027\n\022ACK_CHAPTER_TIP_OK\020\367\007\022\024\n\017ACK_"
  "BATTLE_INFO\020\314\010\022\027\n\022ACK_BATTLE_PK_INFO\020\315\010\022"
  "\026\n\021REQ_BATTLE_ACTION\020\316\010\022\026\n\021ACK_BATTLE_AC"
  "TION\020\317\010\022\030\n\023REQ_BATTLE_PULL_MSG\020\320\010\022\030\n\023ACK"
  "_BATTLE_PULL_MSG\020\321\010\022\030\n\023ACK_BATTLE_END_IN"
  "FO\020\322\010\022 \n\033REQ_BATTLE_TOGGLE_AUTO_MODE\020\323\010\022"
  " \n\033ACK_BATTLE_TOGGLE_AUTO_MODE\020\324\010\022\'\n\"REQ"
  "_BATTLE_UPDATE_ENTITY_AUTO_MODE\020\325\010\022\'\n\"AC"
  "K_BATTLE_UPDATE_ENTITY_AUTO_MODE\020\326\010\022\037\n\032R"
  "EQ_BATTLE_SET_PRIO_TARGET\020\327\010\022\037\n\032ACK_BATT"
  "LE_SET_PRIO_TARGET\020\330\010\022\024\n\017REQ_TEST_BATTLE"
  "\020\260\t\022\024\n\017ACK_TEST_BATTLE\020\261\t\022\025\n\020REQ_ENTER_B"
  "ATTLE\020\262\t\022\025\n\020ACK_ENTER_BATTLE\020\263\t\022\024\n\017REQ_C"
  "MD_EXECUTE\020\220N\022\033\n\026REQ_GM_GET_PLAYER_DATA\020"
  "\221N\022\033\n\026ACK_GM_GET_PLAYER_DATA\020\222N*M\n\nEScen"
  "eType\022\020\n\014NORMAL_SCENE\020\000\022\026\n\022SINGLE_CLONE_"
  "SCENE\020\001\022\025\n\021MULTI_CLONE_SCENE\020\002B\nZ\010./;KWM"
  "sgb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kwmsgdefine_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kwmsgdefine_2eproto = {
  false, false, 4050, descriptor_table_protodef_kwmsgdefine_2eproto, "kwmsgdefine.proto", 
  &descriptor_table_kwmsgdefine_2eproto_once, nullptr, 0, 0,
  schemas, file_default_instances, TableStruct_kwmsgdefine_2eproto::offsets,
  nullptr, file_level_enum_descriptors_kwmsgdefine_2eproto, file_level_service_descriptors_kwmsgdefine_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_kwmsgdefine_2eproto_getter() {
  return &descriptor_table_kwmsgdefine_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_kwmsgdefine_2eproto(&descriptor_table_kwmsgdefine_2eproto);
namespace KWMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameEventCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgdefine_2eproto);
  return file_level_enum_descriptors_kwmsgdefine_2eproto[0];
}
bool EGameEventCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 10:
    case 11:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 40:
    case 50:
    case 51:
    case 52:
    case 53:
    case 60:
    case 61:
    case 62:
    case 63:
    case 100:
    case 150:
    case 151:
    case 152:
    case 160:
    case 161:
    case 162:
    case 300:
    case 301:
    case 302:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameMsgID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgdefine_2eproto);
  return file_level_enum_descriptors_kwmsgdefine_2eproto[1];
}
bool EGameMsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 200:
    case 201:
    case 202:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 230:
    case 231:
    case 232:
    case 233:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 260:
    case 261:
    case 300:
    case 301:
    case 302:
    case 303:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 340:
    case 400:
    case 401:
    case 410:
    case 411:
    case 412:
    case 413:
    case 420:
    case 421:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
    case 427:
    case 428:
    case 429:
    case 430:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1200:
    case 1201:
    case 1202:
    case 1203:
    case 10000:
    case 10001:
    case 10002:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESceneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgdefine_2eproto);
  return file_level_enum_descriptors_kwmsgdefine_2eproto[2];
}
bool ESceneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KWMsg
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
