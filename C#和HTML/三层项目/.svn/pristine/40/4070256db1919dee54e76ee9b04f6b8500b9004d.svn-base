using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WP.Demo.BLL;
using WP.Demo.Common;
using WP.Demo.Model;

namespace WP.Demo.UI
{
    public delegate void DelInitializeFrmMemberInfoData(object sender, EventArgs e);
    public partial class frmMemberInfo : Form
    {
        private static frmMemberInfo _frmSingle = null; // 存储单例窗体的对象

        private MemberInfoBLL objMemberInfoBLL = new MemberInfoBLL();
        private MemberTypeInfoBLL objMemberTypeInfoBLL = new MemberTypeInfoBLL();

        // 保存在本地的数据表
        private DataTable dtResult = null;
        // 刷新控件的一个委托
        DelInitializeFrmMemberInfoData del;
        /// <summary>
        ///  私有构造函数，构造单例
        /// </summary>
        private frmMemberInfo()
        {
            InitializeComponent();
            this.TopMost = true;
        }
        /// <summary>
        ///  获取单例对象
        /// </summary>
        /// <returns></returns>
        public static frmMemberInfo GetSingleObject()
        {
            try
            {
                if (_frmSingle == null)
                {
                    _frmSingle = new frmMemberInfo();
                }
                return _frmSingle;
            }
            catch (Exception objException)
            {
                if (objException.InnerException != null)
                {
                    throw new Exception(objException.InnerException.Message);
                }
                throw new Exception(objException.Message);
            }
        }
        /// <summary>
        ///  窗体加载
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void frmMemberInfo_Load(object sender, EventArgs e)
        {
            try
            {
                // 初始化表格
                this.InitializeDataGridView();
                // 初始化下拉框
                this.InitializeComboBox();
                this.del = new DelInitializeFrmMemberInfoData(this.frmMemberInfo_Load);
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  初始化下拉框
        /// </summary>
        private void InitializeComboBox()
        {
            try
            {
                DataTable dtResult = objMemberTypeInfoBLL.GetData();
                DataRow drTemp = dtResult.NewRow();
                drTemp["MId"] = string.Empty;
                drTemp["MTitle"] = string.Empty;
                dtResult.Rows.InsertAt(drTemp, 0);
                this.ddlType.DataSource = dtResult;
                this.ddlType.DisplayMember = "MTitle";
                this.ddlType.ValueMember = "MId";
                this.ddlType.SelectedValue = string.Empty;
            }
            catch (Exception objException)
            {
                if (objException.InnerException != null)
                {
                    throw new Exception(objException.InnerException.Message);
                }
                throw new Exception(objException.Message);
            }
        }
        /// <summary>
        ///  初始化表格
        /// </summary>
        private void InitializeDataGridView()
        {
            try
            {
                // 设置DataGridView是否自动生成绑定的数据源所具有的列
                this.dgvList.AutoGenerateColumns = false;
                // 加载数据源
                this.OnDataGridViewDataBusinese();
            }
            catch (Exception objException)
            {
                if (objException.InnerException != null)
                {
                    throw new Exception(objException.InnerException.Message);
                }
                throw new Exception(objException.Message);
            }
        }
        /// <summary>
        ///  获取表格数据
        /// </summary>
        private void OnDataGridViewDataBusinese()
        {
            try
            {
                this.dtResult = this.objMemberInfoBLL.GetData();
                this.dgvList.DataSource = this.dtResult;

                this.txtNameSearch.Text = string.Empty;
                this.txtPhoneSearch.Text = string.Empty;
            }
            catch (Exception objException)
            {
                if (objException.InnerException != null)
                {
                    throw new Exception(objException.InnerException.Message);
                }
                throw new Exception(objException.Message);
            }
        }
        /// <summary>
        ///  显示全部查询
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSearchAll_Click(object sender, EventArgs e)
        {
            try
            {
                this.OnDataGridViewDataBusinese();
            }
            catch (Exception objException) 
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  姓名文本改变进行模糊查询
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtNameSearch_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if(string.IsNullOrEmpty(this.txtPhoneSearch.Text) && string.IsNullOrEmpty(this.txtNameSearch.Text)) // 如果两个文本为空则需要还原原来的信息
                {
                    this.dgvList.DataSource = this.dtResult;
                }
                else
                {
                    DataView dvTemp = new DataView(this.dtResult);
                    dvTemp.RowFilter = "MName like '" + ConvertWP.ToTrimString(this.txtNameSearch.Text) + "%' AND MPhone like '" + ConvertWP.ToTrimString(this.txtPhoneSearch.Text) + "%'";
                    this.dgvList.DataSource = dvTemp.ToTable();
                    dvTemp.Dispose();
                }
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  电话文本改变进行模糊查询
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtPhoneSearch_TextChanged(object sender, EventArgs e)
        {
            try
            {
                try
                {
                    if (string.IsNullOrEmpty(this.txtPhoneSearch.Text) && string.IsNullOrEmpty(this.txtNameSearch.Text)) // 如果两个文本为空则需要还原原来的信息
                    {
                        this.dgvList.DataSource = this.dtResult;
                    }
                    else
                    {
                        DataView dvTemp = new DataView(this.dtResult);
                        dvTemp.RowFilter = "MName like '" + ConvertWP.ToTrimString(this.txtNameSearch.Text) + "%' AND MPhone like '" + ConvertWP.ToTrimString(this.txtPhoneSearch.Text) + "%'";
                        this.dgvList.DataSource = dvTemp.ToTable();
                        dvTemp.Dispose();
                    }
                }
                catch (Exception objException)
                {
                    MessageBox.Show(objException.Message);
                }
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  添加/修改
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSave_Click(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrEmpty(this.txtNameAdd.Text))
                {
                    throw new Exception("请输入用户名");
                }
                if (string.IsNullOrEmpty(this.txtPhoneAdd.Text))
                {
                    throw new Exception("请输入手机号");
                }
                if (string.IsNullOrEmpty(this.txtMoney.Text))
                {
                    throw new Exception("请输入余额");
                }
                if (string.IsNullOrEmpty(ConvertWP.ToTrimString(this.ddlType.SelectedValue)))
                {
                    throw new Exception("请选择会员类型");
                }

                MemberInfoModel model = new MemberInfoModel()
                {
                    MTypeId = Convert.ToInt32(this.ddlType.SelectedValue),
                    MName = ConvertWP.ToTrimString(this.txtNameAdd.Text),
                    MMoney = ConvertWP.ToTrimString(this.txtMoney.Text),
                    MPhone = ConvertWP.ToTrimString(this.txtPhoneAdd.Text)
                };

                if (this.btnSave.Text == "添加")
                {
                    if (!string.IsNullOrEmpty(ConvertWP.ToTrimString(this.objMemberInfoBLL.CheckHaveSamePhone(model).Rows[0]["CharacterResult"])))
                    {
                        MessageBox.Show("已存在当前用户！请检查");
                        return;
                    }

                    if (this.objMemberInfoBLL.AddMemberInfoDetail(model) > 0)
                    {
                        this.OnDataGridViewDataBusinese();
                        // 修正选中的行
                        DataGridViewDefaultExtra.AmendmentSelectedRow(this.dgvList, "dgvtxtmPhone", model.MPhone);

                        MessageBox.Show("添加成功！");
                    }
                    else
                    {
                        MessageBox.Show("添加失败！");
                        return;
                    }
                }
                else if (this.btnSave.Text == "修改")
                {
                    model.MId = Convert.ToInt32(this.txtId.Text.ToString());

                    if (this.objMemberInfoBLL.UpdateMemberInfoDetail(model) > 0)
                    {
                        this.OnDataGridViewDataBusinese();
                        // 修正选中的行
                        DataGridViewDefaultExtra.AmendmentSelectedRow(this.dgvList, "dgvtxtMId", ConvertWP.ToTrimString(model.MId));

                        MessageBox.Show("修改成功！");
                    }
                    else
                    {
                        MessageBox.Show("修改失败！");
                    }
                }
            }
            catch (Exception objException) 
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  取消
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnCancel_Click(object sender, EventArgs e)
        {
            try
            {
                this.txtId.Text = "添加时无编号";
                this.ddlType.SelectedValue = string.Empty;
                this.txtMoney.Text = string.Empty;
                this.txtPhoneAdd.Text = string.Empty;
                this.txtNameAdd.Text = string.Empty;
                this.dgvList.Rows[0].Selected = true;

                this.btnSave.Text = "添加";
            }
            catch (Exception objException) 
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  类型管理
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnAddType_Click(object sender, EventArgs e)
        {
            try
            {
                frmMemberTypeInfo frm = frmMemberTypeInfo.GetSingleObject(this.del);
                frm.Show();
            }
            catch (Exception objException) 
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  双击表格
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgvList_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (this.dgvList.Rows.Count <= 0)
                {
                    return;
                }

                this.btnSave.Text = "修改";

                // 添加数据
                DataGridViewRow dgvr = this.dgvList.CurrentRow;
                this.txtId.Text = Convert.ToString(dgvr.Cells["dgvtxtMId"].Value);
                this.txtNameAdd.Text = Convert.ToString(dgvr.Cells["dgvtxtMName"].Value);
                this.txtMoney.Text = Convert.ToString(dgvr.Cells["dgvtxtMMoney"].Value);
                this.txtPhoneAdd.Text = Convert.ToString(dgvr.Cells["dgvtxtmPhone"].Value);
                this.ddlType.Text = Convert.ToString(dgvr.Cells["dgvtxtMTitle"].Value);
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  删除选中行数据
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnRemove_Click(object sender, EventArgs e)
        {
            try
            {
                if (MessageBox.Show("是否删除选中的明细", "警告", MessageBoxButtons.YesNo).Equals(DialogResult.No))
                {
                    return;
                }

                MemberInfoModel model = new MemberInfoModel()
                {
                    MId = int.Parse(this.dgvList.CurrentRow.Cells["dgvtxtMId"].Value.ToString())
                };

                if (this.objMemberInfoBLL.DeleteMemberInfoDetail(model) <= 0)
                {
                    MessageBox.Show("删除失败，请检查数据的完整性");
                    return;
                }
                // 刷新明细
                OnDataGridViewDataBusinese();

                MessageBox.Show("删除成功!");
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  关闭的时候还原单例对象
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void frmMemberInfo_FormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                _frmSingle = null;
            }
            catch { }
        }

    }
}
