using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading.Tasks;

namespace WP.Demo.Common
{
    public static class SerializableObject
    {
        /// <summary>
        ///  序列化
        /// </summary>
        /// <typeparam name="T">自定义类型</typeparam>
        /// <param name="obj">需要序列化的类的集合</param>
        /// <returns>序列化后的字节数组的集合</returns>
        public static List<byte[]> SerializeObject<T>(List<T> list) 
        {
            try
            {
                List<byte[]> buffListResult = new List<byte[]>();
                using (MemoryStream ms = new MemoryStream())
                {
                    BinaryFormatter bfSerialize = new BinaryFormatter();
                    for (int i = 0; i < list.Count; i++)
                    {
                        bfSerialize.Serialize(ms, list[i]);
                        buffListResult.Add(ms.GetBuffer());
                        ms.Position = 0;
                    }
                }
                return buffListResult;
            }
            catch (Exception objException) 
            {
                if (objException.InnerException != null) 
                {
                    throw new Exception(objException.InnerException.Message);
                }
                throw new Exception(objException.Message);
            }
        }
        /// <summary>
        ///  反序列化
        /// </summary>
        /// <typeparam name="T">自定义类型</typeparam>
        /// <param name="buff">序列化后的字节数组</param>
        /// <returns>反序列化后的类的List集合</returns>
        public static List<T> DeserializeObject<T>(List<byte[]> listSerializeBuff) 
        {
            try
            {
                List<T> listReturn = new List<T>();
                for (int i = 0; i < listSerializeBuff.Count; i++)
                {
                    using (MemoryStream ms = new MemoryStream(listSerializeBuff[i]))
                    {
                        ms.Position = 0;
                        BinaryFormatter bf = new BinaryFormatter();
                        T t = (T)(bf.Deserialize(ms));
                        listReturn.Add(t);
                    }
                }
                return listReturn;
            }
            catch (Exception objException)
            {
                if (objException.InnerException != null)
                {
                    throw new Exception(objException.InnerException.Message);
                }
                throw new Exception(objException.Message);
            }
        }
    }
}
