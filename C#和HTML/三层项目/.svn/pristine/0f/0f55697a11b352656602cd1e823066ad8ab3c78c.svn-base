using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WP.Demo.BLL;
using WP.Demo.Common;
using WP.Demo.Model;

namespace WP.Demo.UI
{
    public partial class frmMemberInfo : Form
    {
        public static frmMemberInfo _frmSingle = null; // 存储单例窗体的对象

        private MemberInfoBLL objMemberInfoBLL = new MemberInfoBLL();

        private DataTable dtResult = null;
        /// <summary>
        ///  私有构造函数，构造单例
        /// </summary>
        public frmMemberInfo()
        {
            InitializeComponent();
        }
        /// <summary>
        ///  获取单例对象
        /// </summary>
        /// <returns></returns>
        public static frmMemberInfo GetSingleObject()
        {
            try
            {
                if (_frmSingle == null)
                {
                    _frmSingle = new frmMemberInfo();
                }
                return _frmSingle;
            }
            catch (Exception objException)
            {
                if (objException.InnerException != null)
                {
                    throw new Exception(objException.InnerException.Message);
                }
                throw new Exception(objException.Message);
            }
        }
        /// <summary>
        ///  窗体加载
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void frmMemberInfo_Load(object sender, EventArgs e)
        {
            try
            {
                this.InitializeDataGridView();
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  初始化表格
        /// </summary>
        private void InitializeDataGridView()
        {
            try
            {
                // 设置DataGridView是否自动生成绑定的数据源所具有的列
                this.dgvList.AutoGenerateColumns = false;
                // 加载数据源
                this.OnDataGridViewDataBusinese();
            }
            catch (Exception objException)
            {
                if (objException.InnerException != null)
                {
                    throw new Exception(objException.InnerException.Message);
                }
                throw new Exception(objException.Message);
            }
        }
        /// <summary>
        ///  获取表格数据
        /// </summary>
        private void OnDataGridViewDataBusinese()
        {
            try
            {
                this.dtResult = this.objMemberInfoBLL.GetData();
                this.dgvList.DataSource = this.dtResult;
            }
            catch (Exception objException)
            {
                if (objException.InnerException != null)
                {
                    throw new Exception(objException.InnerException.Message);
                }
                throw new Exception(objException.Message);
            }
        }
        /// <summary>
        ///  显示全部查询
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSearchAll_Click(object sender, EventArgs e)
        {
            try
            {
                this.OnDataGridViewDataBusinese();
            }
            catch (Exception objException) 
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  姓名文本改变进行模糊查询
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtNameSearch_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if(string.IsNullOrEmpty(this.txtPhoneSearch.Text) && string.IsNullOrEmpty(this.txtNameSearch.Text)) // 如果两个文本为空则需要还原原来的信息
                {
                    this.dgvList.DataSource = this.dtResult;
                }
                else
                {
                    DataView dvTemp = new DataView(this.dtResult);
                    dvTemp.RowFilter = "MName like '" + ConvertWP.ToTrimString(this.txtNameSearch.Text) + "%' AND MPhone like '" + ConvertWP.ToTrimString(this.txtPhoneSearch.Text) + "%'";
                    this.dgvList.DataSource = dvTemp.ToTable();
                    dvTemp.Dispose();
                }
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  电话文本改变进行模糊查询
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtPhoneSearch_TextChanged(object sender, EventArgs e)
        {
            try
            {
                try
                {
                    if (string.IsNullOrEmpty(this.txtPhoneSearch.Text) && string.IsNullOrEmpty(this.txtNameSearch.Text)) // 如果两个文本为空则需要还原原来的信息
                    {
                        this.dgvList.DataSource = this.dtResult;
                    }
                    else
                    {
                        DataView dvTemp = new DataView(this.dtResult);
                        dvTemp.RowFilter = "MName like '" + ConvertWP.ToTrimString(this.txtNameSearch.Text) + "%' AND MPhone like '" + ConvertWP.ToTrimString(this.txtPhoneSearch.Text) + "%'";
                        this.dgvList.DataSource = dvTemp.ToTable();
                        dvTemp.Dispose();
                    }
                }
                catch (Exception objException)
                {
                    MessageBox.Show(objException.Message);
                }
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }

    }
}
