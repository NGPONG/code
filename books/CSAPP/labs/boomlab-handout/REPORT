* PREREQUEST
  1. 需要弄清楚的函数，see: ./doc/personal/objdumd_d_report.s
    1_1. <skip>
    1_2. <read_line>

* phase_1
  * 该题只需要 si 跟着步骤走，看到一个字符串 cmp 的对比，再读取字符串的值即可得到答案: 
  * Border relations with Canada have never been better.

* phase_2
  * 该题较为复杂，前置条件:
    1. 搞清楚 scanf 在栈中所构造的存储空间
    2. 组织了一个循环语义以读取输入的 6 位数，其中，n 作为数字的偏移，要求满足: %(n + 1) = 2 * %(n)
  * 1 2 4 8 16 32

* phase_3
  * 该题其实就是一个 switch 语义的跳转表，要求:
    1. 找准 sscanf 在当前栈帧中所构造的存储空间(see rsp)
    2. 找准跳转表的具体构造，see: x/8xg 0x402470
    3. switch 语义仅有 8 个跳转，要求第一个输入的字符作为跳转的基准，故第一个输入的字符不能够大于 8
  * 7 327

* phase_4
  * 查看 0x40101f ~ 0x401024 可知，本次出入的文本需要两个字符: 
      * %d %d
    其中，字符 1 存储在:
      * 0x8(%rsp)
      * 调用 func4 之前交由 edi 指向
    字符 2 存储在: 
      * 0xc(%rsp)
      * 调用 func4 之前交由 rcx 指向
  * 查看 func4 源码和 0x401015 ~ 0x401044 部分的代码，并没有利用 rcx 间接对 0xc(%rsp) 进行修改，并且也没有通过直接寻址的方式对该空间进行修改，再查看 0x401051 ~ 0x401061 可知，0xc(%rsp) 恒为 0 是函数退出的必要条件，即: 第二个数必须为 0
  * 查看 0x40102e ~ 0x401033 部分的代码可知，第一个输入的数字必须小于 14
  * 开始分析 func4 的代码，该段函数确定了第一个输入数字的具体值，该函数呈递归调用，分析较为困难，该函数的调用形式呈:
      * func($edx, $esi, $edi); ==> func(14, 0, 0x8(%rsp));
  * 7 0

* phase_5
  * 要求输入的字符串长度必须等于 6，see: 0x40107f
  * 查看 0x40108b ~ 0x4010ac，该段是一种循环语义，其循环因子为 6，每次以循环因子为基准呈递增形式读取用户输入的 1byte，并将该数据与 0xf 做逻辑与
    得到的结果再去字符表(0x4024b0)里面检索一字节的数据，并写入栈中(rsp + 0x10)，最后会对比目标字符串(0x40245e)的结果，如果数据相匹配则炸弹解除

* phase_6
  1 代码逆向分析: 
    1.1 see: ./doc/personal/phase_6.c

  2 需要注意 3 中状态
    2.1 list(see: x/12xg 0x6032d0) 在未更改前的状态
      0x6032d0 <node1>:       0x000000010000014c      0x00000000006032e0
      0x6032e0 <node2>:       0x00000002000000a8      0x00000000006032f0
      0x6032f0 <node3>:       0x000000030000039c      0x0000000000603300
      0x603300 <node4>:       0x00000004000002b3      0x0000000000603310
      0x603310 <node5>:       0x00000005000001dd      0x0000000000603320
      0x603320 <node6>:       0x00000006000001bb      0x0000000000000000

    2.2 list(see: x/12xg 0x6032d0) 在更改后的状态
      0x6032d0 <node1>:       0x000000010000014c      0x00000000006032e0 node2
      0x6032e0 <node2>:       0x00000002000000a8      0x0000000000000000 00000
      0x6032f0 <node3>:       0x000000030000039c      0x0000000000603300 node4
      0x603300 <node4>:       0x00000004000002b3      0x0000000000603310 node5
      0x603310 <node5>:       0x00000005000001dd      0x0000000000603320 node6
      0x603320 <node6>:       0x00000006000001bb      0x00000000006032d0 node1

    2.3 nodes(see: x/6xg $rsp + 0x20) 正确的状态
      0x7ffffffedc80: 0x00000000006032f0      0x0000000000603300
      0x7ffffffedc90: 0x0000000000603310      0x0000000000603320
      0x7ffffffedca0: 0x00000000006032d0      0x00000000006032e0

  3 大致分析:
    3.1 解题要求 list 中的每一个节点，其当前的数据域要大于指针域所指向节点的数据域，故我们的任务就是要把 list 拼凑成 [2.2] 的状态
    3.2 list 的状态依赖于 nodes 的状态来完成，而 nodes 的修改则从代码 [0x40116f ~ 0x4011a9] 被体现
    3.3 我们要注意 node1 和 node2 的节点，因为 nodes2 的数据域 [a8] 为最小，依据 [3.1] 解释，故其指针域要指向 null 才符合，但是由
      于修改 list 部分的代码会遍历 nodes 节点，并将当前所遍历到的元素其 next 指向更改为下一个元素的地址，故，如果 node1 和 node2 的
      在 nodes 中的序列非末尾的话，nodes2 则必须要选择一个 node 节点作为 next 指向，但是考虑到破解炸弹的条件要求当前 node 的数据域
      要大于 next 指向的数据域，而现存没有一个 node 的数据域会小于 node2 节点，故会发生错误



* secret_phase
  1. 该题需要分析 <fun7>，该函数接受用户输入的一个不小于 1000 的数字，当函数返回值为 2 时，炸弹拆除
  2. <fun7> 引用了一个二叉树结构进行分析，关于 二叉树的具体结构
    see: (input https://asciiflow.com/legacy/)
                                                                                                           +------+ n1: 0x6030f0
                                                                                                           |0x0024|
                                                                                                     +-----------------+
                                                           +-----------------------------------------+0x603110|0x603130+--------------------------------------------------------------+
                                                           |                                         +-----------------+                                                              |
                                                           v                                                                                                                          v
                                                        +--+---+ n21: 0x6030f0                                                                                                     +--+---+ n22: 0x603130
                                                        |0x0008|                                                                                                                   |0x0032|
                                                  +-----------------+                                                                                                        +-----------------+
                              +-------------------+0x603190|0x603150+------------------------+                                                          +--------------------+0x603170|0x6031b0+----------------------------+
                              |                   +-----------------+                        |                                                          |                    +-----------------+                            |
                              |                                                              |                                                          |                                                                   |
                              v                                                              >                                                          |                                                                   v
                          +---+--+ n31: 0x603190                                         +---+--+ n32: 0x603150                                      +--+---+ n33: 0x603170                                             +---+--+ n34: 0x6031b0
                          |0x0006|                                                       |0x0016|                                                    |0x002d|                                                           |0x006b|
                    +-----------------+                                            +-----------------+                                         +-----------------+                                                +-----------------+
          +---------+0x6031f0|0x603250+---+                              +---------+0x603270|0x603230+---+                           +---------+0x6031d0|0x603290+---+                                  +---------+0x603210|0x6032b0+---+
          |         +-----------------+   |                              |         +-----------------+   |                           |         +-----------------+   |                                  |         +-----------------+   |
          |                               |                              |                               |                           |                               |                                  |                               |
          v                               v                              v                               v                           v                               v                                  v                               v
      +---+--+ n41: 0x6031f0          +---+--+ n42: 0x603250         +---+--+ n43: 0x603270          +---+--+ n44: 0x603230      +---+--+ n45: 0x6031d0          +---+--+ n46: 0x603290             +---+--+ n47: 0x603210          +---+--+ n48: 0x6032b0
      |0x0001|                        |0x0007|                       |0x0014|                        |0x0023|                    |0x0028|                        |0x002f|                           |0x0063|                        |0x03e9|
+-----------------+             +-----------------+            +-----------------+             +-----------------+         +-----------------+             +-----------------+                +-----------------+             +-----------------+
|0x000000|0x000000|             |0x000000|0x000000|            |0x000000|0x000000|             |0x000000|0x000000|         |0x000000|0x000000|             |0x000000|0x000000|                |0x000000|0x000000|             |0x000000|0x000000|
+-----------------+             +-----------------+            +-----------------+             +-----------------+         +-----------------+             +-----------------+                +-----------------+             +-----------------+

  3. <fun7> 的具体代码解释 see: ./personal/secret_phase.c，并且该文件还包含了暴力求解的方式，即直接从 0~1000 循环调用 <fun7>，直到返回值为 2 为止
