double faster_poly(double a[], double x, long degree)
{
	long i;
	double result1 = a[0];
	double result2 = 0;
	double result3 = 0;
	double result4 = 0;
	double result5 = 0;
	double result6 = 0;
	double result7 = 0;
	double result8 = 0;
	double result9 = 0;
	double result10 = 0;

	double xpwr1 = x;
	double xpwr2 = xpwr1 * x;
	double xpwr3 = xpwr2 * x;
	double xpwr4 = xpwr3 * x;
	double xpwr5 = xpwr4 * x;
	double xpwr6 = xpwr5 * x;
	double xpwr7 = xpwr6 * x;
	double xpwr8 = xpwr7 * x;
	double xpwr9 = xpwr8 * x;
	double xpwr10 = xpwr9 * x;
	double x10 = xpwr10;

	for (i = 1; (i+9) <= degree; i += 10)
	{
		result1 += a[i] * xpwr1;
		result2 += a[i+1] * xpwr2;
		result3 += a[i+2] * xpwr3;
		result4 += a[i+3] * xpwr4;
		result5 += a[i+4] * xpwr5;
		result6 += a[i+5] * xpwr6;
		result7 += a[i+6] * xpwr7;
		result8 += a[i+7] * xpwr8;
		result9 += a[i+8] * xpwr9;
		result10 += a[i+9] * xpwr10;

		xpwr1 *= x10;
		xpwr2 *= x10;
		xpwr3 *= x10;
		xpwr4 *= x10;
		xpwr5 *= x10;
		xpwr6 *= x10;
		xpwr7 *= x10;
		xpwr8 *= x10;
		xpwr9 *= x10;
		xpwr10 *= x10;
	}
	for (; i <= degree; ++i)
	{
		result1 += a[i] * xpwr1;
		xpwr1 *= x;
	}
	
	result1 += result2;
	result1 += result3;
	result1 += result4;
	result1 += result5;
	result1 += result6;
	result1 += result7;
	result1 += result8;
	result1 += result9;
	result1 += result10;
	return result1;
}
