void inner4(vec_ptr u,vec_ptr v,data_t *dest) {
  long i;
  long length = vec_length(u);
  long limit = length - 5;
  data_t *udata = get_vec_start(u);
  data_t *vdata = get_vec_start(v);
  data_t sum = (data_t)0;
 
  for(i = 0; i < limit; i = i + 6) {
    sum = sum + udata[i] * vdata[i];
    sum = sum + udata[i + 1] * vdata[i + 1];
    sum = sum + udata[i + 2] * vdata[i + 2];
    sum = sum + udata[i + 3] * vdata[i + 3];
    sum = sum + udata[i + 4] * vdata[i + 4];
    sum = sum + udata[i + 5] * vdata[i + 5];
  }

  for( ; i < length; i++) {
    sum = sum + udata[i] * vdata[i];
  }
 
  *dest = sum;
}


因为加法并没有使用 n * n 的循环展开，故关键路径中，加法任然需要等待上一个加法表达式的结果，故延迟还是只能够达到未使用处理器并行性能时候的 CPE，即 1.0
